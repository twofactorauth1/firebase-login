'use strict';
angular.module("indigenous", [
    'ngAnimate',
    'ngCookies',
    'ngStorage',
    'ngSanitize',
    'ngTouch',
    'ui.router',
    'ngJoyRide',
    'ui.bootstrap',
    'angular.filter',
    'oc.lazyLoad',
    'gavruk.card',
    'cfp.loadingBar',
    'duScroll',
    'pascalprecht.translate',
    'autocomplete',
    'config',
    'angular-parallax',
    'google.places',
    'ng-sortable',
    'http-auth-interceptor'
]);

'use strict';

/**
 * Config constant
 */


app.constant('APP_MEDIAQUERY', {
  'desktopXL': 1200,
  'desktop': 992,
  'tablet': 768,
  'mobile': 480
});

app.constant('hoursConstant', {
  HOURS: ["00:30 am", "1:00 am", "1:30 am", "2:00 am", "2:30 am", "3:00 am", "3:30 am", "4:00 am", "4:30 am", "5:00 am", "5:30 am", "6:00 am", "6:30 am", "7:00 am", "7:30 am", "8:00 am", "8:30 am", "9:00 am", "9:30 am", "10:00 am", "10:30 am", "11:00 am", "11:30 am", "12:00 pm", "12:30 pm", "1:00 pm", "1:30 pm", "2:00 pm", "2:30 pm", "3:00 pm", "3:30 pm", "4:00 pm", "4:30 pm", "5:00 pm", "5:30 pm", "6:00 pm", "6:30 pm", "7:00 pm", "7:30 pm", "8:00 pm", "8:30 pm", "9:00 pm", "9:30 pm", "10:00 pm", "10:30 pm", "11:00 pm", "11:30 pm", "12:00 am"]
});

app.constant('formValidations', {
   'email': /^[-a-z0-9~!$%^&*_=+}{\'?]+(\.[-a-z0-9~!$%^&*_=+}{\'?]+)*@([a-z0-9_][-a-z0-9_]*(\.[-a-z0-9_]+)*\.([a-z]{2,})|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))(:[0-9]{1,5})?$/i,
   'phone': /^\(?(\d{3})\)?[ .-]?(\d{3})[ .-]?(\d{4})$/,
   'zip': /(^\d{5}$)|(^\d{5}-\d{4}$)/,
   'extension': /^[0-9]*$/,
   'contactTags': /^[a-z\d\-_\s]+$/i
  });

/*

  {
    type: "element",
    selector: ".edit-account a",
    heading: "Edit Account tab.",
    text: "Click Edit Account tab to upload your logo and enter your information. Remember to click Save in the upper right hand corner, and then review under the Profile tab.",
    placement: "bottom",
    scroll: false
  }

*/

app.constant('orderConstant', {
  order_status: {
    PENDING_PAYMENT: "pending_payment",
    PROCESSING: "processing",
    ON_HOLD: "on_hold",
    COMPLETED: "completed",
    CANCELLED: "cancelled",
    REFUNDED: "refunded",
    FAILED: "failed",

    dp: [{
        label: "Pending Payment",
        data: "pending_payment"
      }, {
        label: "Processing",
        data: "processing"
      }, {
        label: "On Hold",
        data: "on_hold"
      }, {
        label: "Completed",
        data: "completed"
      }, {
        label: "Refunded",
        data: "refunded"
      }, {
        label: "Failed",
        data: "failed"
      }, {
        label: "Cancelled",
        data: "cancelled"
      }
    ]
  },
  MAX_ORDER_DAYS : 15
});

app.constant('social', {
  types: {
    LOCAL: "lo",
    FACEBOOK: "fb",
    TWITTER: "tw",
    LINKEDIN: "li",
    GOOGLE: "go",
    FULL_CONTACT: "fc",

    dp: [{
        label: "Local",
        data: "lo"
      }, {
        label: "Facebook",
        data: "fb"
      }, {
        label: "Twitter",
        data: "tw"
      }, {
        label: "LinkedIn",
        data: "li"
      }, {
        label: "Google",
        data: "go"
      }
      //{label:"Full Contacnt", data:"fc"}
    ]
  }
});

app.constant('contactConstant', {
  contact_activity_types: {
    PAGE_VIEW: "PAGE_VIEW",
    SUBSCRIBE: "SUBSCRIBE",
    CONTACT_CREATED: "CONTACT_CREATED",
    EMAIL: "EMAIL",
    PHONECALL: "PHONECALL",
    FACEBOOK_LIKE: "FACEBOOK_LIKE",
    TWEET: "TWEET",
    FORM_SUBMISSION: 'FORM_SUBMISSION',
    EMAIL_DELIVERED: 'EMAIL_DELIVERED',
    EMAIL_OPENED: 'EMAIL_OPENED',
    EMAIL_CLICKED: 'EMAIL_CLICKED',
    EMAIL_UNSUB: 'EMAIL_UNSUB',
    SUBSCRIPTION_PAID: 'SUBSCRIPTION_PAID',
    SUBSCRIBE_CANCEL: 'SUBSCRIBE_CANCEL',
    ACCOUNT_CREATED: 'ACCOUNT_CREATED',
    dp: [{
      label: "Account Created",
      data: "ACCOUNT_CREATED"
    },{
      label: "Page View",
      data: "PAGE_VIEW"
    }, {
      label: "Subscribe",
      data: "SUBSCRIBE"
    }, {
      label: "Contact Created",
      data: "CONTACT_CREATED"
    }, {
      label: "Emails",
      data: "EMAIL"
    }, {
      label: "Phone Calls",
      data: "PHONECALL"
    }, {
      label: "Facebook Likes",
      data: "FACEBOOK_LIKE"
    }, {
      label: "Tweets",
      data: "TWEET"
    }, {
      label: "Form Submission",
      data: "FORM_SUBMISSION"
    }, {
      label: "Email Delivered",
      data: "EMAIL_DELIVERED"
    }, {
      label: "Email Opened",
      data: "EMAIL_OPENED"
    }, {
      label: "Email Clicked",
      data: "EMAIL_CLICKED"
    }, {
      label: "Email UnSubscribe",
      data: "EMAIL_UNSUB"
    }, {
      label: "Subscription Paid",
      data: "SUBSCRIPTION_PAID"
    }, {
      label: "Subscribe Cancel",
      data: "SUBSCRIBE_CANCEL"
    }, {
      label: "Other",
      data: "OTHER"
    }]
  },
  contact_tags:{
    dp:[{
      label: "Admin",
      data: "ad"
    }, {
      label: "Affiliate",
      data: "af"
    }, {
        label: 'Anonymous Donor',
        data: 'and'
    }, {
      label: "Cancelled Customer",
      data: "cc"
    }, {
      label: "Cancelled Trial Customer",
      data: "ct"
    }, {
      label: "Cheatsheet Lead",
      data: "cs"
    }, {
      label: "Colleague",
      data: "co"
    }, {
      label: "Customer",
      data: "cu"
    }, {
      label: "Expired Trial Customer",
      data: "ex"
    }, {
      label: "Family",
      data: "fa"
    }, {
      label: "Friend",
      data: "fr"
    }, {
      label: "Lead",
      data: "ld"
    }, {
      label: "Member",
      data: "mb"
    }, {
      label: "Other",
      data: "ot"
    }, {
      label: "Trial Customer",
      data: "tc"
    }]
  }

});

app.constant('postConstant', {
  post_status: {
    PUBLISHED: 'PUBLISHED',
    DRAFT: 'DRAFT',
    FUTURE: 'FUTURE',
    PRIVATE: 'PRIVATE',

    dp: [{
        label: "Published",
        data: "PUBLISHED"
      }, {
        label: "Draft",
        data: "DRAFT"
      }, {
        label: "Future",
        data: "FUTURE"
      }, {
        label: "Private",
        data: "PRIVATE"
      }
    ]
  }
});

app.constant('pageConstant', {
  page_handles: {
    BLOG: 'blog',
    SINGLEPOST: 'single-post',
  },
  inValidPageHandles:{
    'home': 'home',
    'login': 'login',
    'logout': 'logout',
    'admin': 'admin',
    'redirect': 'redirect',
    'template': 'template',
    'demo': 'demo',
    'admin1': 'admin1',
    'interim': 'interim',
    'unsubscribe': 'unsubscribe',
    'forgotpassword': 'forgotpassword',
    'current-user': 'current-user',
    'signup': 'signup',
    'blog-list': 'blog-list',
    'blog-post': 'blog-post'
  }
});

// {
//   name: 'Digital',
//   value: 'digital'
// }, {
//   name: 'Subscription',
//   value: 'subscription'
// }, {
//   name: 'External',
//   value: 'external'
// }, {
//   name: 'Virtual',
//   value: 'virtual'
// }

app.constant('productConstant', {
  product_types: {
    DIGITAL: 'DIGITAL',
    SUBSCRIPTION: 'SUBSCRIPTION',
    EXTERNAL: 'EXTERNAL',
    VIRTUAL: 'VIRTUAL',
    DONATION: 'DONATION',

    dp: [{
        label: "Digital",
        data: "DIGITAL"
      }, {
        label: "Subscription",
        data: "SUBSCRIPTION"
      }, {
        label: "External",
        data: "EXTERNAL"
      }, {
        label: "Virtual",
        data: "VIRTUAL"
    }, {
            label: 'Donation',
            data: 'DONATION'
    }
    ]
  },
  product_status_types:{
    BACKORDER: 'backorder',
    INACTIVE: 'inactive',
    ACTIVE: 'active',
    AUTOINACTIVE: 'auto_inactive',

    dp: [{
        label: "Backorder",
        data: "backorder"
      }, {
        label: "Inactive",
        data: "inactive"
      }, {
        label: "Active",
        data: "active"
      }, {
        label: "Auto Inactive",
        data: "auto_inactive"
      }
    ]
  }
});

app.constant('accountConstant', {
  plan_types: {
    TRIAL: 'NO_PLAN_ARGUMENT',
  },
});

app.constant('userConstant', {

  social_types: {
    LOCAL: "lo",
    FACEBOOK: "fb",
    TWITTER: "tw",
    LINKEDIN: "li",
    GOOGLE: "go",
    FULL_CONTACT: "fc",

    dp: [{
        label: "Local",
        data: "lo"
      }, {
        label: "Facebook",
        data: "fb"
      }, {
        label: "Twitter",
        data: "tw"
      }, {
        label: "LinkedIn",
        data: "li"
      }, {
        label: "Google",
        data: "go"
      }
      //{label:"Full Contacnt", data:"fc"}
    ]
  },

  credential_types: {
    LOCAL: "lo",
    FACEBOOK: "fb",
    TWITTER: "tw",
    LINKEDIN: "li",
    STRIPE: "st",
    GOOGLE: "go",
    FULL_CONTACT: "fc",
  },

  detail_types: {
    LOCAL: "lo",
    FACEBOOK: "fb",
    TWITTER: "tw",
    LINKEDIN: "li",
    GOOGLE: "go",
    FULL_CONTACT: "fc",
  },

  contact_types: {
    CUSTOMER: "cu",
    COLLEAGUE: "co",
    FRIEND: "fr",
    MEMBER: "mb",
    FAMILY: "fa",
    ADMIN: "ad",
    LEAD: 'ld',
    OTHER: "ot",
    NOTAG: "nt",
    CANCELLED_CUSTOMER: "cc",
    CANCELLED_TRIAL: "ct",
    CHEATSHEET_LEAD: "cs",
    EXPIRED_TRIAL: "ex",
    TRIAL_CUSTOMER: "tc",
    AFFILIATE: "af",

    dp: [{
      label: "Admin",
      data: "ad"
    }, {
      label: "Affiliate",
      data: "af"
    }, {
      label: "Cancelled Customer",
      data: "cc"
    }, {
      label: "Cancelled Trial Customer",
      data: "ct"
    }, {
      label: "Cheatsheet Lead",
      data: "cs"
    }, {
      label: "Colleague",
      data: "co"
    }, {
      label: "Customer",
      data: "cu"
    }, {
      label: "Expired Trial Customer",
      data: "ex"
    }, {
      label: "Family",
      data: "fa"
    }, {
      label: "Friend",
      data: "fr"
    }, {
      label: "Lead",
      data: "ld"
    }, {
      label: "Member",
      data: "mb"
    }, {
      label: "Other",
      data: "ot"
    }, {
      label: "Trial Customer",
      data: "tc"
    }, {
      label: "No Tag",
      data: "nt"
    }]
  },

  phone_types: {
    MOBILE: "m",
    HOME: "h",
    WORK: "w",

    dp: [{
      label: "mobile",
      data: "m"
    }, {
      label: "home",
      data: "h"
    }, {
      label: "work",
      data: "w"
    }]
  },

  device_types: {
    scale: "2net_scale",
    HOME: "h",
    WORK: "w",

    dp: [{
      label: "2net_scale",
      data: "2net_scale"
    }, {
      label: "home",
      data: "h"
    }, {
      label: "work",
      data: "w"
    }]
  },

  activity_types: {
    PHONE: "p",
    EMAIL: "e"
  },

  personal_profile: {
    PASSWORD_PLACEHOLDER: "profile_password",
  },
});

/*
app.constant('ENV', {
  name: 'development',
  stripeKey: 'pk_test_EuZhZHVourE3RaRxELJaYEya',
  segmentKey: 'vVXdSwotRr',
  keenWriteKey: '98f22da64681d5b81e2abb7323493526d8d258f0d355e95f742335b4ff1b75af2709baa51d16b60f168158fe7cfd8d1de89d637ddf8a9ca721859b009c4b004d443728df52346307e456f0511b3e82be4a96efaa9f6dcb7f847053e97eee2b796fc3e2d1a57bb1a86fb07d2e00894966',
  keenReadKey: '16348ac352e49c12881e5a32ee37fdd6167ead382071330af9788d9c9e6cae41a8b3fb663bc59bb19e0ec0968bf1c4bdd9f62f29d6545663863932805ff6eac7df34c9202db4f294c0d8cd70d9c9846a99ea00d85f973dfa41e6448e9d05e9ecad9f9ffcb7a7e146dba7de20642e892a',
  keenProjectId: '547edcea46f9a776b6579e2c',
  googleAnalyticsId: 'ga:82461709',
  googleAnalyticsScope: 'ga:pageviews,ga:timeOnPage,ga:exits,ga:avgTimeOnPage,ga:entranceRate,ga:entrances,ga:exitRate,ga:uniquePageviews',
  googleClientId: '277102651227-koaeib7b05jjc355thcq3bqtkbuv1o5r.apps.googleusercontent.com',
  googleClientSecret: 'lg41TWgRgRfZQ22Y9Qd902pH',
  googleServerKey: 'AIzaSyCAkloYlXlZx_---WXevaNHv03ReYpnvLs',
  twonetKey: '36ODKJ1HdJD1y29hk203',
  twonetSecret: 'OMItCcxnrlI0db67HhPKkIM70ZhHZcJe',
  twonetUserGuid: '50f97bb9-a38d-46eb-8e5a-d1716aed1da3',
  twonetTrackGuid: 'b64d7234-2398-021d-2b64-b5999a31aaff'
});
*/

app.constant('JS_REQUIRES', {
  //*** Scripts
  scripts: {
    //*** Javascript Plugins
    'modernizr': ['../js/libs/components-modernizr/modernizr.js'],
    'moment': ['../js/libs/moment/min/moment.min.js'],
    'spin': '../js/libs/spin.js/spin.js',
    'underscore': '../js/libs/underscore/underscore-min.js',

    'stripe': 'https://js.stripe.com/v2/?tmp',

    'google-fonts': 'https://ajax.googleapis.com/ajax/libs/webfont/1.5.18/webfont.js',

    //*** jQuery Plugins
    'perfect-scrollbar-plugin': ['../js/libs/perfect-scrollbar/js/min/perfect-scrollbar.jquery.min.js', '../js/libs/perfect-scrollbar/css/perfect-scrollbar.min.css'],
    'ladda': ['../js/libs/ladda/dist/ladda.min.js', '../js/libs/ladda/dist/ladda-themeless.min.css'],
    'chartjs': '../js/libs/chartjs/Chart.min.js',
    'jquery-sparkline': '../js/libs/jquery.sparkline.build/dist/jquery.sparkline.min.js',
    'jsVideoUrlParser': '../js/libs/js-video-url-parser/dist/jsVideoUrlParser.min.js',
    'jquery-nestable-plugin': ['../js/libs_misc/jquery-nestable/jquery.nestable.js'],
    'touchspin-plugin': ['../js/libs/bootstrap-touchspin/dist/jquery.bootstrap-touchspin.min.js', '../js/libs/bootstrap-touchspin/dist/jquery.bootstrap-touchspin.min.css'],
    // 'bootstrap': '../js/libs/bootstrap/dist/js/bootstrap.min.js',
    "bootstrap-confirmation": ['../js/libs/bootstrap-confirmation/bootstrap-confirmation.js'],
    'uuid': '../js/libs_misc/uuid.js',
    'ckeditor': '../js/libs_misc/ckeditor/ckeditor.js',
    'papaParse': '../js/libs/papaparse/papaparse.min.js',
    'string_score': '../js/libs/string_score/string_score.min.js',

    //*** Controllers
    'dashboardCtrl': 'assets/js/controllers/dashboardCtrl.js',
    'helpTopicsCtrl': 'assets/js/controllers/helpTopicsCtrl.js',
    'newHelpTopicsCtrl': 'assets/js/controllers/newHelpTopicsCtrl.js',
    'pagesCtrl': 'assets/js/controllers/pagesCtrl.js',
    'siteAnalyticsCtrl': 'assets/js/controllers/siteAnalyticsCtrl.js',
    'editorCtrl': 'assets/js/controllers/editorCtrl.js',
    'billingCtrl': 'assets/js/controllers/billingCtrl.js',
    'postsCtrl': 'assets/js/controllers/postsCtrl.js',
    'socialFeedCtrl': 'assets/js/controllers/socialFeedCtrl.js',
    'contactsCtrl': 'assets/js/controllers/contactsCtrl.js',
    'contactDetailCtrl': 'assets/js/controllers/contactDetailCtrl.js',
    'productsCtrl': 'assets/js/controllers/productsCtrl.js',
    'productsDetailCtrl': 'assets/js/controllers/productsDetailCtrl.js',
    'iconsCtrl': 'assets/js/controllers/iconsCtrl.js',
    'vAccordionCtrl': 'assets/js/controllers/vAccordionCtrl.js',
    'ckeditorCtrl': 'assets/js/controllers/ckeditorCtrl.js',
    'laddaCtrl': 'assets/js/controllers/laddaCtrl.js',
    'profileBusinessCtrl': 'assets/js/controllers/profileBusinessCtrl.js',
    'profilePersonalCtrl': 'assets/js/controllers/profilePersonalCtrl.js',
    'templatesCtrl': 'assets/js/controllers/templatesCtrl.js',
    'manageTopicsCtrl': 'assets/js/controllers/manageTopicsCtrl.js',
    'integrationsCtrl': 'assets/js/controllers/integrationsCtrl.js',
    'orderDetailCtrl': 'assets/js/controllers/orderDetailCtrl.js',
    'settingsCtrl': 'assets/js/controllers/settingsCtrl.js',
    'emailsCtrl': 'assets/js/controllers/emailsCtrl.js',
    'campaignsCtrl': 'assets/js/controllers/campaignsCtrl.js',
    'createCampaignCtrl': 'assets/js/controllers/createCampaignCtrl.js',
    'addComponentModalCtrl': 'assets/js/controllers/modals/addComponentModalCtrl.js',
    'componentSettingsModalCtrl': 'assets/js/controllers/modals/componentSettingsModalCtrl.js',
    'ssbComponentSettingsModalCtrl': 'assets/js/controllers/modals/ssbComponentSettingsModalCtrl.js',
    'mediaModalCtrl': 'assets/js/controllers/modals/mediaModalCtrl.js',
    'templateSettingsModalCtrl': 'assets/js/controllers/modals/templateSettingsModalCtrl.js',
    'importContactModalCtrl': 'assets/js/controllers/modals/importContactModalCtrl.js',
    'onboardingCtrl': 'assets/js/controllers/onboardingCtrl.js',
    'DOHYCtrl': 'assets/js/dashboard/dashboard.controller.js',
    // 'DashboardWorkstreamTileComponent': 'assets/js/dashboard/dashboard-workstream-tile/dashboard-workstream-tile.component.js',
    'DashboardWorkstreamTileComponentController': 'assets/js/dashboard/dashboard-workstream-tile/dashboard-workstream-tile.controller.js',
    // 'DashboardAnalyticTileComponent': 'assets/js/dashboard/dashboard-analytic-tile/dashboard-analytic-tile.component.js',
    'DashboardAnalyticTileComponentController': 'assets/js/dashboard/dashboard-analytic-tile/dashboard-analytic-tile.controller.js',

    'asideCtrl': 'assets/js/controllers/asideCtrl.js',
    'toasterCtrl': 'assets/js/controllers/toasterCtrl.js',
    'sweetAlertCtrl': 'assets/js/controllers/sweetAlertCtrl.js',
    'mapsCtrl': 'assets/js/controllers/mapsCtrl.js',
    'ordersCtrl': 'assets/js/controllers/ordersCtrl.js',
    'selectCtrl': 'assets/js/controllers/selectCtrl.js',
    'wizardCtrl': 'assets/js/controllers/wizardCtrl.js',
    'uploadCtrl': 'assets/js/controllers/uploadCtrl.js',
    'treeCtrl': 'assets/js/controllers/treeCtrl.js',
    'inboxCtrl': 'assets/js/controllers/inboxCtrl.js',
    'xeditableCtrl': 'assets/js/controllers/xeditableCtrl.js',
    'chatCtrl': 'assets/js/controllers/chatCtrl.js',

    //*** Services
    'accountService': 'assets/js/services/account.js',
    'productService': 'assets/js/services/product.js',
    'paymentService': 'assets/js/services/product.js',
    'websiteService': 'assets/js/services/webiste.js',
    'userService': 'assets/js/services/user.js',
    'contactService': 'assets/js/services/contact.js',
    'campaignService': 'assets/js/services/campaign.js',
    'toasterService': 'assets/js/services/toaster.js',
    'ImportContactService': 'assets/js/services/import_contacts.js',
    'chartAnalyticsService': 'assets/js/services/chart_analytics.js',
    'chartCommerceService': 'assets/js/services/chart_commerce.js',
    'chartEmailService': 'assets/js/services/chart_email.js',
    'keenService': 'assets/js/services/keen.js',
    'commonService': 'assets/js/services/common.js',
    'socialConfigService': 'assets/js/services/socialconfig.js',
    'orderService': 'assets/js/services/order.js',
    'assetsService': 'assets/js/services/assets.js',
    'geocodeService': 'assets/js/services/geocode.js',
    'dashboardService': 'assets/js/dashboard/dashboard.service.js',
    'simpleSiteBuilderService': 'assets/js/ssb-site-builder/ssb-site-builder.service.js',
    'emailBuilderService': 'assets/js/indi-email-builder/indi-email-builder.service.js',
    'indiLoginModalService': 'assets/js/indi-login-modal/indi-login-modal.service.js',
    //*** Filters
    'htmlToPlaintext': 'assets/js/filters/htmlToPlaintext.js',
    'secTotime': 'assets/js/filters/secTotime.js',
    'formatText': 'assets/js/filters/formatText.js',
    'offset': 'assets/js/filters/offset.js',
    'timeAgoFilter': 'assets/js/filters/timeAgoFilter.js',
    'titleCase': 'assets/js/filters/titleCase.js',
    'orderByArrayLength': 'assets/js/filters/orderByArrayLength.js',
    'toTrusted': 'assets/js/filters/to_trusted.js',
    'generateURLforLinks': 'assets/js/filters/generateURLforLinks.js',
    'selectedTags': 'assets/js/filters/productTags.js',
    'propsFilter': 'assets/js/filters/propsFilter.js',
    'cleanType': 'assets/js/filters/cleanType.js',
    'filterPages': 'assets/js/filters/filterPages.js',
    'sortListPages': 'assets/js/filters/sortListPages.js',
    'productTableFilter': 'assets/js/filters/productTableFilter.js',

    //*** Directives
    'mediaModal': 'assets/js/directives/mediadirective.js'


  },
  //*** angularJS Modules
  modules: [
      {
          name: 'config',
          files: ['assets/js/config.js']
      },
  {
    name: 'angularMoment',
    files: ['../js/libs/angular-moment/angular-moment.min.js']
  }, {
    name: 'angularFilter',
    files: ['../js/libs/angular-filter/dist/angular-filter.min.js']
  }, {
    name: 'toaster',
    files: ['../js/libs/AngularJS-Toaster/toaster.min.js', '../js/libs/AngularJS-Toaster/toaster.min.css']
  }, {
    name: 'skeuocard',
    files: ['../js/libs/skeuocard/lib/js/jquery.card.js']
  }, {
      name: 'angularBootstrapNavTree',
      files: ['../js/libs/angular-bootstrap-nav-tree/dist/abn_tree_directive.js', '../js/libs/angular-bootstrap-nav-tree/dist/abn_tree.css']
    }, {
    name: 'angular-ladda',
    files: ['../js/libs/angular-ladda/dist/angular-ladda.min.js']
  }, {
    name: 'smart-table',
    files: ['../js/libs/angular-smart-table/dist/smart-table.min.js']
  }, {
    name: 'ui.select',
    files: ['../js/libs_misc/angular-ui-select/dist/select.js', '../js/libs_misc/angular-ui-select/dist/select.min.css', '../js/libs/select2/select2.css', '../js/libs/select2-bootstrap-css/select2-bootstrap.min.css', '../js/libs/selectize/dist/css/selectize.bootstrap3.css']
  }, {
    name: 'ui.mask',
    files: ['../js/libs/angular-ui-utils/mask.min.js']
  }, {
    name: 'ngImgCrop',
    files: ['../js/libs/ngImgCrop/compile/minified/ng-img-crop.js', '../js/libs/ngImgCrop/compile/minified/ng-img-crop.css']
  }, {
    name: 'angularFileUpload',
    files: ['../js/libs/angular-file-upload/angular-file-upload.min.js']
  }, {
    name: 'infinite-scroll',
    files: ['../js/libs/ngInfiniteScroll/build/ng-infinite-scroll.min.js']
  }, {
    name: 'ngAside',
    files: ['../js/libs/angular-aside/dist/js/angular-aside.min.js', '../js/libs/angular-aside/dist/css/angular-aside.min.css']
  }, {
    name: 'highcharts',
    files: ['../js/libs/highcharts-release/adapters/standalone-framework.js', '../js/libs/highcharts-release/highcharts.js', '../js/libs/highcharts-ng/dist/highcharts-ng.min.js']
  },{
    name: 'highmaps',
    files: ['../js/libs/highcharts-release/modules/funnel.js', '../js/libs/highmaps-release/modules/map.js', '../js/libs_misc/highmaps/us-all.js']
  },{
    name: 'truncate',
    files: ['../js/libs/angular-truncate/src/truncate.js']
  }, {
    name: 'oitozero.ngSweetAlert',
    files: ['../js/libs/angular-sweetalert-promised/SweetAlert.min.js', '../js/libs_misc/sweetalert/lib/sweet-alert.js', '../js/libs/sweetalert/lib/sweet-alert.css']
  }, {
    name: 'monospaced.elastic',
    files: ['../js/libs/angular-elastic/elastic.js']
  }, {
    name: 'ngMap',
    files: ['../js/libs/ngmap/build/scripts/ng-map.min.js']
  }, {
    name: 'tc.chartjs',
    files: ['../js/libs/tc-angular-chartjs/dist/tc-angular-chartjs.min.js']
  }, {
    name: 'flow',
    files: ['../js/libs/ng-flow/dist/ng-flow-standalone.min.js']
  }, {
    name: 'uiSwitch',
    files: ['../js/libs/angular-ui-switch/angular-ui-switch.min.js', '../js/libs/angular-ui-switch/angular-ui-switch.min.css']
  }, {
    name: 'mwl.calendar',
    files: ['../js/libs/angular-bootstrap-calendar/dist/js/angular-bootstrap-calendar.js', '../js/libs/angular-bootstrap-calendar/dist/js/angular-bootstrap-calendar-tpls.js', '../js/libs/angular-bootstrap-calendar/dist/css/angular-bootstrap-calendar.min.css']
  }, {
    name: 'ng-nestable',
    files: ['../js/libs/ng-nestable/src/angular-nestable.js']
  }, {
    name: 'xeditable',
    files: ['../js/libs/angular-xeditable/dist/js/xeditable.min.js', '../js/libs/angular-xeditable/dist/css/xeditable.css']
  }, {
    name: 'checklist-model',
    files: ['../js/libs/checklist-model/checklist-model.js']
  }, {
    name: 'slugifier',
    files: ['../js/libs/angular-slugify/angular-slugify.js']
  }, {
    name: 'dateRangePicker',
    files: ['../js/libs/angular-daterangepicker/js/angular-daterangepicker.min.js', '../js/libs/bootstrap-daterangepicker/daterangepicker.js', '../js/libs/bootstrap-daterangepicker/daterangepicker-bs3.css']
  }, {
    name: 'angular-slider',
    files: ['../js/libs/angularjs-slider/dist/rzslider.min.js', '../js/libs/angularjs-slider/dist/rzslider.min.css']
  }, {
    name: 'ngCurrency',
    files: ['../js/libs/ng-currency/dist/ng-currency.min.js']
  }, {
    name: 'ngSticky',
    files: ['../js/libs/ngSticky/dist/sticky.min.js']
  }, {
    name: 'ipCookie',
    files: ['../js/libs/angular-cookie/angular-cookie.min.js']
  }, {
    name: 'slick',
    files: ['../js/libs/slick-carousel/slick/slick.min.js', '../js/libs/angular-slick/dist/slick.min.js']
  }, {
    name: 'jqcloud',
    files: ["../js/libs/jqcloud2/dist/jqcloud.min.js", "../js/libs/angular-jqcloud/angular-jqcloud.js", "../js/libs/jqcloud2/dist/jqcloud.min.css"]
  }, {
    name: 'wu.masonry',
    files: ['../js/libs/angular-masonry/angular-masonry.js', '../js/libs/masonry/dist/masonry.pkgd.min.js', '../js/libs/imagesloaded/imagesloaded.pkgd.min.js']
  }, {
    name: 'ngTextTruncate',
    files: ['../js/libs/ng-text-truncate/ng-text-truncate.js']
  }, {
    name: 'ngTagsInput',
    files: ['../js/libs/ng-tags-input/ng-tags-input.min.js', '../js/libs/ng-tags-input/ng-tags-input.min.css', '../js/libs/ng-tags-input/ng-tags-input.bootstrap.min.css']
  }, {
    name: 'angular-percentage-filter',
    files: ["../js/libs/angular-percentage-filter/percentage.js"]
  },  {
    name: 'googlePlaces',
    files: ['../js/libs/angular-google-places-autocomplete/dist/autocomplete.min.css']
  }, {
    name: 'angular-bootstrap-datetimepicker',
    files: ['../js/libs/angular-bootstrap-datetimepicker/src/js/datetimepicker.js', '../js/libs/angular-bootstrap-datetimepicker/src/css/datetimepicker.css']
  }, {
    name: 'angularCircularNavigation',
    files: ['../js/libs_misc/angular-circular-navigation/angular-circular-navigation.js', '../js/libs_misc/angular-circular-navigation/angular-circular-navigation.css']
  }, {
    name: 'bootstrap-icon-picker',
    files: ['../js/libs/bootstrap-icon-picker/bootstrap-iconpicker/css/bootstrap-iconpicker.min.css']
  }, {
    name: 'spectrum',
    files: ['../js/libs/spectrum/spectrum.css','../js/libs/spectrum/spectrum.js','../js/libs/angular-spectrum-colorpicker/dist/angular-spectrum-colorpicker.min.js'],
  }, {
    name: 'angular-resizable',
    files: ['../js/libs/angular-resizable/angular-resizable.min.js', '../js/libs/angular-resizable/angular-resizable.min.css'],
  }, {
    name: 'angular-clipboard',
    files: ['../js/libs/angular-clipboard/angular-clipboard.js'],
  },
  {
    name: 'blueimp',
    files: ['../js/libs/blueimp-gallery/css/blueimp-gallery.min.css','../js/libs/blueimp-gallery/js/jquery.blueimp-gallery.min.js']
  },
  {
    name: 'froala-wysiwyg-editor',
    files: [
      '../js/libs/froala-wysiwyg-editor/css/froala_editor.min.css',
      '../js/libs_misc/froala-wysiwyg-editor/css/froala_editor_overrides.css',
      '../js/libs/froala-wysiwyg-editor/css/froala_style.min.css',
      '../js/libs/froala-wysiwyg-editor/js/froala_editor.min.js'
      ]
  },
  {
    name: 'froala-wysiwyg-editor-plugins',
    files: [
      "../js/libs/froala-wysiwyg-editor/js/plugins/align.min.js",
      "../js/libs_misc/froala-wysiwyg-editor/js/plugins/colors.min.js",
      "../js/libs/froala-wysiwyg-editor/js/plugins/emoticons.min.js",
      "../js/libs/froala-wysiwyg-editor/js/plugins/entities.min.js",
      "../js/libs/froala-wysiwyg-editor/js/plugins/font_family.min.js",
      "../js/libs/froala-wysiwyg-editor/js/plugins/font_size.min.js",
      "../js/libs_misc/froala-wysiwyg-editor/js/plugins/image-manager.js",
      "../js/libs/froala-wysiwyg-editor/js/plugins/inline_style.min.js",
      "../js/libs/froala-wysiwyg-editor/js/plugins/line_breaker.min.js",
      "../js/libs/froala-wysiwyg-editor/js/plugins/link.min.js",
      "../js/libs/froala-wysiwyg-editor/js/plugins/lists.min.js",
      "../js/libs/froala-wysiwyg-editor/js/plugins/paragraph_format.min.js",
      "../js/libs/froala-wysiwyg-editor/js/plugins/paragraph_style.min.js",
      "../js/libs/froala-wysiwyg-editor/js/plugins/quote.min.js",
      "../js/libs/froala-wysiwyg-editor/js/plugins/save.min.js",
      "../js/libs/froala-wysiwyg-editor/js/plugins/table.min.js",
      "../js/libs/froala-wysiwyg-editor/js/plugins/url.min.js",
      "../js/libs/froala-wysiwyg-editor/js/plugins/video.min.js",
      "../js/libs_misc/froala-wysiwyg-editor/css/plugins/colors.css",
      "../js/libs/froala-wysiwyg-editor/css/plugins/emoticons.css",
      "../js/libs/froala-wysiwyg-editor/css/plugins/image.css",
      "../js/libs/froala-wysiwyg-editor/css/plugins/image_manager.css",
      "../js/libs/froala-wysiwyg-editor/css/plugins/line_breaker.css",
      "../js/libs/froala-wysiwyg-editor/css/plugins/table.css",
      "../js/libs/froala-wysiwyg-editor/css/plugins/video.css",
      "../js/libs/froala-wysiwyg-editor/js/plugins/code_view.min.js",
      "../js/libs/froala-wysiwyg-editor/css/plugins/code_view.css",
      "../js/libs/froala-wysiwyg-editor/js/plugins/code_beautifier.min.js"
      ]
  },
  {
    name: 'custom-froala-wysiwyg-editor',
    files: [
      "../js/libs_misc/froala-wysiwyg-editor/js/plugins/media_manager.min.js",
      "../js/libs_misc/froala-wysiwyg-editor/js/plugins/font-awesome.js",
      "../js/libs_misc/froala-wysiwyg-editor/js/plugins/button.js",
      "../js/libs_misc/froala-wysiwyg-editor/js/plugins/font-awesome-icons.js",
      "../js/libs_misc/froala-wysiwyg-editor/css/plugins/font-awesome.css",
      '../js/libs_misc/froala-wysiwyg-editor/config/config.js']
  },
  {
    name: 'videogular',
    files: [
      "../js/libs_misc/videogular/videogular.js",
      '../js/libs/videogular-controls/controls.js',
      '../js/libs/videogular-overlay-play/overlay-play.js',
      '../js/libs/videogular-buffering/buffering.js',
      '../js/libs/videogular-poster/poster.js']
  },
  {
    name: 'indi-login-modal',
    files: [
        'assets/js/indi-login-modal/indi-login-modal.controller.js',
        'assets/js/indi-login-modal/indi-login-modal.service.js'
    ]
  },
  {
    name: 'deep-diff',
    files: [
        '../js/libs/deep-diff/index.js',
    ]
  }]
});

"use strict";

 angular.module('config', [])

.constant('ENV', {name:'development',stripeKey:'pk_test_EuZhZHVourE3RaRxELJaYEya',segmentKey:'vVXdSwotRr',keenWriteKey:'93d5d3131a0f241452dfb6db44dc1784087aadb4b48e11fd26733f6e912927303a303f0278663d48333de5ba3f7afe4d0472f8812f23b6e469e8e923a2c1f86c1f49f4c9a21a7e282e99fe7e47116e988a651632dbdc339cba606f85695c552018838a0cf8a47f7c2f73ae71dde54d08',keenReadKey:'8208aaeddb48179c9d184ae2ab947ebe3f5eb411b1e936688fbc7192a2ea81d44d88e33d2021f6b613c37a06751e0b99ea05fed5b02e683c1d3b10135729be47e7f10bb5385c57b5608cee0c4c776a91a0d8fd37eb420dfae7abe1f21e7385dd862c28c38db75b844bd35fae67fbc4ba',keenProjectId:'54908e6d2fd4b15c4b443aa9',googleAnalyticsId:'ga:82461709',googleAnalyticsScope:'ga:pageviews,ga:timeOnPage,ga:exits,ga:avgTimeOnPage,ga:entranceRate,ga:entrances,ga:exitRate,ga:uniquePageviews',googleClientId:'277102651227-q4rq36pdioba0vomtmssv07ojqie046b.apps.googleusercontent.com',googleClientSecret:'sKl01ZtMha3K4BnBygiSQ82g',googleServerKey:'AIzaSyCAkloYlXlZx_---WXevaNHv03ReYpnvLs',leaddyno:'b2a1f6ba361b15f4ce8ad5c36758de951af61a50',facebookClientID:'622171824473460',paypalCheckoutURL:'https://www.sandbox.paypal.com/webapps/adaptivepayment/flow/pay'})

;
'use strict';

/**
 * Config for the router
 */
app.config(['$stateProvider', '$urlRouterProvider', '$controllerProvider', '$compileProvider', '$filterProvider', '$provide', '$ocLazyLoadProvider', 'JS_REQUIRES',
function ($stateProvider, $urlRouterProvider, $controllerProvider, $compileProvider, $filterProvider, $provide, $ocLazyLoadProvider, jsRequires) {

    app.controller = $controllerProvider.register;
    app.directive = $compileProvider.directive;
    app.filter = $filterProvider.register;
    app.factory = $provide.factory;
    app.service = $provide.service;
    app.constant = $provide.constant;
    app.value = $provide.value;

    // LAZY MODULES

    $ocLazyLoadProvider.config({
        debug: false,
        events: true,
        modules: jsRequires.modules
    });

    // APPLICATION ROUTES
    // -----------------------------------
    // For any unmatched url, redirect to /app/dashboard
    $urlRouterProvider.otherwise("/dashboard");
    //
    //lower casing all urls
    $urlRouterProvider.rule(function ($injector, $location) {
        var path = $location.path(), normalized = path.toLowerCase();
        if (path != normalized) {
            $location.replace().path(normalized);
        }
    });
    // Set up the states
    $stateProvider.state('app', {
        url: "",
        templateUrl: "/admin/assets/views/app.html",
        resolve: loadSequence('modernizr', 'underscore', 'moment', 'angularMoment', 'uiSwitch', 'perfect-scrollbar-plugin', 'toaster', 'ngAside', 'chartjs', 'tc.chartjs', 'oitozero.ngSweetAlert', 'chatCtrl', 'smart-table', 'touchspin-plugin', 'slugifier', 'commonService', 'timeAgoFilter','angularFileUpload', 'ngTextTruncate', 'infinite-scroll', 'ui.select', 'blueimp', 'ngTagsInput', 'titleCase', 'bootstrap-confirmation', 'ladda', 'angular-ladda', 'uuid', 'formatText', 'asideCtrl', 'settingsCtrl', 'assetsService', 'mediaModalCtrl', 'xeditable', 'angular-percentage-filter', 'angular-clipboard', 'google-fonts', 'dashboardService', 'videogular', 'indi-login-modal', 'productTableFilter'),
        abstract: true
    }).state('app.dashboard', {
        url: "/_dashboard",
        templateUrl: "/admin/assets/views/dashboard.html",
        title: 'Dashboard',
        resolve: loadSequence('dashboardCtrl', 'orderService', 'contactService', 'jquery-sparkline', 'chartAnalyticsService', 'userService', 'chartCommerceService' , 'offset')
    }).state('app.website', {
        url: '/website',
        template: '<div ui-view class="fade-in-up"></div>',
        title: 'Website'
    }).state('app.website.ssbSiteBuilder', {
        url: '/site-builder',
        template: '<div ui-view class=""></div>',
        title: 'Simple Site Builder'
    }).state('app.website.ssbSiteBuilder.pages', {
        url: '/pages/',
        template: "<ssb-site-templates></ssb-site-templates>",
        title: 'Choose a site template',
        icon: 'ti-layout-media-left-alt',
        resolve: loadSequence('simpleSiteBuilderService')
    }).state('app.website.ssbSiteBuilder.editor', {
        url: '/pages/:pageId',
        template: '<ssb-site-builder class="ssb-site-builder"></ssb-site-builder>',
        title: 'Simple Site Builder Page Editor',
        resolve: angular.extend({
            init: ['$stateParams', 'SimpleSiteBuilderService', function($stateParams, SimpleSiteBuilderService) {
                return SimpleSiteBuilderService.getPage($stateParams.pageId);
            }]
        }, loadSequence('froala-wysiwyg-editor', 'froala-wysiwyg-editor-plugins', 'custom-froala-wysiwyg-editor', 'editorCtrl', 'userService', 'htmlToPlaintext', 'spectrum', 'angular-slider', 'assetsService', 'toasterService', 'geocodeService', 'productService', 'paymentService', 'accountService', 'toTrusted', 'generateURLforLinks', 'truncate', 'ngSticky', 'slick', 'offset', 'jqcloud', 'jsVideoUrlParser', 'selectedTags', 'addComponentModalCtrl', 'componentSettingsModalCtrl', 'ssbComponentSettingsModalCtrl', 'googlePlaces', 'ngMap', 'angularCircularNavigation', 'campaignService', 'angular-resizable', 'wu.masonry', 'cleanType', 'filterPages', 'deep-diff', 'sortListPages'))
    }).state('app.website.analytics', {
        url: '/site-analytics',
        templateUrl: "/admin/assets/views/site-analytics.html",
        title: 'Site Analytics',
        icon: 'ti-layout-media-left-alt',
        resolve: loadSequence('siteAnalyticsCtrl', 'highcharts', 'highmaps', 'secTotime', 'dateRangePicker', 'keenService', 'chartAnalyticsService')
    }).state('app.website.pages', {
        url: '/pages',
        templateUrl: "/admin/assets/views/pages.html",
        title: 'Pages',
        icon: 'ti-layout-media-left-alt',
        resolve: loadSequence('pagesCtrl', 'userService')
    }).state('app.website.templates', {
        url: '/templates',
        templateUrl: "/admin/assets/views/templates.html",
        title: 'Templates',
        icon: 'ti-layout-media-left-alt',
        resolve: loadSequence('templatesCtrl', 'userService')
    }).state('app.website.posts', {
        url: '/posts',
        templateUrl: "/admin/assets/views/posts.html",
        title: 'Posts',
        icon: 'ti-layout-media-left-alt',
        resolve: loadSequence('postsCtrl', 'userService', 'htmlToPlaintext')
    }).state('app.website.singlepage', {
        url: '/pages/:id',
        templateUrl: "/admin/assets/views/editor.html",
        title: 'Page Single',
        icon: 'ti-layout-media-left-alt',
        resolve: loadSequence('editorCtrl', 'userService', 'htmlToPlaintext', 'spectrum', 'angular-slider', 'assetsService', 'toasterService', 'geocodeService', 'productService', 'paymentService', 'accountService', 'toTrusted', 'generateURLforLinks', 'truncate', 'ckeditor', 'ngSticky', 'slick', 'offset', 'jqcloud', 'jsVideoUrlParser', 'selectedTags', 'addComponentModalCtrl', 'componentSettingsModalCtrl', 'googlePlaces', 'ngMap', 'angularCircularNavigation', 'campaignService', 'angular-resizable', 'wu.masonry')
    }).state('app.website.singlepost', {
        url: '/posts/:id',
        templateUrl: "/admin/assets/views/editor.html",
        title: 'Post Single',
        icon: 'ti-layout-media-left-alt',
        resolve: loadSequence('editorCtrl', 'userService', 'htmlToPlaintext', 'spectrum', 'angular-slider', 'assetsService', 'toasterService', 'geocodeService', 'productService', 'paymentService', 'accountService', 'toTrusted', 'generateURLforLinks', 'truncate', 'ckeditor', 'ngSticky', 'slick', 'offset', 'jqcloud', 'jsVideoUrlParser', 'selectedTags', 'addComponentModalCtrl', 'componentSettingsModalCtrl', 'googlePlaces','ngMap', 'angularCircularNavigation', 'campaignService', 'angular-resizable', 'wu.masonry')
    }).state('app.website.singletemplate', {
        url: '/templates/:id',
        templateUrl: "/admin/assets/views/editor.html",
        title: 'Template Single',
        icon: 'ti-layout-media-left-alt',
        resolve: loadSequence('editorCtrl', 'userService', 'htmlToPlaintext', 'spectrum',  'angular-slider', 'assetsService', 'toasterService', 'geocodeService', 'productService', 'paymentService', 'accountService', 'toTrusted', 'generateURLforLinks', 'truncate', 'ckeditor', 'ngSticky', 'slick', 'offset', 'jqcloud', 'jsVideoUrlParser', 'selectedTags', 'addComponentModalCtrl', 'componentSettingsModalCtrl', 'templateSettingsModalCtrl', 'googlePlaces', 'ngMap', 'angularCircularNavigation', 'campaignService', 'angular-resizable', 'wu.masonry')
    }).state('app.editor', {
        url: '/editor',
        templateUrl: "/admin/assets/views/editor.html",
        title: 'Editor',
        icon: 'ti-layout-media-left-alt',
        resolve: loadSequence('editorCtrl', 'userService', 'htmlToPlaintext', 'spectrum', 'angular-slider', 'assetsService', 'toasterService', 'geocodeService', 'productService', 'accountService', 'toTrusted', 'generateURLforLinks', 'truncate', 'ckeditor', 'ngSticky', 'slick', 'offset', 'jqcloud', 'jsVideoUrlParser', 'selectedTags', 'addComponentModalCtrl', 'componentSettingsModalCtrl', 'templateSettingsModalCtrl', 'angularCircularNavigation', 'campaignService', 'angular-resizable', 'wu.masonry')
    }).state('app.contacts', {
        url: '/contacts',
        templateUrl: "/admin/assets/views/contacts.html",
        title: 'Contacts',
        icon: 'ti-layout-media-left-alt',
        resolve: loadSequence('contactsCtrl', 'ImportContactService', "socialConfigService", 'contactService', 'papaParse', 'string_score', 'importContactModalCtrl')
    }).state('app.singleContact', {
        url: '/contacts/:contactId',
        templateUrl: "/admin/assets/views/contact-detail.html",
        title: 'Single Contact',
        icon: 'ti-layout-media-left-alt',
        resolve: loadSequence('contactDetailCtrl', 'contactService', 'ngMap', 'keenService', 'offset','assetsService', 'toasterService', 'orderService')
    }).state('app.commerce', {
        url: '/commerce',
        template: '<div ui-view class="fade-in-up"></div>',
        title: 'Commerce'
    }).state('app.commerce.products', {
        url: '/products',
        templateUrl: "/admin/assets/views/products.html",
        title: 'Products',
        icon: 'ti-layout-media-left-alt',
        resolve: loadSequence('productsCtrl', 'productService', 'accountService', 'ipCookie')
    }).state('app.commerce.productsingle', {
        url: '/products/:productId',
        templateUrl: "/admin/assets/views/product-detail.html",
        title: 'Products',
        icon: 'ti-layout-media-left-alt',
        resolve: loadSequence('productsDetailCtrl', 'productService', 'dateRangePicker', 'ngCurrency', 'bootstrap-icon-picker', 'campaignService', 'editorCtrl', 'ckeditor', 'addComponentModalCtrl', 'componentSettingsModalCtrl', 'toTrusted', 'propsFilter', 'angularCircularNavigation', 'string_score', 'htmlToPlaintext', 'spectrum')
    }).state('app.commerce.orders', {
        url: '/orders',
        templateUrl: "/admin/assets/views/orders.html",
        title: 'Orders',
        icon: 'ti-layout-media-left-alt',
        resolve: loadSequence('ordersCtrl', 'orderService', 'contactService', 'dateRangePicker')
    }).state('app.commerce.orderdetail', {
        url: '/orders/:orderId',
        templateUrl: "/admin/assets/views/order-detail.html",
        title: 'Order Detail',
        icon: 'ti-layout-media-left-alt',
        resolve: loadSequence('orderDetailCtrl', 'orderService', 'contactService', 'userService')
    }).state('app.marketing', {
        url: '/marketing',
        template: '<div ui-view class="fade-in-up"></div>',
        title: 'Marketing',
    }).state('app.marketing.socialfeed', {
        url: '/social-feed',
        templateUrl: "/admin/assets/views/social-feed.html",
        title: 'Social Feed',
        icon: 'ti-layout-media-left-alt',
        resolve: loadSequence('socialFeedCtrl', 'socialConfigService', 'wu.masonry','orderByArrayLength')
    }).state('app.emails', {
        url: '/emails',
        templateUrl: "/admin/assets/views/emails.html",
        title: 'Emails',
        icon: 'ti-layout-media-left-alt',
        resolve: loadSequence('emailsCtrl', 'chartEmailService')
    }).state('app.emailEditor', {
        url: '/emails/editor/:id',
        template: "<indi-email-builder></indi-email-builder>",
        title: 'Email Editor',
        icon: 'ti-layout-media-left-alt',
        resolve: loadSequence('froala-wysiwyg-editor', 'froala-wysiwyg-editor-plugins', 'custom-froala-wysiwyg-editor', 'spectrum')
    }).state('app.emailCampaign', {
        url: '/emails/campaigns/:id',
        template: "<indi-email-campaign></indi-email-campaign>",
        title: 'Email Campaign',
        icon: 'ti-layout-media-left-alt',
        resolve: loadSequence('froala-wysiwyg-editor', 'froala-wysiwyg-editor-plugins', 'custom-froala-wysiwyg-editor')
    }).state('app.marketing.campaigns', {
        url: '/campaigns',
        templateUrl: "/admin/assets/views/campaigns.html",
        title: 'Campaigns',
        icon: 'ti-layout-media-left-alt',
        resolve: loadSequence('campaignsCtrl', 'campaignService')
    }).state('app.marketing.createcampaign', {
        url: '/campaigns/create-campaign',
        templateUrl: "/admin/assets/views/create-campaign.html",
        title: 'Create Campaign',
        icon: 'ti-layout-media-left-alt',
        resolve: loadSequence('createCampaignCtrl', 'campaignService', 'editorCtrl', 'userService', 'htmlToPlaintext', 'spectrum', 'angular-slider', 'assetsService', 'toasterService', 'geocodeService', 'productService', 'paymentService', 'accountService', 'toTrusted', 'generateURLforLinks', 'truncate', 'ckeditor', 'ngSticky', 'slick', 'offset', 'jqcloud', 'jsVideoUrlParser', 'selectedTags', 'addComponentModalCtrl', 'componentSettingsModalCtrl', 'googlePlaces', 'ngMap', 'angularCircularNavigation', 'string_score', 'angular-bootstrap-datetimepicker', 'propsFilter')
    }).state('app.campaignDetail', {
        url: '/marketing/campaigns/:campaignId',
        templateUrl: "/admin/assets/views/create-campaign.html",
        title: 'Campaign Detail',
        icon: 'ti-layout-media-left-alt',
        resolve: loadSequence('createCampaignCtrl', 'campaignService', 'editorCtrl', 'userService', 'htmlToPlaintext', 'spectrum', 'angular-slider', 'assetsService', 'toasterService', 'geocodeService', 'productService', 'paymentService', 'accountService', 'toTrusted', 'generateURLforLinks', 'truncate', 'ckeditor', 'ngSticky', 'slick', 'offset', 'jqcloud', 'jsVideoUrlParser', 'selectedTags', 'addComponentModalCtrl', 'componentSettingsModalCtrl', 'googlePlaces', 'ngMap', 'angularCircularNavigation', 'string_score', 'angular-bootstrap-datetimepicker', 'propsFilter')
    }).state('app.account', {
        url: '/account',
        template: '<div ui-view class="fade-in-up"></div>',
        title: 'Account',
    }).state('app.account.profilebusiness', {
        url: '/profile-business',
        templateUrl: "/admin/assets/views/profile-business.html",
        title: 'Profile Business',
        icon: 'ti-layout-media-left-alt',
        resolve: loadSequence('profileBusinessCtrl', 'toasterService', 'assetsService')
    }).state('app.account.profilepersonal', {
        url: '/profile-personal',
        templateUrl: "/admin/assets/views/profile-personal.html",
        title: 'Profile Personal',
        icon: 'ti-layout-media-left-alt',
        resolve: loadSequence('profilePersonalCtrl', 'toasterService', 'assetsService', 'offset')
    }).state('app.account.billing', {
        url: '/billing',
        templateUrl: "/admin/assets/views/billing.html",
        title: 'Billing',
        icon: 'ti-layout-media-left-alt',
        resolve: loadSequence('billingCtrl', 'productService', 'stripe', 'paymentService', 'userService', 'toasterService', 'ipCookie', 'skeuocard')
    }).state('app.account.integrations', {
        url: '/integrations',
        templateUrl: "/admin/assets/views/integrations.html",
        title: 'Integrations',
        icon: 'ti-layout-media-left-alt',
        resolve: loadSequence('integrationsCtrl', 'socialConfigService', 'ipCookie', 'accountService')
    }).state('app.support', {
        url: '/support',
        template: '<div ui-view class="fade-in-up"></div>',
        title: 'Support'
    }).state('app.support.helptopics', {
        url: '/help-topics',
        templateUrl: "/admin/assets/views/help-topics.html",
        title: 'Help Topics',
        icon: 'ti-layout-media-left-alt',
        resolve: loadSequence('helpTopicsCtrl', 'toTrusted', 'ckeditor', 'jsVideoUrlParser')
    }).state('app.support.oldhelptopics', {
        url: '/old-help-topics',
        templateUrl: "/admin/assets/views/old-help-topics.html",
        title: 'Old Help Topics',
        icon: 'ti-layout-media-left-alt',
        resolve: loadSequence('oldHelpTopicsCtrl')
    }).state('app.support.managetopics', {
        url: '/manage-topics',
        templateUrl: "/admin/assets/views/manage-topics.html",
        title: 'Manage Topics',
        icon: 'ti-layout-media-left-alt',
        resolve: loadSequence('manageTopicsCtrl', 'userService')
    }).state('app.support.singletopic', {
        url: '/manage-topics/:id',
        templateUrl: "/admin/assets/views/editor.html",
        title: 'Topic Single',
        icon: 'ti-layout-media-left-alt',
        resolve: loadSequence('editorCtrl', 'userService', 'htmlToPlaintext', 'spectrum', 'angular-slider', 'assetsService', 'toasterService', 'geocodeService', 'productService', 'paymentService', 'accountService', 'toTrusted', 'generateURLforLinks', 'truncate', 'ckeditor', 'ngSticky', 'slick', 'offset', 'jqcloud', 'jsVideoUrlParser', 'selectedTags', 'addComponentModalCtrl', 'componentSettingsModalCtrl', 'templateSettingsModalCtrl', 'googlePlaces', 'ngMap', 'campaignService', 'angularCircularNavigation')
    }).state('app.onboarding', {
        url: '/onboarding',
        templateUrl: "/admin/assets/views/onboarding.html",
        title: 'Onboarding',
        icon: 'ti-layout-media-left-alt',
        resolve: loadSequence('onboardingCtrl')
    }).state('app.dohy', {
        url: '/dashboard',
        templateUrl: "/admin/assets/js/dashboard/dohy.html",
        title: 'Dashboard',
        icon: 'ti-layout-media-left-alt',
        resolve: loadSequence('DOHYCtrl', 'dashboardService', 'DashboardWorkstreamTileComponentController', 'DashboardAnalyticTileComponentController', 'jsVideoUrlParser', 'highcharts')
    })

    // Login routes
    // .state('logout', {
    //     url: '/logout',
    //     template: '<div ui-view class="fade-in-right-big smooth"></div>',
    //     abstract: true
    // })
    .state('login', {
        url: '/login',
        template: '<div ui-view class="fade-in-right-big smooth"></div>',
        abstract: true
    }).state('login.signin', {
        url: '/signin',
        templateUrl: "/admin/assets/views/login_login.html"
    }).state('login.forgot', {
        url: '/forgot',
        templateUrl: "/admin/assets/views/login_forgot.html"
    }).state('login.registration', {
        url: '/registration',
        templateUrl: "/admin/assets/views/login_registration.html"
    }).state('login.lockscreen', {
        url: '/lock',
        templateUrl: "/admin/assets/views/login_lock_screen.html"
    });

    // Generates a resolve object previously configured in constant.JS_REQUIRES (config.constant.js)
    function loadSequence() {
        var _args = arguments;
        return {
            deps: ['$ocLazyLoad', '$q',
            function ($ocLazyLoad, $q) {
                var promise = $q.when(1);
                for (var i = 0, len = _args.length; i < len; i++) {
                    promise = promiseThen(_args[i]);
                }
                return promise;

                function promiseThen(_arg) {
                    if (typeof _arg == 'function')
                        return promise.then(_arg);
                    else
                        return promise.then(function () {
                            var nowLoad = requiredData(_arg);
                            if (!nowLoad)
                                return $.error('Route resolve: Bad resource name [' + _arg + ']');
                            return $ocLazyLoad.load(nowLoad);
                        });
                }

                function requiredData(name) {
                    if (jsRequires.modules)
                        for (var m in jsRequires.modules)
                            if (jsRequires.modules[m].name && jsRequires.modules[m].name === name)
                                return jsRequires.modules[m];
                    return jsRequires.scripts && jsRequires.scripts[name];
                }
            }]
        };
    }
}]);

'use strict';
/**
 * controller for editor
 */
(function (angular) {
  app.controller('EditorCtrl', ["$scope", "$rootScope", "$interval", "toaster", "$modal", "$filter", "$location", "WebsiteService", "SweetAlert", "hoursConstant", "GeocodeService", "ProductService", "AccountService", "postConstant", function ($scope, $rootScope, $interval, toaster, $modal, $filter, $location, WebsiteService, SweetAlert, hoursConstant, GeocodeService, ProductService, AccountService, postConstant) {

    var that;
    var user, account, components, currentPageContents, previousComponentOrder, allPages, originalCurrentPageComponents = that = this;

    /*
     * @globalvariables
     * -
     */
    $scope.post_statuses = postConstant.post_status.dp;
    var iFrame = document.getElementById("iframe-website");
    var subdomainCharLimit = 4;
    $scope.primaryFontStack = '';
    $scope.secondaryFontStack = '';
    $scope.iframeData = {};
    $scope.allPages = [];
    $scope.filterdPages = [];
    $scope.backup = {};
    $scope.components = [];
    $scope.isEditing = true;
    $scope.isMobile = false;
    $scope.tabs = {};
    $scope.addLink = false;

    $scope.saveLoading = false;
    $scope.hours = hoursConstant;
    $scope.typefilter = 'all';
    $scope.timeInterval = 1200000;
    $scope.redirect = false;
    $scope.single_post = false;
    $scope.contactHoursInvalid = false;
    var stopInterval;
    $scope.newPage = {};
    $scope.newPost = {};

    $scope.slugifyHandle = function (title) {
      if (title) {
        $scope.newPage.handle = $filter('slugify')(title);
      }
    };
    $scope.$watch('currentPage.handle', function (newValue, oldValue) {
      if (newValue) {
        $scope.currentPage.handle = $filter('slugify')(newValue);
      }
    });
    $scope.breadcrumbTitle = $location.$$search['pagehandle'] || $location.$$search['posthandle'];

    /*
     * @location:pagehandle
     * - get the pagehandle and replace iframe src
     */

    if ($location.$$search['pagehandle']) {
      document.getElementById("iframe-website").setAttribute("src", '/page/' + $location.$$search['pagehandle'] + '?editor=true');
    }

    if ($location.$$search['email']) {
      document.getElementById("iframe-website").setAttribute("src", '/' + $location.$$search['email'] + '?editor=true');
    }

    /*
     * @location:templatehandle
     * - get the templatehandle, replace iframe src and set templateActive to true
     */

    if ($location.$$search['templatehandle']) {
      $scope.templateActive = true;
      document.getElementById("iframe-website").setAttribute("src", '/page/' + $location.$$search['templatehandle'] + '?editor=true');
      WebsiteService.getTemplates(function (templates) {
        $scope.template = _.find(templates, function (tmpl) {
          return tmpl.handle == $location.$$search['templatehandle'];
        });
      });
    }

    /*
     * @getWebsite
     * - get website obj, settings, and website variables
     */

    WebsiteService.getWebsite(function (website) {

      $scope.website = website;
      $scope.website.settings = $scope.website.settings || {};

      $scope.primaryColor = $scope.website.settings.primary_color;
      $scope.secondaryColor = $scope.website.settings.secondary_color;
      $scope.primaryHighlight = $scope.website.settings.primary_highlight;
      $scope.primaryTextColor = $scope.website.settings.primary_text_color;
      $scope.primaryFontFamily = $scope.website.settings.font_family;
      $scope.secondaryFontFamily = $scope.website.settings.font_family_2;
      $scope.googleFontFamily = $scope.website.settings.google_font_family;

      $scope.primaryFontStack = $scope.website.settings.font_family;
      $scope.secondaryFontStack = $scope.website.settings.font_family_2;
    });

    /*
     * @location:posthandle
     * - get the posthandle and replace iframe src
     */

    if ($location.$$search['posthandle']) {
      console.log('post handle >>>', $location.$$search['posthandle']);
      $scope.single_post = true;
      document.getElementById("iframe-website").setAttribute("src", '/page/blog/' + $location.$$search['posthandle'] + '?editor=true');
    }

    /*
     * @getUrl
     * get the url for the view page/post button
     */

    AccountService.getAccount(function (account) {
      $scope.account = account;
    });

    $scope.getUrl = function (handle, is_post) {
      if (is_post)
        handle = "blog/" + handle;
      if (handle != 'index') {
        var _url = 'http://' + window.location.host + '/' + handle;
      } else {
        var _url = 'http://' + window.location.host + '/';
      }
      if ($scope.account.domain) {
        _url = $scope.account.domain + '/' + handle;
      }

      window.open(_url, '_blank');
    };

    /*
     * @closeModal
     * -
     */

    $scope.closeModal = function () {
      $scope.modalInstance.close();
      if ($scope.componentEditing && $scope.componentEditing.type === 'contact-us' && $scope.contactHoursInvalid) {
        $scope.componentEditing.hours = $scope.originalComponent.hours;
        $scope.updateContactUsAddress();
      }
      $scope.contactHoursInvalid = false;
    };

    /*
     * @openModal
     * -
     */

    $scope.openModal = function (modal) {
      $scope.modalInstance = $modal.open({
        templateUrl: modal,
        scope: $scope
      });
      $scope.modalInstance.result.then(function () {}, function () {
        console.log('call 2 ', $scope.spectrum);
        angular.element('.sp-container').addClass('sp-hidden');
      });
    };

    /*
     * @openSettingsModal
     * -
     */

    $scope.openSettingsModal = function () {
      if ($scope.single_post)
        $scope.openModal("post-settings-modal")
      else
        $scope.openModal("page-settings-modal")
    };

    /*
     * @openDuplicateModal
     * -
     */

    $scope.openDuplicateModal = function () {
      if ($scope.single_post)
        $scope.openModal("post-duplicate-modal")
      else
        $scope.openModal("page-duplicate-modal")
    };

    /*
     * @window height
     */

    $scope.calculateWindowHeight = function () {
      var scrollTop = $(document).scrollTop();
      return scrollTop;
    }

    /*
     * @set top of editor and maintoolbar
     */

    $scope.setToolbarsTop = function () {
      var editorToolbar = angular.element("#iframe-website").contents().find("#editor-toolbar");
      var mainToolbar = angular.element("#page-actions");
      var scrollTop = $(document).scrollTop();
      var navbarCollapse = angular.element('header').outerHeight();
      var pageActions = angular.element('#page-actions').outerHeight();
      var offsetHeight = angular.element('#page-title').outerHeight();
      var doc_width = $(document).width();
      if (scrollTop > offsetHeight) {

        editorToolbar.css({
          'top': scrollTop - 30
        });
        if (doc_width <= 1183) {
          editorToolbar.css({
            'top': scrollTop + 25
          });
        }
        if (doc_width <= 974) {
          scrollTop = scrollTop + 65;


        }
        if (doc_width < 760) {
          editorToolbar.css({
            'top': scrollTop - 25
          });
        }

        mainToolbar.css({
          'top': scrollTop,
          'position': 'absolute',
          'width': '100%',
          'margin-left': '0px'
        });
      } else {
        editorToolbar.css({
          'top': 0
        });
        mainToolbar.css({
          'top': 0,
          'position': 'relative'
        });
      }
      var postSettingsModal = angular.element("#iframe-website").contents().find("#component-setting-modal");
      //var scrollTop = $(document).scrollTop();
      //var editorToolbar = angular.element("#iframe-website").contents().find("#editor-toolbar");
      //var toolBarTop = editorToolbar.offset().top;
      if (postSettingsModal.length)
        postSettingsModal.css({
          'top': editorToolbar.offset().top + editorToolbar.height()
        });
    }

    /*
     * @window:scroll
     * - when the window is scrolled in the admin, ud
     */

    angular.element(window).scroll(function () {
      $scope.setToolbarsTop();
    });




    /*
     * @components.sort
     * -
     */

    $scope.components.sort(function (a, b) {
      return a.i > b.i;
    });

    /*
     * @status
     * -
     */

    $scope.status = {
      isopen: false
    };

    /*
     * @spectrum
     * - variables for the spectrum color picker in the settings modal
     */

    $scope.spectrum = {
      options: {
        showPalette: true,
        clickoutFiresChange: true,
        showInput: true,
        showButtons: false,
        allowEmpty: true,
        hideAfterPaletteSelect: false,
        showPaletteOnly: true,
        togglePaletteOnly: true,
        togglePaletteMoreText: 'more',
        togglePaletteLessText: 'less',
        appendTo: angular.element("#component-setting-modal"),
        palette: [
          ["#C91F37", "#DC3023", "#9D2933", "#CF000F", "#E68364", "#F22613", "#CF3A24", "#C3272B", "#8F1D21", "#D24D57"],
          ["#f47998", "#F47983", "#DB5A6B", "#C93756", "#FCC9B9", "#FFB3A7", "#F62459", "#F58F84", "#875F9A", "#5D3F6A"],
          ["#89729E", "#763568", "#8D608C", "#A87CA0", "#5B3256", "#BF55EC", "#8E44AD", "#9B59B6", "#BE90D4", "#4D8FAC"],
          ["#5D8CAE", "#22A7F0", "#19B5FE", "#59ABE3", "#48929B", "#317589", "#89C4F4", "#4B77BE", "#1F4788", "#003171"],
          ["#044F67", "#264348", "#7A942E", "#8DB255", "#5B8930", "#6B9362", "#407A52", "#006442", "#87D37C", "#26A65B"],
          ["#26C281", "#049372", "#2ABB9B", "#16A085", "#36D7B7", "#03A678", "#4DAF7C", "#D9B611", "#F3C13A", "#F7CA18"],
          ["#E2B13C", "#A17917", "#F5D76E", "#F4D03F", "#FFA400", "#E08A1E", "#FFB61E", "#FAA945", "#FFA631", "#FFB94E"],
          ["#E29C45", "#F9690E", "#CA6924", "#F5AB35", "#BFBFBF", "#F2F1EF", "#BDC3C7", "#ECF0F1", "#D2D7D3", "#757D75"],
          ["#EEEEEE", "#ABB7B7", "#6C7A89", "#95A5A6"]
        ]
      }
    };

    /*
     * @componentTypes
     * - an array of component types and icons for the add component modal
     */

    $scope.componentTypes = [{
      title: 'Blog',
      type: 'blog',
      preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/blog.png',
      filter: 'blog',
      description: 'Use this component for your main blog pages which displays all your posts with a sidebar of categories, tags, recent posts, and posts by author.',
      enabled: true
    }, {
      title: 'Blog Teaser',
      type: 'blog-teaser',
      preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/blog-teaser.png',
      filter: 'blog',
      description: 'The Blog Teaser is perfect to showcase a few of your posts with a link to you full blog page.',
      enabled: true
    }, {
      title: 'Masthead',
      type: 'masthead',
      preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/masthead.jpg',
      filter: 'misc',
      description: 'Introduce your business with this component on the top of your home page.',
      enabled: true
    }, {
      title: 'Feature List',
      type: 'feature-list',
      preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/feature-list.jpg',
      filter: 'features',
      description: 'Showcase what your business offers with a feature list.',
      enabled: true
    }, {
      title: 'Contact Us',
      type: 'contact-us',
      preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/contact-us.jpg',
      filter: 'contact',
      description: 'Let your visitors where your located, how to contact you, and what your business hours are.',
      enabled: true
    }, {
      title: 'Coming Soon',
      type: 'coming-soon',
      preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/coming-soon.jpg',
      filter: 'misc',
      description: 'Even if your site isn\'t ready you can use this component to let your visitors know you will be availiable soon.',
      enabled: true
    }, {
      title: 'Feature block',
      type: 'feature-block',
      preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/feature-block.jpg',
      filter: 'features',
      description: 'Use this component to show one important feature or maybe a quote.',
      enabled: true
    }, {
      title: 'Image Gallery',
      type: 'image-gallery',
      preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/gallery.jpg',
      filter: 'images',
      description: 'Display your images in this image gallery component with fullscreen large view.',
      enabled: true
    }, {
      title: 'Image Text',
      version: 1,
      type: 'image-text',
      preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/image-text.jpg',
      filter: 'images',
      description: 'Show an image next to a block of text on the right or the left.',
      enabled: true
    }, {
      title: 'Meet Team',
      type: 'meet-team',
      icon: 'fa fa-users',
      preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/meet-team.png',
      filter: 'team',
      description: 'Let your visitors know about the team behind your business. Show profile image, position, bio, and social links for each member.',
      enabled: true
    }, {
      title: 'Navigation 1',
      type: 'navigation',
      preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/navbar-v1.jpg',
      filter: 'navigation',
      description: 'A simple navigation bar with the logo on the left and nav links on the right. Perfect for horizontal logos.',
      version: 1,
      enabled: true
    }, {
      title: 'Navigation 2',
      type: 'navigation',
      preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/nav-v2-preview.png',
      filter: 'navigation',
      description: 'If your logo is horizontal or square, this navigation will showcase your logo perfectly with addtional space for more links.',
      version: 2,
      enabled: true
    }, {
      title: 'Navigation 3',
      type: 'navigation',
      preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/nav-v3-preview.png',
      filter: 'navigation',
      description: 'This navigation features a large block navigation links for a modern feel.',
      version: 3,
      enabled: true
    }, {
      title: 'Products',
      type: 'products',
      icon: 'fa fa-money',
      preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/products.png',
      filter: 'products',
      description: 'Use this as the main products page to start selling. It comes together with a cart and checkout built in.',
      enabled: true
    }, {
      title: 'Pricing Tables',
      type: 'pricing-tables',
      preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/pricing-tables.png',
      filter: 'products',
      description: 'Subscription product types with multiple options are best when shown in a pricing table to help the visitor decide which one is best for them.',
      enabled: true
    }, {
      title: 'Simple form',
      type: 'simple-form',
      preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/simple-form.jpg',
      filter: 'forms',
      description: 'Automatically create contacts in the backend when a visitor submits this form. Add first name, last name, email, or phone number fields.',
      enabled: true
    }, {
      title: 'Single Post',
      type: 'single-post',
      icon: 'custom single-post',
      preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/45274f46-0a21-11e5-83dc-0aee4119203c.png',
      filter: 'blog',
      description: 'Used for single post design. This is a mandatory page used to show single posts. This will apply to all posts.',
      enabled: false
    }, {
      title: 'Social',
      type: 'social-link',
      preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/social-links.jpg',
      filter: 'social',
      description: 'Let your visitors know where else to find you on your social networks. Choose from 18 different networks.',
      enabled: true
    }, {
      title: 'Video',
      type: 'video',
      icon: 'fa fa-video',
      preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/video.png',
      filter: 'video',
      description: 'Showcase a video from Youtube, Vimeo, or an uploaded one. You can simply add the url your video is currently located.',
      enabled: true
    }, {
      title: 'Text Block',
      type: 'text-only',
      preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/text-block.jpg',
      filter: 'text',
      description: 'A full width component for a large volume of text. You can also add images within the text.',
      enabled: true
    }, {
      title: 'Thumbnail Slider',
      type: 'thumbnail-slider',
      preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/thumbnail.png',
      filter: 'images',
      description: 'Perfect for sponsor or client logos you have worked with in the past. Works best with logos that have a transparent background. ',
      enabled: true
    }, {
      title: 'Top Bar',
      type: 'top-bar',
      icon: 'fa fa-info',
      preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/top-bar.png',
      filter: 'contact',
      description: 'Show your social networks, phone number, business hours, or email right on top that provides visitors important info quickly.',
      enabled: true
    }, {
      title: 'Testimonials',
      type: 'testimonials',
      icon: 'fa fa-info',
      preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/45263570-0a21-11e5-87dd-b37fd2717aeb.png',
      filter: 'text',
      description: 'A component to showcase your testimonials.',
      enabled: true
    }];

    /*
     * @componentLabel, enabledComponentTypes
     * -
     */

    var componentLabel,
      enabledComponentTypes = _.where($scope.componentTypes, {
        enabled: true
      });

    /************************************************************************************************************
     * Takes the componentTypes object and gets the value for the filter property from any that are enabled.
     * It then makes that list unique, sorts the results alphabetically, and and removes the misc value if
     * it exists. (The misc value is added back on to the end of the list later)
     ************************************************************************************************************/
    $scope.componentFilters = _.without(_.uniq(_.pluck(_.sortBy(enabledComponentTypes, 'filter'), 'filter')), 'misc');

    // Iterates through the array of filters and replaces each one with an object containing an
    // upper and lowercase version
    _.each($scope.componentFilters, function (element, index) {
      componentLabel = element.charAt(0).toUpperCase() + element.substring(1).toLowerCase();
      $scope.componentFilters[index] = {
        'capitalized': componentLabel,
        'lowercase': element
      };
      componentLabel = null;
    });

    // Manually add the All option to the begining of the list
    $scope.componentFilters.unshift({
      'capitalized': 'All',
      'lowercase': 'all'
    });

    // Manually add the Misc section back on to the end of the list
    $scope.componentFilters.push({
      'capitalized': 'Misc',
      'lowercase': 'misc'
    });

    $scope.setFilterType = function (label) {
      $scope.typefilter = label;
    };

    /*
     * @iframe.onload
     * -
     */

    $scope.activated = false;
    $scope.afteriframeLoaded = function (page) {
      $scope.iframeLoaded = true;
      $scope.childScope = document.getElementById("iframe-website").contentWindow.angular.element("#childScope").scope();
      $scope.editPage();
      $scope.currentPage = page;
      $scope.updatePage($scope.currentPage.handle);
      if ($scope.childScope.getAllBlogs)
        $scope.originalBlogPosts = angular.copy($scope.childScope.getAllBlogs());
      $scope.resizeIframe();
    };

    /*
     * @removeImage
     * -
     */

    $scope.removeImage = function (remove) {
      if ($scope.componentEditing && $scope.componentEditing.bg && $scope.componentEditing.bg.img) {
        if (($scope.componentEditing.bg.img.show == false && remove == true) || remove == false) {
          if (remove == false)
            $scope.componentEditing.bg.img.url = null;
          $scope.componentEditing.bg.img.blur = false;
          $scope.componentEditing.bg.img.parallax = false;
          $scope.componentEditing.bg.img.overlay = false;
          $scope.saveComponent();
        }

      }
    };

    /*
     * @bindEvents
     * -
     */

    $scope.bindEvents = function () {
      var iframe = document.getElementById("iframe-website");
      if (!iframe)
        return;
      var iframeDoc = iframe.contentDocument || iframe.contentWindow.document;

      //wait for iframe to load completely
      //TODO: get trigger instead of timeout
      var elementBindingFn = function () {
        //unhide no-component
        if (iframeDoc.body.querySelectorAll('.no-component')[0]) {
          iframeDoc.body.querySelectorAll('.no-component')[0].style.display = "block";
          iframeDoc.body.querySelectorAll('.no-component')[0].style.visibility = "visible";
        }
        //unbind all click handler
        angular.element("#iframe-website").contents().find('body').off("click", ".componentActions .duplicate");

        //Disable all links in edit
        angular.element("#iframe-website").contents().find('body').on("click", ".component a", function (e) {
          if (!angular.element(this).hasClass("clickable-link")) {
            e.preventDefault();
            e.stopPropagation();
          }
        });

        //remove click handler before binding click
        angular.element("#iframe-website").contents().find('body').off("click", ".componentActions .settings, .map-wrap .settings");
        //add click events for all the settings buttons
        angular.element("#iframe-website").contents().find('body').on("click", ".componentActions .settings, .map-wrap .settings", function (e) {
          if (e.currentTarget.attributes['tab-active'] && e.currentTarget.attributes['tab-active'].value === "address")
            $scope.tabs.address = true;
          $scope.editComponent(e.currentTarget.attributes['data-id'].value);
          if ($(e.currentTarget).hasClass("single-post-settings")) {
            //$("#iframe-website").contents().find('#component-setting-modal').modal('show');
            var postSettingsModal = angular.element("#iframe-website").contents().find("#component-setting-modal");
            var scrollTop = $(document).scrollTop();
            var editorToolbar = angular.element("#iframe-website").contents().find("#editor-toolbar");

            postSettingsModal.css({
              'top': editorToolbar.offset().top + editorToolbar.height()
            });
            postSettingsModal.modal('show');
          }
          //iFrame.co .openModal('single-post-settings-modal');
          else {
            $scope.openModal('component-settings-modal');
          }
        });

        //add click events for all the copy component buttons
        angular.element("#iframe-website").contents().find('body').on("click", ".componentActions .duplicate", function (e) {
          $scope.editComponentIndex = e.currentTarget.attributes['data-index'].value;
          $scope.editComponent(e.currentTarget.attributes['data-id'].value);
          $scope.saveComponent();
          var matchingComponent = _.findWhere($scope.currentPage.components, {
            _id: e.currentTarget.attributes['data-id'].value
          });


          var newComponent = angular.copy(matchingComponent);
          var temp = Math.uuid();
          newComponent._id = temp;
          newComponent.anchor = temp;
          var indexToadd = $scope.editComponentIndex ? $scope.editComponentIndex : 1
          $scope.currentPage.components.splice(indexToadd, 0, newComponent);
          $scope.components = $scope.currentPage.components;
          $scope.updateIframeComponents();
          if (newComponent.type === 'contact-us')
            $scope.childScope.updateContactComponent($scope.currentPage.components);
          //TODO: get updateIframeComponents callback
          setTimeout(function () {
            $scope.activateCKEditor();
          }, 1000)
          toaster.pop('success', "Component Added", "The " + newComponent.type + " component was added successfully.");

        });
        //remove click handler before binding click
        angular.element("#iframe-website").contents().find('body').off("click", ".add-component");
        //add click events for all the add component buttons.
        angular.element("#iframe-website").contents().find('body').on("click", ".add-component", function (e) {
          $scope.editComponentIndex = e.currentTarget.attributes['data-index'].value;
          $scope.openModal('add-component-modal');
        });
        angular.element("#iframe-website").contents().find('body').off("click", ".delete-component");
        //add click events for all the delete component buttons.
        angular.element("#iframe-website").contents().find('body').on("click", ".delete-component", function (e) {
          SweetAlert.swal({
              title: "Are you sure?",
              text: "Do you want to delete this component?",
              type: "warning",
              showCancelButton: true,
              confirmButtonColor: "#DD6B55",
              confirmButtonText: "Yes, delete it!",
              cancelButtonText: "No, do not delete it!",
              closeOnConfirm: true,
              closeOnCancel: true
            },
            function (isConfirm) {
              if (isConfirm) {
                setTimeout(function () {
                  $scope.deleteComponent(e.currentTarget.attributes['data-id'].value);
                }, 200)
              };
            });
        });
        angular.element("#iframe-website").contents().find('body').off("click", ".goback");
        //add click events for all the delete component buttons.
        angular.element("#iframe-website").contents().find('body').on("click", ".goback", function (e) {
          SweetAlert.swal("Info!", "This link is disabled in the editor, this would go back on the frontend.", "warning");
        });
        // angular.element("#iframe-website").contents().find('body').on("DOMNodeInserted", ".editable", function(e) {
        //     if (!$scope.activated) {
        //       $scope.activated = true;
        //       setTimeout(function() {
        //         $scope.childScope.activateCKEditor();
        //       }, 1000)
        //     }
        // });
        angular.element("#iframe-website").contents().find('body').off("click", ".btn-social-link");
        // Social components
        angular.element("#iframe-website").contents().find('body').on("click", ".btn-social-link", function (e) {
          $scope.componentEditing = _.findWhere($scope.components, {
            _id: angular.element(e.currentTarget).closest('.component').data('id')
          });
          var network = [];
          var editIndex = e.currentTarget.attributes["data-index"] ? e.currentTarget.attributes["data-index"].value : null;
          var parent_index = e.currentTarget.attributes["parent-data-index"] ? e.currentTarget.attributes["parent-data-index"].value : null;
          var nested = parent_index ? true : false;
          if (nested)
            network = editIndex ? $scope.componentEditing.teamMembers[parent_index].networks[editIndex] : null;
          else
            network = editIndex ? $scope.componentEditing.networks[editIndex] : null;

          var update = editIndex ? true : false;
          $scope.openModal('social-links-modal');
          // angular.element("#socialComponentModal").modal('show');

          $scope.setSelectedSocialLink(network, $scope.componentEditing._id, update, nested, parent_index);

        });

        // remove click handler
        angular.element("#iframe-website").contents().find('body').off("click", ".image-gallery, .image-thumbnail, .meet-team-image");
        //add media modal click events to all images in image gallery

        angular.element("#iframe-website").contents().find('body').on("click", ".image-gallery, .image-thumbnail, .meet-team-image", function (e) {
          e.preventDefault();
          e.stopPropagation();
          angular.element("#media-manager-modal").modal('show');
          $scope.showInsert = true;
          $scope.imageChange = true;
          $scope.componentArrTarget = e.currentTarget;
          $scope.componentImageIndex = e.currentTarget.attributes["data-index"].value;
          if (e.currentTarget.attributes["parent-index"] && e.currentTarget.attributes["number-per-page"]) {
            $scope.componentImageIndex = (parseInt(e.currentTarget.attributes["parent-index"].value) * parseInt(e.currentTarget.attributes["number-per-page"].value)) + parseInt(e.currentTarget.attributes["data-index"].value);
          }
          $scope.componentEditing = _.findWhere($scope.components, {
            _id: angular.element(e.currentTarget).closest('.component').data('id')
          });
        });
      };

      if (iframeDoc.getElementById('body')) {
        elementBindingFn();
      }
    };

    /*
     * @resizeIframe
     * -
     */

    var w = angular.element(window);

    w.bind('resize', function () {
      $scope.resizeIframe();
      $scope.setToolbarsTop();
    });

    $scope.resizeIframe = function (scrollToComponentId) {
      var iframe = document.getElementById("iframe-website");
      if (iframe) {
        //var iframeDoc = iframe.contentDocument || iframe.contentWindow.document;
        //var offsetHeight = angular.element('#page-title').height() + angular.element('#page-actions').height();
        setTimeout(function () {
          $scope.$apply(function () {
            var editorToolbar = angular.element("#iframe-website").contents().find("#editor-toolbar");
            var incrementHeight = 0;

            if (editorToolbar)
              incrementHeight = incrementHeight + editorToolbar.height();
            $scope.iframeHeight = ($("#iframe-website").contents().find("body").height() + 70 + incrementHeight) + "px";
            if(scrollToComponentId) {
              var scrollToComponentElement = angular.element("#iframe-website").contents().find("#"+scrollToComponentId);
              if(scrollToComponentElement && scrollToComponentElement.offset().top)
              {
                var top = scrollToComponentElement.offset().top;
                setTimeout(function () {
                  angular.element(window).scrollTop(top-20);
                },100);
              }
            }
          });
        }, 100);
      }
    };

    /*
     * @saveSocialLink
     * -
     */

    $scope.saveSocialLink = function (social, id, mode) {
      angular.element("#social-link-name .error").html("");
      angular.element("#social-link-name").removeClass('has-error');
      angular.element("#social-link-url .error").html("");
      angular.element("#social-link-url").removeClass('has-error');
      var old_value = _.findWhere($scope.networks, {
        name: $scope.social.selectedLink
      });
      var selectedName;
      switch (mode) {
        case "add":
          if (social && social.name) {
            if (!social.url || social.url == "") {
              angular.element("#social-link-url .error").html("Link url can not be blank.");
              angular.element("#social-link-url").addClass('has-error');
              return;
            }

            if (social.url) {
              var urlRegex = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
              if (urlRegex.test(social.url) == false) {
                angular.element("#social-link-url .error").html("Link url incorrect format");
                angular.element("#social-link-url").addClass('has-error');
                return;
              }
            }
            selectedName = _.findWhere($scope.networks, {
              name: social.name
            });
            if (selectedName) {
              angular.element("#social-link-name .error").html("Link icon already exists");
              angular.element("#social-link-name").addClass('has-error');
              return;
            }
            var selectedUrl = _.findWhere($scope.networks, {
              url: social.url
            });
            if (selectedUrl) {
              angular.element("#social-link-url .error").html("Link url already exists");
              angular.element("#social-link-url").addClass('has-error');
              return;
            }
          } else {
            angular.element("#social-link-url .error").html("Please enter link url.");
            angular.element("#social-link-url").addClass('has-error');
            angular.element("#social-link-name .error").html("Please select link icon.");
            angular.element("#social-link-name").addClass('has-error');
            return;
          }
          angular.element("#social-link-name .error").html("");
          angular.element("#social-link-name").removeClass('has-error');
          angular.element("#social-link-url .error").html("");
          angular.element("#social-link-url").removeClass('has-error');
          break;
        case "update":
          if (social && social.name && social.url) {
            var networks = angular.copy($scope.networks);

            selectedName = _.findWhere(networks, {
              name: old_value.name
            });
            selectedName.name = social.name;
            selectedName.url = social.url;
            selectedName.icon = social.icon;


            var existingName = _.where(networks, {
              name: social.name
            });
            var existingUrl = _.where(networks, {
              url: social.url
            });
            if (existingName.length > 1) {
              angular.element("#social-link-name .error").html("Link icon already exists");
              angular.element("#social-link-name").addClass('has-error');
              return;
            } else if (existingUrl.length > 1) {
              angular.element("#social-link-url .error").html("Link url already exists");
              angular.element("#social-link-url").addClass('has-error');
              return;
            }
          }
          break;
      }
      if ($scope.meetTeamIndex !== null)
        $scope.updateTeamNetworks(old_value, mode, social, $scope.meetTeamIndex);
      else
        $scope.updateSocialNetworks(old_value, mode, social);
      $scope.social = {};
      $scope.meetTeamIndex = null;
      $scope.closeModal();
    };

    /*
     * @setSelectedLink
     * -
     */

    $scope.setSelectedLink = function (social_link) {
      $scope.social.name = social_link.name;
      $scope.social.icon = social_link.icon;
      $scope.social.url = social_link.url;
    };

    /*
     * @setSelectedSocialLink
     * -
     */

    $scope.setSelectedSocialLink = function (link, id, update, nested, index) {
      if (!$scope.social)
        $scope.social = {};
      if (nested)
        $scope.meetTeamIndex = index;
      else
        $scope.meetTeamIndex = null;
      if (update) {
        $scope.social.selectedLink = link.name;
        $scope.social.name = link.name;
        $scope.social.icon = link.icon;
        $scope.social.url = link.url;
      } else {
        $scope.social = {};
      }
      angular.element("#social-link-name .error").html("");
      angular.element("#social-link-name").removeClass('has-error');
      angular.element("#social-link-url .error").html("");
      angular.element("#social-link-url").removeClass('has-error');
      $scope.$apply(function () {
        $scope.networks = $scope.getSocialNetworks(nested, index);
      });
    };

    /*
     * @social_links
     * -
     */

    $scope.social_links = [{
      name: "adn",
      icon: "adn",
      tooltip: "Adn",
      url: "http://www.adn.com"
    }, {
      name: "bitbucket",
      icon: "bitbucket",
      tooltip: "BitBucket",
      url: "https://bitbucket.org"
    }, {
      name: "dropbox",
      icon: "dropbox",
      tooltip: "Dropbox",
      url: "https://www.dropbox.com"
    }, {
      name: "facebook",
      icon: "facebook",
      tooltip: "Facebook",
      url: "https://www.facebook.com"
    }, {
      name: "flickr",
      icon: "flickr",
      tooltip: "Flickr",
      url: "https://www.flickr.com"
    }, {
      name: "foursquare",
      icon: "foursquare",
      tooltip: "Four Square",
      url: "https://foursquare.com"
    }, {
      name: "github",
      icon: "github",
      tooltip: "Github",
      url: "https://github.com"
    }, {
      name: "google-plus",
      icon: "google-plus",
      tooltip: "Google Plus",
      url: "https://www.gmail.com"
    }, {
      name: "instagram",
      icon: "instagram",
      tooltip: "Instagram",
      url: "https://instagram.com"
    }, {
      name: "linkedin",
      icon: "linkedin",
      tooltip: "Linkedin",
      url: "https://www.linkedin.com"
    }, {
      name: "microsoft",
      icon: "windows",
      tooltip: "Microsoft",
      url: "http://www.microsoft.com"
    }, {
      name: "openid",
      icon: "openid",
      tooltip: "Open Id",
      url: "http://openid.com"
    }, {
      name: "pinterest",
      icon: "pinterest",
      tooltip: "Pinterest",
      url: "https://www.pinterest.com"
    }, {
      name: "reddit",
      icon: "reddit",
      tooltip: "Reddit",
      url: "http://www.reddit.com"
    }, {
      name: "comment-o",
      icon: "comment-o",
      tooltip: "Snapchat",
      url: "https://www.snapchat.com"
    }, {
      name: "soundcloud",
      icon: "soundcloud",
      tooltip: "Sound Cloud",
      url: "https://soundcloud.com"
    }, {
      name: "tumblr",
      icon: "tumblr",
      tooltip: "Tumblr",
      url: "https://www.tumblr.com"
    }, {
      name: "twitter",
      icon: "twitter",
      tooltip: "Twitter",
      url: "https://twitter.com"
    }, {
      name: "vimeo",
      icon: "vimeo-square",
      tooltip: "Vimeo",
      url: "https://vimeo.com"
    }, {
      name: "vine",
      icon: "vine",
      tooltip: "Vine",
      url: "http://www.vinemarket.com"
    }, {
      name: "vk",
      icon: "vk",
      tooltip: "Vk",
      url: "http://vk.com"
    }, {
      name: "desktop",
      icon: "desktop",
      tooltip: "Website",
      url: "http://www.website.com"
    }, {
      name: "yahoo",
      icon: "yahoo",
      tooltip: "Yahoo",
      url: "https://yahoo.com"
    }, {
      name: "youtube",
      icon: "youtube",
      tooltip: "Youtube",
      url: "https://www.youtube.com"
    }, {
      name: "yelp",
      icon: "yelp",
      tooltip: "Yelp",
      url: "http://www.yelp.com"
    }];

    /*
     * @toggleDropdown
     * -
     */

    $scope.toggleDropdown = function ($event) {
      $event.preventDefault();
      $event.stopPropagation();
      $scope.status.isopen = !$scope.status.isopen;
    };


    /*
     * @checkForDuplicatePage
     * - Check for duplicate page
     */

    $scope.checkForDuplicatePage = function () {
      WebsiteService.getSinglePage($scope.currentPage.websiteId, $scope.currentPage.handle, function (data) {
        if (data && data._id) {
          if (data._id !== $scope.currentPage._id) {
            $scope.duplicateUrl = true;
            toaster.pop('error', "Page URL " + $scope.currentPage.handle, "Already exists");
          } else {
            $scope.duplicateUrl = false;
          }
        }
      })
    }

    /*
     * @editPage
     * -
     */

    $scope.editPage = function () {
      $scope.isEditing = true;
      $scope.childScope.triggerEditMode();

      setTimeout(function () {
        $scope.bindEvents();
      }, 1000)
      $scope.backup['website'] = angular.copy($scope['website']);
    };

    /*
     * @cancelPage
     * -
     */

    $scope.cancelPage = function () {
      $scope.checkForSaveBeforeLeave();
    };

    /*
     * @validateEditPage
     * -
     */

    $scope.editPageValidated = false;

    $scope.validateEditPage = function (page) {

      if (page.handle == '') {
        $scope.handleError = true;
        angular.element('#edit-page-url').parents('div.form-group').addClass('has-error');
      } else {
        $scope.handleError = false;
        angular.element('#edit-page-url').parents('div.form-group').removeClass('has-error');
      }
      if (page.title == '') {
        $scope.titleError = true;
        angular.element('#edit-page-title').parents('div.form-group').addClass('has-error');
      } else {
        $scope.titleError = false;
        angular.element('#edit-page-title').parents('div.form-group').removeClass('has-error');
      }
      if (page && page.title && page.title != '' && page.handle && page.handle != '') {
        $scope.editPageValidated = true;
      } else
        $scope.editPageValidated = false;
    };


    /*
     * @validateNewPage
     * -
     */

    $scope.newPageValidated = false;

    $scope.validateNewPage = function (page) {
      if (!page.handle || page.handle == '') {
        angular.element('#new-page-url').parents('div.form-group').addClass('has-error');
      } else {
        angular.element('#new-page-url').parents('div.form-group').removeClass('has-error');
      }
      if (!page.title || page.title == '') {
        angular.element('#new-page-title').parents('div.form-group').addClass('has-error');
      } else {
        angular.element('#new-page-title').parents('div.form-group').removeClass('has-error');
      }
      if (page && page.title && page.title != '' && page.handle && page.handle != '') {
        $scope.newPageValidated = true;
      } else
        $scope.newPageValidated = false;
    };


    /*
     * @validateEditPost
     * -
     */

    $scope.editPostValidated = false;

    $scope.validateEditPost = function (post, update) {
      if (post.post_url == '') {
        $scope.handleError = true;
        angular.element('#edit-post-url').parents('div.form-group').addClass('has-error');
      } else {
        $scope.handleError = false;
        angular.element('#edit-post-url').parents('div.form-group').removeClass('has-error');
      }
      if (post.post_title == '') {
        $scope.titleError = true;
        angular.element('#edit-post-title').parents('div.form-group').addClass('has-error');
      } else {
        $scope.titleError = false;
        angular.element('#edit-post-title').parents('div.form-group').removeClass('has-error');
      }
      if (post && post.post_title && post.post_title != '' && post.post_url && post.post_url != '') {
        $scope.editPostValidated = true;
      } else
        $scope.editPostValidated = false;
      if (update)
        $scope.updateBlogPost(post);
    };

    /*
     * @validateNewPost
     * -
     */

    $scope.newPostValidated = false;

    $scope.validateNewPost = function (post) {
      if (!post.post_url || post.post_url == '') {
        $scope.handleError = true;
        angular.element('#new-post-url').parents('div.form-group').addClass('has-error');
      } else {
        $scope.handleError = false;
        angular.element('#new-post-url').parents('div.form-group').removeClass('has-error');
      }
      if (!post.post_title || post.post_title == '') {
        $scope.titleError = true;
        angular.element('#new-post-title').parents('div.form-group').addClass('has-error');
      } else {
        $scope.titleError = false;
        angular.element('#new-post-title').parents('div.form-group').removeClass('has-error');
      }
      if (post && post.post_title && post.post_title != '' && post.post_url && post.post_url != '') {
        $scope.newPostValidated = true;
      } else
        $scope.newPostValidated = false;
    };


    /*
     * @savePage
     * -
     */

    $scope.savePage = function (autoSave) {
      $scope.saveLoading = true;
      $scope.isDirty = false;
      var msg = "Post Saved";
      if (autoSave)
        msg = "Auto Saved";

      $scope.childScope.checkOrSetPageDirty(true);

      if ($location.$$search['posthandle']) {
        $scope.single_post = true;
        $scope.validateEditPost($scope.post_data);

        if (!$scope.editPostValidated) {
          $scope.saveLoading = false;
          toaster.pop('error', "Post Title or URL can not be blank.");
          return false;
        }
        $scope.childScope.savePostMode(toaster, msg);
        $scope.isEditing = true;

      } else {
        $scope.validateEditPage($scope.currentPage);

        if (!$scope.editPageValidated) {
          $scope.saveLoading = false;
          toaster.pop('error', "Page Title or URL can not be blank.");
          return false;
        }

        var iFrame = document.getElementById("iframe-website");
        if (!$scope.redirect)
          $scope.updatePageComponents();

        WebsiteService.getSinglePage($scope.currentPage.websiteId, $scope.currentPage.handle, function (data) {
          //TODO: Make this check on change of page title or url in the page settings modal
          //TODO: Better way to handle this there should be check on server side itself while saving the page
          if (data && data._id) {
            if (data._id !== $scope.currentPage._id) {
              toaster.pop('error', "Page URL " + $scope.currentPage.handle, "Already exists");
              return false;
            }
          }
          if ($scope.templateActive) {
            $scope.template.config.components = $scope.currentPage.components;
            WebsiteService.updateTemplate($scope.template._id, $scope.template, function () {
              console.log('success');
              toaster.pop('success', "Template Saved", "The " + $scope.currentPage.handle + " template was saved successfully.");
            });
          }


          WebsiteService.updatePage($scope.currentPage.websiteId, $scope.currentPage._id, $scope.currentPage, function (data) {
            $scope.isEditing = true;
            $scope.saveBlogData();
            if ($scope.childScope.getAllBlogs)
              $scope.originalBlogPosts = angular.copy($scope.childScope.getAllBlogs());
            WebsiteService.setEditedPageHandle($scope.currentPage.handle);
            if (!$scope.redirect)
              $scope.autoSavePage();
            else
              $scope.stopAutoSavePage();
            if (!$scope.redirect)
              if (autoSave)
                toaster.pop('success', "Auto Saved", "The " + $scope.currentPage.handle + " page was saved successfully.");
              else
                toaster.pop('success', "Page Saved", "The " + $scope.currentPage.handle + " page was saved successfully.");
            $scope.saveLoading = false;
            $scope.redirect = false;
            if ($scope.originalCurrentPage.handle !== $scope.currentPage.handle) {
              window.location = '/admin/#/website/pages/?pagehandle=' + $scope.currentPage.handle;
            }
            //Update linked list
            $scope.website.linkLists.forEach(function (value, index) {
              if (value.handle === "head-menu") {
                WebsiteService.updateLinkList($scope.website.linkLists[index], $scope.website._id, 'head-menu', function (data) {
                  console.log('Updated linked list');
                });
              }
            });
            // setTimeout(function() {
            //     if(iFrame && iFrame.contentWindow)
            //         $scope.activateCKEditor();
            // }, 1000)
          });
          var data = {
            _id: $scope.website._id,
            accountId: $scope.website.accountId,
            settings: $scope.website.settings
          };
        });


      }
    };

    $scope.updatePageComponents = function () {
      var iFrame = document.getElementById("iframe-website");
      var componentJSON = $scope.currentPage.components;
      var pageId = $scope.currentPage._id;

      var componentIdArr = [];

      //foreach components by class .component
      var editedPageComponents = iFrame.contentWindow.document.getElementsByTagName("body")[0].querySelectorAll('.component');
      for (var i = 0; i < editedPageComponents.length; i++) {
        var componentId = editedPageComponents[i].attributes['data-id'].value;
        componentIdArr.push(componentId);
        var componentType = editedPageComponents[i].attributes['data-type'].value;
        var matchingComponent = _.findWhere($scope.currentPage.components, {
          _id: componentId
        });


        //get all the editable variables and replace the ones in view with variables in DB
        var componentEditable = editedPageComponents[i].querySelectorAll('.editable');
        if (componentEditable.length >= 1) {
          for (var i2 = 0; i2 < componentEditable.length; i2++) {
            var componentVar = componentEditable[i2].attributes['data-class'].value;
            var componentVarContents = componentEditable[i2].innerHTML;

            //if innerhtml contains a span with the class ng-binding then remove it
            var span = componentEditable[i2].querySelectorAll('.ng-binding')[0];

            if (span) {
              var spanParent = span.parentNode;
              var spanInner = span.innerHTML;
              if (spanParent.classList.contains('editable')) {
                componentVarContents = spanInner;
              } else {
                spanParent.innerHTML = spanInner;
                componentVarContents = spanParent.parentNode.innerHTML;
              }
            }
            //remove "/n"
            componentVarContents = componentVarContents.replace(/(\r\n|\n|\r)/gm, "");
            //Hack for link plugin popup functionality
            componentVarContents = componentVarContents.replace("data-cke-pa-onclick", "onclick");

            var regex = /^<(\"[^\"]*\"|'[^']*'|[^'\">])*>/;
            if (regex.test(componentVarContents)) {
              var jHtmlObject = angular.element(componentVarContents);
              var editor = jQuery("<p>").append(jHtmlObject);
              editor.find(".cke_reset").remove();
              editor.find(".cke_image_resizer").remove();
              var img_anchors = editor.find("img[data-cke-real-element-type='anchor']");
              img_anchors.each(function () {
                var data = angular.element(this).attr('data-cke-realelement');
                var data_element = decodeURIComponent(data);
                $(this).replaceWith($(data_element));
              })
              var newHtml = editor.html();
              componentVarContents = newHtml;
            }


            var setterKey, pa;
            //if contains an array of variables
            if (componentVar.indexOf('.item') > 0 && componentEditable[i2].attributes['data-index'] && !componentEditable[i2].attributes['parent-data-index']) {
              //get index in array
              if (!angular.element(componentEditable[i2]).parents().hasClass("slick-cloned")) {
                var first = componentVar.split(".")[0];
                var second = componentEditable[i2].attributes['data-index'].value;
                var third = componentVar.split(".")[2];
                matchingComponent[first][second][third] = componentVarContents;
              }
            }
            //if contains an array of array variables
            if (componentVar.indexOf('.item') > 0 && componentEditable[i2].attributes['data-index'] && componentEditable[i2].attributes['parent-data-index']) {
              //get parent index in array
              var first = componentVar.split(".")[0];
              var second = componentEditable[i2].attributes['parent-data-index'].value;
              //get child index in array
              var third = componentVar.split(".")[2];
              var fourth = componentEditable[i2].attributes['data-index'].value;
              var last = componentVar.split(".")[3];
              matchingComponent[first][second][third][fourth][last] = componentVarContents;
            }
            //if needs to traverse a single
            if (componentVar.indexOf('-') > 0) {
              var first = componentVar.split("-")[0];
              var second = componentVar.split("-")[1];
              matchingComponent[first][second] = componentVarContents;
            }
            //simple
            if (componentVar.indexOf('.item') <= 0 && componentVar.indexOf('-') <= 0) {
              matchingComponent[componentVar] = componentVarContents;
            }
          }
        }

        $scope.backup = {};
      };

      //sort the components in currentPage to match iframe

      var newComponentOrder = [];

      for (var i = 0; i < componentIdArr.length; i++) {
        var matchedComponent = _.findWhere($scope.currentPage.components, {
          _id: componentIdArr[i]
        });
        if (matchedComponent.type === "single-post") {
          var post_tags = angular.copy($scope.childScope.blog.post.post_tags);
          if (post_tags) {
            post_tags.forEach(function (v, i) {
              if (v.text)
                post_tags[i] = v.text;
            });
            matchedComponent.post_tags = post_tags;
          }
          matchedComponent.publish_date = $scope.childScope.blog.post.publish_date;
        }
        newComponentOrder.push(matchedComponent);
      };
      $scope.currentPage.components = newComponentOrder;
    }
    $scope.saveBlogData = function () {
      if (!$scope.redirect)
        $scope.childScope.updateBlogPageData(iFrame);
      $scope.blogposts = $scope.childScope.getAllBlogs();
      $scope.blogposts.forEach(function (value, index) {
        var matching_post = _.find($scope.originalBlogPosts, function (item) {
          return item._id === value._id
        })
        if (!angular.equals(matching_post, value))
          WebsiteService.updatePost($scope.currentPage._id, value._id, value, function (data) {});
      })
    }


    $scope.updateBlogPost = function (post_data) {
      $scope.childScope.updateBlogPost(post_data);
    }

    /*
     * @updatePage
     * - update the current page to a different one
     */

    $scope.updatePage = function (handle, editing) {
      if (!angular.isDefined(editing))
        $scope.isEditing = false;

      $scope.pageSelected = handle || 'index';
      var route;
      var sPage = $scope.pageSelected;
      if (sPage === 'index') {
        route = '';
      } else {
        route = '/page/' + sPage;
      }

      if ($location.$$search['posthandle']) {
        $scope.single_post = true;
        route = '/page/' + sPage + '/' + $location.$$search['posthandle'] + '?editor=true';
        //document.getElementById("iframe-website").setAttribute("src", route + '?editor=true');
      }

      //TODO - replace with sending route through scope to update without iframe refresh
      //document.getElementById("iframe-website").setAttribute("src", route + '?editor=true');
      if ($location.$$search['custid']) {
        current_src = document.getElementById("iframe-website").getAttribute("src");
        document.getElementById("iframe-website").setAttribute("src", current_src + '&custid=' + $location.$$search['custid']);
      }

      //get components from page
      if ($scope.currentPage && $scope.currentPage.components) {
        $scope.components = $scope.currentPage.components;
      } else {
        $scope.components = [];
      }

      that.originalCurrentPageComponents = $scope.currentPage.components;
      $scope.originalCurrentPage = angular.copy($scope.currentPage);

      WebsiteService.getPages(function (pages) {
        var currentPage = $scope.pageSelected;
        var parsed = angular.fromJson(pages);
        var arr = [];

        for (var x in parsed) {
          arr.push(parsed[x]);
        }
        $scope.allPages = arr;
        $scope.filterdedPages = $filter('orderBy')($scope.allPages, "title", false);
        that.allPages = arr;
        WebsiteService.getPageVersions($scope.currentPage._id, function (pageVersions) {
          $scope.pageVersions = pageVersions;
        });

      });
    };

    /*
     * @addTeamMember
     * -
     */

    $scope.addTeamMember = function (team) {
      if (team && team.name) {
        $scope.componentEditing.teamMembers.push({
          name: team.name,
          position: team.position,
          bio: team.bio,
          profilepic: team.profilepic
        });
        $scope.saveComponent();
      }
    };

    /*
     * @addFeatureList
     * -
     */

    $scope.addFeatureList = function () {
      $scope.componentEditing.features.push({
        "top": "<div style='text-align:center'><span class=\"fa fa-arrow-right\" style=\"color:#0061a7;font-size:96px;\"></span></div>",
        "content": "<p style=\"text-align: center;\"><span style=\"font-size:24px;\">Feature One</span></p><p style=\"text-align: center;\">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Nisi ab, placeat. Officia qui molestiae incidunt est adipisci.</p><p style=\"text-align: center;\"><a style=\"-moz-box-shadow:inset 0px 1px 0px 0px #54a3f7;-webkit-box-shadow:inset 0px 1px 0px 0px #54a3f7;box-shadow:inset 0px 1px 0px 0px #54a3f7;background:-webkit-gradient(linear, left top, left bottom, color-stop(0.05, #007dc1), color-stop(1, #0061a7));background:-moz-linear-gradient(top, #007dc1 5%, #0061a7 100%);background:-webkit-linear-gradient(top, #007dc1 5%, #0061a7 100%);background:-o-linear-gradient(top, #007dc1 5%, #0061a7 100%);background:-ms-linear-gradient(top, #007dc1 5%, #0061a7 100%);background:linear-gradient(to bottom, #007dc1 5%, #0061a7 100%);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#007dc1', endColorstr='#0061a7',GradientType=0);background-color:#007dc1;-moz-border-radius:3px;-webkit-border-radius:3px;border-radius:3px;border:1px solid #124d77;display:inline-block;color:#ffffff;font-family:verdana;font-size:19px;font-weight:normal;font-style:normal;padding:14px 70px;text-decoration:none;text-shadow:0px 1px 0px #154682;\" data-cke-saved-href=\"http://\" href=\"http://\">Learn More</a></p>"
      });
      $scope.saveComponent();
    };

    /*
     * @stringifyAddress
     * -
     */

    $scope.stringifyAddress = function (address) {
      if (address) {
        return _.filter([address.address, address.city, address.state, address.zip], function (str) {
          return str !== "";
        }).join(", ")
      }
    };

    /*
     * @updateContactUsAddress
     * -
     */

    $scope.updateContactUsAddress = function (location) {

      if ($scope.componentEditing.location.city) {
        angular.element('#location-city').parents('.form-group').find('.error').html('');
        angular.element('#location-city').parents('.form-group').removeClass('has-error');
      } else {
        angular.element('#location-city').parents('.form-group').addClass('has-error');
        angular.element('#location-city').parents('.form-group').find('.error').html('City is required');
      }

      if ($scope.componentEditing.location.state) {
        angular.element('#location-state').parents('.form-group').find('.error').html('');
        angular.element('#location-state').parents('.form-group').removeClass('has-error');
      } else {
        angular.element('#location-state').parents('.form-group').addClass('has-error');
        angular.element('#location-state').parents('.form-group').find('.error').html('State is required');
      }

      GeocodeService.getGeoSearchAddress($scope.stringifyAddress($scope.componentEditing.location), function (data) {
        if (data.lat && data.lon) {
          $scope.componentEditing.location.lat = data.lat;
          $scope.componentEditing.location.lon = data.lon;
          $scope.saveContactComponent();
        }
      });
    };

    /*
     * @saveContactComponent
     * -
     */

    $scope.saveContactComponent = function () {
      var currentComponentId = $scope.componentEditing._id;
      $scope.updateSingleComponent(currentComponentId);
      $scope.childScope.updateContactComponent($scope.currentPage.components);
    };

    /*
     * @addComponent
     * -
     */

    $scope.addComponent = function (addedType) {
      var pageId = $scope.currentPage._id;
      var componentType = null;
      if (addedType.type === 'footer' || addedType.type === 'navigation' || addedType.type === 'single-post' || addedType.type === 'blog-teaser' || addedType.type === 'blog') {
        componentType = _.findWhere($scope.currentPage.components, {
          type: addedType.type
        });
        if (componentType) {
          toaster.pop('error', componentType.type + " component already exists");
          return;
        }
      }

      $scope.components = $scope.currentPage.components;

      var cmpVersion = addedType.version;
      $scope.isDirty = true;
      WebsiteService.saveComponent(addedType, cmpVersion || 1, function (data) {

        if (data) {
          var newComponent = data;
          var indexToadd = $scope.editComponentIndex ? $scope.editComponentIndex : 1
          $scope.currentPage.components.splice(indexToadd, 0, newComponent);
          //$scope.currentPage.components.push(newComponent);
          //$scope.components.push(newComponent);
          $scope.components = $scope.currentPage.components;
          $scope.updateIframeComponents();
          // Update contact component
          if (addedType.type === 'contact-us')
            $scope.childScope.updateContactComponent($scope.currentPage.components);
          //TODO: get updateIframeComponents callback
          setTimeout(function () {
              $scope.activateCKEditor();
            }, 1000)
            //$scope.scrollToIframeComponent(newComponent.anchor);
          $scope.closeModal();
          toaster.pop('success', "Component Added", "The " + newComponent.type + " component was added successfully.");
          //$scope.resizeIframe();
        }
      });
    };

    /*
     * @deleteComponent
     * -
     */

    $scope.deleteComponent = function (componentId) {
      var pageId = $scope.currentPage._id;
      var deletedType;
      for (var i = 0; i < $scope.components.length; i++) {
        if ($scope.components[i]._id == componentId) {
          deletedType = $scope.components[i].type;
          $scope.components.splice(i, 1);
          break;
        }
      }
      $scope.updateIframeComponents();
      $scope.componentEditing = null;
      setTimeout(function () {
        $scope.resizeIframe();
      }, 1000)

      $scope.$apply(function () {
        toaster.pop('success', "Component Deleted", "The " + deletedType + " component was deleted successfully.");
      });
    };

    /*
     * @updateIframeComponents
     * -
     */

    $scope.updateIframeComponents = function (fn) {
      $scope.childScope.updateComponents($scope.components);
      if (fn) {
        fn();
      }
    };

    /*
     * @scrollToIframeComponent
     * -
     */

    $scope.scrollToIframeComponent = function (section) {
      iFrame && iFrame.contentWindow && iFrame.contentWindow.scrollTo && iFrame.contentWindow.scrollTo(section)
    };

    /*
     * @activateCKEditor
     * -
     */

    $scope.activateCKEditor = function () {
      $scope.bindEvents();
      $scope.childScope.activateCKEditor()
    };

    /*
     * @deactivateCKEditor
     * -
     */

    $scope.deactivateCKEditor = function () {
      $scope.childScope.deactivateCKEditor()
    };

    /*
     * @editComponent
     * -
     */

    $scope.editComponent = function (componentId) {
      if ($scope.single_post) {
        $scope.childScope.refreshPost();
        return;
      }
      $scope.$apply(function () {
        $scope.componentEditing = _.findWhere($scope.components, {
          _id: componentId
        });

        if ($scope.componentEditing) {
          $scope.componentEditing.icon = _.findWhere($scope.componentTypes, {
            type: $scope.componentEditing.type
          }).icon;
          $scope.componentEditing.header_title = _.findWhere($scope.componentTypes, {
            type: $scope.componentEditing.type
          }).title;
        }

        if ($scope.componentEditing.type === "simple-form" && !$scope.componentEditing.fields.length) {
          $scope.componentEditing.fields.push({
            "display": "First Name",
            "value": false,
            "name": "first"
          }, {
            "display": "Last Name",
            "value": false,
            "name": "last"
          }, {
            "display": "Phone Number",
            "value": false,
            "name": "phone"
          })
        }

        if ($scope.componentEditing.type === "contact-us") {
          if ($scope.componentEditing.hours) {
            _.each($scope.componentEditing.hours, function (element, index) {
              if (element.day == "Sat" || element.day == "Sun") {
                if (element.start == "")
                  element.start = "9:00 am";
                if (element.end == "")
                  element.end = "5:00 pm";
                if (!element.start2 || element.start2 == "")
                  element.start2 = "9:00 am";
                if (!element.end2 || element.end2 == "")
                  element.end2 = "9:00 am";
              }
            });
          }
        }

      });
      $scope.originalComponent = angular.copy($scope.componentEditing);
      $scope.contactHoursInvalid = false;
      $scope.contactHours = [];

      for (var i = 0; i <= 6; i++) {
        $scope.contactHours.push({
          "valid": true
        });
      }

      if ($scope.componentEditing) {
        WebsiteService.getComponentVersions($scope.componentEditing.type, function (versions) {
          $scope.componentEditingVersions = versions;
          if ($scope.componentEditing && $scope.componentEditing.version) {
            $scope.componentEditing.version = $scope.componentEditing.version.toString();
            $scope.versionSelected = $scope.componentEditing.version;
          }
          $scope.originalCurrentPage = angular.copy($scope.currentPage);
        });
      }
      angular.element('#feature-convert').iconpicker({
        iconset: 'fontawesome',
        icon: 'fa-credit-card',
        rows: 5,
        cols: 5,
        placement: 'right',
      });

      angular.element('#feature-convert').on('change', function (e) {
        if (!$scope.featureIcon) {
          $scope.featureIcon = {};
        }
        if ($scope.featureIcon) {
          $scope.featureIcon.icon = e.icon;
        }
      });
    };

    /*
     * @revertComponent
     * -
     */

    $scope.revertComponent = function () {
      var componentId = $scope.componentEditing._id;
      for (var i = 0; i < $scope.components.length; i++) {
        if ($scope.components[i]._id === componentId) {
          $scope.components[i] = $scope.originalComponent
        }
      }
      $scope.currentPage.components = $scope.components;
      if ($scope.componentEditing.type === 'navigation') {
        $scope.website.linkLists = $scope.backup["website"].linkLists;
        if ($scope.componentEditing.customnav) {
          $scope.website.linkLists.forEach(function (value, index) {
            if (value.handle === "head-menu") {
              $scope.saveCustomComponent();
            }
          });
        } else {
          $scope.website.linkLists.forEach(function (value, index) {
            if (value.handle === "head-menu") {
              $scope.childScope.updateWebsite($scope.website);
            }
          });
        }
      }

      $scope.updateIframeComponents();
      setTimeout(function () {
        $scope.activateCKEditor();
      }, 1000)
      $scope.closeModal();
    };

    /*
     * @saveComponent
     * -
     */

    $scope.saveComponent = function (update) {

      var componentId = $scope.componentEditing._id;
      if (!update)
        $scope.updateSingleComponent(componentId);

      var componentIndex;
      for (var i = 0; i < $scope.components.length; i++) {
        if ($scope.components[i]._id === componentId) {
          $scope.components[i] = $scope.componentEditing
        }
      }
      $scope.currentPage.components = $scope.components;
      $scope.updateIframeComponents();
      $scope.isEditing = true;
      $scope.isDirty = true;
      setTimeout(function () {
        $scope.activateCKEditor();
      }, 1000)
    };


    /*
     * @updateComponentWithEditor
     * -
     */

    $scope.updateComponentWithEditor = function () {
      $scope.saveComponent();
      setTimeout(function () {
        $scope.activateCKEditor();
      }, 1000)
    };

    /*
     * @updateSingleComponent
     * -
     */

    $scope.updateSingleComponent = function (componentId) {
      //update single component

      var matchingComponent = _.findWhere($scope.currentPage.components, {
        _id: componentId
      });

      var editedComponent = iFrame.contentWindow.document.getElementsByTagName("body")[0].querySelectorAll('.component[data-id="' + componentId + '"]');
      if (editedComponent && editedComponent.length > 0) {
        //get all the editable variables and replace the ones in view with variables in DB
        var componentEditable = editedComponent[0].querySelectorAll('.editable');
        if (componentEditable.length >= 1) {
          for (var i2 = 0; i2 < componentEditable.length; i2++) {
            var componentVar = componentEditable[i2].attributes['data-class'].value;
            var componentVarContents = componentEditable[i2].innerHTML;

            //if innerhtml contains a span with the class ng-binding then remove it
            var span = componentEditable[i2].querySelectorAll('.ng-binding')[0];

            if (span) {
              var spanParent = span.parentNode;
              var spanInner = span.innerHTML;
              if (spanParent.classList.contains('editable')) {
                componentVarContents = spanInner;
              } else {
                spanParent.innerHTML = spanInner;
                componentVarContents = spanParent.parentNode.innerHTML;
              }
            }
            //remove "/n"
            //componentVarContents = componentVarContents.replace(/(\r\n|\n|\r)/gm, "");

            var regex = /^<(\"[^\"]*\"|'[^']*'|[^'\">])*>/;
            if (regex.test(componentVarContents)) {
              var jHtmlObject = $(componentVarContents);
              var editor = jQuery("<p>").append(jHtmlObject);
              //editor.find(".cke_reset").remove();
              var newHtml = editor.html();
              componentVarContents = newHtml;
            }


            var setterKey, pa;
            //if contains an array of variables
            if (componentVar.indexOf('.item') > 0 && componentEditable[i2].attributes['data-index'] && !componentEditable[i2].attributes['parent-data-index']) {
              //get index in array
              if (!angular.element(componentEditable[i2]).parents().hasClass("slick-cloned")) {
                var first = componentVar.split(".")[0];
                var second = componentEditable[i2].attributes['data-index'].value;
                var third = componentVar.split(".")[2];
                if (matchingComponent[first][second])
                  matchingComponent[first][second][third] = componentVarContents;
              }

            }
            //if contains an array of array variables
            if (componentVar.indexOf('.item') > 0 && componentEditable[i2].attributes['data-index'] && componentEditable[i2].attributes['parent-data-index']) {
              //get parent index in array
              var first = componentVar.split(".")[0];
              var second = componentEditable[i2].attributes['parent-data-index'].value;
              //get child index in array
              var third = componentVar.split(".")[2];
              var fourth = componentEditable[i2].attributes['data-index'].value;
              var last = componentVar.split(".")[3];
              if (matchingComponent[first][second][third][fourth])
                matchingComponent[first][second][third][fourth][last] = componentVarContents;
            }
            //if needs to traverse a single
            if (componentVar.indexOf('-') > 0) {
              var first = componentVar.split("-")[0];
              var second = componentVar.split("-")[1];
              if (matchingComponent[first])
                matchingComponent[first][second] = componentVarContents;
            }
            //simple
            if (componentVar.indexOf('.item') <= 0 && componentVar.indexOf('-') <= 0) {
              matchingComponent[componentVar] = componentVarContents;
            }
          }
        }
      }
      return matchingComponent;
    };

    /*
     * @saveCustomComponent
     * -
     */

    $scope.saveCustomComponent = function (networks) {
      $scope.childScope.updateCustomComponent($scope.currentPage.components, networks ? networks : $scope.componentEditing.networks)
        //iFrame && iFrame.contentWindow && iFrame.contentWindow.updateCustomComponent && iFrame.contentWindow.updateCustomComponent($scope.currentPage.components, networks ? networks : $scope.componentEditing.networks);
    };

    /*
     * @deletePage
     * -
     */

    $scope.deletePage = function () {
      $scope.childScope.checkOrSetPageDirty(true);
      SweetAlert.swal({
          title: "Are you sure?",
          text: "Do you want to delete this page",
          type: "warning",
          showCancelButton: true,
          confirmButtonColor: "#DD6B55",
          confirmButtonText: "Yes, delete page!",
          cancelButtonText: "No, do not delete page!",
          closeOnConfirm: false,
          closeOnCancel: false
        },
        function (isConfirm) {
          if (isConfirm) {
            SweetAlert.swal("Saved!", "Page is deleted.", "success");
            var pageId = $scope.currentPage._id;
            var websiteId = $scope.currentPage.websiteId;
            var title = $scope.currentPage.title;

            WebsiteService.deletePage(pageId, websiteId, title, function (data) {
              toaster.pop('success', "Page Deleted", "The " + title + " page was deleted successfully.");
              $scope.closeModal();
              setTimeout(function () {
                window.location = '/admin/#/website/pages';
              }, 500)
            });
          } else {
            SweetAlert.swal("Cancelled", "Page not deleted.", "error");
          }
        });
    };

    /*
     * @deletePost
     * -
     */

    $scope.deletePost = function (post_data) {
      SweetAlert.swal({
          title: "Are you sure?",
          text: "Do you want to delete this page",
          type: "warning",
          showCancelButton: true,
          confirmButtonColor: "#DD6B55",
          confirmButtonText: "Yes, delete post!",
          cancelButtonText: "No, do not delete post!",
          closeOnConfirm: false,
          closeOnCancel: false
        },
        function (isConfirm) {
          if (isConfirm) {
            SweetAlert.swal("Saved!", "Post is deleted.", "success");
            $scope.closeModal();
            $scope.childScope.deletePost(post_data, toaster);
          } else {
            SweetAlert.swal("Cancelled", "Post not deleted.", "error");
          }
        });
    };

    /*
     * @deletePost
     * - selected component when choosing from modal
     */

    $scope.selectComponent = function (type) {
      if (type.enabled) {
        $scope.selectedComponent = type;
      }
    };

    /*
     * @insertMedia
     * - insertmedia into various components
     */

    $scope.insertMedia = function (asset) {
      if ($scope.imageChange) {
        $scope.imageChange = false;
        var type = $scope.componentEditing.type;
        //if image/text component
        if (type == 'image-text') {
          $scope.componentEditing.imgurl = asset.url;
        } else if (type == 'feature-list') {
          var targetIndex = angular.element($scope.componentArrTarget).closest('.single-feature').data('index');
          $scope.componentEditing.features[targetIndex].imgurl = asset.url;
        } else if (type == 'simple-form') {
          $scope.componentEditing.imgurl = asset.url;
        } else if (type == 'image-gallery') {
          $scope.componentEditing.images[$scope.componentImageIndex].url = asset.url;
        } else if (type == 'thumbnail-slider') {
          $scope.componentEditing.thumbnailCollection[$scope.componentImageIndex].url = asset.url;
        } else if (type == 'meet-team') {
          $scope.componentEditing.teamMembers[$scope.componentImageIndex].profilepic = asset.url;
        } else {
          console.log('unknown component or image location');
        }
        $scope.bindEvents();
      } else if ($scope.postImage && !$scope.componentEditing) {
        $scope.postImage = false;
        $scope.postImageUrl = asset.url;
        toaster.pop('success', "Post Image added successfully");
        return;
      } else if ($scope.profilepic && !$scope.componentEditing) {
        $scope.profilepic = false;
        $scope.customerAccount.photo = asset.url;
        return;
      } else if ($scope.insertMediaImage) {
        $scope.insertMediaImage = false;
        $scope.childScope.addCKEditorImage(asset.url, $scope.inlineInput, $scope.isEditMode);
        return;
      } else if ($scope.logoImage && $scope.componentEditing) {
        $scope.logoImage = false;
        $scope.componentEditing.logourl = asset.url;
      } else if ($scope.changeblobImage) {
        $scope.changeblobImage = false;
        $scope.blog_post.featured_image = asset.url;
        var iFrame = document.getElementById("iframe-website");
        $scope.childScope.setBlogImage(asset.url);
        iFrame && iFrame.contentWindow && iFrame.contentWindow.updateCustomComponent && iFrame.contentWindow.updateCustomComponent();
        return;
      } else if ($scope.imgGallery && $scope.componentEditing) {
        $scope.imgGallery = false;
        $scope.componentEditing.images.splice($scope.imgGalleryIndex + 1, 0, {
          url: asset.url
        });
      } else if ($scope.imgThumbnail && $scope.componentEditing) {
        $scope.imgThumbnail = false;
        $scope.componentEditing.thumbnailCollection.push({
          url: asset.url
        });
      } else {
        if ($scope.componentEditing.bg.img) {
          $scope.componentEditing.bg.img.url = asset.url;
          $scope.saveComponent();
          return;
        }
      }
      $scope.updateIframeComponents();
    };

    /*
     * @checkIfSubdomaddCKEditorImageInputainExists
     * - when changing the subdomain associated with the account, check to make sure it exisits
     */

    $scope.checkIfSubdomaddCKEditorImageInputainExists = function () {
      var parent_div = angular.element('div.form-group.subdomain');
      UserService.checkDuplicateSubdomain($scope.account.subdomain, $scope.account._id, function (result) {
        if(data.isDuplicate) {
          parent_div.addClass('has-error');
          parent_div.find('span.error').remove();
          parent_div.append("<span class='error help-block'>Domain already exists</span>");
        } else {
          UserService.putAccount($scope.account, function (account) {
            parent_div.removeClass('has-error');
            parent_div.find('span.error').remove();
          });
        }
      });
    };

    /*
     * @locationChangeStart
     * - Before user leaves editor, ask if they want to save changes
     */

    $scope.changesConfirmed = false;
    $scope.isDirty = false;

    var offFn = $rootScope.$on('$locationChangeStart', function (event, newUrl, oldUrl) {
      var isDirty = false;
      var iFrame = document.getElementById("iframe-website");
      if ($scope.childScope && $scope.childScope.checkOrSetPageDirty) {
        var isDirty = $scope.childScope.checkOrSetPageDirty() || $scope.isDirty;
      }

      if (isDirty && !$scope.changesConfirmed && !$scope.duplicate) {
        event.preventDefault();
        $scope.updatePageComponents();
        if ($scope.childScope.updateBlogPageData)
          $scope.childScope.updateBlogPageData(iFrame);
        SweetAlert.swal({
            title: "Are you sure?",
            text: "You have unsaved data that will be lost",
            type: "warning",
            showCancelButton: true,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "Yes, save changes!",
            cancelButtonText: "No, do not save changes!",
            closeOnConfirm: false,
            closeOnCancel: false
          },
          function (isConfirm) {
            if (isConfirm) {
              SweetAlert.swal("Saved!", "Your edits were saved to the page.", "success");
              $scope.redirect = true;
              $scope.savePage();
            } else {
              SweetAlert.swal("Cancelled", "Your edits were NOT saved.", "error");
            }
            $scope.changesConfirmed = true;
            $scope.isDirty = false;
            //set window location
            window.location = newUrl;
            offFn();
          });
      } else if ($scope.changesConfirmed) {
        $scope.stopAutoSavePage();
      } else {
        $scope.stopAutoSavePage();
      }
    });

    /*
     * @initializeLinks
     * -
     */

    $scope.initializeLinks = function (status) {
      $scope.addLink = status;
      $scope.newLink = {
        linkUrl: null,
        linkTitle: null,
        linkType: null
      };
    };

    /*
     * @setLinkUrl
     * -
     */

    $scope.setLinkUrl = function () {
      $scope.newLink.linkTitle = angular.element("#linkSection option:selected").html();
    };

    /*
     * @setLinkTitle
     * -
     */

    $scope.setLinkTitle = function (value, index, newLink) {
      var newArray = _.first(angular.copy($scope.currentPage.components), [index + 1]);
      var hash = _.filter(newArray, function (obj) {
        return obj.type === value;
      })
      if (hash.length > 1)
        return value.replace("-", " ") + "-" + (hash.length - 1);
      else
        return value.replace("-", " ");
    };

    /*
     * @deleteLinkFromNav
     * -
     */

    $scope.deleteLinkFromNav = function (index) {
      if ($scope.componentEditing.customnav) {
        $scope.componentEditing.linkLists.forEach(function (value) {
          if (value.handle === "head-menu") {
            value.links.splice(index, 1);
            setTimeout(function () {
              $scope.updateLinkList();
            }, 1000)
          }
        });
      } else {
        $scope.website.linkLists.forEach(function (value) {
          if (value.handle === "head-menu") {
            value.links.splice(index, 1);
            setTimeout(function () {
              $scope.updateLinkList();
            }, 1000)
          }
        });
      }
    };

    /*
     * @addLinkToNav
     * -
     */

    $scope.addLinkToNav = function () {

      if ($scope.newLink && $scope.newLink.linkTitle && $scope.newLink.linkUrl) {
        if ($scope.componentEditing.customnav) {
          if (!$scope.componentEditing.linkLists) {
            $scope.componentEditing.linkLists = [];
            $scope.componentEditing.linkLists.push({
              name: "Head Menu",
              handle: "head-menu",
              links: []
            })
          }
          $scope.componentEditing.linkLists.forEach(function (value, index) {
            if (value.handle === "head-menu") {
              value.links.push({
                label: $scope.newLink.linkTitle,
                type: "link",
                linkTo: {
                  data: $scope.newLink.linkUrl,
                  type: $scope.newLink.linkType
                }
              });
              $scope.initializeLinks(false);
            }
          });
        } else {
          $scope.website.linkLists.forEach(function (value, index) {
            if (value.handle === "head-menu") {
              value.links.push({
                label: $scope.newLink.linkTitle,
                type: "link",
                linkTo: {
                  data: $scope.newLink.linkUrl,
                  type: $scope.newLink.linkType
                }
              });
              $scope.initializeLinks(false);
            }
          });
        }

      }
      setTimeout(function () {
        $scope.updateLinkList();
      }, 1000)
    };

    /*
     * @updateLinkList
     * - when the navigation is reordered, update the linklist in the website object
     */

    $scope.updateLinkList = function (index) {
      var linkLabelsArr = [];
      var editedLinksLists = angular.element('.head-menu-links');
      // if(index)
      // editedLinksLists.splice(index,1);
      for (var i = 0; i < editedLinksLists.length; i++) {
        var linkLabel = editedLinksLists[i].attributes['data-label'].value;
        if (linkLabel)
          linkLabelsArr.push(linkLabel);
      }
      if (linkLabelsArr.length) {
        if ($scope.componentEditing.customnav) {
          $scope.componentEditing.linkLists.forEach(function (value, index) {
            if (value.handle === "head-menu") {
              var newLinkListOrder = [];
              for (var i = 0; i < editedLinksLists.length; i++) {
                if (value) {
                  var matchedLinkList = _.findWhere(value.links, {
                    label: linkLabelsArr[i]
                  });
                  newLinkListOrder.push(matchedLinkList);
                }
              };
              if (newLinkListOrder.length) {
                $scope.componentEditing.linkLists[index].links = newLinkListOrder;
                $scope.saveCustomComponent();
              }
            }
          });
        } else {
          $scope.website.linkLists.forEach(function (value, index) {
            if (value.handle === "head-menu") {
              var newLinkListOrder = [];
              for (var i = 0; i < editedLinksLists.length; i++) {
                if (value) {
                  var matchedLinkList = _.findWhere(value.links, {
                    label: linkLabelsArr[i]
                  });
                  newLinkListOrder.push(matchedLinkList);
                }
              };
              if (newLinkListOrder.length) {
                $scope.website.linkLists[index].links = newLinkListOrder;
                $scope.childScope.updateWebsite($scope.website);
              }

            }
          });
        }

      } else {

        if ($scope.componentEditing.customnav) {
          $scope.website.linkLists.forEach(function (value, index) {
            if (value.handle === "head-menu") {
              $scope.componentEditing.linkLists[index].links = [];
              $scope.saveCustomComponent();
            }
          });
        } else {
          $scope.website.linkLists.forEach(function (value, index) {
            if (value.handle === "head-menu") {
              $scope.website.linkLists[index].links = [];
              $scope.childScope.updateWebsite($scope.website);
            }
          });
        }

      }
    };

    /*
     * @sortableOptions
     * -
     */

    $scope.sortableOptions = {
      orderChanged: function (event) {
        $scope.updateLinkList();
      },
      parentElement: "#component-setting-modal .tab-content",
      scrollableContainer: 'reorderNavBarContainer'
    };

    /*
     * @updateSocialNetworks
     * -
     */

    $scope.updateSocialNetworks = function (old_value, mode, new_value) {
      var selectedName;
      switch (mode) {
        case "add":
          if (new_value && new_value.name && new_value.url) {
            $scope.componentEditing.networks.push({
              name: new_value.name,
              url: new_value.url,
              icon: new_value.icon
            });
            $scope.saveCustomComponent();
          }
          break;
        case "update":
          if (new_value && new_value.name && new_value.url) {
            selectedName = _.findWhere($scope.componentEditing.networks, {
              name: old_value.name
            });
            selectedName.name = new_value.name;
            selectedName.url = new_value.url;
            selectedName.icon = new_value.icon;
            $scope.saveCustomComponent();
          }
          break;
        case "delete":
          selectedName = _.findWhere($scope.componentEditing.networks, {
            name: old_value.name
          });
          if (selectedName) {
            var index = $scope.componentEditing.networks.indexOf(selectedName)
            $scope.componentEditing.networks.splice(index, 1);
            $scope.saveCustomComponent();
          }
          break;
      }
    };

    /*
     * @updateTeamNetworks
     * -
     */

    $scope.updateTeamNetworks = function (old_value, mode, new_value, parent_index) {
      var selectedName;
      switch (mode) {
        case "add":
          if (new_value && new_value.name && new_value.url) {
            if (!$scope.componentEditing.teamMembers[parent_index].networks)
              $scope.componentEditing.teamMembers[parent_index].networks = [];
            $scope.componentEditing.teamMembers[parent_index].networks.push({
              name: new_value.name,
              url: new_value.url,
              icon: new_value.icon
            });
            $scope.saveCustomComponent($scope.componentEditing.teamMembers[parent_index].networks);
          }
          break;
        case "update":
          if (new_value && new_value.name && new_value.url) {
            selectedName = _.findWhere($scope.componentEditing.teamMembers[parent_index].networks, {
              name: old_value.name
            });
            selectedName.name = new_value.name;
            selectedName.url = new_value.url;
            selectedName.icon = new_value.icon;
            $scope.saveCustomComponent($scope.componentEditing.teamMembers[parent_index].networks);
          }
          break;
        case "delete":
          selectedName = _.findWhere($scope.componentEditing.teamMembers[parent_index].networks, {
            name: old_value.name
          });
          if (selectedName) {
            var index = $scope.componentEditing.teamMembers[parent_index].networks.indexOf(selectedName)
            $scope.componentEditing.teamMembers[parent_index].networks.splice(index, 1);
            $scope.saveCustomComponent($scope.componentEditing.teamMembers[parent_index].networks);
          }
          break;
      }
    };

    /*
     * @getSocialNetworks
     * -
     */

    $scope.getSocialNetworks = function (nested, parent_index) {
      if (nested)
        return $scope.componentEditing.teamMembers[parent_index].networks;
      else
        return $scope.componentEditing.networks;
    };

    /*
     * @autoSavePage
     * -
     */

    $scope.autoSavePage = function () {
      $scope.stopAutoSavePage();
      stopInterval = $interval(function () {
        $scope.savePage(true);
      }, $scope.timeInterval);
    };

    /*
     * @stopAutoSavePage
     * -
     */

    $scope.stopAutoSavePage = function () {
      if (angular.isDefined(stopInterval)) {
        $interval.cancel(stopInterval);
        stopInterval = undefined;
      }
    };


    /********** LISTENERS ***********/

    /*
     * @deleteFeatureList
     * -
     */

    $scope.deleteFeatureList = function (componentId, index) {
      $scope.componentEditing = _.findWhere($scope.components, {
        _id: componentId
      });
      $scope.updateSingleComponent(componentId);
      $scope.componentEditing.features.splice(index, 1);
      $scope.saveCustomComponent();
    };

    /*
     * @addNewFeatureList
     * -
     */

    $scope.addNewFeatureList = function (componentId, index, newFeature) {
      $scope.componentEditing = _.findWhere($scope.components, {
        _id: componentId
      });
      $scope.updateSingleComponent(componentId);
      $scope.componentEditing.features.splice(index + 1, 0, newFeature)
      $scope.saveCustomComponent();
    };

    /*
     * @clickImageButton
     * -
     */

    $scope.clickImageButton = function (editor, edit) {
      $scope.insertMediaImage = true;
      $scope.inlineInput = editor;
      $scope.isEditMode = edit;
      //$scope.openModal('mediamodal');
      angular.element("#media-manager-modal").modal('show');
      $scope.showInsert = true;
    };

    /*
     * @changeBlogImage
     * -
     */

    $scope.changeBlogImage = function (blog) {
      $scope.changeblobImage = true;
      $scope.blog_post = blog;
      angular.element("#media-manager-modal").modal('show');
      $scope.showInsert = true;
    };

    /*
     * @setPostImage
     * -
     */

    $scope.setPostImage = function (componentId) {
      $scope.postImage = true;
      angular.element("#media-manager-modal").modal('show');
      $scope.showInsert = true;
    };

    /*
     * @addImageToGallery
     * -
     */

    $scope.addImageToGallery = function (componentId, index) {
      $scope.imgGallery = true;
      $scope.imgGalleryIndex = index;
      $scope.componentEditing = _.findWhere($scope.components, {
        _id: componentId
      });
      angular.element("#media-manager-modal").modal('show');
      $scope.showInsert = true;
    };

    /*
     * @deleteImageFromGallery
     * -
     */

    $scope.deleteImageFromGallery = function (componentId, index) {
      $scope.componentEditing = _.findWhere($scope.components, {
        _id: componentId
      });
      $scope.updateSingleComponent(componentId);
      $scope.componentEditing.images.splice(index, 1);
      $scope.saveCustomComponent();
    };

    /*
     * @addImageToThumbnail
     * -
     */

    $scope.addImageToThumbnail = function (componentId) {
      $scope.imgThumbnail = true;
      $scope.componentEditing = _.findWhere($scope.components, {
        _id: componentId
      });
      angular.element("#media-manager-modal").modal('show');
      $scope.showInsert = true;
    };

    /*
     * @deleteImageFromThumbnail
     * -
     */

    $scope.deleteImageFromThumbnail = function (componentId, index) {
      $scope.componentEditing = _.findWhere($scope.components, {
        _id: componentId
      });
      $scope.updateSingleComponent(componentId);
      $scope.componentEditing.thumbnailCollection.splice(index, 1);
      $scope.saveCustomComponent();
    };

    /*
     * @changeProfilePhoto
     * -
     */

    $scope.changeProfilePhoto = function (componentId, customer) {
      $scope.profilepic = true;
      $scope.customerAccount = customer;
      angular.element("#media-manager-modal").modal('show');
      $scope.showInsert = true;
    };

    /*
     * @changeLogoImage
     * -
     */

    $scope.changeLogoImage = function (componentId) {
      $scope.logoImage = true;
      $scope.componentEditing = _.findWhere($scope.components, {
        _id: componentId
      });
      angular.element("#media-manager-modal").modal('show');
      $scope.showInsert = true;
    };

    /*
     * @getPostImageUrl
     * -
     */

    $scope.getPostImageUrl = function () {
      return $scope.postImageUrl;
    };

    /*
     * @deleteTeamMember
     * -
     */

    $scope.deleteTeamMember = function (componentId, index) {
      $scope.componentEditing = _.findWhere($scope.components, {
        _id: componentId
      });
      $scope.updateSingleComponent(componentId);
      $scope.componentEditing.teamMembers.splice(index, 1);
      $scope.saveCustomComponent();
    };

    /*
     * @deleteTestimonial
     * -
     */

    $scope.deleteTestimonial = function (componentId, index) {
      $scope.componentEditing = _.findWhere($scope.components, {
        _id: componentId
      });
      $scope.updateSingleComponent(componentId);
      $scope.componentEditing.testimonials.splice(index, 1);
      $scope.saveCustomComponent();
    };

    /*
     * @updateAdminPageScope
     * -
     */

    $scope.updateAdminPageScope = function (page) {
      $scope.singlePost = false;
      if (!$scope.$$phase) {
        $scope.$apply(function () {
          //editBlockUI.stop();
          $scope.iframeLoaded = true;
          $scope.autoSavePage();
        })
      }

      if (page) {
        if (!$scope.currentPage && !$scope.$$phase) {
          $scope.$apply(function () {
            $scope.currentPage = page;
            //get components from page
            if ($scope.currentPage && $scope.currentPage.components) {
              $scope.components = $scope.currentPage.components;
            } else {
              $scope.components = [];
            }
            $scope.originalCurrentPage = angular.copy($scope.currentPage);
          })
        }
      }
    };

    /*
     * @loadPost
     * -
     */

    $scope.loadPost = function (post) {
      if (post) {
        $scope.singlePost = true;
        $scope.post_data = post;
      }
    };

    /*
     * @showToaster
     * -
     */

    $scope.showToaster = function (value, toast, msg, post, redirect) {
      if (toast)
        $scope.$apply(function () {
          toaster.pop('success', msg);
          if (post) {
            $scope.saveLoading = false;
            $scope.post_data = $scope.childScope.getPostData();
            if ($scope.post_data.post_url && $location.$$search['posthandle'] !== $scope.post_data.post_url)
              window.location = '/admin/#/website/posts/?posthandle=' + $scope.post_data.post_url;
          }

          if (redirect)
            $location.path("/website/posts");
          else if (post)
            $scope.post_data = post;
        })
    };

    /*
     * @deletePricingTable
     * -
     */

    $scope.deletePricingTable = function (componentId, index) {
      $scope.componentEditing = _.findWhere($scope.components, {
        _id: componentId
      });
      $scope.updateSingleComponent(componentId);
      $scope.componentEditing.tables.splice(index, 1);
      $scope.saveCustomComponent();
    };

    /*
     * @addPricingTable
     * -
     */

    $scope.addPricingTable = function (componentId, newTable, index) {
      $scope.componentEditing = _.findWhere($scope.components, {
        _id: componentId
      });
      $scope.updateSingleComponent(componentId);
      $scope.componentEditing.tables.splice(index + 1, 0, newTable);
      $scope.saveCustomComponent();
    };

    /*
     * @deletePricingTableFeature
     * -
     */

    $scope.deletePricingTableFeature = function (componentId, index, parentIndex) {
      $scope.componentEditing = _.findWhere($scope.components, {
        _id: componentId
      });
      $scope.updateSingleComponent(componentId);
      $scope.componentEditing.tables[parentIndex].features.splice(index, 1);
      $scope.saveCustomComponent();
    };

    /*
     * @addPricingTableFeature
     * -
     */

    $scope.addPricingTableFeature = function (componentId, newTable, index, parentIndex) {
      $scope.componentEditing = _.findWhere($scope.components, {
        _id: componentId
      });
      $scope.updateSingleComponent(componentId);
      $scope.componentEditing.tables[parentIndex].features.splice(index + 1, 0, newTable);
      $scope.saveCustomComponent();
    };

    /*
     * @addTeamMember
     * -
     */

    $scope.addTeamMember = function (componentId, newTeam, index) {
      $scope.componentEditing = _.findWhere($scope.components, {
        _id: componentId
      });
      $scope.updateSingleComponent(componentId);
      $scope.componentEditing.teamMembers.splice(index + 1, 0, newTeam);
      $scope.saveCustomComponent();
    };

    /*
     * @addTestimonial
     * -
     */

    $scope.addTestimonial = function (componentId, newTestimonial, index) {
      $scope.componentEditing = _.findWhere($scope.components, {
        _id: componentId
      });
      $scope.updateSingleComponent(componentId);
      $scope.componentEditing.testimonials.splice(index + 1, 0, newTestimonial);
      $scope.saveCustomComponent();
    };

    /*
     * @updateComponent
     * -
     */

    $scope.updateComponent = function (componentId) {
      //update single component
      return $scope.updateSingleComponent(componentId);
    };

    /*
     * @Media button click
     * -
     */

    $scope.insertMediaOnClick = function (componentId) {
      var editor = $scope.childScope.getActiveEditor();
      $scope.clickImageButton(editor, false);
    };


    /*
     * @validateHours
     *
     */

    $scope.validateHours = function (hours, index) {
      $scope.contactHours[index].valid = true;
      if (!hours.closed) {
        var startTime = hours.start;
        var endTime = hours.end;
        if (startTime && endTime) {
          startTime = startTime.split(" ")[1] == 'pm' && startTime.split(":")[0] != '12' ? parseInt(startTime.split(":")[0]) + 12 : parseInt(startTime.split(":")[0])
          endTime = endTime.split(" ")[1] == 'pm' && endTime.split(":")[0] != '12' ? parseInt(endTime.split(":")[0]) + 12 : parseInt(endTime.split(":")[0])
          startTime = parseInt(hours.start.split(":")[1]) == 30 ? startTime + 0.5 : startTime;
          endTime = parseInt(hours.end.split(":")[1]) == 30 ? endTime + 0.5 : endTime;
        }

        if (hours.split && $scope.componentEditing.splitHours) {
          angular.element("#business_hours_start_" + index).removeClass('has-error');
          angular.element("#business_hours_start2_" + index).removeClass('has-error');
          angular.element("#business_hours_end_" + index).removeClass('has-error');
          var startTime2 = hours.start2;
          var endTime2 = hours.end2;
          if (startTime2 && endTime2) {
            startTime2 = startTime2.split(" ")[1] == 'pm' && startTime2.split(":")[0] != '12' ? parseInt(startTime2.split(":")[0]) + 12 : parseInt(startTime2.split(":")[0])
            endTime2 = endTime2.split(" ")[1] == 'pm' && endTime2.split(":")[0] != '12' ? parseInt(endTime2.split(":")[0]) + 12 : parseInt(endTime2.split(":")[0])
            startTime2 = parseInt(hours.start2.split(":")[1]) == 30 ? startTime2 + 0.5 : startTime2;
            endTime2 = parseInt(hours.end2.split(":")[1]) == 30 ? endTime2 + 0.5 : endTime2;
          }


          var msg = ""
          if (startTime > endTime || startTime > startTime2 || startTime > endTime2) {
            if (startTime > endTime) {
              angular.element("#business_hours_start_" + index).addClass('has-error');
            } else if (startTime > startTime2) {
              angular.element("#business_hours_start_" + index).addClass('has-error');
            } else if (startTime > endTime2) {
              angular.element("#business_hours_start_" + index).addClass('has-error');
            }
            $scope.contactHours[index].valid = false;
          }
          if (endTime > startTime2 || endTime > endTime2) {

            if (endTime > startTime2) {
              angular.element("#business_hours_end_" + index).addClass('has-error');
            } else if (endTime > endTime2) {
              angular.element("#business_hours_end_" + index).addClass('has-error');
            }
            $scope.contactHours[index].valid = false;
          }
          if (startTime2 > endTime2) {
            angular.element("#business_hours_start2_" + index).addClass('has-error');
            $scope.contactHours[index].valid = false;
          }

        } else if (!hours.wholeday) {
          angular.element("#business_hours_start_" + index).removeClass('has-error');
          if (startTime > endTime) {
            angular.element("#business_hours_start_" + index).addClass('has-error');
            $scope.contactHours[index].valid = false;
          }
        }
      }

      var validate = _.where($scope.contactHours, {
        valid: false
      });
      if (validate && validate.length)
        $scope.contactHoursInvalid = true;
      else
        $scope.contactHoursInvalid = false;

    }

    $scope.checkForSaveBeforeLeave = function (url, reload) {
      $scope.changesConfirmed = true;
      var isDirty = false;
      var iFrame = document.getElementById("iframe-website");
      if ($scope.childScope.checkOrSetPageDirty) {
        var isDirty = $scope.childScope.checkOrSetPageDirty() || $scope.isDirty;
      }
      $scope.childScope.checkOrSetPageDirty(true);
      var redirectUrl = url;
      if (!redirectUrl)
        redirectUrl = $location.$$search['posthandle'] ? "/admin/#/website/posts" : "/admin/#/website/pages";
      if (isDirty) {
        $scope.updatePageComponents();
        if ($scope.childScope.updateBlogPageData)
          $scope.childScope.updateBlogPageData(iFrame);
        SweetAlert.swal({
            title: "Are you sure?",
            text: "You have unsaved data that will be lost",
            type: "warning",
            showCancelButton: true,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "Yes, save changes!",
            cancelButtonText: "No, do not save changes!",
            closeOnConfirm: false,
            closeOnCancel: false
          },
          function (isConfirm) {
            if (isConfirm) {
              SweetAlert.swal("Saved!", "Your edits were saved to the page.", "success");
              $scope.redirect = true;
              $scope.savePage();
              window.location = redirectUrl;
              if (reload)
                window.location.reload();

            } else {
              SweetAlert.swal("Cancelled", "Your edits were NOT saved.", "error");
              window.location = redirectUrl;
              if (reload)
                window.location.reload();
            }
          });
      } else {
          window.location = redirectUrl;
          if (reload)
            window.location.reload();
      }
    }
    $scope.createDuplicatePage = function (newPage) {
      $scope.validateNewPage(newPage);
      if (!$scope.newPageValidated) {
        toaster.pop('error', "Page Title or URL can not be blank.");
        return false;
      }
      WebsiteService.getSinglePage($scope.currentPage.websiteId, newPage.handle, function (data) {
        if (data && data._id) {
          toaster.pop('error', "Page URL " + newPage.handle, "Already exists");
          return false;
        }
        newPage.components = $scope.currentPage.components;
        WebsiteService.createDuplicatePage($scope.currentPage.websiteId, newPage, function (data) {
          $scope.duplicate = true;
          console.log("Duplicate Page Created");
          $scope.checkForSaveBeforeLeave('/admin/#/website/pages/?pagehandle=' + newPage.handle, true);
        })
      })
    }

    $scope.createDuplicatePost = function (newPost) {
      $scope.validateNewPost(newPost);
      if (!$scope.newPostValidated) {
        toaster.pop('error', "Post Title or URL can not be blank.");
        return false;
      }
      WebsiteService.getSinglePost($scope.currentPage.websiteId, newPost.post_url, function (data) {
        if (data && data._id) {
          toaster.pop('error', "Post URL " + newPost.post_url, "Already exists");
          return false;
        }

        var post_data = $scope.childScope.getBlogPost();
        newPost.post_content = post_data.post_content;
        newPost.post_tags = post_data.post_tags;
        newPost.post_author = post_data.post_author;
        newPost.post_category = post_data.post_category;
        newPost.post_excerpt = post_data.post_excerpt;
        newPost.featured_image = post_data.featured_image;
        newPost.publish_date = post_data.publish_date;
        WebsiteService.createPost(-1, newPost, function (data) {
          $scope.duplicate = true;
          console.log("Duplicate Post Created");
          window.location = '/admin/#/website/posts/?posthandle=' + newPost.post_url;
          window.location.reload();
        })
      })
    }
  }]);
})(angular);

'use strict';
/*global app, moment, angular*/
/*jslint unparam:true*/
/** 
 * controller for angular-aside
 * Off canvas side menu to use with ui-bootstrap. Extends ui-bootstrap's $modal provider.
 */
app.controller('AsideCtrl', ["$scope", "$aside", function ($scope, $aside) {
  $scope.openAside = function (position) {
    $aside.open({
      templateUrl: '/admin/assets/views/partials/settings.html',
      placement: position,
      size: 'lg',
      backdrop: true,
      controller: function ($scope, $modalInstance) {
        $scope.ok = function (e) {
          $modalInstance.close();
          e.stopPropagation();
        };
        $scope.cancel = function (e) {
          $modalInstance.dismiss();
          e.stopPropagation();
        };
      }
    });
  };
}]);

'use strict';
/*global app, moment, angular*/
/*jslint unparam:true*/
(function (angular) {
  app.controller('BillingCtrl', ["$scope", "$rootScope", "toaster", "$modal", "$location", "$window", "ProductService", "PaymentService", "UserService", "$q", "ToasterService", "ipCookie", function ($scope, $rootScope, toaster, $modal, $location, $window, ProductService, PaymentService, UserService, $q, ToasterService, ipCookie) {

    $scope.number = 1;

    $scope.plus = function () {
      $scope.number++;
    };

    /*
     * @closeModal
     * close the modal instance
     */

    $scope.closeModal = function () {
      $scope.modalInstance.close();
    };

    /*
     * @openModal
     * open any modal by passing modal id
     */

    $scope.openModal = function (modal) {
      $scope.modalInstance = $modal.open({
        templateUrl: modal,
        keyboard: false,
        backdrop: 'static',
        scope: $scope
      });
    };

    $scope._moment = function (_date, options) {
      if (_date.toString().length === 10) {
        _date = _date * 1000;
      }
      var formattedDate = moment(_date);

      if (options) {
        if (options.subtractNum && options.subtractType) {
          formattedDate = formattedDate.subtract(options.subtractNum, options.subtractType);
        }
        if (options.addNum && options.addType) {
          if($scope.planInterval == 'week')
          {
            formattedDate = formattedDate.add(7, options.addType);
          }
          else if($scope.planInterval == 'month')
          {
            formattedDate = formattedDate.add(1, 'months');
          }
          else if($scope.planInterval == 'year')
          {
            formattedDate = formattedDate.add(1, 'years');
          }
          else
          {
            formattedDate = formattedDate.add(options.addNum, options.addType);
          }
          console.log("Formatted date: ")
          console.log(formattedDate);
        }
      }
      return formattedDate.format("MMMM Do, YYYY");
    };

    $scope.changeInvoice = function (invoice, index) {
      if(invoice) {
        $scope.selectedInvoice = invoice;
        if(invoice.lines.data.length) {
          $scope.planInterval = _.last(invoice.lines.data).plan.interval;
        }
      }
      $scope.selectedItemIndex = index;
    };

    /*
     * @updateStripeIdFn
     * -
     */

    $scope.updateStripeIdFn = function (billing) {
      console.log('updateStripeIdFn >>>');
      $scope.currentUser.stripeId = billing.billing.stripeCustomerId;
      $scope.selectPlanView = 'plan';
    };

    /*
     * @invoicePageChangeFn
     * -
     */

    $scope.invoicePageChangeFn = function (invoiceCurrentPage) {
      var begin = ((invoiceCurrentPage - 1) * $scope.invoicePageLimit);
      var end = begin + $scope.invoicePageLimit;
      $scope.pagedInvoices = $scope.invoices.data.slice(begin, end);

    };

    /*
     * @getIndigenousProducts
     * -
     */

    $scope.currentAccount = {};
    $scope.planStatus = {};
    $scope.planlist = {
      list: []
    };
    $scope.addOns = {
        list: []
    };
    $scope.selectedPlan = {};
    $scope.planInterval = "";
    $scope.selectedAddOns = [];

    $scope.customer_id=0;
    $scope.paymentId=0;

    //get plans
    ProductService.getIndigenousProducts(function (products) {
      products.forEach(function (product){
        var productAttrs = product.product_attributes;
        var hasStripePlans = productAttrs.hasOwnProperty('stripePlans') && productAttrs.stripePlans.length;
        // var promises = [];

        var activeStripePlan = _.findWhere(productAttrs.stripePlans, {active: true});

        if(product.name.contains('Managed Services')) {
            product.managedServices = true;
        } else {
            product.managedServices = false;
        }

        if (hasStripePlans && activeStripePlan) {
          PaymentService.getIndigenousStripePlan(activeStripePlan.id, function(plan){
            console.log(plan);
            productAttrs.stripePlans[0] = plan; //populate full plan data
            $scope.planlist.list.push(product);
          });
        } else {
            $scope.addOns.list.push(product);
        }

      });

      $scope.getAccountData();

    });


    $scope.subscriptionSelected = false;

    /*
     * @switchSubscriptionPlanFn
     * -
     */

    $scope.switchSubscriptionPlanFn = function (planId) {
      $scope.selectedPlan = $scope.planlist.list.filter(function(plan) {
        return plan.product_attributes.stripePlans[0].id === planId;
      })[0];
      $scope.subscriptionSelected = planId !== null ? true : false;
      $scope.selectedAddOns = [];
      // $scope.selectedPlan.plan.id = planId;
      // $scope.savePlanFn($scope.subscription.plan.id);
    };

    $scope.$watch('selectedPlan', function(){
      console.warn('$scope.selectedPlan changed: ');
      console.warn($scope.selectedPlan);
    });

    $scope.addInvoiceItem = function(productId) {
        console.log('added: ' + productId);
       $scope.selectedAddOns.push(productId);
    };

    $scope.removeInvoiceItem = function(productId) {
        console.log('removed: ' + productId);
        $scope.selectedAddOns = _.without($scope.selectedAddOns, productId);
    };

    $scope.isSelectedAddon = function(productId) {
        return _.contains($scope.selectedAddOns, productId);
        //return false;
    };
    /*
     * @chooseFirstTime
     * -
     */

    // $scope.chooseFirstTime = function () {
    //   $('#changeCardModal').modal('show');
    //   $scope.firstTime = true;
    //   //set trigger on success of add card service
    // };

    /*
     * @savePlanFn
     * - set new active plan for user
     * - TODO: setup fee, coupon
     */

    $scope.savePlanFn = function (planId, coupon) {
      console.log('savePlanFn >>');

      if ($scope.account.billing.stripeCustomerId) {
        PaymentService.postSubscribeToIndigenous($scope.account.billing.stripeCustomerId, planId, null, $scope.planStatus[planId], $scope.selectedAddOns, coupon, function (subscription) {
          $scope.cancelOldSubscriptionsFn();
          $scope.selectedPlan = subscription;
          console.log('$scope.selectedPlan:');
          console.log($scope.selectedPlan);
          PaymentService.getUpcomingInvoice($scope.account.billing.stripeCustomerId, function (upcomingInvoice) {
            $scope.upcomingInvoice = upcomingInvoice;
          });
          PaymentService.getInvoicesForAccount(function (invoices) {
            $scope.invoices = invoices;
            $scope.pagedInvoices = $scope.invoices.data.slice(0, $scope.invoicePageLimit);
          });
          ToasterService.setPending('success', 'Subscribed to new plan.');
          $scope.getAccountData();
          $window.location.reload(true);
        }, function (err) {
          ToasterService.clearAll();
          ToasterService.show('error', err.status);
          $scope.selectedPlan.paymentProcessing = false;
        });
      } else {
        ToasterService.setPending('error', 'No Stripe customer ID.');
      }

      $scope.selectPlanView = 'card';
    };

    /*
     * @cancelOldSubscriptionsFn
     * - cancel all other subscriptions for this user
     */

    $scope.cancelOldSubscriptionsFn = function () {
      $scope.subscriptionsCompleteList.data.forEach(function (value) {
        PaymentService.deleteStripeSubscription(value.customer, value.id, function (subscription) {
          console.log('subscription ', subscription);
        });
      });
    };

    $scope.hasCard = false;

    /*
     * @watch:currentUser.stripeId
     * -
     */

    $scope.$watch('currentUser.stripeId', function (newValue) {
      console.log('currentUser.stripeId >>> ', newValue);
      if (newValue) {
        PaymentService.getListStripeSubscriptions(newValue, function (subscriptions) {
          $scope.subscriptionsCompleteList = subscriptions;
          // $scope.selectedPlan = subscriptions.data[0];
        });

        //PaymentService.getUpcomingInvoice(newValue, function (upcomingInvoice) {
        //  $scope.upcomingInvoice = upcomingInvoice;
        //});

        var account_cookie = ipCookie("socialAccount");
        if (account_cookie !== undefined) {
          toaster.pop('success', account_cookie, '<div class="mb15"></div><a href="/admin#/customer?onboarding=create-contact" class="btn btn-primary">Next Step: Import/Create Contacts</a>', 0, 'trustedHtml');
          ipCookie.remove("socialAccount", {
            path: "/"
          });
        }
        if ($location.$$search.onboarding) {
          $scope.showOnboarding = true;
        }
        if ($scope.currentUser.stripeId) {
          PaymentService.getInvoicesForAccount(function (invoices) {
            $scope.invoices = invoices;
            $scope.pagedInvoices = $scope.invoices.data.slice(0, $scope.invoicePageLimit);
            $scope.showToaster = true;
            ToasterService.processPending();
            ToasterService.processHtmlPending();
          });

          PaymentService.getTransactionsForAccount(function (invoices) {
            $scope.transactions = invoices;
            $scope.pagedTransactions = $scope.transactions.data.slice(0, $scope.invoicePageLimit);
            $scope.showToaster = true;
            ToasterService.processPending();
            ToasterService.processHtmlPending();
          });
          //console.log('before call to cards:', $scope.account);
          PaymentService.getCustomerCards($scope.account.billing.stripeCustomerId, function (cards) {
            if (cards.data.length) {
              $scope.hasCard = true;
            }
        }, function() {});

          //TODO: need this?
          // if ($scope.firstTime) {
          //   $scope.savePlanFn($scope.selectedPlan.plan.id);
          //   $scope.firstTime = false;
          // }
        }
      }
    });

    //set the onboarding min requirements to true because there are none
    $scope.minRequirements = true;

    /*
     * @getAccount
     * -
     */

    $scope.getAccountData = function (){
      UserService.getAccount(function (account) {
        if (account.locked_sub === undefined || account.locked_sub === true) {
          ToasterService.show('warning', "No Subscription");
        }
        ToasterService.processPending();
        ToasterService.processHtmlPending();
        $scope.account = account;
        $scope.selectedPlan.paymentProcessing = false;

        console.warn('BillingCtrl, received account:\n', account);

        if (account.billing.subscriptionId) {
          PaymentService.getStripeSubscription(
            account.billing.stripeCustomerId,
            account.billing.subscriptionId,
            function(subscription) {
              // $scope.subscription = subscription;
              $scope.selectedPlan = $scope.planlist.list.filter(function(plan) {
                return plan.product_attributes.stripePlans[0].id === subscription.plan.id;
              })[0];
              console.warn('BillingCtrl, received subscription:\n', subscription);
          });
        }

        if (account.billing.stripeCustomerId) {
          PaymentService.getUpcomingInvoice(account.billing.stripeCustomerId, function (upcomingInvoice) {
            $scope.upcomingInvoice = upcomingInvoice;
            $scope.planInterval = upcomingInvoice.lines.data[0].plan.interval;
            console.log("upcoming invoice");
            console.log(upcomingInvoice);
          });
        }

        // $scope.currentAccount.membership = account.billing.subscriptionId;
        /*
         * If the account is locked, do not allow state changes away from account.
         * Commenting this out until we know for sure that we should allow logins from locked accounts.
         */
        if (account.locked_sub === true) {
          ToasterService.show('error', 'No Indigenous Subscription found.  Please update your billing information.');
          $rootScope.$on('$stateChangeStart',
            function (event) {
              event.preventDefault();
              ToasterService.show('error', 'No Indigenous Subscription found.  Please update your billing information.');
              // transitionTo() promise will be rejected with
              // a 'transition prevented' error
            });
        }
      });
    };

  }]);
}(angular));

'use strict';
/**
 * Controller of the angularBootstrapCalendarApp
*/
app.controller('CalendarCtrl', ["$scope", "$aside", "moment", "SweetAlert", function ($scope, $aside, moment, SweetAlert) {

    var date = new Date();
    var d = date.getDate();
    var m = date.getMonth();
    var y = date.getFullYear();

    $scope.events = [
	  {
	      title: 'Birthday Party',
	      type: 'home',
	      starts_at: new Date(y, m, 5, 19, 0),
	      ends_at: new Date(y, m, 5, 22, 30)
	  },
	  {
	      title: 'AngularJS Seminar',
	      type: 'off-site-work',
	      starts_at: new Date(y, m, 8, 10, 30),
	      ends_at: new Date(y, m, 9, 18, 30)
	  },
      {
          title: 'Event 1',
          type: 'job',
          starts_at: new Date(y, m, d - 5),
          ends_at: new Date(y, m, d - 2)
      },
      {
          title: 'Event 2',
          type: 'cancelled',
          starts_at: new Date(y, m, d - 3, 16, 0),
          ends_at: new Date(y, m, d - 3, 18, 0)
      },
      {
          title: 'This is a really long event title',
          type: 'to-do',
          starts_at: new Date(y, m, d + 1, 19, 0),
          ends_at: new Date(y, m, d + 1, 22, 30)
      },
    ];

    $scope.calendarView = 'month';
    $scope.calendarDay = new Date();

    function showModal(action, event) {
        var modalInstance = $aside.open({
            templateUrl: 'calendarEvent.html',
            placement: 'right',
            size: 'sm',
            backdrop: true,
            controller: function ($scope, $modalInstance) {
                $scope.$modalInstance = $modalInstance;
                $scope.action = action;
                $scope.event = event;
                $scope.cancel = function () {
                    $modalInstance.dismiss('cancel');
                };
                $scope.deleteEvent = function () {
                    $modalInstance.close($scope.event, $scope.event);
                };

            }
        });
        modalInstance.result.then(function (selectedEvent, action) {

            $scope.eventDeleted(selectedEvent);

        });
    }


    $scope.eventClicked = function (event) {
        showModal('Clicked', event);
    };
    $scope.addEvent = function () {
        $scope.events.push({
            title: 'New Event',
            starts_at: new Date(y, m, d, 10, 0),
            ends_at: new Date(y, m, d, 11, 0),
            type: 'job'
        });
        $scope.eventEdited($scope.events[$scope.events.length - 1]);
    };

    $scope.eventEdited = function (event) {
        showModal('Edited', event);
    };

    $scope.eventDeleted = function (event) {

        SweetAlert.swal({
            title: "Are you sure?",
            text: "Your will not be able to recover this event!",
            type: "warning",
            showCancelButton: true,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "Yes, delete it!",
            cancelButtonText: "No, cancel plx!",
            closeOnConfirm: false,
            closeOnCancel: false
        }, function (isConfirm) {
            if (isConfirm) {
                $scope.events.splice(event.$id, 1);
                SweetAlert.swal("Deleted!", "Event has been deleted.", "success");
            } else {
                SweetAlert.swal("Cancelled", "Event is safe :)", "error");
            }
        });
    };

    $scope.setCalendarToToday = function () {
        $scope.calendarDay = new Date();
    };

    $scope.toggle = function ($event, field, event) {
        $event.preventDefault();
        $event.stopPropagation();

        event[field] = !event[field];
    };



}]);

'use strict';
/**
 * controller for products
 */
(function (angular) {
  app.controller('CampaignsCtrl', ["$scope", "$timeout", "$location", "toaster", "$filter", "$modal", "CampaignService", "$window", '$state', 'AccountService', function ($scope, $timeout, $location, toaster, $filter, $modal, CampaignService, $window, $state, AccountService) {

    $scope.Math = $window.Math;
    // $route.reload();

    /*
     * @getCampaigns
     * get all campaigns
     */
    var fetchCampaigns = function() {
      CampaignService.getCampaigns(function (campaigns) {
        console.log('campaigns >>> ', campaigns);
        $timeout(function() {
          $scope.$apply(function() {
            $scope.campaigns = campaigns;
            $timeout(fetchCampaigns, 10000);
          });
        });
      });
    }

    fetchCampaigns();

    $scope.tableView = 'list';

    AccountService.getAccount(function (_account) {
      $scope.account = _account;
    });

    $scope.viewSingle = function (campaign) {
      // var tableState = $scope.getSortOrder();
      // $state.current.sort = tableState.sort;
      if ($scope.account.showhide.ssbEmail) {
        $state.go('app.emailCampaign', {id: campaign._id});
      } else {
        $location.path('/marketing/campaigns/' + campaign._id);
      }
    };

  }]);
})(angular);

'use strict';
/**
 * controller for Messages
 */
app.controller('ChatCtrl', ["$scope", function ($scope) {

    $scope.selfIdUser = 50223456;
    $scope.otherIdUser = 50223457;
    $scope.setOtherId = function (value) {

        $scope.otherIdUser = value;
    };
    var exampleDate = new Date().setTime(new Date().getTime() - 240000 * 60);

    $scope.chat = [{
        "user": "Peter Clark",
        "avatar": "assets/images/avatar-1.jpg",
        "to": "Nicole Bell",
        "date": exampleDate,
        "content": "Hi, Nicole",
        "idUser": 50223456,
        "idOther": 50223457
    }, {
        "user": "Peter Clark",
        "avatar": "assets/images/avatar-1.jpg",
        "to": "Nicole Bell",
        "date": new Date(exampleDate).setTime(new Date(exampleDate).getTime() + 1000 * 60),
        "content": "How are you?",
        "idUser": 50223456,
        "idOther": 50223457
    }, {
        "user": "Nicole Bell",
        "avatar": "assets/images/avatar-2.jpg",
        "to": "Peter Clark",
        "date": new Date(exampleDate).setTime(new Date(exampleDate).getTime() + 1000 * 60),
        "content": "Hi, i am good",
        "idUser": 50223457,
        "idOther": 50223456
    }, {
        "user": "Peter Clark",
        "avatar": "assets/images/avatar-1.jpg",
        "to": "Nicole Bell",
        "date": new Date(exampleDate).setTime(new Date(exampleDate).getTime() + 1000 * 60),
        "content": "Glad to see you ;)",
        "idUser": 50223456,
        "idOther": 50223457
    }, {
        "user": "Nicole Bell",
        "avatar": "assets/images/avatar-2.jpg",
        "to": "Peter Clark",
        "date": new Date(exampleDate).setTime(new Date(exampleDate).getTime() + 65000 * 60),
        "content": "What do you think about my new Dashboard?",
        "idUser": 50223457,
        "idOther": 50223456
    }, {
        "user": "Nicole Bell",
        "avatar": "assets/images/avatar-2.jpg",
        "to": "Peter Clark",
        "date": new Date(exampleDate).setTime(new Date(exampleDate).getTime() + 128000 * 60),
        "content": "Alo...",
        "idUser": 50223457,
        "idOther": 50223456
    }, {
        "user": "Nicole Bell",
        "avatar": "assets/images/avatar-2.jpg",
        "to": "Peter Clark",
        "date": new Date(exampleDate).setTime(new Date(exampleDate).getTime() + 128000 * 60),
        "content": "Are you there?",
        "idUser": 50223457,
        "idOther": 50223456
    }, {
        "user": "Peter Clark",
        "avatar": "assets/images/avatar-1.jpg",
        "to": "Nicole Bell",
        "date": new Date(exampleDate).setTime(new Date(exampleDate).getTime() + 1000 * 60),
        "content": "Hi, i am here",
        "idUser": 50223456,
        "idOther": 50223457
    }, {
        "user": "Peter Clark",
        "avatar": "assets/images/avatar-1.jpg",
        "to": "Nicole Bell",
        "date": new Date(exampleDate).setTime(new Date(exampleDate).getTime() + 1000 * 60),
        "content": "Your Dashboard is great",
        "idUser": 50223456,
        "idOther": 50223457
    }, {
        "user": "Nicole Bell",
        "avatar": "assets/images/avatar-2.jpg",
        "to": "Peter Clark",
        "date": new Date(exampleDate).setTime(new Date(exampleDate).getTime() + 230000 * 60),
        "content": "How does the binding and digesting work in AngularJS?, Peter? ",
        "idUser": 50223457,
        "idOther": 50223456
    }, {
        "user": "Peter Clark",
        "avatar": "assets/images/avatar-1.jpg",
        "to": "Nicole Bell",
        "date": new Date(exampleDate).setTime(new Date(exampleDate).getTime() + 238000 * 60),
        "content": "oh that's your question?",
        "idUser": 50223456,
        "idOther": 50223457
    }, {
        "user": "Peter Clark",
        "avatar": "assets/images/avatar-1.jpg",
        "to": "Nicole Bell",
        "date": new Date(exampleDate).setTime(new Date(exampleDate).getTime() + 238000 * 60),
        "content": "little reduntant, no?",
        "idUser": 50223456,
        "idOther": 50223457
    }, {
        "user": "Peter Clark",
        "avatar": "assets/images/avatar-1.jpg",
        "to": "Nicole Bell",
        "date": new Date(exampleDate).setTime(new Date(exampleDate).getTime() + 238000 * 60),
        "content": "literally we get the question daily",
        "idUser": 50223456,
        "idOther": 50223457
    }, {
        "user": "Nicole Bell",
        "avatar": "assets/images/avatar-2.jpg",
        "to": "Peter Clark",
        "date": new Date(exampleDate).setTime(new Date(exampleDate).getTime() + 238000 * 60),
        "content": "I know. I, however, am not a nerd, and want to know",
        "idUser": 50223457,
        "idOther": 50223456
    }, {
        "user": "Peter Clark",
        "avatar": "assets/images/avatar-1.jpg",
        "to": "Nicole Bell",
        "date": new Date(exampleDate).setTime(new Date(exampleDate).getTime() + 238000 * 60),
        "content": "for this type of question, wouldn't it be better to try Google?",
        "idUser": 50223456,
        "idOther": 50223457
    }, {
        "user": "Nicole Bell",
        "avatar": "assets/images/avatar-2.jpg",
        "to": "Peter Clark",
        "date": new Date(exampleDate).setTime(new Date(exampleDate).getTime() + 238000 * 60),
        "content": "Lucky for us :)",
        "idUser": 50223457,
        "idOther": 50223456
    }, {
        "user": "Steven Thompson",
        "avatar": "assets/images/avatar-3.jpg",
        "to": "Peter Clark",
        "date": new Date(exampleDate).setTime(new Date(exampleDate).getTime() + 1000 * 60),
        "content": "Hi, Peter. I'd like to start using AngularJS.",
        "idUser": 50223458,
        "idOther": 50223456
    }, {
        "user": "Steven Thompson",
        "avatar": "assets/images/avatar-3.jpg",
        "to": "Peter Clark",
        "date": new Date(exampleDate).setTime(new Date(exampleDate).getTime() + 1000 * 60),
        "content": "There are many differences from jquery?",
        "idUser": 50223458,
        "idOther": 50223456
    }, {
        "user": "Peter Clark",
        "avatar": "assets/images/avatar-1.jpg",
        "to": "Steven Thompson",
        "date": new Date(exampleDate).setTime(new Date(exampleDate).getTime() + 5000 * 60),
        "content": "Enough!",
        "idUser": 50223456,
        "idOther": 50223458
    }, {
        "user": "Peter Clark",
        "avatar": "assets/images/avatar-1.jpg",
        "to": "Steven Thompson",
        "date": new Date(exampleDate).setTime(new Date(exampleDate).getTime() + 5000 * 60),
        "content": "In jQuery, you design a page, and then you make it dynamic...",
        "idUser": 50223456,
        "idOther": 50223458
    }, {
        "user": "Peter Clark",
        "avatar": "assets/images/avatar-1.jpg",
        "to": "Steven Thompson",
        "date": new Date(exampleDate).setTime(new Date(exampleDate).getTime() + 5000 * 60),
        "content": "but in AngularJS, you must start from the ground up with your architecture in mind",
        "idUser": 50223456,
        "idOther": 50223458
    }, {
        "user": "Steven Thompson",
        "avatar": "assets/images/avatar-3.jpg",
        "to": "Peter Clark",
        "date": new Date(exampleDate).setTime(new Date(exampleDate).getTime() + 7000 * 60),
        "content": "ok!",
        "idUser": 50223458,
        "idOther": 50223456
    }, {
        "user": "Steven Thompson",
        "avatar": "assets/images/avatar-3.jpg",
        "to": "Peter Clark",
        "date": new Date(exampleDate).setTime(new Date(exampleDate).getTime() + 7000 * 60),
        "content": "could you give me some lessons?",
        "idUser": 50223458,
        "idOther": 50223456
    }, {
        "user": "Peter Clark",
        "avatar": "assets/images/avatar-1.jpg",
        "to": "Steven Thompson",
        "date": new Date(exampleDate).setTime(new Date(exampleDate).getTime() + 7000 * 60),
        "content": "sure!",
        "idUser": 50223456,
        "idOther": 50223458
    }, {
        "user": "Steven Thompson",
        "avatar": "assets/images/avatar-3.jpg",
        "to": "Peter Clark",
        "date": new Date(exampleDate).setTime(new Date(exampleDate).getTime() + 7000 * 60),
        "content": "Thanks a lot!",
        "idUser": 50223458,
        "idOther": 50223456
    }, {
        "user": "Ella Patterson",
        "avatar": "assets/images/avatar-4.jpg",
        "to": "Peter Clark",
        "date": new Date(exampleDate).setTime(new Date(exampleDate).getTime() + 16700 * 60),
        "content": "Peter what can you tell me about the new marketing project?",
        "idUser": 50223459,
        "idOther": 50223456
    }, {
        "user": "Peter Clark",
        "avatar": "assets/images/avatar-1.jpg",
        "to": "Steven Thompson",
        "date": new Date(exampleDate).setTime(new Date(exampleDate).getTime() + 18000 * 60),
        "content": "Well, there is a lot to say. Are you free tomorrow?",
        "idUser": 50223456,
        "idOther": 50223459
    }, {
        "user": "Ella Patterson",
        "avatar": "assets/images/avatar-4.jpg",
        "to": "Peter Clark",
        "date": new Date(exampleDate).setTime(new Date(exampleDate).getTime() + 19700 * 60),
        "content": "Yes",
        "idUser": 50223459,
        "idOther": 50223456
    }, {
        "user": "Peter Clark",
        "avatar": "assets/images/avatar-1.jpg",
        "to": "Steven Thompson",
        "date": new Date(exampleDate).setTime(new Date(exampleDate).getTime() + 19700 * 60),
        "content": "OK, we will have a meeting tomorrow afternoon",
        "idUser": 50223456,
        "idOther": 50223459
    }, {
        "user": "Kenneth Ross",
        "avatar": "assets/images/avatar-5.jpg",
        "to": "Peter Clark",
        "date": new Date(exampleDate).setTime(new Date(exampleDate)),
        "content": "Mr. Clark, congratulations for your new project",
        "idUser": 50223460,
        "idOther": 50223456
    }, {
        "user": "Peter Clark",
        "avatar": "assets/images/avatar-1.jpg",
        "to": "Kenneth Ross",
        "date": new Date(exampleDate).setTime(new Date(exampleDate)),
        "content": "Thank You very much Mr. Ross",
        "idUser": 50223456,
        "idOther": 50223460
    }];

    $scope.sendMessage = function () {
        var newMessage = {
            "user": "Peter Clark",
            "avatar": "assets/images/avatar-1.jpg",
            "date": new Date(),
            "content": $scope.chatMessage,
            "idUser": $scope.selfIdUser,
            "idOther": $scope.otherIdUser
        };
        $scope.chat.push(newMessage);
        $scope.chatMessage = '';

    };
}]);

'use strict';
/*global app, moment, angular*/
/*jslint unparam:true*/
app.controller('CkeditorCtrl', ["$scope", function ($scope) {

  // Editor options.
  $scope.options = {
    language: 'en',
    allowedContent: true,
    entities: false
  };

  // Called when the editor is completely ready.
  $scope.onReady = function () {
    console.log('ckeditor ready');
  };
}]);

'use strict';
/*global app, moment, angular, $$*/
/*jslint unparam:true*/
(function (angular) {
  app.controller('ContactDetailCtrl', ["$scope", "$rootScope", "$location", "$modal", "toaster", "$stateParams", "contactConstant", "ContactService", "KeenService", "CommonService", "UserService", 'SweetAlert', '$state', 'OrderService', 'formValidations', 'orderConstant', '$window', '$timeout', function ($scope, $rootScope, $location, $modal, toaster, $stateParams, contactConstant, ContactService, KeenService, CommonService, UserService, SweetAlert, $state, OrderService, formValidations, orderConstant, $window, $timeout) {

    /*
     * @openModal
     * -
     */

    $scope.openModal = function (modal) {
      $scope.modalInstance = $modal.open({
        templateUrl: modal,
        keyboard: false,
        backdrop: 'static',
        scope: $scope
      });
    };

    /*
     * @openMediaModal
     * -
     */

    $scope.openMediaModal = function () {
      $scope.showInsert = true;
      $scope.modalInstance = $modal.open({
        templateUrl: 'media-modal',
        controller: 'MediaModalCtrl',
        keyboard: false,
        backdrop: 'static',
        size: 'lg',
        resolve: {
          showInsert: function () {
            return $scope.showInsert;
          },
          insertMedia: function () {
            return $scope.insertPhoto;
          },
          isSingleSelect: function () {
              return true;
          }
        }
      });
    };

    /*
     * @closeModal
     * -
     */

    $scope.closeModal = function () {
      $scope.modalInstance.close();
    };

    $scope.formValidations = formValidations;
    $scope.orderConstant = orderConstant;

    $scope.ip_geo_address = '';
    $scope.location = {};
    $scope.loadingMap = true;

    $scope.data = {
      fullName: ''
    };

    if ($location.search().order) {
      $scope.redirectToOrder = true;
      $scope.orderId=$location.search().id;
      $stateParams.orderId=$scope.orderId;
      //alert("orderId: "+$scope.orderId);
    }

    $scope.backToOrder = function()
    {
      if($stateParams.orderId)
      {
        $location.path('/commerce/orders/' + $stateParams.orderId);
      }
      else
      {
        $window.history.back();
      }

    };
    /*
     * @addNote
     * add a note to an order
     */

    $scope.newNote = {};

    $scope.addNote = function (_note) {
      var date = moment();
      var _noteToPush = {
        note: _note,
        user_id: $scope.currentUser._id,
        date: date.toISOString()
      };
      if (!$scope.contact.notes)
        $scope.contact.notes = [];
      $scope.contact.notes.push(_noteToPush);
      $scope.matchUsers($scope.contact);

      $scope.newNote.text = '';

      $scope.contact_data = $scope.contact_data || {};
      $scope.contact_data.tags = $scope.unsetTags();
      console.log('contact_data:', $scope.contact_data);
      ContactService.saveContact($scope.contact_data, function (contact) {
        $scope.contact = contact;
        $scope.setTags();
        $scope.originalContact = angular.copy($scope.contact);
        toaster.pop('success', 'Notes Added.');
      });
    };

    /*
     * @getUsers
     * get all users for this account
     */

    UserService.getUsers(function (users) {
      $scope.users = users;
      $scope.getContact();
    });

    /*
     * @matchUsers
     * match users to the order notes
     */
    $scope.matchUsers = function (contact) {
      var notes = contact.notes;
      if (notes && notes.length > 0) {

        _.each(notes, function (_note) {
          var matchingUser = _.find($scope.users, function (_user) {
            return _user._id === _note.user_id;
          });

          // This code is used to show related user profile image in notes

          if (matchingUser) {
            if(matchingUser.profilePhotos && matchingUser.profilePhotos[0])
            _note.user_profile_photo = matchingUser.profilePhotos[0];
          }
        });

        return notes;
      }
    };

    /*
     * @pushLocalNote
     * push a recently created note to the ui
     */

    $scope.pushLocalNote = function (contact) {
      contact.notes = $scope.matchUsers(contact);
      var noteToPush = contact.notes[contact.notes.length - 1];
      $scope.contact.notes.push(noteToPush);
    };

    /*
     * @getContact
     * -
     */

    $scope.getContact = function () {
      console.log('getContact >>>');
      ContactService.getContact($stateParams.contactId, function (contact, error) {
        if(error){
            toaster.pop('warning', error.message);
            if(error.code === 404)
                $location.path('/contacts');
            return;
        }
        contact.notes = $scope.matchUsers(contact);
        $scope.contact = contact;
        $scope.setTags();
        $scope.setDefaults();
        $scope.data.fullName = [$scope.contact.first, $scope.contact.middle, $scope.contact.last].join(' ').trim();
        $scope.getMapData();
        // $scope.contactLabel = ContactService.contactLabel(contact);
        // $scope.checkBestEmail = ContactService.checkBestEmail(contact);
      });
    };

    $scope.resizeMap = function () {
      $scope.loadingMap = true;
      $timeout(function () {
        $scope.loadingMap = false;
      }, 500);
    };

    /*
     * @displayAddressFormat
     * -
     */

    $scope.displayAddressFormat = function (address) {
      return _.filter([address.address, address.address2, address.city, address.state, address.zip], function (str) {
        return str !== "";
      }).join(",");
    };

    /*
     * @refreshMap
     * -
     */

    $scope.refreshMap = function (fn) {
      if ($scope.contact.details.length !== 0 && $scope.contact.details[0].addresses && $scope.contact.details[0].addresses.length !== 0) {
        var formattedAddress = angular.copy($scope.contact.details[0].addresses[0]);
        formattedAddress.address2 = '';
        $scope.ip_geo_address = $scope.displayAddressFormat(formattedAddress);
        $scope.city = $scope.contact.details[0].addresses[0].city;
        $scope.loadingMap = false;
      }
      var validMapData = false;
      if ($scope.ip_geo_address && !angular.equals($scope.originalContact.details[0].addresses[0], $scope.contact.details[0].addresses[0])) {
        ContactService.getGeoSearchAddress($scope.ip_geo_address, function (data) {
          if (data.error === undefined) {
            $scope.location.lat = parseFloat(data.lat);
            $scope.location.lon = parseFloat(data.lon);
            $scope.contact_data.details[0].addresses[0].lat = $scope.location.lat;
            $scope.contact_data.details[0].addresses[0].lon = $scope.location.lon;
            if ($scope.markers && $scope.markers.mainMarker) {
              $scope.markers.mainMarker.lat = parseFloat(data.lat);
              $scope.markers.mainMarker.lon = parseFloat(data.lon);
            }
            $scope.loadingMap = false;
            validMapData = true;
          } else {
            $scope.loadingMap = false;
          }

          if (fn) {
            fn(validMapData);
          }
        });
      } else {
        if (fn) {
          fn(true);
        }
      }
    };

    $scope.getMapData = function () {
      var _firstAddress;

      if ($scope.contact.details[0].addresses.length > -1) {
        _firstAddress = angular.copy($scope.contact.details[0].addresses[0]);
      }

      //contact has no address
      if (!_firstAddress) {
        $scope.loadingMap = false;
        $scope.originalContact = angular.copy($scope.contact);
      } else {
        //contact has address and lat/lon
        if (_firstAddress.lat && _firstAddress.lon) {
          $scope.originalContact = angular.copy($scope.contact);
          $scope.showMap(_firstAddress.lat, _firstAddress.lon);
        } else {
          //contact has address but no lat/lon
          //if contact has a session id get data from keen
          if ($scope.contact.sessionId !== undefined) {
            var keenParams = {
              event_collection: 'session_data',
              filters: [{
                "property_name": "sessionId",
                "operator": "eq",
                "property_value": $scope.contact.sessionId
              }]
            };
            KeenService.singleExtraction(keenParams, function (data) {
              var keepGoing = true;
              data.result.forEach(function (value, index) {
                if (keepGoing && value.ip_geo_info && value.ip_geo_info.city) {
                  $scope.ip_geo_address = _.filter([value.ip_geo_info.city, value.ip_geo_info.province, value.ip_geo_info.postal_code], function (str) {
                    $scope.city = value.ip_geo_info.city;
                    return (str !== "" || str !== undefined || str !== null);
                  }).join(",");
                  keepGoing = false;
                  $scope.loadingMap = false;
                } else if (keepGoing && value.ip_geo_info_gen && value.ip_geo_info_gen.country) {
                  $scope.ip_geo_address = _.filter([value.ip_geo_info_gen.city, value.ip_geo_info_gen.province, value.ip_geo_info_gen.postal_code], function (str) {
                    $scope.city = value.ip_geo_info_gen.city;
                    return (str !== "" || str !== undefined || str !== null);
                  }).join(",");
                  keepGoing = false;
                  $scope.loadingMap = false;
                }

              });

              $scope.localtime = moment().format('h:mm a');
              if ($scope.ip_geo_address) {
                ContactService.getGeoSearchAddress($scope.ip_geo_address, function (data) {
                  if (data.error === undefined) {
                    $scope.location.lat = parseFloat(data.lat);
                    $scope.location.lon = parseFloat(data.lon);
                    $scope.loadingMap = false;
                    $scope.showMap(data.lat, data.lon);
                  } else {
                    $scope.loadingMap = false;
                  }
                  $scope.originalContact = angular.copy($scope.contact);
                });
              } else {
                $scope.loadingMap = false;
                $scope.originalContact = angular.copy($scope.contact);
              }
            });
          } else {
            //get lat/lon from address
            _firstAddress.address2 = '';
            $scope.convertAddressToLatLon(_firstAddress, function (data) {
              if (data) {
                //save updated lat/lon
                _firstAddress.lat = parseFloat(data.lat);
                _firstAddress.lon = parseFloat(data.lon);
                $scope.contactSaveFn(true);

                $scope.showMap(data.lat, data.lon);
              }
              $scope.originalContact = angular.copy($scope.contact);
              $scope.loadingMap = false;
            });
            $scope.originalContact = angular.copy($scope.contact);
          }

        }
      }
    };

    $scope.convertAddressToLatLon = function (_address, fn) {
      if ($scope.displayAddressFormat(_address)) {
        ContactService.getGeoSearchAddress($scope.displayAddressFormat(_address), function (data) {
          if (data.error === undefined) {
            fn(data);
          } else {
            console.warn(data.error);
            fn();
          }
        });
      } else {
        fn();
      }
    };

    $scope.showMap = function (_lat, _lon) {
      $scope.loadingMap = false;
      $scope.location.lat = parseFloat(_lat);
      $scope.location.lon = parseFloat(_lon);
      if ($scope.markers && $scope.markers.mainMarker) {
        $scope.markers.mainMarker.lat = parseFloat(_lat);
        $scope.markers.mainMarker.lon = parseFloat(_lon);
      }
    };

    /*
     * @contact defaults
     * -
     */

    $scope.contactId = $stateParams.contactId;
    $scope.modifyAddress = {};
    $scope.saveLoading = false;
    $scope.countries = contactConstant.country_codes;
    $scope.saveContactDisabled = true;
    $scope.contact = {
      _id: null,
      accountId: $$.server.accountId,
      devices: [{
        _id: CommonService.generateUniqueAlphaNumericShort(),
        serial: ''
      }],
      details: [{
        _id: CommonService.generateUniqueAlphaNumericShort(),
        type: 'lo',
        emails: [{
          _id: CommonService.generateUniqueAlphaNumericShort(),
          email: ''
        }],
        phones: [{
          _id: CommonService.generateUniqueAlphaNumericShort(),
          type: 'm',
          number: '',
          extension: '',
          default: false
        }],
        addresses: [{
          _id: CommonService.generateUniqueAlphaNumericShort(),
          address: '',
          address2: '',
          state: '',
          zip: '',
          country: '',
          defaultShipping: false,
          defaultBilling: false,
          city: '',
          countryCode: '',
          displayName: '',
          lat: '',
          lon: ''
        }]

      }],
    };

    $scope.inValidateTags = function()
    {
      var status = false;
      if(!$scope.contact_data.tags)
        status = true;
      else if(!$scope.contact_data.tags.length)
        status = true;
      return status;
    }

    $scope.contactSaveFn = function (hideToaster, showAlert, newUrl) {
      $scope.pageSaving = true;
      $scope.saveLoading = true;

      if ($scope.checkContactValidity()) {

        $scope.unsetTags();

        if(!hideToaster && $scope.inValidateTags())
        {
          $scope.saveLoading = false;
          if(showAlert)
            SweetAlert.swal("Warning", "Your edits were NOT saved.", "error");
          toaster.pop('warning', 'Please add at least one tag.');
          return;
        }

        // if ($scope.contact_data.details[0].addresses.length > -1) {
        //   _.each($scope.contact_data.details[0].addresses, function(_address) {
        //     $scope.convertAddressToLatLon(_address, function (data) {
        //       _address.lat = parseFloat(data.lat);
        //       _address.lon = parseFloat(data.lon);
        //     });
        //   });
        // }
        $scope.refreshMap(function (validMapData) {
          if (!validMapData) {
            if (!hideToaster) {
              $scope.errorMapData = true;
              // $scope.saveLoading = false;
              toaster.pop('warning', 'Address could not be found.');
            }
          }

          $scope.errorMapData = false;
          ContactService.checkDuplicateEmail($scope.contact_data.details[0].emails[0].email, !hideToaster, function (data) {
            if($scope.originalContact && !angular.equals($scope.contact_data.details[0].emails[0].email, $scope.originalContact.details[0].emails[0].email) && data && data.length && (data.length > 1 || data[0]._id != $scope.contact_data._id))
            {
              console.log("duplicate email");
              if(!hideToaster)
              {
                  SweetAlert.swal({
                  title: "Duplicate Email",
                  text: "Email Already exists, Do you want to continue with changes?",
                  type: "warning",
                  showCancelButton: true,
                  confirmButtonColor: "#DD6B55",
                  confirmButtonText: "Yes, save the changes!",
                  cancelButtonText: "No, do not save the changes!",
                  closeOnConfirm: true,
                  closeOnCancel: true
                }, function (isConfirm) {
                  if (isConfirm) {
                    $scope.saveContactChanges(hideToaster, showAlert, newUrl)
                  }
                  else{
                    $scope.saveLoading = false;
                  }
                });
                if(showAlert)
                    SweetAlert.swal("Warning", "Your edits were NOT saved.", "error");
              }
            }
            else
            {
              $scope.saveContactChanges(hideToaster, showAlert, newUrl)
            }
          })
        });
      } else {
        $scope.saveLoading = false;
        if (!hideToaster) {
          toaster.pop('warning', 'Contact Name OR Email is required');
        }
        if(showAlert)
          SweetAlert.swal("warning", "Your edits were NOT saved.", "error");
      }

    };

    // Save contact

    $scope.saveContactChanges =function(hideToaster, showAlert, newUrl){
        ContactService.saveContact($scope.contact_data, function (contact) {
          $scope.contact = contact;
          $scope.setDefaults();
          $scope.setTags();
          $scope.saveLoading = false;
          $scope.originalContact = angular.copy($scope.contact);
          if (!hideToaster) {
            if ($scope.currentState === 'customerAdd') {
              toaster.pop('success', 'Contact Created.');
            } else {
              toaster.pop('success', 'Contact Saved.');
            }
          }
          $scope.pageSaving = false;
          if(showAlert){
            SweetAlert.swal("Saved!", "Your edits were saved to the page.", "success");
            $window.location = newUrl;
          }
        });
    }

    /*
     * @checkContactValidity
     * -
     */

    $scope.checkContactValidity = function () {
      var fullName = $scope.data.fullName;
      var email = _.filter($scope.contact.details[0].emails, function (mail) {
        return mail.email !== "";
      });
      if ((angular.isDefined(fullName) && fullName !== "") || email.length > 0) {
        return true;
      }
    };

    /*
     * @addDeviceFn
     * -
     */

    $scope.addDeviceFn = function () {
      $scope.contact.devices.push({
        _id: $$.u.idutils.generateUniqueAlphaNumericShort(),
        serial: ''
      });
    };

    /*
     * @removeItem
     * -
     */

    $scope.removeItem = function (index, obj) {
      obj.splice(index, 1);
    };

    /*
     * @contactPhoneTypeSaveFn
     * -
     */

    $scope.contactPhoneTypeSaveFn = function (index, type) {
      var typeLabel = null;
      if (type === 'm') {
        typeLabel = 'mobile';
      }
      if (type === 'h') {
        typeLabel = 'home';
      }
      if (type === 'w') {
        typeLabel = 'work';
      }
      $('#contact-phone-type-' + index).html(typeLabel);
      $scope.contact.details[0].phones[index].type = type;
    };

    /*
     * @getModifyAddressFn
     * -
     */

    $scope.getModifyAddressFn = function (index) {
      return $scope.modifyAddress[index];
    };

    /*
     * @setModifyAddressFn
     * -
     */

    $scope.setModifyAddressFn = function (index, state) {
      $scope.modifyAddress[index] = state;
    };

    /*
     * @contactDeleteFn
     * -
     */

    $scope.contactDeleteFn = function () {
      ContactService.deleteContact($scope.contactId, function (contact) {
        toaster.pop('warning', 'Contact Deleted.');
      });
    };

    /*
     * @restoreFn
     * -
     */

    $scope.restoreFn = function () {
      if ($scope.contactId) {
        if ($scope.contact.type === undefined) {
          $scope.contact.type = $scope.userPreferences.default_customer_type;
        }
        if ($scope.contact.details[0].addresses.length === 0) {
          //$scope.contact.details[0].addresses.push({});
          $scope.contact.details[0].addresses[0].city = $scope.userPreferences.default_customer_city;
          $scope.contact.details[0].addresses[0].state = $scope.userPreferences.default_customer_state;
          $scope.contact.details[0].addresses[0].country = $scope.userPreferences.default_customer_country;
          $scope.contact.details[0].addresses[0].zip = $scope.userPreferences.default_customer_zip;
        }
      } else {
        $scope.contact.type = $scope.userPreferences.default_customer_type;
        //$scope.contact.details[0].addresses.push({});
        $scope.contact.details[0].addresses[0].city = $scope.userPreferences.default_customer_city;
        $scope.contact.details[0].addresses[0].state = $scope.userPreferences.default_customer_state;
        $scope.contact.details[0].addresses[0].country = $scope.userPreferences.default_customer_country;
        $scope.contact.details[0].addresses[0].zip = $scope.userPreferences.default_customer_zip;
      }
    };

    /*
     * @savePreferencesFn
     * -
     */

    $scope.savePreferencesFnWait = false;

    $scope.savePreferencesFn = function () {
      if ($scope.savePreferencesFnWait) {
        return;
      }
      $scope.savePreferencesFnWait = true;
      $timeout(function () {
        UserService.updateUserPreferences($scope.userPreferences, true, function (preferences) {
          console.log('preferences ', preferences);
        });
        $scope.restoreFn();
        $scope.savePreferencesFnWait = false;
      }, 1500);
    };

    /*
     * @watch: fullName
     * -
     */

    $scope.setFullName = function () {
      var newValue = $scope.data.fullName;
      var nameSplit = newValue.match(/\S+/g);
      if (nameSplit) {
        if (nameSplit.length >= 3) {
          $scope.contact.first = nameSplit[0];
          $scope.contact.middle = nameSplit[1];
          $scope.contact.last = nameSplit[2];
        } else if (nameSplit.length === 2) {
          $scope.contact.first = nameSplit[0];
          $scope.contact.middle = '';
          $scope.contact.last = nameSplit[1];
        } else if (nameSplit.length === 1) {
          $scope.contact.first = nameSplit[0];
          $scope.contact.middle = '';
          $scope.contact.last = '';
        }
      } else {
        $scope.contact.first = '';
        $scope.contact.middle = '';
        $scope.contact.last = '';
      }
    };

    /*
     * @insertPhoto
     * -
     */

    $scope.insertPhoto = function (asset) {
      $scope.contact.photo = asset.url;
    };

    /*
     * @removePhoto
     * -
     */

    $scope.removePhoto = function (asset) {
      $scope.contact.photo = null;
    };

    /*
     * @enableSaveBtnFn
     * -
     */

    $scope.enableSaveBtnFn = function () {
      $scope.saveContactDisabled = false;
    };

    /*
     * @contactLabel
     * -
     */

    $scope.contactLabel = function (contact) {
      return ContactService.contactLabel(contact);
    };

    /*
     * @checkBestEmail
     * -
     */

    $scope.checkBestEmail = function (contact) {
      var returnVal = ContactService.checkBestEmail(contact);
      this.email = contact.email;
      return returnVal;
    };

    /*
     * @checkFacebookId
     * -
     */

    $scope.checkFacebookId = function (contact) {
      var returnVal = ContactService.checkFacebookId(contact);
      this.facebookId = contact.facebookId;
      return returnVal;
    };

    /*
     * @checkTwitterId
     * -
     */

    $scope.checkTwitterId = function (contact) {
      var returnVal = ContactService.checkTwitterId(contact);
      this.twitterId = contact.twitterId;
      return returnVal;
    };

    /*
     * @checkLinkedInId
     * -
     */

    $scope.checkLinkedInId = function (contact) {
      var returnVal = ContactService.checkLinkedInId(contact);
      this.linkedInUrl = contact.linkedInUrl;
      this.linkedInId = contact.linkedInId;
      return returnVal;
    };

    /*
     * @checkAddress
     * -
     */

    $scope.checkAddress = function (contact) {
      var returnVal = ContactService.checkAddress(contact);
      this.address = contact.address;
      return returnVal;
    };

    /*
     * @contactAddEmailFn
     * -
     */

    // Add/Remove email adresses
    $scope.contactAddEmailFn = function () {
      $scope.contact.details[0].emails.push({
        _id: CommonService.generateUniqueAlphaNumericShort(),
        email: ''
      });
    };

    /*
     * @removeEmail
     * -
     */

    $scope.removeEmail = function (index) {
      $scope.contact.details[0].emails.splice(index, 1);
    };

    /*
     * @showAddEmail
     * -
     */

    $scope.showAddEmail = function (email) {
      return email._id === $scope.contact.details[0].emails[0]._id;
    };

    /*
     * @addContactPhoneFn
     * - Add/Remove phone numbers
     */

    $scope.addContactPhoneFn = function () {
      $scope.contact.details[0].phones.push({
        _id: CommonService.generateUniqueAlphaNumericShort(),
        number: '',
        extension: ''
      });
    };

    /*
     * @removePhone
     * -
     */

    $scope.removePhone = function (index) {
      $scope.contact.details[0].phones.splice(index, 1);
    };

    /*
     * @showAddPhone
     * -
     */

    $scope.showAddPhone = function (phone) {
      return phone._id === $scope.contact.details[0].phones[0]._id;
    };

    /*
     * @removeAddress
     * - Add/Remove phone numbers
     */

    $scope.removeAddress = function (index) {
      $scope.contact.details[0].addresses.splice(index, 1);
    };

    /*
     * @showAddAddress
     * -
     */

    $scope.showAddAddress = function (address) {
      return address._id === $scope.contact.details[0].addresses[0]._id;
    };

    /*
     * @contactAddAddressFn
     * -
     */

    $scope.contactAddAddressFn = function () {
      $scope.contact.details[0].addresses.push({
        _id: CommonService.generateUniqueAlphaNumericShort(),
        address: '',
        address2: '',
        state: '',
        zip: '',
        country: '',
        defaultShipping: false,
        defaultBilling: false,
        city: '',
        countryCode: '',
        displayName: '',
        lat: '',
        lon: ''
      });
      //$scope.contactAddressWatchFn($scope.contact.details[0].addresses.length - 1);
    };

    /*
     * @setDefaults
     * -
     */

    $scope.setDefaults = function () {
      // New contact
      if ($scope.contact.details.length === 0) {
        $scope.contact.details[0] = {};
      }
      if (!$scope.contact.details[0].emails) {
        $scope.contact.details[0].emails = [];
      }
      if (!$scope.contact.details[0].phones) {
        $scope.contact.details[0].phones = [];
      }
      if (!$scope.contact.details[0].addresses) {
        $scope.contact.details[0].addresses = [];
      }

      if ($scope.contact.details.length) {
        if (!$scope.contact.details[0].emails.length) {
          $scope.contactAddEmailFn();
        }
        if (!$scope.contact.details[0].phones.length) {
          $scope.addContactPhoneFn();
        }
        if (!$scope.contact.details[0].addresses.length) {
          $scope.contactAddAddressFn();
        }
      }
    };

    /*
     * @customerTags
     * 18-Sep Unioned set of tags in system with those needed by Indigenous
     *
     * Retained (part of Ind. flow)
     *   - Lead (ld)
     *   - Customer (cu)
     *
     * New:
     *   - Cheatsheet Lead (cs)
     *   - Trial Customer (tc)
     *   - Expired Trial Customer (ex)
     *   - Cancelled Trial Customer (ct)
     *   - Cancelled Customer (cc)
     *
     * - Old. Keeping for our clients:
     *   - Colleague (co)
     *   - Friend (fr)
     *   - Member (mb)
     *   - Family (fa)
     *   - Admin (ad)
     *   - Other (ot)
     */

    if (!$scope.contact.tags) {
      $scope.contact.tags = {};
    };

    ContactService.getContactTags(function(tags){
      $scope.contactTags = tags;
    });

    /*
     * @setTags
     * -
     */

    $scope.setTags = function () {
      console.log('setTags >>>');
      var tempTags = [];
      var cutomerTags = [];
      _.each($scope.contact.tags, function (tag , index) {
        var matchingTag = _.findWhere($scope.contactTags, {
          data: tag
        });
        if(matchingTag)
        {
          cutomerTags.push(matchingTag.label);
          tempTags.push(matchingTag);
        }
        else{
          cutomerTags.push(tag);
          tempTags.push({
            data : tag,
            label : tag
          });
        }
      });
      $scope.myContactTags = cutomerTags.join(", ");
      $scope.contact.tags = tempTags;
      console.log('$scope.contact.tags >>>', $scope.contact.tags);
    };

    $scope.unsetTags = function() {
      var tempTags = [];
        $scope.contact_data = angular.copy($scope.contact);
        _.each($scope.contact_data.tags, function (tag) {
          tempTags.push(tag.data);
        });
        if (tempTags) {
          $scope.contact_data.tags = _.uniq(tempTags);
        }
    };

    /*
     * @getOrders
     * - get all the orders for this customer and create line_items_total
     *   and add decimal point to total then create scope
     */
    console.log('$stateParams.contactId ', $stateParams.contactId);
    OrderService.getCustomerOrders($stateParams.contactId, function (orders) {
      console.log('orders ', orders);
      $scope.orders = _.filter(orders, function(order) {
          return order.line_items[0].type !== 'DONATION';
      });
      $scope.donations = _.filter(orders, function(order) {
          return order.line_items[0].type == 'DONATION';
      });
    //   if (orders.length > 0) {
    //     _.each(orders, function (order) {
    //       if (order.line_items) {
    //         order.line_items_total = order.line_items.length;
    //       } else {
    //         order.line_items_total = 0;
    //       }
    //     });
    //   }
    });

    /*
     * @updateFullName
     * -
     */

    $scope.updateFullName = function () {
      $scope.data.fullName = [$scope.contact.first, $scope.contact.middle, $scope.contact.last].join(' ').trim();
    };

    /*
     * @deleteContactFn
     * -
     */

    $scope.deleteContactFn = function (contact) {
      SweetAlert.swal({
        title: "Are you sure?",
        text: "Do you want to delete this contact?",
        type: "warning",
        showCancelButton: true,
        confirmButtonColor: "#DD6B55",
        confirmButtonText: "Yes, delete it!",
        cancelButtonText: "No, do not delete it!",
        closeOnConfirm: true,
        closeOnCancel: true
      }, function (isConfirm) {
        if (isConfirm) {
          ContactService.deleteContact(contact._id, function () {
            toaster.pop('warning', 'Contact Deleted.');
            $scope.originalContact = angular.copy($scope.contact);
            $state.go('app.contacts');
          });
        }
      });
    };


    $scope.$back = function() {
        $window.history.back();
    };

    $scope.formatOrderStatus = function (status) {
      return OrderService.formatOrderStatus(status);
    };


    $scope.checkIfDirty = function(){
      var isDirty = false;
      if($scope.newNote && $scope.newNote.text)
        isDirty = true;
      if($scope.originalContact && !angular.equals($scope.originalContact, $scope.contact))
        isDirty = true;
      return isDirty;
    }
    $scope.resetDirty = function(){
      $scope.originalContact = null;
      $scope.contact = null;
    }

    ContactService.getContacts(function (contacts) {
      ContactService.getAllContactTags(contacts, function(tags){
        $scope.contactTags = tags;
      });
    });

    $scope.tagToContact = function(value) {
     return ContactService.tagToContact(value);
    }

    $scope.viewSingleOrder = function(orderId) {
        $location.path('/commerce/orders/'+ orderId);
    }

  }]);
}(angular));

'use strict';
/*global app, window*/
(function (angular) {
  app.controller('ContactsCtrl', ["$scope", "$state", "toaster", "$modal", "$window", "ContactService", "SocialConfigService", "userConstant", "formValidations", "CommonService", '$timeout', 'SweetAlert', "$location", "$q", function ($scope, $state, toaster, $modal, $window, ContactService, SocialConfigService, userConstant, formValidations, CommonService, $timeout, SweetAlert, $location, $q) {

    $scope.tableView = 'list';
    $scope.itemPerPage = 100;
    $scope.showPages = 15;
    $scope.selectAllChecked = false;
    $scope.bulkActionChoice = {};
    $scope.tagsBulkAction = {};

    if (!$state.current.sort) {
      $scope.order = "reverse";
    }
    $scope.formValidations = formValidations;
    $scope.default_image_url = "/admin/assets/images/default-user.png";

    $scope.bulkActionChoices = [{data: 'tags', label: 'Tags'}, {data: 'delete', label: 'Delete'}];

    $scope.filterContactPhotos = function (contacts) {
      _.each(contacts, function (contact) {
        if (contact) {
          contact.hasPhoto = false;
          if (contact.photo) {
            if ($("#contact_photo_" + contact._id).attr("src") === $scope.default_image_url) {
              contact.hasPhoto = false;
            } else {
              contact.hasPhoto = true;
            }
          }
        }
      });
    };

    $scope.filterContacts = function () {
      $scope.showFilter = !$scope.showFilter;
      $scope.filterContactPhotos($scope.contacts);
    };

    /*
     * @getContacts
     * -
     */

    $scope.getContacts = function () {
      ContactService.getContacts(function (contacts) {
        _.each(contacts, function (contact) {
          contact.bestEmail = $scope.checkBestEmail(contact);
          contact.hasFacebookId = $scope.checkFacebookId(contact);
          contact.hasTwitterId = $scope.checkTwitterId(contact);
          contact.hasLinkedInId = $scope.checkLinkedInId(contact);
          contact.hasGoogleId = $scope.checkGoogleId(contact);

          contact.bestAddress = $scope.displayAddressFormat(contact);
          // delete isSelected field while loading a contact
          if(contact.isSelected)
            delete contact.isSelected;
          var tempTags = [];
          var tagLabel = "";
          _.each(contact.tags, function (tag) {
             tagLabel = _.findWhere($scope.contactTags, { data: tag });
              if(tagLabel)
                tempTags.push(tagLabel.label);
              else
                tempTags.push(tag);
          });
          if(tempTags)
            contact.tempTags = _.uniq(tempTags);
        });
        $scope.contacts = contacts;
        // In case contact is created from simple form component.
        if($scope.contacts.length > 0){
          $scope.minRequirements = true;
        }
        if ($state.current.sort) {
          $scope.setSortOrder($state.current.sort);
        }
        $scope.showContacts = true;
        ContactService.getAllContactTags(contacts, function(tags){
          $scope.contactTags = tags;
        });

      });
    };

    $scope.getContacts();

    ContactService.getContactTags(function(tags){
      $scope.contactTags = tags;
    });

    /*
     * @getters
     * - getters for the sort on the table
     */

    $scope.getters = {
      created: function (value) {
        return value.created.date || -1;
      },
      modified: function (value) {
        return value.modified.date;
      },
      name: function (value) {
        return [value.first, value.middle, value.last].join(' ').trim();
      },
      tags: function (value) {
        return $scope.contactTagsFn(value);
      },
      phone: function (value) {
        if (value.details[0] && value.details[0].phones && value.details[0].phones[0]) {
          return value.details[0].phones[0].number.trim();
        }
        return "";
      },
      address: function (value) {
        return value.bestAddress
      },
      social: function (value) {
        if (value.hasLinkedInId) {
          return 1;
        }
        if (value.hasGoogleId) {
          return 2;
        }
        if (value.hasFacebookId) {
          return 3;
        }
        if (value.hasTwitterId) {
          return 4;
        }

        return 5;
      }
    };

    /*
     * @openModal
     * -
     */

    $scope.openModal = function (template, controller, _size) {
      // console.log('');
      // $scope.modalInstance = $modal.open({
      //   templateUrl: template,
      //   controller: controller,
      //   scope: $scope,
      //   backdrop: 'static',
      //   size: _size || 'md'
      // });
      // angular.element('.modal-body').editable({selector: '.editable'});
      console.log('openModal >>> ', template, controller, _size);
      var _modal = {
        templateUrl: template,
        keyboard: false,
        backdrop: 'static',
        size: 'md',
        resolve: {
          getContacts: function () {
            return $scope.getContacts;
          }
        }
      };

      if (controller) {
        _modal.controller = controller;
      }

      if (_size) {
        _modal.size = _size;
      }

      $scope.modalInstance = $modal.open(_modal);
      $scope.modalInstance.result.then(null, function () {
        angular.element('.sp-container').addClass('sp-hidden');
      });
    };

    $scope.openSimpleModal = function (modal) {
      var _modal = {
        templateUrl: modal,
        scope: $scope,
        keyboard: false,
        backdrop: 'static'
      };
      $scope.modalInstance = $modal.open(_modal);
      $scope.modalInstance.result.then(null, function () {
        angular.element('.sp-container').addClass('sp-hidden');
      });
    };

    /*
     * @closeModal
     * -
     */

    $scope.closeModal = function () {
      $scope.modalInstance.close();
      $scope.socailList = false;
      $scope.groupList = false;
    };

    /*
     * @preventClick
     * -
     */

    $scope.preventClick = function (event) {
      event.stopPropagation();
    };

    /*
     * @column
     * -
     */

    $scope.column = {
      "photo": true,
      "name": true,
      "tags": true,
      "email": true,
      "address": true,
      "social": true,
      "phone": true,
      "created": true,
      "modified": true
    };

    $scope.contactTagsFn = function (contact) {
      return ContactService.contactTags(contact);
    };

    $scope.checkBestEmail = function (contact) {
      var returnVal = ContactService.checkBestEmail(contact);
      this.email = contact.email;
      return returnVal;
    };

    $scope.checkFacebookId = function (contact) {
      var returnVal = ContactService.checkFacebookId(contact);
      this.facebookId = contact.facebookId;
      return returnVal;
    };

    $scope.checkTwitterId = function (contact) {
      var returnVal = ContactService.checkTwitterId(contact);
      this.twitterId = contact.twitterId;
      return returnVal;
    };

    $scope.checkLinkedInId = function (contact) {
      var returnVal = ContactService.checkLinkedInId(contact);
      this.linkedInUrl = contact.linkedInUrl;
      this.linkedInId = contact.linkedInId;
      return returnVal;
    };

    $scope.checkGoogleId = function (contact) {
      var returnVal = ContactService.checkGoogleId(contact);
      this.googleUrl = contact.googleUrl;
      this.googleId = contact.googleId;
      return returnVal;
    };

    $scope.checkAddress = function (contact) {
      var returnVal = ContactService.checkAddress(contact);
      this.address = contact.address;
      return returnVal;
    };

    $scope.displayAddressFormat = function (contact) {
      if (contact.details.length !== 0 && contact.details[0].addresses && contact.details[0].addresses.length !== 0) {
        var address = contact.details[0].addresses[0];
        if (address && (address.address || address.address2 || address.city || address.state || address.zip)) {
          //var address = scope.htmlToPlaintext(address);
          var separator = ' ';
          var _topline = '';
          if(address.address || address.address2)
            _topline = _.filter([address.address, address.address2], function (str) {
              return str !== "";
            }).join(", ");
          var _bottomline = '';
          if(address.city || address.state || address.zip)
           _bottomline = _.filter([address.city, address.state, address.zip], function (str) {
            return str !== "";
          }).join(", ");
          if(_bottomline && _topline){
            separator = ", "
          }
          if (_topline) {
            return _topline + separator + _bottomline;
          }
          return _bottomline;
        }
    }
    };
    $scope.viewSingle = function (contact) {
      var tableState = $scope.getSortOrder();
      $state.current.sort = tableState.sort;
      $location.path('/contacts/' + contact._id);
    };

    /* 18-Sep Unioned set of tags in system with those needed by Indigenous
    *
    * Retained (part of Ind. flow)
    *   - Lead (ld)
    *   - Customer (cu)
    *
    * New:
    *   - Cheatsheet Lead (cs)
    *   - Trial Customer (tc)
    *   - Expired Trial Customer (ex)
    *   - Cancelled Trial Customer (ct)
    *   - Cancelled Customer (cc)
    *
    * - Old. Keeping for our clients:
        *   - Colleague (co)
    *   - Friend (fr)
    *   - Member (mb)
    *   - Family (fa)
    *   - Admin (ad)
    *   - Other (ot)
    *
    * - Dumb: This list an that in contactDetailCtrl should be managed centrally (see case 4395)
    */

    $scope.contact = {};
    $scope.contact.tags = {};



    $scope.tagToContact = function(value) {
     return ContactService.tagToContact(value);
    }

    $scope.contactPhotoOptions = [{
      name: 'Photo',
      value: true
    }, {
      name: 'No Photo',
      value: false
    }];

    $scope.contactsLimit = 50;

    $scope.addContacts = function () {
      $scope.contactsLimit += 50;
    };

    $scope.addContact = function () {

      $scope.saveLoading = true;
      var tempTags = [];
      _.each($scope.contact.tags, function (tag) {
        tempTags.push(tag.data);
      });
      if(tempTags)
        tempTags = _.uniq(tempTags);
      var matchingContact = _.findWhere($scope.contacts, {
        bestEmail: $scope.contact.email
      });
      if(matchingContact){
        $scope.setDuplicateUser(true);
        $scope.saveLoading = false;
        return;
      }
      var tempContact = {
        first: $scope.contact.first,
        middle: $scope.contact.middle,
        last: $scope.contact.last,
        tags: tempTags
      };
      if($scope.contact.email){
        tempContact.details = [];
        tempContact.details.push({
          emails: [{
            _id: CommonService.generateUniqueAlphaNumericShort(),
            email: $scope.contact.email
          }]
        })
      }
      ContactService.saveContact(tempContact, function (returnedContact) {
        $scope.saveLoading = false;
        $scope.fullName = '';
        $scope.contact.tags = {};
        $scope.contact.email = '';
        $scope.duplicateContact = false;
        $scope.closeModal();


        returnedContact.bestEmail = $scope.checkBestEmail(returnedContact);
        $scope.contacts.unshift(returnedContact);
        $scope.incrementContactTags(returnedContact);
        toaster.pop('success', 'Contact Successfully Added');
        $scope.minRequirements = true;
      });
    };

    $scope.incrementContactTags = function (contact) {
      var contactTags = $scope.contactTags || [];
      if(contact){
          if (contact.tags) {
            _.each(contact.tags, function (tag) {
              var type = _.find(contactTags, function (type) {
                return type.data === tag;
              });
              if (!type) {
                contactTags.push({
                  label : tag,
                  data : tag
                })
              }
            });
          }
        $scope.contactTags = _.uniq(contactTags.concat(contactTags), function(w) { return w.label; })
      }
    };

    $scope.setDuplicateUser = function(val){
      $scope.duplicateContact = val;
    }

    $scope.$watch('fullName', function (newValue) {
      if (newValue !== undefined) {
        var nameSplit = newValue.match(/\S+/g);
        if (nameSplit) {
          if (nameSplit.length >= 3) {
            $scope.contact.first = nameSplit[0];
            $scope.contact.middle = nameSplit[1];
            $scope.contact.last = nameSplit[2];
          } else if (nameSplit.length === 2) {
            $scope.contact.first = nameSplit[0];
            $scope.contact.middle = '';
            $scope.contact.last = nameSplit[1];
          } else if (nameSplit.length === 1) {
            $scope.contact.first = nameSplit[0];
            $scope.contact.middle = '';
            $scope.contact.last = '';
          }
        } else {
          $scope.contact.first = '';
          $scope.contact.middle = '';
          $scope.contact.last = '';
        }
      }
    }, true);
    // $scope.socialAccounts = {};
    // SocialConfigService.getAllSocialConfig(function (data) {
    //   $scope.socialAccounts = data.socialAccounts;
    // });

    $scope.importFacebookFriends = function () {
      ContactService.importFacebookFriends(function (data, success) {
        if (success) {
          $('#import-contacts-modal').modal('hide');
          toaster.pop('success', "Contacts being imported.");
        } else {
          $window.location.href = "/socialconfig/facebook?redirectTo=" + encodeURIComponent('/admin#/contact');
        }
      });
    };

    $scope.importLinkedInConnections = function () {
      var foundSocialId = false;
      $scope.socialAccounts.forEach(function (value) {
        if (value.type === userConstant.social_types.LINKEDIN) {
          foundSocialId = true;
          $scope.closeModal();
          toaster.pop('success', "Contacts import initiated.");
          SocialConfigService.importLinkedinContact(value.id, function () {
            $scope.closeModal();
            toaster.pop('success', "Contacts import complete.");
          });
        }
      });
      if (foundSocialId === false) {
        $scope.closeModal();
        toaster.pop('warning', "No linkedin account integrated.");
      }
    };

    $scope.importGmailContacts = function () {
      var foundSocialId = false;
      $scope.socialAccounts.forEach(function (value) {
        if (value.type === userConstant.social_types.GOOGLE) {
          foundSocialId = true;
          $scope.closeModal();
          toaster.pop('success', "Contacts import initiated.");
          SocialConfigService.importGoogleContact(value.id, function () {
            $scope.closeModal();
            $scope.getContacts();
            toaster.pop('success', "Contacts import complete.");
          });
        }
      });
      if (foundSocialId === false) {
        $scope.closeModal();
        toaster.pop('warning', "No google account integrated.");
      }
    };

    /*
     * @triggerInput
     * - trigger the hidden input to trick smart table into activating filter
     */

    $scope.triggerInput = function (element) {
      angular.element(element).trigger('input');
    };

    /*
     * @clearFilter
     * - clear the filter for the status when the red X is clicked
     */

    $scope.filterContact = {};

    $scope.clearFilter = function (event, input, filter) {
      $scope.filterContact[filter] = {};
      $scope.triggerInput(input);
    };

    // $scope.socailType = "";
    // $scope.socailList = false;
    // $scope.groupList = false;

    // $scope.showSocialAccountSelect = function (socailType) {
    //   $scope.socailType = socailType;
    //   $scope.socailList = true;
    //   if (socailType === userConstant.social_types.GOOGLE) {
    //     $scope.groupList = true;
    //   } else {
    //     $scope.groupList = false;
    //   }
    // };

    $scope.bulkActionSelectFn = function () {
        if ($scope.bulkActionChoice.action.data == 'delete') {
            SweetAlert.swal({
                title: "Are you sure?",
                text: "Do you want to delete the filtered contacts?",
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: "#DD6B55",
                confirmButtonText: "Yes, delete it!",
                cancelButtonText: "No, do not delete it!",
                closeOnConfirm: true,
                closeOnCancel: true
              },
              function (isConfirm) {
                if (isConfirm) {
                    var selectedContacts = $scope.selectedContactsFn();
                    var contactPromises = [];

                    selectedContacts.forEach(function(sc, sci) {
                        contactPromises.push(ContactService.deleteContactPromise(sc._id));
                    });

                    $q.all(contactPromises)
                      .then(function(results) {
                        selectedContacts.forEach(function(sc, sci) {
                            $scope.contacts.splice(_.findIndex($scope.contacts, function(c) {return c._id == sc._id; }), 1);
                            $scope.displayedContacts.splice(_.findIndex($scope.displayedContacts, function(c) {return c._id == sc._id; }), 1);
                        });
                        $scope.bulkActionChoice = null;
                        $scope.bulkActionChoice = {};
                        $scope.clearSelectionFn();
                        toaster.pop('success', 'Contacts Deleted.');
                      });
                } else {
                 $scope.bulkActionChoice = null;
                 $scope.bulkActionChoice = {};
                }
              });
        }

        if ($scope.bulkActionChoice.action.data == 'tags') {
            $scope.bulkActionChoice = {};
            $scope.openSimpleModal('tags-bulk-action-modal');
        }

        if ($scope.bulkActionChoice.action.data == 'export') {
          ContactService.exportCsvContacts(_.pluck($scope.selectedContactsFn(), '_id'));
          $scope.bulkActionChoice = null;
          $scope.bulkActionChoice = {};
          $scope.clearSelectionFn();
          toaster.pop('success', 'Contact export started.');
        }
    };

    $scope.selectAllClickFn = function ($event) {
        $event.stopPropagation();
        if ($scope.selectAllChecked) {
            $scope.selectAllChecked = false;
        } else {
            $scope.selectAllChecked = true;
        }
        $scope.displayedContacts.forEach(function(contact, index) {
            contact.isSelected = $scope.selectAllChecked;
        });
    };

    $scope.clearSelectionFn = function () {
        $scope.selectAllChecked = false;
        $scope.displayedContacts.forEach(function(contact, index) {
            contact.isSelected = $scope.selectAllChecked;
        });
    };

    $scope.contactSelectClickFn = function ($event, contact) {
        $event.stopPropagation();
        if (contact.isSelected) {
            contact.isSelected = false;
        } else {
            contact.isSelected = true;
        }
    };

    $scope.selectedContactsFn = function () {
        var exportContacts = _.filter($scope.displayedContacts, function(contact) { return contact.isSelected; });
        $scope.exportText = exportContacts.length ? "Export Selected " + exportContacts.length : "Export";
        return exportContacts;
    };

    $scope.tagsBulkActionClickFn = function (operation) {
        var selectedContacts = $scope.selectedContactsFn();
        var tags = _.uniq(_.pluck($scope.tagsBulkAction.tags, 'data'));
        var contactPromises = [];

        selectedContacts.forEach(function(contact, index) {
            if (operation == 'add') {
                if ($scope.tagsBulkAction.toReplace) {
                    contact.tags = tags;
                } else {
                    if (contact.tags) {
                        contact.tags = contact.tags.concat(tags);
                    } else {
                        contact.tags = tags;
                    }
                }
            }

            if (operation == 'remove') {
                contact.tags = _.difference(contact.tags, tags);
            }

            contact.tags = _.uniq(contact.tags);
            // delete isSelected field while saving a contact
            delete contact.isSelected;
            contactPromises.push(ContactService.putContactPromise(contact));
        });

        $q.all(contactPromises)
          .then(function(results) {
            console.log(results);
            $scope.tagsBulkAction = {};
            $scope.clearSelectionFn();
            $scope.closeModal();
            toaster.pop('success', 'Contacts tags updated.');
          });
    };

    $scope.exportContactsFn = function () {
      if (_.pluck($scope.selectedContactsFn().length)) {
        ContactService.exportCsvContacts(_.pluck($scope.selectedContactsFn(), '_id'));
      } else {
        ContactService.exportCsvContacts(null);
      }
      $scope.clearSelectionFn();
      toaster.pop('success', 'Contact export started.');
    };
  }]);
}(angular));

'use strict';
/*global app, angular, moment*/
(function (angular) {
  app.controller('CreateCampaignCtrl', ["$scope",  "$rootScope", "$modal", "$location", "$window", "$stateParams", "toaster", "$timeout", "CampaignService", "ContactService", "CommonService", "editableOptions", "AccountService", "userConstant", "WebsiteService", "$q", "formValidations", "SweetAlert", function ($scope, $rootScope, $modal, $location, $window, $stateParams, toaster, $timeout, CampaignService, ContactService, CommonService, editableOptions, AccountService, userConstant, WebsiteService, $q, formValidations, SweetAlert) {

    /*
     * set editor theme
     */
    editableOptions.theme = 'bs3';

    $scope.existingEmail = {};
    $scope.isCampainDirty = {
      dirty : false
    }
    $scope.isCampaign = true;
    /*
     * Setup some initial wizard state
     */
    var contactTags = userConstant.contact_types.dp;
    var nextStep = function () {
      $scope.currentStep++;
    };
    var prevStep = function () {
      $scope.currentStep--;
    };
    var goToStep = function (i) {
      $scope.currentStep = i;
    };
    var errorMessage = function (i) {
      if ($scope.currentStep < i && (i - $scope.currentStep > 1)) {
        toaster.pop('error', 'Error', 'Please complete the previous steps before proceeding');
      } else
        toaster.pop('error', 'Error', 'Please complete the form in this step before proceeding');
    };

    $scope.changesConfirmed = true;
    $scope.navigateOnSave = null;
    $scope.whenToSend = 'now';
    $scope.selectedEmail = {
      type: 'new'
    };
    $scope.tableView = 'list';
    $scope.emailValidation = formValidations.email;
    $scope.delivery = {
      date: moment(),
      // time: moment(),
      minDate: new Date()
    };

    $scope.triggers = [{
      name: 'Sign Up',
      icon: 'fa-paper-plane',
      value: 'SIGNUP'
    }];

    $scope.emails = [];

    ContactService.getContactTags(function(tags){
      $scope.contactTags = tags;
    });

    $scope.formatDate = function (date) {

      var formattedDate;
      var localDate;

      if (!date._d) {

        if (date.year) {
            formattedDate = { year: date.year, month: date.month - 1, day: date.day, hour: date.hour, minute: date.minute };
        } else if (date instanceof Date) {
            formattedDate = moment(date);
        }

        localDate = moment.utc(formattedDate);
        localDate = localDate.local();

      } else {
        localDate = moment(date);
      }

      return localDate.format("dddd, MMMM Do YYYY, h:mm A");

    };

    $scope.updateSendNow = function (value) {
      $scope.whenToSend = value;
      $scope.watchDeliveryDate = true;
      if ($scope.whenToSend !== 'later') {
        $scope.delivery.date = moment();
        // $scope.delivery.time = moment();
      }

    };

    $scope.hstep = 1;
    $scope.mstep = 1;

    $scope.options = {
      hstep: [1, 2, 3],
      mstep: [1, 5, 10, 15, 25, 30]
    };

    $scope.ismeridian = true;

    $scope.selectedContacts = {
      individuals: []
    };

    // selected tags
    $scope.tagSelection = [];

    $scope.recipients = [];
    $scope.originalRecipients = [];
    $scope.recipientsToRemove = [];

    $scope.newCampaign = {};

    $scope.duplicateCampaign = {
      name: ''
    };

    $scope.selectedContacts.newEmails = [];

    $scope.isEditable = false;

    $scope.getProgressType = function (value) {
      var type;
      if (value < 25) {
        type = 'danger';
      } else if (value < 50) {
        type = 'warning';
      } else if (value < 75) {
        type = 'info';
      } else {
        type = 'success';
      }
      return type;
    };

    //TODO: bring out to shared / filter
    $scope._moment = function (_date, options) {
      if (_date.toString().length === 10) {
        _date = _date * 1000;
      }
      var formattedDate = moment(_date).subtract('months', 1);

      if (options) {
        if (options.subtractNum && options.subtractType) {
          formattedDate = formattedDate.subtract(options.subtractNum, options.subtractType);
        }
      }
      return formattedDate.format("MMMM Do, YYYY");
    };

    /*
     * @defaultNewEmail
     * - default new email to show for initial design unless user selects template
     */
    $scope.emailToSend = {
      "title": "",
      "type": "email",
      "subject": "Edit Subject",
      "fromName": "",
      "fromEmail": "",
      "replyTo": "",
      "bcc": "",
      "components": [{
        "_id": CommonService.generateUniqueAlphaNumericShort(),
        "anchor": CommonService.generateUniqueAlphaNumericShort(),
        "type": "email-header",
        "version": 1,
        "txtcolor": "#888888",
        "logo": "<h2>Logo Here</h2>",
        // "title": "<h2 class='center'>New Email</h2>",
        // "subtitle": "subtitle",
        // "text": "This is your new email",

        "bg": {
          "img": {
            "url": "",
            "width": null,
            "height": null,
            "parallax": false,
            "blur": false
          },
          "color": ""
        },
        "visibility": true
      },
      {
        "_id": CommonService.generateUniqueAlphaNumericShort(),
        "anchor": CommonService.generateUniqueAlphaNumericShort(),
        "type": "email-1-col",
        "version": 1,
        "txtcolor": "#888888",
        // "logo": "<h2>Logo Here</h2>",
        "title": '<h2 style="text-align:center;">One Column Layout Section</h2>',
        // "subtitle": "subtitle",
        "text": '<p style="text-align:center;">This is a single column content section.</p>',

        "bg": {
          "img": {
            "url": "",
            "width": null,
            "height": null,
            "parallax": false,
            "blur": false
          },
          "color": ""
        },
        "visibility": true
      },
      {
        "_id": CommonService.generateUniqueAlphaNumericShort(),
        "anchor": CommonService.generateUniqueAlphaNumericShort(),
        "type": "email-2-col",
        "version": 1,
        "txtcolor": "#888888",
        "title": '<h2 style="text-align:center;">Two Column Layout Section</h2>',
        // "subtitle": "subtitle",
        "text1": '<p style="text-align:center;">This is column 1.</p>',
        "text2": '<p style="text-align:center;">This is column 2.</p>',

        "bg": {
          "img": {
            "url": "",
            "width": null,
            "height": null,
            "parallax": false,
            "blur": false
          },
          "color": ""
        },
        "visibility": true
      },
      {
        "_id": CommonService.generateUniqueAlphaNumericShort(),
        "anchor": CommonService.generateUniqueAlphaNumericShort(),
        "type": "email-3-col",
        "version": 1,
        "txtcolor": "#888888",
        "title": '<h2 style="text-align:center;">Three Column Layout Section</h2>',
        // "subtitle": "subtitle",
        "text1": '<p style="text-align:center;">This is column 1.</p>',
        "text2": '<p style="text-align:center;">This is column 2.</p>',
        "text3": '<p style="text-align:center;">This is column 3.</p>',

        "bg": {
          "img": {
            "url": "",
            "width": null,
            "height": null,
            "parallax": false,
            "blur": false
          },
          "color": ""
        },
        "visibility": true
      },
      {
        "_id": CommonService.generateUniqueAlphaNumericShort(),
        "anchor": CommonService.generateUniqueAlphaNumericShort(),
        "type": "email-footer",
        "version": 1,
        "txtcolor": "#888888",
        // "logo": "<h2>Logo Here</h2>",
        // "title": "<h2 class='center'>New Email</h2>",
        // "subtitle": "subtitle",
        "text": "This is an email footer.",

        "bg": {
          "img": {
            "url": "",
            "width": null,
            "height": null,
            "parallax": false,
            "blur": false
          },
          "color": ""
        },
        "visibility": true
      }]
    };

    $scope.emailToSendCopy = angular.copy($scope.emailToSend);

    $scope.component = $scope.emailToSend.components[0];

    $scope.updateTime = function () {
      // var date = moment($scope.delivery.date);
      // if (date && date._d && date._d.toString() === "Invalid Date") {
      //   $scope.invalidDate = true;
      // } else {
      //   $scope.delivery.date = date;
      // }
      // if ($scope.delivery.date.diff && $scope.delivery.date.diff(moment(), "minutes") < 0) {
      //   $scope.invalidDate = true;
      // } else {
      //   $scope.invalidDate = false;
      // }
    };

    $scope.togglePreview = function () {
      if (!$scope.showPreview) {
        $scope.showPreview = true;
      } else {
        $scope.showPreview = false;
      }
    };

    $scope.newCampaignObj = {
      "name": "",
      "type": "onetime",
      "status": "DRAFT",
      "startDate": "", //not used on autoresponder
      "steps": [{
        "type": "email",
        "trigger": null,
        "index": 1,
        "settings": {
          "emailId": "",
          "offset": "", //in minutes
          "fromEmail": "",
          "fromName": '',
          "replyTo": '',
          "bcc": '',
          "subject": '',
          "vars": [],
          "sendAt": {},
        }
      }],
      "searchTags": {
        operation: "set",
        tags: []
      }
    };

    /*
     * @originalCampaignObj
     * - save for later comparison
     */
    $scope.originalCampaignObj = angular.copy($scope.newCampaignObj);

    /*
     * @sendTestEmail
     * - send email based on current email template
     */
    $scope.sendTestEmail = function (_email) {
      $scope.sendingEmail = true;
      WebsiteService.sendTestEmail(_email, $scope.emailToSend, function (data) {
        $scope.sendingEmail = false;
        if (data && data[0] && data[0]._id) {
          $scope.closeModal();
          toaster.pop('success', 'Test Email sent successfully');
        }
        console.log('test send status ', data);
      });
    };

    // $scope.setComponentsHTML = function (email) {
    //   email.components = email.components.map(function (component) {
    //     component.html = angular.element('#' + $scope.emailToSend.components[0]._id);
    //     return component;
    //   });
    // };

    $scope.openModal = function (template) {
      $scope.modalInstance = $modal.open({
        templateUrl: template,
        keyboard: false,
        backdrop: 'static',
        scope: $scope
      });
      $scope.modalInstance.result.finally($scope.closeModal());
    };

    /*
     * @openSimpleModal
     * -
     */
    $scope.openSimpleModal = function (modal, _size) {
      var _modal = {
        templateUrl: modal,
        scope: $scope,
        keyboard: false,
        backdrop: 'static',
        size: _size || 'md'
      };
      $scope.modalInstance = $modal.open(_modal);
      $scope.modalInstance.result.then(null, function () {
        angular.element('.sp-container').addClass('sp-hidden');
      });
    };

    $scope.closeModal = function () {
      $scope.modalInstance.close();
    };

    $scope.fullscreen = false;

    /*
     * @toggleFullscreen
     * -
     */
    $scope.toggleFullscreen = function () {
      $scope.transitionDone = false;
      if (!$scope.fullscreen) {
        $scope.fullscreen = true;
        $timeout(function () {
          $scope.transitionDone = true;
        }, 1000);
      } else {
        $scope.fullscreen = false;
        $timeout(function () {
          $scope.transitionDone = true;
        }, 1000);
      }
    };


    /*
     * @validateEmail
     * - email validation
     */
    $scope.validateEmail = function (email) {
      var result = true;
      if(email){
        var regex = $scope.emailValidation;
        result =  regex.test(email);
      }
      if(!result){
        return "Invalid email address";
      }
    };

    /*
     * @analyzeSubject
     * - email subject quality feedback
     */
    $scope.analyzeSubject = function (subject) {
      var subjectWords = subject.split(' ');
      var lowercaseSubjectWords = subject.toLowerCase().split(' ');
      var wordsToUse = ["freebie", "urgent", "breaking", "important", "alert", "thank you", "sneak peek", "alert", "daily", "free delivery", "cash", "quote", "save", "jokes", "promotional", "congratulations", "revision", "forecast", "snapshot", "token", "voluntary", "monthly", "deduction", "upgrade", "just", "content", "go", "wonderful"];
      var wordsNotToUse = ["free", "reminder", "canceled", "helping", "fundraising", "raffle", "fundraiser", "charity", "donate", "last chance", "breast cancer", "sign up", "help", "percent off", "newsletter", "report", "program", "half", "budget", "unlimited", "discount", "down", "sale", "suburbs", "decoder", "inland", "county", "wish", "forgotten", "thirds", "discussion", "romantic", "videos", "miss", "deals", "groovy", "conditions", "friday", "monday", "furry", "double", "volunteer", "learn"];

      var capitalized = true;
      var lessThan50Char = true;
      var lessThan10Words = true;
      var isAlphaNumeric = true;
      var containsWordToUse = true;
      var avoidsWordNotToUse = true;
      var moreThan4Words = true;
      var differentFromPreviousSubjects = true;

      _.each(subjectWords, function (word) {
        //All Words Capitalized
        if (word && word[0] !== word[0].toUpperCase()) {
          capitalized = false;
        }

        //does not include words to avoid
        if (wordsNotToUse.indexOf(word.toLowerCase()) >= 0) {
          avoidsWordNotToUse = false;
        }
      });

      //includes words to use
      if (_.intersection(lowercaseSubjectWords, wordsToUse).length <= 0) {
        containsWordToUse = false;
      }

      //Less than 50 characters
      if (subject.length > 49) {
        lessThan50Char = false;
      }

      //less than 10 words
      if (subjectWords.length > 9) {
        lessThan10Words = false;
      }

      //more than 4 words
      if (subjectWords.length < 4) {
        moreThan4Words = false;
      }

      if ($scope.emails && $scope.emails.length > 0) {
        //determine if previous subject emails are closely related by score
        var bestMatch = {
          value: '',
          percent: 0
        };

        var lowercaseSubject = subject.replace(new RegExp('[^a-zA-Z ]'), "").toLowerCase();
        _.each($scope.emails, function (email) {
          if (email.subject) {
            var lowercaseEmailSubject = email.subject.replace(new RegExp('[^a-zA-Z ]'), "").toLowerCase();
            var percentMatch = lowercaseSubject.score(lowercaseEmailSubject);
            if (bestMatch.percent < percentMatch) {
              bestMatch.value = email.subject;
              bestMatch.percent = percentMatch;
            }
          }
        });

        if (bestMatch.value && bestMatch.percent > 0.75) {
          differentFromPreviousSubjects = false;
          $scope.bestMatch = bestMatch;
        }
      }

      //No special characters except for question mark
      if (/^[a-zA-Z0-9- ]*$/.test(subject) === false) {
        isAlphaNumeric = false;
      }

      //TODO: contains personalization

      var percentRating = 100;
      var sixth = 12.5;
      var rulesBooleanArr = [capitalized, lessThan50Char, lessThan10Words, isAlphaNumeric, containsWordToUse, avoidsWordNotToUse, moreThan4Words, differentFromPreviousSubjects];
      _.each(rulesBooleanArr, function (rule) {
        if (rule === false) {
          percentRating = percentRating - sixth;
        }
      });

      $scope.subjectRules = {
        "capitalized": capitalized,
        "lessThan50Char": lessThan50Char,
        "lessThan10Words": lessThan10Words,
        "isAlphaNumeric": isAlphaNumeric,
        "containsWordToUse": containsWordToUse,
        "avoidsWordNotToUse": avoidsWordNotToUse,
        "moreThan4Words": moreThan4Words,
        "differentFromPreviousSubjects": differentFromPreviousSubjects
      };

      $scope.subjectScore = Math.round(percentRating);

    };


    $scope.$watch('emailToSend.subject', function (newValue, oldValue) {
      if (newValue) {
        $scope.analyzeSubject(newValue);
      }
    });

    /*
     * @changeCurrentEmail
     * - set selected email
     */
    $scope.changeCurrentEmail = function (selectedEmail) {
      $scope.emailToSend = selectedEmail;
      if((!$scope.emailToSend.campaignId || ($scope.newCampaignObj && $scope.emailToSend.campaignId !== $scope.newCampaignObj._id)))
        $scope.emailToSend.bcc = ""
      $scope.confirmOverrideExistingEmails();
    };

    /*
     * @checkCampaignName
     * - check for existing campaign name
     */
    $scope.checkCampaignName = function (_name) {
      $scope.checkingCampaignName = true;
      CampaignService.checkCampaignNameExists(_name, function (exists) {
        $scope.campaignNameChecked = true;
        $scope.checkingCampaignName = false;
        $scope.campaignNameExists = exists;
        $scope.emailToSend.title = _name + ' Email';
        $scope.emailToSend.subject = _name;
        $scope.checkEmailTitle($scope.emailToSend.title);
      });
    };

    /*
     * @checkCampaignName
     * - check for existing campaign name
     */
    $scope.checkDuplicateCampaignName = function (_name) {
      $scope.checkingDuplicateCampaignName = true;
      CampaignService.checkCampaignNameExists(_name, function (exists) {
        $scope.campaignDuplicateNameChecked = true;
        $scope.checkingDuplicateCampaignName = false;
        $scope.campaignDuplicateNameExists = exists;
      });
    };

    /*
     * @checkEmailTitle
     * - check email title doesnt exist already
     */
    $scope.checkEmailTitle = function (_name) {
      if ($scope.selectedEmail.type === 'new') {
        $scope.checkingEmailTitle = true;
        var exists = _.find($scope.originalEmails, function(email){
          return email.title && email.title.toLowerCase() == _name.toLowerCase();
        });
        $scope.emailTitleExists = exists ? true : false;
      } else {
        $scope.emailTitleExists = false;
      }

      $scope.emailTitleChecked = true;
      $scope.checkingEmailTitle = false;
    };

    $scope.confirmOverrideExistingEmails = function(){
      if((!$scope.emailToSend.campaignId || ($scope.newCampaignObj && $scope.emailToSend.campaignId !== $scope.newCampaignObj._id)) && $scope.selectedEmail.type != 'new'){
          SweetAlert.swal({
          title: "How would you like to use the selected email?",
          text: "You are saving changes to an email used by more than one campaign or product. Do you wish to update the existing email (altering all campaigns or products) or create and update a copy specific to this campaign?",
          type: "warning",
          showCancelButton: true,
          confirmButtonColor: "#DD6B55",
          confirmButtonText: "Save edits to existing email",
          cancelButtonText: "Create a copy",
          closeOnConfirm: true,
          closeOnCancel: true
        }, function (isConfirm) {
          if (isConfirm) {
            $timeout(function() {
              $scope.$apply(function () {
                $scope.isCampainDirty.dirty = true;
                $scope.existingEmail.replace = true;
              })
            },0)

            if($scope.newCampaignObj.steps && $scope.newCampaignObj.steps[0] && $scope.newCampaignObj.steps[0].settings && !$scope.newCampaignObj.steps[0].settings.emailId && $scope.emailToSendPrevious){
              $scope.newCampaignObj.steps[0].settings.emailId = $scope.emailToSendPrevious._id;
              $scope.emailToSend.title = $scope.emailToSendPrevious.title;
            }
            $scope.checkEmailTitle($scope.emailToSend.title);
          }
          else {
            $timeout(function() {
              $scope.$apply(function () {
                $scope.isCampainDirty.dirty = true;
                $scope.existingEmail.replace = false;
              })
            },0)
            $scope.emailToSend.title = $scope.newCampaignObj.name + " " + moment().toDate().getTime();
            $scope.emailToSend.campaignId = null;
            $scope.selectedEmail.type = 'new';
            $scope.checkEmailTitle($scope.emailToSend.title);

          }
        })
      }
    }

    /*
     * @clearEmail
     * - callback for toggle on radio input "New Email" vs. "Template"
     */
    $scope.clearEmail = function (newEmail) {
      $scope.checkingEmailTitle = false;
      $scope.actualEmailToSend = null;
      if (newEmail) {
        $scope.emailToSendPrevious = angular.copy($scope.emailToSend);
        $scope.setBusinessDetails(newEmail);
        $scope.emailToSend = $scope.emailToSendCopy;
        $scope.emailToSend.title = $scope.newCampaignObj.name + ' Email';
        $scope.emailToSend.bcc = "";
        $scope.emailToSend.subject = $scope.newCampaignObj.name;
        $scope.checkEmailTitle($scope.emailToSend.title);
        if($scope.newCampaignObj && $scope.newCampaignObj.steps && $scope.newCampaignObj.steps[0] && $scope.newCampaignObj.steps[0].settings)
          $scope.newCampaignObj.steps[0].settings.emailId = null;
      } else {
        $scope.setBusinessDetails();
        $scope.emailToSend = $scope.emailToSendPrevious;
        if($scope.newCampaignObj.steps && $scope.newCampaignObj.steps[0] && $scope.newCampaignObj.steps[0].settings && !$scope.newCampaignObj.steps[0].settings.emailId && $scope.emailToSendPrevious)
          $scope.newCampaignObj.steps[0].settings.emailId = $scope.emailToSendPrevious._id

        $timeout(function() {
          $scope.actualEmailToSend = angular.copy($scope.emailToSend);
        }, 500);

      }
    }

    /*
     * @contactSelected
     * - callback for contact tag click added from dropdown list
     */
    $scope.contactSelected = function (select) {
      var selected = select.selected[select.selected.length - 1];
      var removalIndex = _.indexOf($scope.recipientsToRemove, selected._id);
      var existingContact = _.find($scope.recipients, function (recipient) {
        return recipient._id === selected._id;
      });

      if (!existingContact) {
        $scope.recipients.push(selected);
      }

      // clear search text
      select.search = '';

      //remove from removal array
      if (removalIndex !== -1) {
        $scope.recipientsToRemove.splice(removalIndex, 1);
      }
    };

    /*
     * @contactRemoved
     * - callback for contact tag click on [X] button
     */
    $scope.contactRemoved = function (select, selected) {
      var existingContactIndex;
      var contact = _.findWhere($scope.recipients, {
        _id: selected._id
      });
      if (contact) {
        existingContactIndex = _.indexOf($scope.recipients, contact);
      }

      if (existingContactIndex > -1) {
        //get the tags that have been selected
         var tags = $scope.getSelectedTags();
         var tempTags = [];
         var tagLabel = "";
         _.each(contact.tags, function (tag) {
              tagLabel = _.findWhere(contactTags, { data: tag });
              if(tagLabel)
                tempTags.push(tagLabel.label);
              else
                tempTags.push(tag);
        });
        if(!tempTags.length)
          tempTags.push('No Tag');
        var tagExists = _.intersection(tempTags, tags);
        if (tagExists.length === 0) {
            $scope.recipients.splice(existingContactIndex, 1);
        }

      }
      // clear search text
      select.search = '';

      //add to removal array
      $scope.recipientsToRemove.push(selected._id);
    };

    /*
     * DEPRECATED: @manualEmailsEntered
     * - check for valid email addresses entered
     */
    // $scope.manualEmailsEntered = function () {
    //   var splits = $scope.selectedContacts.newEmails.split(',');
    //   var validatedEmails = [];
    //   _.each(splits, function (split) {
    //     var nospaces = split.replace(' ', '');
    //     if (nospaces.length > 0 && $scope.validateEmail(split)) {
    //       validatedEmails.push(split);
    //     }
    //   });
    //   $scope.newContactsLength = validatedEmails.length;
    // };

    /*
     * @checkBestEmail
     * -
     */
    $scope.checkBestEmail = function (contact) {
      var returnVal = ContactService.checkContactBestEmail(contact);
      return returnVal;
    };

    /*
     * @eliminateDuplicate
     * -
     */
    $scope.eliminateDuplicate = function (contact) {
      return $scope.selectedContacts.individuals.indexOf(contact._id) > -1;
    };

    /*
     * @getSelectedTags
     * - loop through tags, return selected
     */
    $scope.getSelectedTags = function () {
      var tags = [];
      _.each($scope.tagSelection, function (fullTag) {
        var matchingTag = _.find(contactTags, function (matchTag) {
          return matchTag.label === fullTag;
        });
        if (matchingTag) {
          tags.push(matchingTag.label);
        }
        else{
          tags.push(fullTag);
        }
      });
      return tags;
    };

    /*
     * @getRecipients
     * - compile recipients to save to campaign
     */
    $scope.getRecipients = function () {

      var fullContacts = [];

      //get the tags that have been selected
      var tags = $scope.getSelectedTags();

      //loop through contacts and add if one of the tags matches

      _.each($scope.contacts, function (contact) {
        if (contact.tags && contact.tags.length > 0) {
          var tempTags = [];
          var tagLabel = "";
          _.each(contact.tags, function (tag) {
              tagLabel = _.findWhere(contactTags, { data: tag });
              if(tagLabel)
                tempTags.push(tagLabel.label);
              else
                tempTags.push(tag);
          });
          var tagExists = _.intersection(tempTags, tags);
          if (tagExists.length > 0) {
            if (!$scope.eliminateDuplicate(contact))
              fullContacts.push(contact);
          }
        } else {
          if (tags.indexOf('No Tag') > -1) {
            if (!$scope.eliminateDuplicate(contact))
              fullContacts.push(contact);
          }
        }

        //add contacts from individual

        if ($scope.selectedContacts.individuals.indexOf(contact._id) > -1) {
          fullContacts.push(contact);
        }
      });

      return fullContacts;
    };

     $scope.contactTagsFn = function (contact) {
       return ContactService.contactTags(contact);
     };

    /*
     * @checkContactExists
     * -
     */
    $scope.checkContactExists = function (email) {
      var matchingRecipient = _.find($scope.recipients, function (recipient) {
        if (recipient.details && recipient.details[0] && recipient.details[0].emails && recipient.details[0].emails[0] && recipient.details[0].emails[0].email) {
          return (recipient.details[0].emails[0].email).toLowerCase() === email.text;
        }
      });
      var matchingContact = _.find($scope.contacts, function (contact) {
        if (contact.details && contact.details[0] && contact.details[0].emails && contact.details[0].emails[0] && contact.details[0].emails[0].email) {
          return (contact.details[0].emails[0].email).toLowerCase() === email.text;
        }
      });
      if (matchingRecipient || matchingContact) {
        return false;
      }

      return true;
    };

    /*
     * @createContactData
     * - stub out contact data
     */
    $scope.createContactData = function (email) {
      // New contact
      var contact = {
        details: [{
          emails: []
        }]
      };

      contact.details[0].emails.push({
        email: email
      });
      return contact;
    };

    /*
     * @checkAndCreateContact
     * - check email addresses entered and create new contact
     */
    $scope.checkAndCreateContact = function (fn) {
      var contactsArr = [];
      var promises = [];
      if ($scope.selectedContacts.newEmails) {
        var _emails = $scope.selectedContacts.newEmails;
        _.each(_emails, function (email) {
          var contact = _.findWhere($scope.contacts, {
            email: email.text
          });
          if (!contact) {
            var tempContact = $scope.createContactData(email.text);
            promises.push(ContactService.createContact(tempContact));
          } else {
            contactsArr.push(contact._id);
          }
        });
      }

      if (promises.length) {
        $q.all(promises)
          .then(function (data) {
            _.each(data, function (value) {
              contactsArr.push(value.data._id);
            });
            fn(contactsArr);
          })
          .catch(function (err) {
            console.error(err);
          });
      } else {
        fn(contactsArr);
      }
    };

    /*
     * @activateCampaign
     * - set campaign to 'RUNNING' then call saveOrUpdateCampaign
     * - update navigation function
     */
    $scope.activateCampaign = function () {
      $scope.newCampaignObj.status = 'RUNNING';
      $scope.navigateOnSave = function() {
        $timeout(function() {
          $scope.resetDirty();
          $location.path('/marketing/campaigns');
        }, 750);
      };
      if ($scope.newCampaignObj._id) {
        $scope.saveOrUpdateCampaign(true);
      } else {
        $scope.saveOrUpdateCampaign(false);
      }
    };


    $scope.$watchGroup(['emailToSend.fromName', 'emailToSend.fromEmail', 'emailToSend.replyTo', 'emailToSend.bcc', 'emailToSend.subject'], function(newValue, oldValue){
       if(newValue && $scope.actualEmailToSend && !angular.equals($scope.actualEmailToSend, $scope.emailToSend) && !$scope.existingEmail.replace && $scope.selectedEmail.type != 'new'){
          $scope.confirmOverrideExistingEmails();
       }
    });

    /*
     * @saveOrUpdateCampaign
     * - save or update campaign based on new campaign or existing
     */
    $scope.saveOrUpdateCampaign = function (update) {
      //add new email if exists
      $scope.saveLoading = true;
      $scope.changesConfirmed = true;
      var actionFn = update ? 'updateCampaign' : 'createCampaign';
      var stepSettings = $scope.newCampaignObj.steps[0].settings;

      $scope.checkAndCreateContact(function (createdContactsArr) {
        $scope.addContacts(createdContactsArr);
        if (!stepSettings.emailId || (angular.isDefined($scope.existingEmail.replace) && !$scope.existingEmail.replace)) {
          $scope.emailToSend.campaignId = $scope.newCampaignObj._id;
          WebsiteService.createEmail($scope.emailToSend, function (newEmail) {
            $scope.isNewEmailObj = true;
            $scope[actionFn](newEmail);
          });
        } else {
          $scope.isNewEmailObj = false;
          $scope[actionFn]($scope.emailToSend);
        }
      });
    };

    /*
     * @createCampaign
     * -
     */
    $scope.createCampaign = function (newEmail) {

      //set/format email and send date
      $scope.setEmail(newEmail);
      $scope.setDate();
      $scope.setTagsOnCampaign();
      $scope.updatedEmail = angular.copy(newEmail);

      if($scope.updatedEmail && $scope.existingEmail.replace){
        WebsiteService.updateEmail($scope.updatedEmail, function(data, error) {
          CampaignService.createCampaign($scope.newCampaignObj, $scope.savedSuccess, function(){
            $scope.pageSaving = false;
          })
        });
      }
      else
      {
        CampaignService.createCampaign($scope.newCampaignObj, $scope.savedSuccess, function(){
            $scope.pageSaving = false;
          })
      }

    };

    /*
     * @updateCampaign
     * -
     */
    $scope.updateCampaign = function (newEmail) {

      //set/format email and send date
      $scope.setEmail(newEmail);
      $scope.setDate();
      $scope.setTagsOnCampaign();
      $scope.updatedEmail = angular.copy(newEmail);
      //remove any contacts that were marked for removal
      $scope.removeContactsFromCampaign();

      //update campaign

      if($scope.updatedEmail && $scope.existingEmail.replace && !$scope.checkIfDuplicateCampaign || ($scope.newCampaignObj && $scope.emailToSend.campaignId && $scope.emailToSend.campaignId === $scope.newCampaignObj._id)){
        WebsiteService.updateEmail($scope.updatedEmail, function(data, error) {
         CampaignService.updateCampaign($scope.newCampaignObj, $scope.savedSuccess, function(){
            $scope.pageSaving = false;
          })
        });
      }
      else{
        CampaignService.updateCampaign($scope.newCampaignObj, $scope.savedSuccess, function(){
            $scope.pageSaving = false;
        })
      }
    };

    /*
     * @savedSuccess
     * - callback on create or update success
     * - navigate to next page
     */
    $scope.savedSuccess = function(_newCampaign) {
    $scope.updatedEmail.campaignId = _newCampaign._id;
    if($scope.isNewEmailObj)
      WebsiteService.updateEmail($scope.updatedEmail, function(data, error) {

      });
      if($scope.checkIfDuplicateCampaign){
        $scope.checkIfDuplicateCampaign = false;
        $scope.redirectAfterDuplicate(_newCampaign._id);
      }
      else
      {
        $scope.saveLoading = false;
        $scope.resetDirty();
        toaster.pop('success', 'Campaign updated successfully');
        $scope.emails = [];
        $scope.navigateOnSave && $scope.navigateOnSave();
      }


    };


    /*
     * @setTagsOnCampaign
     * - set selected tags on 'contacts' property of campaign obj
     */
    $scope.setTagsOnCampaign = function() {
      $scope.newCampaignObj.contactTags = $scope.getSelectedTags();
    };

    $scope.updateTagsFn = function (recipients) {
        if (angular.isDefined($scope.newCampaignObj.searchTags.tags) && $scope.newCampaignObj.searchTags.tags.length) {

            ContactService.getContacts(function (contacts) {
                $scope.contacts = contacts;
                var tags = _.uniq(_.pluck($scope.newCampaignObj.searchTags.tags, 'data'));
                recipients.forEach(function(id, index) {
                    var c = _.findWhere($scope.contacts, {_id: id});
                    if (c) {
                        if ($scope.newCampaignObj.searchTags.operation == 'add') {
                            if (c.tags) {
                                c.tags = c.tags.concat(tags);
                            } else {
                                c.tags = tags;
                            }
                        } else if ($scope.newCampaignObj.searchTags.operation == 'set') {
                            c.tags = tags;
                        }
                        c.tags = _.uniq(c.tags);
                        ContactService.saveContact(c, function() {});
                    }
                });
            });
        }
    };

    /*
     * @addContacts
     * -
     */
    $scope.addContacts = function(createdContactsArr, fn) {
      //get an array of contact Ids from recipients
      var recipientsIdArr = [];

      _.each($scope.recipients, function (recipient) {
        if (recipient._id) {
          recipientsIdArr.push(recipient._id);
        }
      });

      //add created contacts to recipients array
      if (createdContactsArr.length > 0) {
        _.each(createdContactsArr, function (createdContactId) {
          if (recipientsIdArr.indexOf(createdContactId) < 0) {
            recipientsIdArr.push(createdContactId);
          }
        });
      }

      var contactsArr = recipientsIdArr;

      $scope.newCampaignObj.contacts = contactsArr;
      $scope.updateTagsFn($scope.newCampaignObj.contacts);
    };

    /*
     * @removeContactsFromCampaign
     * - cancel campaign for contacts marked for removal
     */
    $scope.removeContactsFromCampaign = function() {
      angular.forEach($scope.recipientsToRemove, function(contactId) {
        CampaignService.cancelCampaignForContact($scope.newCampaignObj, contactId, function() {
          console.log('removed ' + contactId);
        });
      });
      _.each($scope.removeContactsFromCampaign, function(id) {
        console.log('remove ' + id);
        console.log(_.indexOf($scope.newCampaignObj.contacts, id));
      });
    };

    /*
     * @setEmail
     * - set email-related data
     */
    $scope.setEmail = function(newEmail) {
      if (newEmail) {
        var stepSettings = $scope.newCampaignObj.steps[0].settings;
        stepSettings.emailId = newEmail._id;
        stepSettings.fromEmail = newEmail.fromEmail;
        stepSettings.fromName = newEmail.fromName;
        stepSettings.replyTo = newEmail.replyTo;
        stepSettings.bcc = newEmail.bcc;
        stepSettings.subject = newEmail.subject;
      }
    };

    /*
     * @setDate
     * - set date data
     */
    $scope.setDate = function() {
      var sendAt = $scope.newCampaignObj.steps[0].settings.sendAt;
      var delivery = moment.utc($scope.delivery.date)//.add(moment().utcOffset(), 'minutes');
      sendAt.year = moment.utc(delivery).get('year');
      sendAt.month = moment.utc(delivery).get('month') + 1;
      sendAt.day = moment.utc(delivery).get('date');
      sendAt.hour = moment.utc(delivery).get('hour');
      sendAt.minute = moment.utc(delivery).get('minute');
      console.log(sendAt);
    };

    /*
     * @checkCampaignNameExists
     */
    $scope.checkCampaignNameExists = function () {
      var exists = false;
      if ($scope.checkingCampaignName) {
        exists = true;
      }
      if ($scope.campaignNameExists) {
        exists = true;
      }
      return exists;
    };

    /*
     * @checkNewRecipients
     * - check for recipients added
     */
    $scope.checkNewRecipients = function () {
      var returnValue = false;
      if ($scope.selectedContacts.newEmails && $scope.selectedContacts.newEmails.length)
        returnValue = true;
      return returnValue;
    };

    /*
     * @validateStep
     * - check for required fields
     */
    $scope.validateStep = function (i, valid) {
      if (valid) {
        if (i === 2 && (!$scope.newCampaignObj.name || $scope.checkCampaignNameExists()))
          valid = false;
        else if (i === 3 && (!$scope.emailToSend.title || $scope.emailTitleExists))
          valid = false;
        else if (i === 4 && ($scope.newCampaignObj.type == 'onetime' && !$scope.recipients.length && !$scope.checkNewRecipients()))
          valid = false;
        else if (i === 5 && $scope.whenToSend === 'later' && $scope.newCampaignObj.type === 'onetime') {
          $scope.updateTime();
          if ($scope.invalidDate)
            valid = false;
        }
      }
      return valid;
    }

    /*
     * @ValidateBeforeProceed
     * - check for valid current step
     */
    $scope.ValidateBeforeProceed = function (i) {
      var index = 2;
      var valid = true;
      if (i >= 2) {
        while (index <= i && index >= 2) {
          valid = $scope.validateStep(index, valid);
          if (valid)
            index++;
          else
            index = 0;
        }
      }
      if (!valid) {
        errorMessage(i);
        valid = false;
      }
      return valid;
    }

    /*
     * @toggleSelection
     * - toggle selected contact tags
     */
    $scope.toggleSelection = function (tagName) {
      var idx = $scope.tagSelection.indexOf(tagName);

      // is currently selected
      if (idx > -1) {
        $scope.tagSelection.splice(idx, 1);
      } else {
        $scope.tagSelection.push(tagName);
      }
      $scope.recipients = $scope.getRecipients();

    };

    $scope.currentStep = 1;

    /*
     * @form
     * - Initial Value
     */
    $scope.form = {
      next: function () {
        var i = $scope.currentStep + 1;
        var valid = $scope.ValidateBeforeProceed(i);
        if (valid) {
          $scope.goingTo = 'next';
          $scope.toTheTop();
          nextStep();
          $scope.updateSendNow($scope.whenToSend);
        }
      },
      prev: function () {
        $scope.goingTo = 'prev';
        $scope.toTheTop();
        prevStep();
        $scope.updateSendNow($scope.whenToSend);
      },
      goTo: function (i) {
        var valid = true;
        //validate first step
        console.log('$scope.newCampaignObj.name ', $scope.newCampaignObj.name);
        console.log('$scope.newCampaignObj.type ', $scope.newCampaignObj.type);
        var valid = $scope.ValidateBeforeProceed(i);
        if (valid) {
          $scope.toTheTop();
          goToStep(i);
          $scope.updateSendNow($scope.whenToSend);
        }
      },
      submit: function () {
        console.log('submit');
      },
      reset: function () {
        console.log('reset');
      }
    };

    $scope.redirectAfterDuplicate =function(campaign_id){
      $timeout(function() {
          $scope.saveLoadingDuplicate = true;
          $scope.closeModal();
        }, 0);

        if (campaign_id) {

          $timeout(function() {
            $scope.resetDirty();
            $location.path('/marketing/campaigns/' + campaign_id);
          }, 1000);

        }
    }

    $scope.saveDuplicateCampaign = function(newCampaign){
      $scope.saveLoadingDuplicate = true;
      $scope.checkIfDuplicateCampaign = true;
      CampaignService.duplicateCampaign($scope.newCampaignObj._id, newCampaign,function(data) {
        if(!angular.equals($scope.originalEmailToSend, $scope.emailToSend)){
          delete $scope.emailToSend._id;
          delete $scope.emailToSend.accountId;
          delete $scope.emailToSend.created;
          delete $scope.emailToSend.modified;
          delete $scope.emailToSend.version;
          delete $scope.emailToSend.latest;
          $scope.emailToSend.campaignId = data._id;
          $scope.newCampaignObj = data;

          $scope.emailToSend.title = newCampaign.name + " " + moment().toDate().getTime();
          WebsiteService.createEmail($scope.emailToSend, function(data){
            $scope.newCampaignObj.steps[0].settings.emailId = data._id;
            $scope.updateCampaign(data);
          });
        }
        else{
          $scope.redirectAfterDuplicate(data._id);
        }
      });
    }

    /*
     * @createDuplicateCampaign
     * - TODO: check name exists
     */
    $scope.createDuplicateCampaign = function (newCampaign) {

              if ($scope.newCampaignObj._id) {
                CampaignService.checkCampaignNameExists(newCampaign.name, function (exists) {
                  $scope.campaignDuplicateNameChecked = true;
                  $scope.checkingDuplicateCampaignName = false;
                  $scope.campaignDuplicateNameExists = exists;
                  if(!exists){
                    $scope.saveDuplicateCampaign(newCampaign);
                  }
                });
              } else {
                toaster.pop('error', 'Error', 'Please save this campaign before duplicating');
              }



    };

    /*
     * @saveCampaign
     * - if pending changes, kick off save flow
     * - if navigating to new url, show alert
     * - validate/check and call saveOrUpdateCampaign
     */
    $scope.saveCampaign = function (_url) {
      $scope.pageSaving = true;
      $scope.changesConfirmed = true;
      if ($scope.pendingChanges()) {
        var save = function() {
          if (!$scope.newCampaignObj._id) {
            CampaignService.checkCampaignNameExists($scope.newCampaignObj.name, function (exists) {
                $scope.saveOrUpdateCampaign(false);
            });
          } else {
            $scope.saveOrUpdateCampaign(true);
          }
        }

        $scope.saveLoading = true;

        //preserve intended navigation
        if (_url) {
          $scope.navigateURL = _url;
          $scope.navigateOnSave = function() {
            $timeout(function() {
              $scope.resetDirty();
              $window.location = $scope.navigateURL
            }, 750);
          };

          SweetAlert.swal({
            title: "You have unsaved changes.",
            text: "Do you want to save pending changes to this campaign?",
            type: "warning",
            showCancelButton: true,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "Yes, save it!",
            cancelButtonText: "No, do not save.",
            closeOnConfirm: true,
            closeOnCancel: true
          }, function (isConfirm) {
            if (isConfirm) {
              $scope.changesConfirmed = true;
              save();
            }
          });
        } else {
          $scope.navigateOnSave = function() {
            $timeout(function() {
              $scope.resetDirty();
              $location.path('/marketing/campaigns');
            }, 750);
          };
          if ($scope.validateStep($scope.currentStep + 1, true)) {
            save();
          } else {
            $scope.saveLoading = false;
            toaster.pop('error', 'Error', 'Please complete the form in this step before proceeding');
          }
        }
      }

    };

    /*
     * @deleteCampaign
     * - TODO: API updates to support deleting campaign
     */
    $scope.deleteCampaign = function() {
      SweetAlert.swal({
        title: "Are you sure?",
        text: "Do you want to delete this campaign?",
        type: "warning",
        showCancelButton: true,
        confirmButtonColor: "#DD6B55",
        confirmButtonText: "Yes, delete campaign!",
        cancelButtonText: "No, do not delete campaign!",
        closeOnConfirm: false,
        closeOnCancel: false
      },
      function (isConfirm) {
        if (isConfirm) {
          SweetAlert.swal("Saved!", "Campaign is deleted.", "success");
          CampaignService.deleteCampaign($scope.newCampaignObj._id, function(data) {
            toaster.pop('success', "Campaign Deleted", "The " + $scope.newCampaignObj.name + " campaign was deleted successfully.");
            $scope.closeModal();
            $timeout(function () {
              $location.path('/marketing/campaigns');
            }, 500)
          });
        } else {
          SweetAlert.swal("Cancelled", "Campaign not deleted.", "error");
        }
      });
    };


    /*
     * @setBusinessDetails
     * - set any filled out info from business data
     */
    $scope.setBusinessDetails = function(update) {
      var account = $scope.account;
      var logo = account.business.logo || '<h2>Logo Here</h2>';
      var businessName = account.business.name || 'Edit name';
      var fromEmail = account.business.emails[0].email || 'Edit email';

      if ($scope.emailToSend) {
        if (logo.indexOf('http') != -1 && $scope.emailToSend.components[0].logo == '<h2>Logo Here</h2>') {
          $scope.emailToSend.components[0].logo = '<img src="' + account.business.logo + '"/>';
          $scope.emailToSendCopy.components[0].logo = '<img src="' + account.business.logo + '"/>';
        }
        if (businessName && ($scope.emailToSend.fromName == '' || update)) {
          $scope.emailToSend.fromName = account.business.name;
          $scope.emailToSendCopy.fromName = account.business.name;
        }
        if (fromEmail && ($scope.emailToSend.fromEmail == '' || update)) {
          $scope.emailToSend.fromEmail = account.business.emails[0].email;
          $scope.emailToSendCopy.fromEmail = account.business.emails[0].email;
        }
        if (fromEmail && ($scope.emailToSend.replyTo == '' || update)) {
          $scope.emailToSend.replyTo = account.business.emails[0].email;
          $scope.emailToSendCopy.replyTo = account.business.emails[0].email;
        }
      }
    };

    /*
     * @getAccount
     * - get account and autofill new email details
     */

    $scope.getAccount = function() {
      var promise = AccountService.getAccount(function (_account) {
        $scope.account = _account;
        $scope.setBusinessDetails();

        $timeout(function() {
          $scope.actualEmailToSend = angular.copy($scope.emailToSend);
        }, 500);
      });
      return promise;
    };

    /*
     * @getEmails
     * - get all emails for this user, then...
     * - find selected email for this campaign by id
     */
    $scope.getEmails = function() {

      var promise = WebsiteService.getEmails(false, function (_emails) {
        var emailId = $scope.newCampaignObj.steps[0].settings.emailId;
        var matchedEmail = null;
        var emailMatch = function(email) {
          return email._id === emailId;
        };

        $scope.emails = angular.copy(_emails);
        $scope.originalEmails = angular.copy(_emails);

        matchedEmail = $scope.emails.filter(emailMatch)[0];
        if (emailId && matchedEmail) {
          $scope.emailToSend = matchedEmail;
          $scope.originalEmailToSend = angular.copy($scope.emailToSend);
        } else {
          console.log('email not found');
        }

        $scope.emailToSendPrevious = $scope.emails[0];
      });

      return promise;
    };


    CKEDITOR.on("instanceReady", function (ev) {
      ev.editor.on('key', function () {
        if(!$scope.isCampainDirty.dirty){
          $scope.setCampaignDirty();
        }
      });
      ev.editor.on('change', function () {
        if(!$scope.isCampainDirty.dirty){
          $scope.setCampaignDirty();
        }
      });
    })

    /*
     * @getCampaign
     * - get saved campaign data, then...
     * - set selected email to template since we've saved the email already
     * - if onetime campaign, set send-date data
     * - set editable mode
     */
    $scope.getCampaign = function() {

      var promise = CampaignService.getCampaign($stateParams.campaignId, function (data) {

          var sendAtDateISOString = moment.utc(data.steps[0].settings.sendAt).subtract('months', 1).toISOString();
          var localMoment = moment(sendAtDateISOString);

          $scope.originalCampaignObj = angular.copy(data);
          $scope.newCampaignObj = data;
          $scope.selectedEmail = {
            type: 'template'
          };

          if ($scope.newCampaignObj.type === 'onetime') {
            //if valid date and in future, set 'later'
            if (localMoment.isValid() && localMoment.isAfter(moment()) || !$scope.isEditable) {
              $scope.whenToSend = 'later';
              // $scope.delivery.time = moment.utc(sendAtDateObj).add(moment().utcOffset(), 'minutes');
              $scope.delivery.date = localMoment;
              $scope.delivery.originalDate = angular.copy(localMoment);
            }
          }

          $scope.setEditable();
      });

      return promise;
    };

    /*
     * @getContacts
     * - get saved contacts attached to this campaign
     */
    $scope.selectedContacts.individuals = [];
    $scope.getCampaignContacts = function() {
      var promise = CampaignService.getCampaignContacts($stateParams.campaignId, function (data) {
          $scope.originalRecipients = angular.copy(data);
          $scope.recipients = data;
          var individuals = [];
          _.each(data, function (contact) {
              individuals.push(
                contact._id
              )
          })
          $scope.selectedContacts.individuals = individuals;
      });
      return promise;
    };

    /*
     * @getContacts
     * - get all contacts for this user
     */
    $scope.getContacts = function() {
      var promise = ContactService.getContacts(function (contacts) {
        var contactWithoutEmails = [];
        _.each(contacts, function (contact) {
          if (!$scope.checkBestEmail(contact)) {
            contactWithoutEmails.push(contact);
          }
        });
        contacts = _.difference(contacts, contactWithoutEmails);
        $scope.contacts = contacts;
        ContactService.getAllContactTags(contacts, function(tags){
          contactTags = tags;
        })
        var _tags = [];
        $scope.allContacts = [];
        _.each(contacts, function (contact) {
          $scope.allContacts.push({
            _id: contact._id,
            first: contact.first
          })
          //contact.fullName = contact.first + " " + contact.last || '';
          if (contact.tags && contact.tags.length > 0) {
            _.each(contact.tags, function (tag) {
              var tagLabel = _.findWhere(contactTags, { data: tag });
              if(tagLabel)
                _tags.push(tagLabel.label);
              else
                _tags.push(tag);
            });
          } else {
            _tags.push('nt');
          }
        });
        var d = _.groupBy(_tags, function (tag) {
          return tag;
        });

        var x = _.map(d, function (tag) {
            var returnObj = {
                uniqueTag: tag[0],
                numberOfTags: tag.length
            };
            var matchingTagObj = _.find(contactTags, function (matchTag) {
                return matchTag.label === tag[0];
            });
            if(matchingTagObj) {
                returnObj.matchingTag = matchingTagObj.label;
            } else {
                returnObj.matchingTag = 'No Tag';
            }
          return returnObj;
        });
        $scope.contactCounts = x;
      });

      return promise;
    };

    /*
     * @loadSavedTags
     * - loop through saved tags and apply to data that drives the tag checkbox
     */
    $scope.loadSavedTags = function() {
      _.each($scope.newCampaignObj.contactTags, function(tag) {
        var tagLabel = _.findWhere(contactTags, { data: tag });
        if(tagLabel){
          tag = tagLabel.label
        }
        var tag = _.findWhere($scope.contactCounts, { uniqueTag: tag });
        if(tag)
          $scope.toggleSelection(tag.matchingTag);
      });
    };

    /*
     * @pendingChanges
     * - check for changes in the data
     */
    $scope.pendingChanges =  function() {
      _.each($scope.recipients, function (recipient) {
        delete recipient.$$hashKey;
      })

      return (
        ($scope.originalCampaignObj && !angular.equals($scope.originalCampaignObj, $scope.newCampaignObj)) ||
        ($scope.originalRecipients && $scope.originalRecipients.length && !angular.equals($scope.originalRecipients, $scope.recipients)) ||
        ($scope.selectedContacts && $scope.selectedContacts.newEmails && !angular.equals([], $scope.selectedContacts.newEmails)) ||
        ($scope.originalEmailToSend && !angular.equals($scope.originalEmailToSend, $scope.emailToSend)) ||
        ($scope.delivery.originalDate && !angular.equals($scope.delivery.originalDate, $scope.delivery.date))
      )
    };

    /*
     * @setEditable
     * - set mode based on campaign status
     */
    $scope.setEditable = function() {
      if ($scope.newCampaignObj.status.toLowerCase() === 'draft' || $scope.newCampaignObj.status.toLowerCase() === 'pending') {
        $scope.isEditable = true;
      }
    };

    /*
     * @setCampaignType
     * - set 'onetime' or 'autoresponder'
     * - TODO: when we have more triggers, should set selected triggers
     */
    $scope.setCampaignType = function(type) {
      $scope.newCampaignObj.type = type;
      if (type === 'autoresponder') {
        $scope.newCampaignObj.steps[0].trigger = 'SIGNUP';
      } else {
        $scope.newCampaignObj.steps[0].trigger = null;
      }
    };


    $scope.checkIfDirty = function(){
      var returnValue = false;
      returnValue = $scope.isEditable && $scope.pendingChanges();
      return returnValue;
    }
    $scope.resetDirty = function(){
        $scope.originalCampaignObj = null;
        $scope.newCampaignObj = null;
        $scope.originalEmailToSend = null;
        $scope.delivery.originalDate = null;
        $scope.originalRecipients = null;
        if($scope.selectedContacts){
          $scope.selectedContacts.newEmails = null;
        }
    }

    $scope.setCampaignDirty = function(){
      if($scope.selectedEmail.type != 'new' && !$scope.existingEmail.replace){
        if(!$scope.isCampainDirty.dirty){
          $timeout(function() {
            $scope.$apply(function () {
              $scope.isCampainDirty.dirty = true;
              $scope.confirmOverrideExistingEmails();
            })
          },0)
        }
      }
    }

    $scope.tagToContact = function(value) {
     return ContactService.tagToContact(value);
    };

    $scope.formatTagsFn = function () {
      if ($scope.newCampaignObj && angular.isDefined($scope.newCampaignObj.searchTags.tags) && $scope.newCampaignObj.searchTags.tags.length) {
        return _.uniq(_.pluck($scope.newCampaignObj.searchTags.tags, 'label')).join(', ');
      } else {
        return '';
      }
    };
    /*
     * @init
     * - Set page context (if creating or loading existing campaign).
     */
    $scope.init = (function(){

      if($stateParams.campaignId) {
        $scope.getCampaign().then(function(data) {
          return $scope.getEmails();
        }).then(function(data) {
          return $scope.getAccount();
        }).then(function(data) {
          return $scope.getContacts();
        }).then(function(data) {
          return $scope.getCampaignContacts();
        }).then(function(data) {
          $scope.loadSavedTags();
        });
      } else {
        $scope.setEditable();
        $scope.getEmails();
        $scope.getAccount();
        $scope.getContacts();
      }

    })();

  }]);

}(angular));

'use strict';
/*global app, moment, angular, window*/
/*jslint unparam:true*/
app.controller('DashboardCtrl', ["$scope", "OrderService", "ContactService", "ChartAnalyticsService", "UserService", "ChartCommerceService", "$modal", "$filter", "contactConstant", '$state',
    function ($scope, OrderService, ContactService, ChartAnalyticsService, UserService, ChartCommerceService, $modal, $filter, contactConstant, $state) {

    $scope.accountHideDohy = false;

    /*
     * @getAccount
     * - get user account and then run visitors report
     */

    UserService.getAccount(function (account) {
        if(account.showhide.dohy===true) {
            $state.go('app.dohy');
        } else {
            $scope.analyticsAccount = account;
            $scope.runVisitorsReport();
            $scope.runNetRevenueReport();
            $scope.accountHideDohy = true;
        }

    });


  /*
   * @getActivityName
   * - get activity actual name
   */
  $scope.getActivityName = function (activity) {
    var activity_hash = _.findWhere(contactConstant.contact_activity_types.dp, {
      data: activity
    });
    if (activity_hash) {
      return activity_hash.label;
    }
  };


  /**********PAGINATION RELATED **********/
    $scope.curPage = 0;
    $scope.pageSize = 1000;
    $scope.numberOfPages = function () {
      if ($scope.activities)
        return Math.ceil($scope.activities.length / $scope.pageSize);
      else
        return 0;
    };
    $scope.changePage = function (page) {
      $scope.curPage = $scope.curPage + page;
    }

  /*
   * @isSameDateAs
   * - determine if two dates are identical and return boolean
   */

  $scope.isSameDateAs = function (oDate, pDate) {
    return (
      oDate.getFullYear() === pDate.getFullYear() &&
      oDate.getMonth() === pDate.getMonth() &&
      oDate.getDate() === pDate.getDate()
    );
  };

  /*
   * @getDaysThisMonth
   * - get an array of days this month for loop purposes
   */

  $scope.getDaysThisMonth = function () {
    var newDate = new Date();
    var numOfDays = newDate.getDate();
    var days = [];
    var i = 0;
    for (i; i <= numOfDays; i++) {
      days[i] = new Date(newDate.getFullYear(), newDate.getMonth(), i + 1);
    }

    return days;
  };

  ContactService.getContacts(function (contacts) {
    ContactService.getAllContactActivities(function (activities) {
      $scope.activities = activities.results;
      _.each($scope.activities, function (activity) {
        var matchingContacts = _.findWhere(contacts, {
          _id: activity.contactId
        });
        activity.contact = matchingContacts;
      });
    });
  });

  /*
   * @getOrders
   * - get orders for orders widget
   */

  OrderService.getOrders(function (orders) {
    $scope.orders = orders;
    $scope.ordersThisMonth = [];
    var tempData = [];
    _.each($scope.getDaysThisMonth(), function (day) {
      var thisDaysOrders = 0;
      _.each(orders, function (order) {
        if (order.created.date) {
          if ($scope.isSameDateAs(new Date(order.created.date), new Date(day))) {
            $scope.ordersThisMonth.push(order);
            thisDaysOrders = thisDaysOrders + 1;
          }
        }
      });

      tempData.push(thisDaysOrders);
    });
    $scope.analyticsOrders = tempData;
  });

  /*
   * @getCompletedOrders
   * - get the number of compled orders this month
   */

  $scope.getCompletedOrders = function () {
    var completedOrders = [];
    _.each($scope.ordersThisMonth, function (order) {
      if (order.status === 'completed') {
        completedOrders.push(order);
      }
    });

    return completedOrders.length;
  };

  /*
   * @lastContactDate
   * - get the last contact date that was created
   */

  $scope.lastContactDate = function () {
    if ($scope.contactsThisMonth && $scope.contactsThisMonth[$scope.contactsThisMonth.length - 1] && $scope.contactsThisMonth[$scope.contactsThisMonth.length - 1].created) {
      return $scope.contactsThisMonth[$scope.contactsThisMonth.length - 1].created.date;
    }

  };

  /*
   * @getContacts
   * - get contact for the contact widget
   */
  $scope.contactNames = [];
  ContactService.getContacts(function (contacts) {

    $scope.contacts = contacts;
    $scope.contactsThisMonth = [];
    var tempData = [];
    _.each($scope.getDaysThisMonth(), function (day) {
      var thisDaysContacts = 0;
      _.each(contacts, function (contact) {
        if (contact.created.date) {
          if ($scope.isSameDateAs(new Date(contact.created.date), new Date(day))) {
            $scope.contactsThisMonth.push(contact);
            thisDaysContacts = thisDaysContacts + 1;
          }
        }

      });
      tempData.push(thisDaysContacts);
    });
    _.each(contacts, function (contact) {
      if(contact.first || contact.last)
        $scope.contactNames.push(contact.first + ' ' + contact.last);
    });
    $scope.analyticsContacts = tempData;
  });

  /*
   * @getContactLeads
   * - get the number of contacts that have a lead tag
   */

  $scope.getContactLeads = function () {
    var contactLeads = [];
    _.each($scope.contactsThisMonth, function (contact) {
      if (contact.tags && contact.tags.length > 0) {
        if (contact.tags.indexOf('ld') > -1) {
          contactLeads.push(contact);
        }
      }
    });

    return contactLeads.length;
  };

  /*
   * @lastOrderDate
   * - get the date of the last order created
   */

  $scope.lastOrderDate = function () {
    if ($scope.ordersThisMonth && $scope.ordersThisMonth[$scope.ordersThisMonth.length - 1] && $scope.ordersThisMonth[$scope.ordersThisMonth.length - 1].created) {
      return $scope.ordersThisMonth[$scope.ordersThisMonth.length - 1].created.date;
    }
  };



  /*
   * @date
   * - start and end date for this month
   */

  $scope.date = {
    startDate: moment().subtract(29, 'days').utc().format("YYYY-MM-DDTHH:mm:ss") + "Z",
    endDate: moment().utc().format("YYYY-MM-DDTHH:mm:ss") + "Z"
  };

  /*
   * @runVisitorsReport
   * - vistor reports recieves Keen data for visitors widget
   */
  $scope.analyticsVisitors = [];
  $scope.runVisitorsReport = function () {
    ChartAnalyticsService.visitorsReport($scope.date, $scope.analyticsAccount, function (data) {
      var returningVisitors = data[0].result;
      var newVisitors = data[1].result;

      $scope.visitorsThisMonth = 0;
      $scope.totalNewVisitors = 0;
      $scope.totalReturningVisitors = 0;
      $scope.lastVisitorDate = null;
      if (data[2].result[0]) {
        $scope.lastVisitorDate = data[2].result[0].keen.created_at;
      }
      var tempData = [];
      _.each($scope.getDaysThisMonth(), function (day) {
        var thisDaysVisitors = 0;
        _.each(returningVisitors, function (visitor, index) {
          if ($scope.isSameDateAs(new Date(visitor.timeframe.start), new Date(day))) {
            $scope.visitorsThisMonth += (visitor.value + newVisitors[index].value);
            thisDaysVisitors += (visitor.value + newVisitors[index].value);
            $scope.totalNewVisitors += newVisitors[index].value;
            $scope.totalReturningVisitors += visitor.value;
          }
        });

        tempData.push(thisDaysVisitors);
      });

      $scope.$apply(function () {
        $scope.analyticsVisitors = tempData;
      });
    });
  };

  /*
   * @runNetRevenueReport
   * - get net revenue data from Keen for dashboard widget
   */

  $scope.runNetRevenueReport = function () {
    ChartCommerceService.runNetRevenuReport(function (revenueData) {
      var revenue = revenueData[0].result;
      $scope.charges = revenueData[1].result;
      if (revenueData[2].result.length > 0) {
        $scope.lastChargeDate = revenueData[2].result[0].keen.created_at;
      }
      $scope.revenueThisMonth = 0;
      var tempData = [];
      _.each($scope.getDaysThisMonth(), function (day) {
        var thisDaysRevenue = 0;
        _.each(revenue, function (rev) {
          if ($scope.isSameDateAs(new Date(rev.timeframe.start), new Date(day))) {
            $scope.revenueThisMonth += (rev.value / 100);
            thisDaysRevenue += (rev.value/100);
          }
        });

        tempData.push(thisDaysRevenue);
      });

      $scope.$apply(function () {
        $scope.analyticsRevenue = tempData;
      });
    });
  };

  /*
   * @openModal
   * -
   */

  $scope.openModal = function (modal) {
    $scope.modalInstance = $modal.open({
      templateUrl: modal,
      keyboard: false,
      backdrop: 'static',
      scope: $scope
    });
  };

  /*
   * @closeModal
   * -
   */

  $scope.closeModal = function () {
    $scope.modalInstance.close();
  };

  $scope.newActivity = {
    start: new Date(),
    end: new Date()
  };

  $scope.activityTypes = [];

  contactConstant.contact_activity_types.dp.forEach(function (value, index) {
    $scope.activityTypes.push(value.label);
  });

  $scope.updateActivityTypeFn = function (selection) {
    var activity_hash = _.findWhere(contactConstant.contact_activity_types.dp, {
      label: selection
    });
    if (activity_hash) {
      $scope.newActivity.activityType = activity_hash.data;
    }
  };

  $scope.updateContactNameFn = function (selection) {
    var firstLast = selection.split(' ');
    var contactHash = _.findWhere($scope.contacts, {
      first: firstLast[0],
      last: firstLast[1]
    });
    if (contactHash) {
      $scope.newActivity.contactId = contactHash._id;
    }
  };

  //$scope.all_activities = angular.copy($scope.activities);
  $scope.addActivityFn = function () {
    angular.element("#activity_type .error").html("");
    angular.element("#activity_type .error").removeClass('has-error');
    var activity_type = angular.element("#activity_type input").val();
    var activity_hash = _.findWhere(contactConstant.contact_activity_types.dp, {
      label: activity_type
    });
     if(!activity_type || !activity_type.trim()) {
      angular.element("#activity_type .error").html("Activity Type Required");
      angular.element("#activity_type .error").addClass('has-error');
      return;
    }
    if (!activity_hash) {
      $scope.newActivity.activityType = activity_type;
    } else {
      $scope.newActivity.activityType = activity_hash.data;
    }

    ContactService.postContactActivity($scope.newActivity, function (activity) {
      var matchingContact = _.findWhere($scope.contacts, {
        _id: activity.contactId
      });
      activity.contact = matchingContact;
      $scope.activities.push(activity);
      $scope.activities = _.sortBy($scope.activities, function (o) {
        return o.start;
      }).reverse();
      $scope.newActivity = {
        start: new Date(),
        end: new Date()
      };
      if (!angular.isDefined($scope.activity_type)) {
        $scope.activity_type = '';
      }
      $scope.activities = $filter('filter')($scope.activities, {
        activityType: $scope.activity_type
      });
      $scope.total = $scope.activities.length;

      $scope.closeModal('addActivityModal');
    });
  };
}]);

'use strict';
/*global app, moment, angular, window, CKEDITOR*/
/*jslint unparam:true*/
(function (angular) {
  app.controller('EditorCtrl', ["$scope", "$state", "$document", "$rootScope", "$interval", "$timeout", "toaster", "$modal", "$filter", "$location", "WebsiteService", "SweetAlert", "hoursConstant", "GeocodeService", "ProductService", "AccountService", "postConstant", "formValidations", "$window", "SimpleSiteBuilderService", function ($scope, $state, $document, $rootScope, $interval, $timeout, toaster, $modal, $filter, $location, WebsiteService, SweetAlert, hoursConstant, GeocodeService, ProductService, AccountService, postConstant, formValidations, $window, SimpleSiteBuilderService) {

    /*
     * @circleOptions
     * -
     */

    $scope.$watch('$parent.emailToSend', function (newValue, oldValue) {
      console.log('newValue', newValue);
      $scope.ckeditorLoaded = false;
      $scope.retrieveEmail(null, newValue);
    });

    $scope.formValidations = formValidations;

    $scope.defaultSpacings = {
      'pt': 0,
      'pb': 0,
      'pl': 0,
      'pr': 0,
      'mt': 0,
      'mb': 0,
      'mr': 'auto',
      'ml': 'auto',
      'mw': '100%',
      'usePage': false
    };

    $scope.duplicate = false;

    $scope.circleOptions = {
      isOpen: false,
      toggleOnClick: false,
      background: '#FDB94E',
      size: "big",
      button: {
        content: "",
        cssClass: "fa fa-edit fa-2x",
        background: "#efa022",
        color: "#fff",
        size: "big"
      },
      items: [{
        type: 'design',
        content: '<span class="fa fa-paint-brush"></span> Design',
        cssClass: "",
        onclick: function (options, item, val, i) {
          $scope.openModal('component-settings-modal', 'ComponentSettingsModalCtrl', parseInt(i, 10));
        }
      }, {
        type: 'clone',
        content: '<span class="fa fa-clone"></span> Clone',
        cssClass: "",
        onclick: function (options, item, val, i) {
          $scope.duplicateComponent(parseInt(i, 10));
        }
      }, {
        type: 'up',
        content: '<span class="fa fa-chevron-up"></span> Up',
        cssClass: "",
        onclick: function (options, item, val, i) {
          $scope.singleReorder('up', val, parseInt(i, 10));
        }
      }, {
        type: 'down',
        content: '<span class="fa fa-chevron-down"></span> Down',
        cssClass: "",
        onclick: function (options, item, val, i) {
          $scope.singleReorder('down', val, parseInt(i, 10));
        }
      }, {
        type: 'add',
        content: '<span class="fa fa-plus"></span> Add',
        cssClass: "",
        onclick: function (options, item, val, i) {
          $scope.openModal('add-component-modal', 'AddComponentModalCtrl', parseInt(i, 10))
        }
      }, {
        type: 'delete',
        content: '<span class="fa fa-times"></span> Delete',
        cssClass: "",
        onclick: function (options, item, val, i) {
          $scope.deleteComponent(parseInt(i, 10));
        }
      }, {
        empty: true
      }, {
        empty: true
      }, {
        empty: true
      }, {
        empty: true
      }, {
        empty: true
      }, {
        empty: true
      }]
    };

    $scope.changesConfirmed = false;

    $scope.cancelChanges = false;

    $scope.setDirty = function(is_dirty){
      $scope.isDirty.dirty = is_dirty;

        if(is_dirty)
          $scope.changesConfirmed = false;


    }


    /*
     * email specific settings
     */
    $scope.isEmail = false;
    $scope.setIsEmail = function(on) {
      if (on) {
        $scope.isEmail = true;
        CKEDITOR.config.resize_enabled = false;
        CKEDITOR.config.removePlugins = "doksoft_button, tableresize";
        $scope.componentFilters = "";
      } else {
        $scope.isEmail = false;
      }
    }


    /*
     * @ckeditor:instanceReady
     * -
     */

    $scope.ckeditorLoaded = false;
    $scope.activeEditor = null;

    $scope.activateCKeditor = function () {
      CKEDITOR.on("instanceReady", function (ev) {

        if ($scope.isEmail) {
          //unable to access plugin from ckeditor api
          //hide regular button and font awesome from email editor
          angular.element('.cke_button__doksoft_button, .cke_button__doksoft_font_awesome').hide();
          angular.element('.cke_button__doksoft_button_email').show();
        }
        else{
          angular.element('.cke_button__doksoft_button, .cke_button__doksoft_font_awesome').show();
          angular.element('.cke_button__doksoft_button_email').hide();
        }
        ev.editor.on('key', function () {
          $scope.setDirty(true);
        });
        ev.editor.on('change', function () {
          $scope.setDirty(true);
        });
        if (!$scope.activeEditor)
          $scope.activeEditor = ev.editor;
        ev.editor.on('focus', function () {
          $scope.activeEditor = ev.editor;
        });
        ev.editor.on('blur', function () {
          $scope.activeEditor = null;
        });
        if (!$scope.ckeditorLoaded) {
          $timeout(function () {
            $scope.ckeditorLoaded = true;
            //$scope.setUnderbnavMargin();
            angular.element($window).trigger('resize');
          }, 500);
        }
      });
      $timeout(function () {
        if (!$scope.ckeditorLoaded)
          $scope.ckeditorLoaded = true;
      }, 12000);
    };

    $scope.preDragging = false;
    $scope.preDrag = function (value) {
      if (value === 'enter') {
        $scope.preDragging = true;
      }
      if (value === 'leave') {
        $scope.preDragging = false;
      }
    };

    $scope.singleReorder = function (value, component, index) {
      console.log('singleReorder >>> ', value);
      $scope.setDirty(true);
      if (value === 'down') {
        $scope.components.splice(index, 1);
        $scope.components.splice(index + 1, 0, component);
        $scope.scrollToComponent(index + 1);
      }

      if (value === 'up') {
        $scope.components.splice(index, 1);
        $scope.components.splice(index - 1, 0, component);
        $scope.scrollToComponent(index - 1);
      }
      $timeout(function () {
        angular.element($window).trigger('resize');
      }, 0)
    };

    $scope.scrollToComponent = function (destIndex) {
      $timeout(function () {
        var anchor = $scope.components[destIndex] && ($scope.components[destIndex].anchor || $scope.components[destIndex]._id);
        var element = document.getElementById(anchor);
        if (element) {
          $document.scrollToElementAnimated(element, 175, 1000);
        }
      }, 500);
    };

    $scope.validateContactAddress = function (fn) {
      $scope.contactComponentType = _.findWhere($scope.components, {
        type: 'contact-us'
      });
      if ($scope.contactComponentType) {
        GeocodeService.validateAddress($scope.contactComponentType.location, null, function (data, results) {
          if (!data || (results && !results.length)) {
            toaster.pop('warning', 'Address could not be found for contact component. Please enter valid address');
            $scope.saveLoading = false;
            fn(false);
          } else
            fn(true);
        });
      } else
        fn(true);
    }

    /*
     * @refreshLinkList
     * -
     */

    $scope.refreshLinkList = function (value, old_handle) {
      var new_handle = $scope.page.handle;
      _.each(value.links, function (element, index) {
        if (element.linkTo && element.linkTo.type == "section" && element.linkTo.page == old_handle)
          element.linkTo.page = new_handle;
        else if (element.linkTo && element.linkTo.type == "page" && element.linkTo.data == old_handle)
          element.linkTo.data = new_handle;
      });
    }

    $scope.redirectAfterSave = function(redirect_url, reload){
    if(redirect_url){
        SweetAlert.swal("Saved!", "Your edits were saved to the page.", "success");
            $timeout(function () {
              if($scope.duplicate)
                $location.path(redirect_url);
              else
                $window.location = redirect_url;
            }, 500);
        if (reload) {
          $window.location.reload();
        }
      }
    }

    $scope.redirectWithoutSave = function(redirect_url, show_alert, reload){
    $scope.changesConfirmed = true;
    $scope.originalPage = null;
    $scope.originalPost = null;
    $scope.cancelChanges = true;
    if(redirect_url){
      if(show_alert)
        SweetAlert.swal("Cancelled", "Your edits were NOT saved.", "error");
          $window.location = redirect_url;
      if (reload) {
        $window.location.reload();
      }
      }
    }

    /*
     * @savePage
     * -
     */

    $scope.isEditing = true;
    //$scope.isDirty = false;
    $scope.isDirty = {};
    $scope.blogImage = {};
    $scope.blogImage.featured_image = false;
    $scope.savePage = function (redirect_url, reload) {
      $scope.saveLoading = true;
      $scope.setDirty(false);
      $scope.changesConfirmed = true;
      if ($scope.isSinglePost) {
        $scope.blog.post = $scope.postControl.getSinglePost();
        $scope.validateEditPost($scope.blog.post);
        if (!$scope.editPostValidated) {
          $scope.saveLoading = false;
          toaster.pop('error', "Post Title or URL can not be blank.");
          return false;
        }
        var post_data = angular.copy($scope.blog.post);
        post_data.post_tags.forEach(function (v, i) {
          if (v.text) {
            post_data.post_tags[i] = v.text;
          }
        });
        WebsiteService.getSinglePost(post_data.post_url, function (data) {
          if (data && data._id && data._id !== post_data._id) {
            $scope.saveLoading = false;
            toaster.pop('error', "Post URL " + post_data.post_url, "Already exists");
          } else {
            WebsiteService.updatePost($scope.page._id, post_data._id, post_data, function (data, error) {
              $scope.saveLoading = false;
              if (error) {
                if(error.message)
                  toaster.pop('error', error.message);
                else
                    toaster.pop('error', "Error while updating post");
                return;
              }
              if (post_data.post_url !== $scope.originalPost.post_url) {
                $location.search('posthandle', post_data.post_url);
              }

              $scope.blog.post = $scope.postControl.getSinglePost();
              angular.copy($scope.blog.post, $scope.originalPost);
              toaster.pop('success', "Post Saved", "The post was saved successfully.");
              $scope.redirectAfterSave(redirect_url, reload);
            });
          }
        })

      } else if ($scope.templateActive) {
        WebsiteService.updateTemplate($scope.page._id, $scope.page, function (data, error) {
          console.log('success');
          $scope.saveLoading = false;
          if (error) {
            if(error.message)
              toaster.pop('error', error.message);
            else
                toaster.pop('error', "Error while updating template");
            return;
          }
          toaster.pop('success', "Template Saved", "The " + $scope.page.handle + " template was saved successfully.");
          $scope.redirectAfterSave(redirect_url, reload);
        });
      } else if ($scope.isTopic) {
        console.log('saving topic');
        $scope.topic.handle = $filter('slugify')($scope.topic.title);
        WebsiteService.updateTopic($scope.topic, function (data, error) {
          $scope.saveLoading = false;
          if (error) {
            if(error.message)
              toaster.pop('error', error.message);
            else
                toaster.pop('error', "Error while updating topic");
            return;
          }
          toaster.pop('success', "Topic Saved", "The " + $scope.topic.title + " topic was saved successfully.");
          $scope.redirectAfterSave(redirect_url, reload);
        });
      } else {
        $scope.checkForDuplicatePage(function () {
          console.log('$scope.duplicateUrl ', $scope.duplicateUrl);
          if ($scope.isEmail) {
            $scope.editPageValidated = true;
          }
          if (!$scope.editPageValidated) {
            $scope.saveLoading = false;
            toaster.pop('error', "Page Title or URL can not be blank.");
            return false;
          }
          if (!$scope.duplicateUrl)
            $scope.validateContactAddress(function (data) {
              if (data && !$scope.isEmail) {
                WebsiteService.updatePage($scope.page, $scope.originalPage.handle, function (data, error) {
                  $scope.saveLoading = false;
                  if (error) {
                    if(error.message)
                      toaster.pop('error', error.message);
                    else
                      toaster.pop('error', "Error while updating page");
                    return;
                  }
                  console.log($scope.page.handle, $scope.originalPage.handle);

                  toaster.pop('success', "Page Saved", "The " + $scope.page.handle + " page was saved successfully.");
                  $scope.redirectAfterSave(redirect_url, reload);
                  //$scope.page = data;
                  var originalPageHandle = angular.copy($scope.originalPage.handle);
                  $scope.originalPage = angular.copy($scope.page);
                  resetSitebuilderPages();
                  //Update linked list
                  $scope.website.linkLists.forEach(function (value, index) {
                    if (value.handle === "head-menu") {
                      if ($scope.page.handle !== originalPageHandle) {
                        $location.search('pagehandle', $scope.page.handle);
                        $scope.refreshLinkList(value, originalPageHandle);
                      }
                      WebsiteService.updateLinkList($scope.website.linkLists[index], $scope.website._id, 'head-menu', function (data) {
                        console.log('Updated linked list');

                      });
                      if ($scope.page.handle === 'blog' && $scope.blogControl.saveBlogData)
                        $scope.blogControl.saveBlogData();
                    }
                  });

                });
              }

              if ($scope.isEmail) {
                WebsiteService.updateEmail($scope.page, function(data, error) {
                  $scope.saveLoading = false;
                  if (!data && error && error.message) {
                    toaster.pop('error', error.message);
                    return;
                  }
                  $scope.originalPage = angular.copy($scope.page);
                  toaster.pop('success', "Email Saved", "The " + $scope.page.title + " email was saved successfully.");
                  $scope.redirectAfterSave(redirect_url, reload);
                });
              }
            })
          else
            $scope.saveLoading = false;
        });
      }

    };

    /*
     * @cancelPage
     * -
     */

    $scope.cancelPage = function () {
      $scope.checkForSaveBeforeLeave();
    };

    /*
     * @getWebsite
     * -
     */

    $scope.getWebsite = function (fn) {
      WebsiteService.getWebsite(function (website) {
        $scope.website = website;
        if (fn) {
          fn($scope.website);
        }
      });
    };

    $scope.getWebsite();

    /*
     * @getAccount
     * -
     */

    AccountService.getAccount(function (account) {
      $scope.account = account;
    });

    /*
     * @getUrl
     * -
     */

    $scope.getUrl = function (handle, is_post) {
      var _url;
      if (is_post) {
        handle = "blog/" + handle;
      }
      if (handle !== 'index') {
        _url = 'http://' + $window.location.host + '/' + handle;
      } else {
        _url = 'http://' + $window.location.host + '/';
      }
      if ($scope.account.domain) {
        _url = $scope.account.domain + '/' + handle;
      }
      $window.open(_url, '_blank');
    };

    //disable delete redirect
    // var rx = /INPUT|SELECT|TEXTAREA/i;
    // angular.element('window.document').on('keydown', function (e) {
    //   if (e.which === 8 || e.which === 46) {
    //     if (!rx.test(e.target.tagName) || e.target.disabled || e.target.readOnly) {
    //       e.preventDefault();
    //     }
    //   }
    // });

    /*
     * @clickable-link
     * -
     */

    //Disable all links in edit
    angular.element("body").on("click", ".component a", function (e) {
      if (!angular.element(this).hasClass("clickable-link")) {
        e.preventDefault();
        e.stopPropagation();
      }
    });

    /*
     * @retrievePage
     * -
     */
    $scope.pageNotFound = false;
    $scope.retrievePage = function (_handle) {
      if (_handle === 'blog' || _handle === 'single-post')
        $scope.post_blog_page = true;
      WebsiteService.getSinglePage(_handle, function (data, error) {
        if(error)
        {
          $scope.ckeditorLoaded = true;
          $scope.pageNotFound = true;
          return;
        }
        $scope.page  = angular.copy(data);
        $scope.components = $scope.page.components;
        if(_handle === 'single-post'){
          var post_component = _.findWhere($scope.page.components, {
            type: 'single-post'
          });
          if(post_component){
            $scope.blog.post = post_component;
          }
        }
        $scope.originalPage = angular.copy(data);
        $scope.activePage = true;
        $scope.activateCKeditor();
        if($scope.page.templateId)
          WebsiteService.getTemplates(function (templates) {
            $scope.pageTemplate = _.findWhere(templates, {
              _id: $scope.page.templateId
            });
          })
      });
    };

    /*
     * @retrieveEmail
     * -
     */

    $scope.retrieveEmail = function (_emailId, _email) {
      console.log('retrieveEmail ', _emailId);
      if (_emailId) {
        WebsiteService.getSingleEmail(_emailId, function (data) {
          console.log('data ', data);
          $scope.page = angular.copy(data);
          $scope.components = $scope.page.components;

          $scope.originalPage = angular.copy(data);
          $scope.activePage = true;
          $scope.activateCKeditor();

        });
      }

      if (_email) {
        $scope.setIsEmail(true);
        $scope.page = _email;
        $scope.components = _email.components;
        $scope.originalPage = angular.copy(_email);
        $scope.activePage = true;
        $scope.activateCKeditor();
      }
    };

    /*
     * @retrievePost
     * -
     */
    $scope.blog = {};
    $scope.retrievePost = function (_handle) {
      $scope.isSinglePost = true;
      $scope.newPost = {};
      $scope.handle = _handle;
      $scope.post_statuses = postConstant.post_status.dp;

      WebsiteService.getSinglePage('single-post', function (data) {
        $scope.page = data;
        $scope.postComponents = data.components;
        WebsiteService.getSinglePost($scope.handle, function (data) {
          $scope.blog.post = data;
          $scope.single_post = true;
          $scope.components = $scope.page.components;
          $scope.originalPost = angular.copy(data);
          $scope.activateCKeditor();
        });

      });
    };
    /*
     * @statusUpdated
     * the order status has been updated
     */

    $scope.statusUpdated = function (newStatus) {
      if ($scope.blog.post.post_status == newStatus)
        return;
      var toasterMsg = 'Status has been updated to ';
      if (newStatus === postConstant.post_status.PUBLISHED) {
        angular.element('.modal.in').hide();
        SweetAlert.swal({
          title: "Are you sure?",
          text: "Do you want to update status to published",
          type: "warning",
          showCancelButton: true,
          confirmButtonColor: "#DD6B55",
          confirmButtonText: "Yes, update status to published",
          cancelButtonText: "No, do not update status to published!",
          closeOnConfirm: false,
          closeOnCancel: true
        }, function (isConfirm) {
        if (isConfirm) {
          WebsiteService.publishPost($scope.page._id, $scope.blog.post._id, function (data) {
            $scope.blog.post.post_status = newStatus;
            $scope.originalPost = angular.copy($scope.blog.post);
            $scope.postControl.setSinglePost();
            toaster.pop('success', "Post saved successfully");
            SweetAlert.swal("Saved!", "Post status updated successfully.", "success");
            angular.element('.modal.in').show();
          });
        }
        else
          angular.element('.modal.in').show();
        });
      }
      else {
        toaster.pop('success', "Status updated successfully");
        $scope.blog.post.post_status = newStatus;
        $scope.postControl.setSinglePost();
      }
    };

    /*
     * @retrieveTemplate
     * -
     */

    $scope.retrieveTemplate = function (_handle) {
      $scope.templateActive = true;
      WebsiteService.getTemplates(function (templates) {
        $scope.page = _.find(templates, function (tmpl) {
          return tmpl.handle === _handle;
        });

        $scope.components = $scope.page.config.components;
        $scope.originalPage = angular.copy($scope.page);
        $scope.activateCKeditor();

      });
    };

    $scope.getSinglePostData = function () {
      console.log('getSinglePostData');
    };

    /*
     * @removeTemplateImage
     * -
     */

    $scope.removeTemplateImage = function () {
      console.log('remove template image');
      $scope.page.previewUrl = null;
    };

    /*
     * @retrieveTopic
     * -
     */

    $scope.retrieveTopic = function (_id) {
      $scope.topicActive = true;
      WebsiteService.getTopics(function (topics) {
        $scope.topic = _.find(topics, function (top) {
          return top._id === _id;
        });

        $scope.components = $scope.topic.components;
        $scope.activateCKeditor();
      });
    };

    /*
     * @calculateWindowHeight
     * -
     */

    $window.calculateWindowHeight = function () {
      var scrollTop = angular.element($window.document).scrollTop();
      return scrollTop;
    };

    /*
     * @location:pagehandle
     * -
     */


    if ($location.search().pagehandle) {
      $scope.isPage = true;
      $scope.retrievePage($location.search().pagehandle);
    }

    /*
     * @location:email
     * -
     */


    if ($location.search().email) {
      $scope.setIsEmail(true);
      $scope.retrieveEmail($location.search().email);
    }

    /*
     * @location:posthandle
     * -
     */

    if ($location.search().posthandle) {
      $scope.retrievePost($location.search().posthandle);
    }

    /*
     * @location:posthandle
     * -
     */

    if ($location.search().templatehandle) {
      $scope.retrieveTemplate($location.search().templatehandle);
    }

    /*
     * @location:email
     * -
     */


    if ($location.search().topic_id) {
      $scope.isTopic = true;
      $scope.retrieveTopic($location.search().topic_id);
    }

    /*
     * @clickandInsertImageButton
     * -
     */

    $window.clickandInsertImageButton = function (editor) {
      console.log('clickandInsertImageButton >>> ');
      $scope.clickImageButton(editor, false);
    };

    /*
     * @window.clickImageButton
     * -
     */

    $window.clickImageButton = function (btn) {
      console.log('clickImageButton >>> ');
      var urlInput = $(btn).closest('td').prev('td').find('input');
      $scope.clickImageButton(urlInput, true);
    };

    /*
     * @addBackground Image
     * -
     */

    $scope.setEditingComponent = function (index) {
      if ($scope.components) {
        $scope.componentEditing = $scope.components[index];
      }
    };

    /*
     * @addImageFromMedia
     * -
     */

    $scope.addImageFromMedia = function (componentId, index, update) {
      $scope.imageChange = true;
      $scope.showInsert = true;
      $scope.updateImage = update;
      $scope.componentImageIndex = index;
      $scope.componentEditing = _.findWhere($scope.components, {
        _id: componentId
      });
      console.log('componentEditing ', $scope.componentEditing);
      $scope.openModal('media-modal', 'MediaModalCtrl', null, 'lg');
    };
    /*
     * @changeBlogImage
     * -
     */
    $scope.changeBlogImage = function (blog, index) {
      $scope.changeblobImage = true;
      $scope.showInsert = true;
      $scope.blog_post = blog;
      $scope.openModal('media-modal', 'MediaModalCtrl', null, 'lg');
    };


    $scope.addImageToThumbnail = function (componentId, index, update, parentIndex, numberPerPage) {
      $scope.imageChange = true;
      $scope.showInsert = true;
      $scope.updateImage = update;
      $scope.componentImageIndex = index;
      if (parentIndex && numberPerPage) {
        $scope.componentImageIndex = (parseInt(parentIndex, 10) * parseInt(numberPerPage, 10)) + parseInt(index, 10);
      }
      $scope.componentEditing = _.findWhere($scope.components, {
        _id: componentId
      });
      $scope.openModal('media-modal', 'MediaModalCtrl', null, 'lg');
    };

    /*
     * @clickImageButton
     * -
     */

    $scope.clickImageButton = function (editor, edit) {
      $scope.insertMediaImage = true;
      $scope.showInsert = true;
      $scope.inlineInput = editor;
      $scope.isEditMode = edit;
      $scope.openModal('media-modal', 'MediaModalCtrl', null, 'lg');
    };

    function getFilename(url)
    {
       if (url)
       {
          var m = url.toString().match(/.*\/(.+?)\./);
          if (m && m.length > 1)
          {
             return m[1];
          }
       }
       return "";
    }

    function getUrl(value) {
      if (value && !/http[s]?/.test(value)) {
        value = 'http:' + value;
      }
      return value;
    };

    /*
     * @addCKEditorImage
     * -
     */
    $scope.addCKEditorImage = function (url, inlineInput, edit) {
    WebsiteService.isImage(url).then(function(result) {
      var _image = result;
      if (inlineInput) {
        if (edit) {
          inlineInput.val(url);
        } else {
          if(_image)
            inlineInput.insertHtml('<img data-cke-saved-src="' + url + '" src="' + url + '"/>');
          else{
            url = getUrl(url);
            var _text = inlineInput && inlineInput.getSelection() && inlineInput.getSelection().getSelectedText();
            if(!_text)
               _text = getFilename(url)
            inlineInput.insertHtml('<a target="_blank" data-cke-saved-href="' + url + '" href="' + url + '">' + _text + '</a>');
          }
        }
      }
    });

    };

    /*
     * @insertMedia
     * - insertmedia into various components
     * - TODO: change to switch case and stop using if else
     */
    $scope.thumbnailSlider = {};
    $scope.testimonialSlider = {};
    $scope.contactMap = {};
    $scope.blogControl = {};
    $scope.postControl = {};
    $scope.websiteLinks = {};

    $scope.insertMedia = function (asset) {
      console.log('$scope.componentEditing ', $scope.componentEditing);
      if ($scope.imageChange) {
        $scope.imageChange = false;
        var type = $scope.componentEditing.type;
        //if image/text component
        if (type === 'image-text') {
          $scope.componentEditing.imgurl = asset.url;
        } else if (type === 'feature-list') {
          var targetIndex = angular.element($scope.componentArrTarget).closest('.single-feature').data('index');
          $scope.componentEditing.features[targetIndex].imgurl = asset.url;
        } else if (type === 'simple-form') {
          $scope.componentEditing.imgurl = asset.url;
        } else if (type === 'image-gallery') {
          if ($scope.updateImage) {
            $scope.componentEditing.images[$scope.componentImageIndex].url = asset.url;
          } else {
            $scope.componentEditing.images.splice($scope.componentImageIndex + 1, 0, {
              url: asset.url
            });
            $scope.updateImage = false;
          }
        } else if (type === 'thumbnail-slider') {
          if ($scope.updateImage) {
            $scope.componentEditing.thumbnailCollection[$scope.componentImageIndex].url = asset.url;
          } else {
            $scope.componentEditing.thumbnailCollection.splice($scope.componentImageIndex + 1, 0, {
              url: asset.url
            });
            $scope.updateImage = false;
          }
          $scope.thumbnailSlider.refreshSlider();
        } else if (type === 'meet-team') {
          $scope.componentEditing.teamMembers[$scope.componentImageIndex].profilepic = asset.url;
        } else {
          console.log('unknown component or image location');
        }
      } else if ($scope.changeblobImage) {
        $scope.changeblobImage = false;
        $scope.blog_post.featured_image = asset.url;
        return;
      } else if ($scope.postImage && !$scope.componentEditing) {
        $scope.postImage = false;
        $scope.postImageUrl = asset.url;
        toaster.pop('success', "Post Image added successfully");
        return;
      } else if ($scope.profilepic && !$scope.componentEditing) {
        $scope.profilepic = false;
        $scope.customerAccount.photo = asset.url;
        return;
      } else if ($scope.insertMediaImage) {
        $scope.insertMediaImage = false;
        $scope.addCKEditorImage(asset.url, $scope.inlineInput, $scope.isEditMode);
        return;
      } else if ($scope.logoImage && $scope.componentEditing) {
        $scope.logoImage = false;
        $scope.componentEditing.logourl = asset.url;
      } else if ($scope.blogImage.featured_image) {
        $scope.blogImage.featured_image = false;
        $scope.blog.post.featured_image = asset.url;
        return;
      } else if ($scope.imgThumbnail && $scope.componentEditing) {
        $scope.imgThumbnail = false;
        $scope.componentEditing.thumbnailCollection.push({
          url: asset.url
        });
      } else {
        if ($scope.componentEditing.bg.img) {
          $scope.componentEditing.bg.img.url = asset.url;
          $timeout(function () {
            angular.window.trigger('resize');
          }, 0);
          return;
        }
      }

    };

    /*
     * @closeModal
     * -
     */

    $scope.closeModal = function () {
      console.log('closeModal >>> ');
      $timeout(function () {
        $scope.modalInstance.close();
        angular.element('.modal-backdrop').remove();
      });
    };

    /*
     * @openSimpleModal
     * -
     */
    $scope.openSimpleModal = function (modal, _size) {
      var _modal = {
        templateUrl: modal,
        keyboard: false,
       // backdrop: 'static',
        scope: $scope,
        size: _size || 'md',
      };
      $scope.modalInstance = $modal.open(_modal);
      $scope.modalInstance.result.then(null, function () {
        angular.element('.sp-container').addClass('sp-hidden');
      });
    };

    /*
     * @openModal
     * -
     */

    $scope.openModal = function (modal, controller, index, size) {
      console.log('openModal >>> ', modal, controller, index);
      var _modal = {
        templateUrl: modal,
        keyboard: false,
        backdrop: 'static',
        size: 'md',
        resolve: {
          components: function () {
            if (!$scope.components)
              $scope.components = [];
            return $scope.components;
          }
        }
      };

      if (controller) {
        _modal.controller = controller;

        _modal.resolve.contactMap = function () {
          return $scope.contactMap;
        };
        _modal.resolve.website = function () {
          return $scope.website;
        };
        _modal.resolve.blog = function () {
          if($scope.postControl && $scope.postControl.getSinglePost)
            return $scope.postControl.getSinglePost();
          else
            return $scope.blog.post;
        };
        _modal.resolve.isDirty = function () {
          return $scope.isDirty;
        };
        _modal.resolve.isSinglePost = function () {
          return $scope.isSinglePost;
        };

        _modal.resolve.showInsert = function () {
          return $scope.showInsert;
        };

        _modal.resolve.insertMedia = function () {
          return $scope.insertMedia;
        };

        _modal.resolve.openParentModal = function () {
          return $scope.openModal;
        };

        _modal.resolve.blogImage = function () {
          return $scope.blogImage;
        };

        _modal.resolve.accountShowHide = function () {
          return $scope.$parent.account.showhide;
        };
        _modal.resolve.isEmail = function () {
          return $scope.isEmail;
        };
        _modal.resolve.testimonialSlider = function () {
          return $scope.testimonialSlider;
        };
        _modal.resolve.testimonialSlider = function () {
          return $scope.testimonialSlider;
        };
        _modal.resolve.websiteLinks = function () {
          return $scope.websiteLinks;
        };

        _modal.resolve.isSingleSelect = function () {
          return true;
        };
      }

      if (angular.isDefined(index) && index !== null && index >= 0) {
        $scope.setEditingComponent(index);
        _modal.resolve.clickedIndex = function () {
          return index;
        };

          _modal.resolve.pageHandle = function () {
             return $scope.page ? $scope.page.handle : null;
          };
      }

      if (size) {
        _modal.size = 'lg';
      }
      $scope.modalInstance = $modal.open(_modal);
      $scope.modalInstance.result.then(null, function () {
        angular.element('.sp-container').addClass('sp-hidden');
      });
    };

    /*
     * @openSettingsModal
     * -
     */

    $scope.openSettingsModal = function () {
      if ($scope.single_post) {
        $scope.openSimpleModal("post-settings-modal");
      }

      if ($scope.isPage) {
        $scope.openSimpleModal("page-settings-modal");
      }

      if ($scope.templateActive) {
        $scope.openModal("template-settings-modal", 'TemplateSettingsModalCtrl');
      }

      if ($scope.isEmail) {
        $scope.openSimpleModal("email-settings-modal");
      }

      if ($scope.isTopic) {
        $scope.openSimpleModal("topic-settings-modal");
      }
    };

    /*
     * @deleteTopic
     * -
     */

    $scope.topicCategories = ['Account', 'Billing', 'Contacts', 'Campaigns', 'Dashboard', 'Emails', 'Getting Started', 'Integrations', 'Orders', 'Posts', 'Products', 'Profile', 'Site Analytics', 'Social Feed', 'Website'];


    $scope.deleteTopic = function () {
      angular.element('.modal.in').hide();
      SweetAlert.swal({
        title: "Are you sure?",
        text: "Do you want to delete this topic",
        type: "warning",
        showCancelButton: true,
        confirmButtonColor: "#DD6B55",
        confirmButtonText: "Yes, delete topic!",
        cancelButtonText: "No, do not delete topic!",
        closeOnConfirm: false,
        closeOnCancel: true
      }, function (isConfirm) {
        if (isConfirm) {
          SweetAlert.swal("Saved!", "Topic is deleted.", "success");
          var title = $scope.topic.title;
          WebsiteService.deleteTopic($scope.topic, function (data) {
            toaster.pop('success', "Topic Deleted", "The " + title + " topic was deleted successfully.");
            $scope.closeModal();
            $timeout(function () {
              $location.url('/support/manage-topics');
            }, 500);
          });
        } else {
          angular.element('.modal.in').show();
        }

      });
    };

    /*
     * @openDuplicateModal
     * -
     */

    $scope.openDuplicateModal = function () {
      if ($scope.single_post) {
        $scope.openSimpleModal("post-duplicate-modal");
      }
      if ($scope.isPage) {
        $scope.openSimpleModal("page-duplicate-modal");
      }
      if ($scope.isEmail) {
        $scope.openSimpleModal("email-duplicate-modal");
      }
    };

    /*
     * @checkForDuplicatePage
     * - Check for duplicate page
     */

    $scope.checkForDuplicatePage = function (fn) {
      $scope.validateEditPage($scope.page);
      if ($scope.editPageValidated && !$scope.isEmail){
        var error = WebsiteService.checkSystemRoute($scope.page.handle);
        if(error){
          $scope.duplicateUrl = true;
          toaster.pop('error', error);
          if (fn)
            fn();
        }
        else{
          WebsiteService.checkDuplicatePage($scope.page.handle, $scope.page._id, function (data) {
          if (data) {
            $scope.duplicateUrl = true;
            toaster.pop('error', "Page URL " + $scope.page.handle, "Already exists");
          } else {
            $scope.duplicateUrl = false;
          }
          if (fn)
            fn();
          });
        }

      }
      else
      if (fn)
        fn();
    };

    /*
     * @validateEditPage
     * -
     */

    $scope.editPageValidated = false;

    $scope.validateEditPage = function (page) {

      if (page.handle == '') {
        $scope.handleError = true;
        angular.element('#edit-page-url').parents('div.form-group').addClass('has-error');
      } else {
        $scope.handleError = false;
        angular.element('#edit-page-url').parents('div.form-group').removeClass('has-error');
      }
      if (page.title == '') {
        $scope.titleError = true;
        angular.element('#edit-page-title').parents('div.form-group').addClass('has-error');
      } else {
        $scope.titleError = false;
        angular.element('#edit-page-title').parents('div.form-group').removeClass('has-error');
      }
      if (page && page.title && page.title != '' && page.handle && page.handle != '') {
        $scope.editPageValidated = true;
      } else
        $scope.editPageValidated = false;
    };

    /*
     * @slugifyHandle
     * -
     */

    $scope.slugifyHandle = function (title) {
      if (title) {
        $scope.newPage.handle = $filter('slugify')(title);
      }
    };

    $scope.slugifyPostHandle = function (title, post) {
      if (title && post)
        post.post_url = $filter('slugify')(title);
      $scope.updatePostData();
    };

    $scope.slugifyDuplicatePostHandle = function (title, post) {
      if (title && post)
        post.post_url = $filter('slugify')(title);
    };

    $scope.newPage = {};

    /*
     * @watch:page.handle
     * -
     */

    $scope.$watch('page.handle', function (newValue, oldValue) {
      if (newValue) {
        $scope.page.handle = $filter('slugify')(newValue);
      }
    });

    $scope.$watch('isDirty.confirmed', function (newValue, oldValue) {
      console.log(newValue);
    });

    $scope.createDuplicatePage = function (newPage) {
      if ($scope.isPage) {
        newPage.type = "page";
      }

      $scope.validateNewPage(newPage);
      if (!$scope.newPageValidated) {
        toaster.pop('error', "Page Title or URL can not be blank.");
        return false;
      }
      var error = WebsiteService.checkSystemRoute(newPage.handle);
      if(error){
        toaster.pop('error', error);
        return false;
      }
      WebsiteService.checkDuplicatePage(newPage.handle, newPage._id, function (data) {
        if (data) {
          toaster.pop('error', "Page URL " + newPage.handle, "Already exists");
          return false;
        }
        newPage.components = $scope.page.components;
        WebsiteService.createDuplicatePage(newPage, function (data) {
          $scope.single_post = false;
          $scope.post_blog_page = false;
          $scope.duplicate = true;
          resetSitebuilderPages();
          $scope.checkForSaveBeforeLeave('/admin/#/website/pages/?pagehandle=' + newPage.handle, true);
        });
      });
    };

    $scope.newEmail = {};

    $scope.createDuplicateEmail = function () {
      $scope.newEmail.components = $scope.page.components;
      $scope.newEmail.type = $scope.page.type || "email";
      WebsiteService.createEmail($scope.newEmail, function (data, error) {
        if (data && !error) {
          $scope.duplicate = true;
          $scope.checkForSaveBeforeLeave('/admin/#/editor?email=' + data._id, true);
        } else if (!data && error && error.message) {
          toaster.pop('error', error.message);
        }
      });
    };


    $scope.updateEmailSettings = function () {
      WebsiteService.updateEmail($scope.page, function (data, error) {
        if (data && !error) {
          toaster.pop('success', "Settings saved successfully");
          $scope.closeModal();
          $timeout(function () {
            //$scope.checkForSaveBeforeLeave();
          }, 100);

        } else if (!data && error && error.message) {
          toaster.pop('error', error.message);
        }
      });
    };

    $scope.sendTestEmail = function (_email) {
      $scope.sendingEmail = true;
      WebsiteService.sendTestEmail(_email, $scope.page, function (data) {
        $scope.sendingEmail = false;
        if (data && data[0] && data[0]._id) {
          $scope.closeModal();
          toaster.pop('success', 'Test Email sent successfully');
        }
        console.log('test send status ', data);
      });
    };

    $scope.goToCampaignsPage = function() {
      $location.path('/marketing/campaigns');
      $location.search('email', null);
      $scope.closeModal();
    };

    /*
     * @validateNewPage
     * -
     */

    $scope.newPageValidated = false;

    $scope.validateNewPage = function (page) {
      if (!page.handle || page.handle === '') {
        angular.element('#new-page-url').parents('div.form-group').addClass('has-error');
      } else {
        angular.element('#new-page-url').parents('div.form-group').removeClass('has-error');
      }
      if (!page.title || page.title === '') {
        angular.element('#new-page-title').parents('div.form-group').addClass('has-error');
      } else {
        angular.element('#new-page-title').parents('div.form-group').removeClass('has-error');
      }
      if (page && page.title && page.title !== '' && page.handle && page.handle !== '') {
        $scope.newPageValidated = true;
      } else {
        $scope.newPageValidated = false;
      }
    };

    $scope.createDuplicatePost = function (newPost) {
      $scope.validateNewPost(newPost);
      if (!$scope.newPostValidated) {
        toaster.pop('error', "Post Title or URL can not be blank.");
        return false;
      }
      WebsiteService.getSinglePost(newPost.post_url, function (data) {
        if (data && data._id) {
          toaster.pop('error', "Post URL " + newPost.post_url, "Already exists");
          return false;
        }

        var post_data = angular.copy($scope.blog.post);
        post_data._id = null;
        post_data.post_url = newPost.post_url;
        post_data.post_title = newPost.post_title;
        post_data.post_tags.forEach(function (v, i) {
          if (v.text) {
            post_data.post_tags[i] = v.text;
          }
        });
        WebsiteService.createPost($scope.page._id, post_data, function (data) {
          $scope.duplicate = true;
          $scope.checkForSaveBeforeLeave('/admin/#/website/posts/?posthandle=' + newPost.post_url, true);
        });
      });
    };

    /*
     * @validateNewPost
     * -
     */

    $scope.newPostValidated = false;

    $scope.validateNewPost = function (post) {
      if (!post.post_url || post.post_url === '') {
        $scope.handleError = true;
        angular.element('#new-post-url').parents('div.form-group').addClass('has-error');
      } else {
        $scope.handleError = false;
        angular.element('#new-post-url').parents('div.form-group').removeClass('has-error');
      }
      if (!post.post_title || post.post_title === '') {
        $scope.titleError = true;
        angular.element('#new-post-title').parents('div.form-group').addClass('has-error');
      } else {
        $scope.titleError = false;
        angular.element('#new-post-title').parents('div.form-group').removeClass('has-error');
      }
      if (post && post.post_title && post.post_title !== '' && post.post_url && post.post_url !== '') {
        $scope.newPostValidated = true;
      } else {
        $scope.newPostValidated = false;
      }
    };

    /*
     * @validateEditPost
     * -
     */

    $scope.editPostValidated = false;

    $scope.validateEditPost = function (post, update) {
      if (post.post_url === '') {
        $scope.handleError = true;
        angular.element('#edit-post-url').parents('div.form-group').addClass('has-error');
      } else {
        $scope.handleError = false;
        angular.element('#edit-post-url').parents('div.form-group').removeClass('has-error');
      }
      if (post.post_title === '') {
        $scope.titleError = true;
        angular.element('#edit-post-title').parents('div.form-group').addClass('has-error');
      } else {
        $scope.titleError = false;
        angular.element('#edit-post-title').parents('div.form-group').removeClass('has-error');
      }
      if (post && post.post_title && post.post_title !== '' && post.post_url && post.post_url !== '') {
        $scope.editPostValidated = true;
      } else {
        $scope.editPostValidated = false;
      }
    };

    $scope.updatePostData = function(){
      $scope.postControl.setSinglePost();
      for (var instance in CKEDITOR.instances )
      {
          CKEDITOR.instances[instance].fire('customUpdate');
      }
    }

    var checkIfPageDirty = function(url, fn){
      if ($scope.originalPage && $scope.originalPage.components && $scope.components && $scope.originalPage.components.length !== $scope.components.length) {
         $scope.setDirty(true);
      }
      if ($scope.isSinglePost) {
          var post_data = angular.copy($scope.blog.post);
          if($scope.originalPost && $scope.originalPost.post_tags && $scope.originalPost.post_tags.length && !angular.isObject($scope.originalPost.post_tags[0]))
            post_data.post_tags.forEach(function (v, i) {
              if (v.text) {
                post_data.post_tags[i] = v.text;
              }
            });
        if (post_data && $scope.originalPost && !angular.equals($scope.originalPost, post_data)) {
          $scope.setDirty(true);
        }
      }
      var redirectUrl = url;
      if($scope.post_blog_page || $scope.isSinglePost)
        redirectUrl = "/admin/#/website/posts";
      if (!redirectUrl) {
        if($scope.isEmail)
          redirectUrl = "/admin/#/emails";
        else if($scope.isTopic)
          redirectUrl = "/admin/#/support/manage-topics";
        else
          redirectUrl = "/admin/#/website/pages";
      }
      fn(redirectUrl);
    }

    var checkBeforeRedirect = function(url, reload)
    {
      checkIfPageDirty(url, function (redirectUrl) {
        var condition = $scope.isDirty.dirty;
        if (condition) {
          SweetAlert.swal({
            title: "Are you sure?",
            text: "You have unsaved data that will be lost",
            type: "warning",
            showCancelButton: true,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "Yes, save changes!",
            cancelButtonText: "No, do not save changes!",
            closeOnConfirm: false,
            closeOnCancel: true
          }, function (isConfirm) {
            if (isConfirm) {
              //SweetAlert.swal("Saved!", "Your edits were saved to the page.", "success");
              $scope.redirect = true;
              $scope.savePage(redirectUrl, reload);
              $scope.setDirty(false);
            } else {
              $scope.redirectWithoutSave(redirectUrl, true, reload);
            }
          });
        } else {
          $scope.redirectWithoutSave(redirectUrl, false, reload);
        }
    })

    };
    /*
     * @checkForSaveBeforeLeave
     * -
     */

    $scope.checkForSaveBeforeLeave = function (url, reload) {
      $scope.changesConfirmed = true;
      checkBeforeRedirect(url, reload);
    };

    $scope.viewTopic = function(topicId) {
      console.log('topicId ', topicId);
      $location.path('/support/help-topics').search({
        topic: topicId
      });
    };

    /*
     * @deletePage
     * -
     */

    $scope.deletePage = function () {
      angular.element('.modal.in').hide();
      var _deleteText = "Do you want to delete this page";
      if($scope.page.handle === 'index')
      {
        var _deleteText = "This is home page of the website. Do you want to delete this page";
      }
      SweetAlert.swal({
        title: "Are you sure?",
        text: _deleteText,
        type: "warning",
        showCancelButton: true,
        confirmButtonColor: "#DD6B55",
        confirmButtonText: "Yes, delete page!",
        cancelButtonText: "No, do not delete page!",
        closeOnConfirm: false,
        closeOnCancel: true
      }, function (isConfirm) {
        if (isConfirm) {
          SweetAlert.swal("Saved!", "Page is deleted.", "success");
          $scope.changesConfirmed = true;
          var websiteId = $scope.page.websiteId;
          var title = $scope.page.title;

          WebsiteService.deletePage($scope.page, websiteId, title, function (data) {
            toaster.pop('success', "Page Deleted", "The " + title + " page was deleted successfully.");
            $scope.closeModal();
            resetSitebuilderPages();
            $timeout(function () {
              $location.url('/website/pages');
            }, 500);
          });
        } else {
          angular.element('.modal.in').show();
        }

      });
    };

    /*
     * @deleteEmail
     * -
     */

    $scope.deleteEmail = function () {
      angular.element('.modal.in').hide();
      SweetAlert.swal({
        title: "Are you sure?",
        text: "Do you want to delete this email",
        type: "warning",
        showCancelButton: true,
        confirmButtonColor: "#DD6B55",
        confirmButtonText: "Yes, delete email!",
        cancelButtonText: "No, do not delete email!",
        closeOnConfirm: false,
        closeOnCancel: true
      }, function (isConfirm) {
        if (isConfirm) {
          SweetAlert.swal("Saved!", "Email is deleted.", "success");
          $scope.changesConfirmed = true;
          var title = $scope.page.title;
          WebsiteService.deleteEmail($scope.page, function (data) {
            toaster.pop('success', "Email Deleted", "The " + title + " email was deleted successfully.");
            $scope.closeModal();
            $timeout(function () {
              $location.url('/emails');
            }, 500);
          });
        } else {
          angular.element('.modal.in').show();
        }

      });
    };

    /*
     * @deletePost
     * -
     */

    $scope.deletePost = function () {
      angular.element('.modal.in').hide();
      SweetAlert.swal({
          title: "Are you sure?",
          text: "Do you want to delete this page",
          type: "warning",
          showCancelButton: true,
          confirmButtonColor: "#DD6B55",
          confirmButtonText: "Yes, delete post!",
          cancelButtonText: "No, do not delete post!",
          closeOnConfirm: false,
          closeOnCancel: true
        },
        function (isConfirm) {
          if (isConfirm) {
            var title = $scope.blog.post.post_title;
            SweetAlert.swal("Saved!", "Post is deleted.", "success");
            $scope.changesConfirmed = true;
            WebsiteService.deletePost($scope.page._id, $scope.blog.post._id, function (data) {
              toaster.pop('success', "Post Deleted", "The " + title + " post was deleted successfully.");
              $scope.closeModal();
              $timeout(function () {
                $location.url('/website/posts');
              }, 500);
            });

          } else {
            angular.element('.modal.in').show();
          }
        });
    };

    // CKEDITOR.disableAutoInline = true;

    /*
     * @deleteComponent
     * -
     */

    $scope.deleteComponent = function (index) {
        SweetAlert.swal({
          title: "Are you sure?",
          text: "Do you want to delete this component?",
          type: "warning",
          showCancelButton: true,
          confirmButtonColor: "#DD6B55",
          confirmButtonText: "Yes, delete it!",
          cancelButtonText: "No, do not delete it!",
          closeOnConfirm: true,
          closeOnCancel: true
        },
        function (isConfirm) {
          if (isConfirm) {
            var _type = $scope.components[index].type;
            $scope.components.splice(index, 1);
            toaster.pop('success', "Component Deleted", "The " + _type + " component was deleted successfully.");
            $timeout(function () {
              $scope.scrollToComponent(index);
              angular.element($window).trigger('resize');
            }, 1000);
          };
        });
    };

    /*
     * @duplicateComponent
     * -
     */

    $scope.duplicateComponent = function (index) {
      var matchingComponent = $scope.components[index];
      var newComponent = angular.copy(matchingComponent);
      var temp = Math.uuid();
      newComponent._id = temp;
      newComponent.anchor = temp;
      $scope.components.splice(index + 1, 0, newComponent);
      $timeout(function () {
        var element = document.getElementById(newComponent._id);
        $document.scrollToElementAnimated(element, 175, 1000);
      }, 500);
      toaster.pop('success', "Component Added", "The " + newComponent.type + " component was added successfully.");
    };

    $scope.addUnderNavSetting = function (masthead_id, fn) {
      var data = {
        allowUndernav : false,
        navComponent: null
      }
      $scope.components.forEach(function (value, index) {
        if (value && value.type === 'masthead' && value._id == masthead_id) {
          if (index != 0 && $scope.components[index - 1].type == "navigation") {
            data.allowUndernav = true;
            data.navComponent =  $scope.components[index - 1];
          } else
            data.allowUndernav = false;
        }
      })
      fn(data);
    }

    /*
     * @sortableOptions
     * -
     */

    // $scope.sortableCompoents = $scope.components;

    // $scope.wait = '';
    // $scope.first = true;

    $scope.barConfig = {
      animation: 0,
      handle: '.reorder',
      draggable: '.fragment',
      ghostClass: "sortable-ghost",
      scroll: true,
      scrollSensitivity: 200,
      scrollSpeed: 20, // px
      onSort: function (evt) {
        $scope.scrollToComponent(evt.newIndex);
      },
      onStart: function (evt) {
        $scope.dragging = true;
      },
      onEnd: function (evt) {
        $scope.dragging = false;
      }
    };

    $scope.$watch('app.layout.isSidebarClosed', function (newValue, oldValue) {
      resetEditorPosition();
    });

    angular.element($window).bind('resize', function () {
      resetEditorPosition();
    });

    function resetEditorPosition(){
      var x = $window.scrollX
      var y = $window.scrollY
      $window.scrollTo(0, 0);
      $timeout(function() {
        $window.scrollTo(x, y);
      },0);

    }

    /*
     * @locationChangeStart
     * - Before user leaves editor, ask if they want to save changes
     */

    var offFn = $rootScope.$on('$locationChangeStart', function (event, newUrl, oldUrl) {
      checkIfPageDirty(newUrl, function (redirectUrl) {
          var condition = $scope.isDirty.dirty && !$scope.changesConfirmed && !$scope.cancelChanges;
          if (condition && !$scope.isCampaign && !$scope.isProduct) {
            event.preventDefault();
            SweetAlert.swal({
              title: "Are you sure?",
              text: "You have unsaved data that will be lost",
              type: "warning",
              showCancelButton: true,
              confirmButtonColor: "#DD6B55",
              confirmButtonText: "Yes, save changes!",
              cancelButtonText: "No, do not save changes!",
              closeOnConfirm: false,
              closeOnCancel: true
            }, function (isConfirm) {
              if (isConfirm) {
                $scope.redirect = true;
                $scope.savePage(redirectUrl);
                $scope.setDirty(false);
              } else {
                  $scope.redirectWithoutSave(newUrl, true);
              }
              offFn();
            });
          }
      })
    });

    function resetSitebuilderPages(){
      SimpleSiteBuilderService.pages = null;
    }

  }]);
}(angular));

'use strict';
/*global app, window*/
(function (angular) {
  app.controller('EmailsCtrl', ["$scope", "$timeout", "$location", "toaster", "$modal", "WebsiteService", "CommonService", "AccountService", "formValidations", '$q', '$state', function ($scope, $timeout, $location, toaster, $modal, WebsiteService, CommonService, AccountService, formValidations, $q, $state) {

    $scope.setDefaults = function () {
      $scope.newEmail = {
        title: 'New Email Title',
        subject: 'New Email Subject'
      };
    };
    $scope.formValidations = formValidations;
    $scope.setDefaults();

    /*
     * @getContacts
     * get all contacts to for contact select
     */

    WebsiteService.getEmails(false, function (emails) {
      $timeout(function () {
        $scope.$apply(function () {
          $scope.emails = angular.copy(emails);
          var statPromises = [];
          $scope.emails.forEach(function(email, index) {
            statPromises.push(WebsiteService.getEmailStatsPromise(email._id));
          });

          $q.all(statPromises)
            .then(function(results) {
              results.forEach(function(result, index) {
                $scope.emails[index].stats = result.data;
              });
            });
        });
      });
    });

    /*
     * @getAccount
     * - get account and autofill new email details
     */

    AccountService.getAccount(function (_account) {
      $scope.account = _account;
      if (_account.business.name) {
        $scope.newEmail.fromName = _account.business.name;
      }
      if (_account.business.emails[0].email) {
        $scope.newEmail.fromEmail = _account.business.emails[0].email;
        $scope.newEmail.replyTo = _account.business.emails[0].email;
      }
      $scope.newEmailOriginal = angular.copy($scope.newEmail);
    });
    $scope.order = "reverse";
    $scope.default_image_url = "/admin/assets/images/default-page.jpg";

    $scope.filterTemplateScreenShots = function (emails) {
      _.each(emails, function (email) {
        if (email) {
          email.hasScreenshot = false;
          if (email.previewUrl) {
            if ($("#template_screenshot_" + email._id).attr("src") === $scope.default_image_url) {
              email.hasScreenshot = false;
            } else {
              email.hasScreenshot = true;
            }
          }
        }
      });
    };

    $scope.filterTemplates = function () {
      $scope.showFilter = !$scope.showFilter;
      $scope.filterTemplateScreenShots($scope.emails);
    };

    $scope.createNewEmail = function (_newEmail) {
      //temporarily add a single email obj
      var emailToSend = {
        "title": _newEmail.title,
        "type": 'email',
        "subject": _newEmail.subject,
        "fromName": _newEmail.fromName,
        "fromEmail": _newEmail.fromEmail,
        "replyTo": _newEmail.replyTo,
        "components": [{
          "_id": CommonService.generateUniqueAlphaNumericShort(),
          "anchor": CommonService.generateUniqueAlphaNumericShort(),
          "type": "email-header",
          "version": 1,
          "txtcolor": "#888888",
          "logo": $scope.account.business.logo ? ('<h2><img src="' + $scope.account.business.logo + '" /></h2>') : '<h2>Logo Here</h2>',
          // "title": "<h2 class='center'>New Email</h2>",
          // "subtitle": "subtitle",
          // "text": "This is your new email",

          "bg": {
            "img": {
              "url": "",
              "width": null,
              "height": null,
              "parallax": false,
              "blur": false
            },
            "color": ""
          },
          "visibility": true
        },
        {
          "_id": CommonService.generateUniqueAlphaNumericShort(),
          "anchor": CommonService.generateUniqueAlphaNumericShort(),
          "type": "email-1-col",
          "version": 1,
          "txtcolor": "#888888",
          // "logo": "<h2>Logo Here</h2>",
          "title": '<h2 style="text-align:center;color:#58585b;">One Column Layout Section</h2>',
          // "subtitle": "subtitle",
          "text": '<p style="text-align:center;">This is a single column content section.</p>',

          "bg": {
            "img": {
              "url": "",
              "width": null,
              "height": null,
              "parallax": false,
              "blur": false
            },
            "color": ""
          },
          "visibility": true
        },
        {
          "_id": CommonService.generateUniqueAlphaNumericShort(),
          "anchor": CommonService.generateUniqueAlphaNumericShort(),
          "type": "email-2-col",
          "version": 1,
          "txtcolor": "#888888",
          "title": '<h2 style="text-align:center;color:#58585b;">Two Column Layout Section</h2>',
          // "subtitle": "subtitle",
          "text1": '<p style="text-align:center;">This is column 1.</p>',
          "text2": '<p style="text-align:center;">This is column 2.</p>',

          "bg": {
            "img": {
              "url": "",
              "width": null,
              "height": null,
              "parallax": false,
              "blur": false
            },
            "color": ""
          },
          "visibility": true
        },
        {
          "_id": CommonService.generateUniqueAlphaNumericShort(),
          "anchor": CommonService.generateUniqueAlphaNumericShort(),
          "type": "email-3-col",
          "version": 1,
          "txtcolor": "#888888",
          "title": '<h2 style="text-align:center;color:#58585b;">Three Column Layout Section</h2>',
          // "subtitle": "subtitle",
          "text1": '<p style="text-align:center;">This is column 1.</p>',
          "text2": '<p style="text-align:center;">This is column 2.</p>',
          "text3": '<p style="text-align:center;">This is column 3.</p>',

          "bg": {
            "img": {
              "url": "",
              "width": null,
              "height": null,
              "parallax": false,
              "blur": false
            },
            "color": ""
          },
          "visibility": true
        },
        {
          "_id": CommonService.generateUniqueAlphaNumericShort(),
          "anchor": CommonService.generateUniqueAlphaNumericShort(),
          "type": "email-footer",
          "version": 1,
          "txtcolor": "#888888",
          // "logo": "<h2>Logo Here</h2>",
          // "title": "<h2 class='center'>New Email</h2>",
          // "subtitle": "subtitle",
          "text": "This is an email footer.",

          "bg": {
            "img": {
              "url": "",
              "width": null,
              "height": null,
              "parallax": false,
              "blur": false
            },
            "color": ""
          },
          "visibility": true
        }]
      };

      if ($scope.account.business.logo) {
        emailToSend.components[0].logo = '<img src="' + $scope.account.business.logo + '"/>';
      }

      WebsiteService.createEmail(emailToSend, function (newemail, err) {
        if(newemail && !err) {
          $scope.closeModal();
          toaster.pop('success', 'Email Created', 'The ' + newemail.title + ' email was created successfully.');
          $scope.emails.unshift(newemail);
          $scope.displayedEmails.unshift(newemail);
          $scope.newEmailOriginal = angular.copy($scope.newEmail);
          $scope.viewSingle(newemail);
        } else if(err) {
          toaster.pop('error', "Error creating Email", err.message);
        }
      });

    };


    $scope.openModal = function (template) {
      $scope.modalInstance = $modal.open({
        templateUrl: template,
        keyboard: false,
        backdrop: 'static',
        scope: $scope
      });
    };

    $scope.closeModal = function () {
      $scope.modalInstance.close();
    };

    $scope.getters = {
      components: function (value) {
        return value.length;
      },
      created: function (value) {
        return value.created.date;
      },
      modified: function (value) {
        return value.modified.date;
      }
    };

    $scope.setTemplateDetails = function (templateDetails) {
      $scope.templateDetails = true;
      $scope.selectedTemplate = templateDetails;
    };

    $scope.resetTemplateDetails = function () {
      $scope.templateDetails = false;
      $scope.selectedTemplate = null;
      $scope.showChangeURL = false;
    };

    $scope.viewSingle = function (email) {
      if ($scope.account.showhide.ssbEmail) {
        $state.go('app.emailEditor', {id: email._id});
      } else {
        $location.path('/editor').search({
          email: email._id
        });
      }
    };

    $scope.filterScreenshot = {};

    $scope.pageScreenshotOptions = [{
      name: 'Screenshot',
      value: true
    }, {
      name: 'No Screenshot',
      value: false
    }];

    /*
     * @triggerInput
     * - trigger the hidden input to trick smart table into activating filter
     */

    $scope.triggerInput = function (element) {
      angular.element(element).trigger('input');
    };

    $scope.clearFilter = function (event, input) {
      $scope.filterScreenshot = {};
      $scope.triggerInput(input);
    };

  }]);
}(angular));

'use strict';
/*global app, moment, angular, Intercom, urlParser*/
(function (angular) {
  app.controller('HelpTopicsCtrl', ["$rootScope", "$scope", "WebsiteService", "$location", "$sce", '$filter', function ($rootScope, $scope, WebsiteService, $location, $sce, $filter) {

    $scope.searchTextValue = {};
    $scope.searchTextValueBy = '$';
    $scope.loaded = false;
    $scope.panesByCat = {
      account: [],
      billing: [],
      contacts: [],
      campaigns: [],
      dashboard: [],
      emails: [],
      faqs: [],
      integrations: [],
      orders: [],
      posts: [],
      products: [],
      profile: [],
      'site-analytics': [],
      'social-feed': [],
      website: [],
    };

    $rootScope.$on('$locationChangeSuccess', function (event, newUrl, oldUrl) {
      if ($location.search().title) {
        var _topic = _.find($scope.topics, function (top) {
          return top.handle === $location.search().title;
        });
        $scope.viewSingle(_topic);
        //$location.search('topic', null);
    } else if ($location.search().topic) {
        var _topic = _.find($scope.topics, function (top) {
          return top._id === $location.search().topic;
        });
        console.log(_topic);
        $scope.viewSingle(_topic);
    } else {
        $scope.loaded = false;
        $scope.showTopics();
      }
    });

    $scope.isMoreThan50Char = function (word) {
      if (word.length > 50) {
        return true;
      }
    };

    WebsiteService.getTopics(function (topics) {
      console.log('topics ', topics);
      $scope.topics = topics;
      _.each($scope.topics, function (topic) {
        if (topic.isPublic) {
          console.log('topic> ', topic);
          $scope.panesByCat[topic.category.toLowerCase().replace(' ', '-')].push(topic);
        }
      });
      $scope.topicsLoaded = true;
      if ($location.search().title) {
        var _topic = _.find($scope.topics, function (top) {
          return top.handle === $location.search().title;
        });
        $scope.viewSingle(_topic);
      }
      if ($location.search().topic) {
        var _topic = _.find($scope.topics, function (top) {
          return top._id === $location.search().topic;
        });
        $scope.viewSingle(_topic);
      }
    });

    $scope.updateTopic = function (topic) {
      console.log('topic ', topic);
      topic.handle = $filter('slugify')(topic.title);
      WebsiteService.updateTopic(topic, function (topic) {
        console.log('topic updated', topic);
      });
    };

    $scope.isViewed = function (topic) {
      console.log('isViewed >>> ');
          topic.statistics.views = topic.statistics.views + 1;
          $scope.updateTopic(topic);
    };

    $scope.isHelpful = function (topic) {
      console.log('isHelpful >>> ', topic.statistics.helpful);
      $scope.topicRated = true;
      $scope.showThanks = true;
      topic.statistics.helpful = topic.statistics.helpful + 1;
      $scope.updateTopic(topic);
    };

    $scope.notHelpful = function (topic) {
      console.log('notHelpful >>> ', topic.statistics.nothelpful);
      Intercom('showNewMessage', ' ' + topic.title + ' The help topic did not answer my issue.');
      $scope.topicRated = true;
      $scope.showSupport = true;
      topic.statistics.nothelpful = topic.statistics.nothelpful + 1;
      $scope.updateTopic(topic);
    };

    $scope.singleTopic = {};

    $scope.viewSingle = function (topic) {
      console.log('viewSingle >>> ', topic);
      if(!topic)
        return;
      if(!$scope.loaded)
        $scope.isViewed(topic);
      $scope.loaded = true;
      $scope.singleTopic = topic;
      $scope.showSingle = true;
      $location.path('/support/help-topics').search({
        title: topic.handle
      });
    };

    $scope.flvVideoUrl = function (iframeUrl, url) {
      var parsedUrl = urlParser.parse(url);
      var retUrl = "";
      if (parsedUrl) {
        retUrl = iframeUrl + parsedUrl.id + '?showinfo=0&rel=0&hd=1';
      } else {
        retUrl = iframeUrl;
      }
      return $sce.trustAsResourceUrl(retUrl);
    };

    $scope.showTopics = function () {
      $location.search('topic', null);
      $scope.showSingle = false;
      $scope.singleTopic = '';
      $scope.topicRated = false;
      $scope.showSupport = false;
      $scope.showThanks = false;
    };

  }]);
}(angular));

'use strict';
/** 
  * controllers that generate the list of icons (Fontawesome and Themify)
*/
app.controller('IconsCtrl', ["$scope", function ($scope) {

    $scope.icons = [{
        "type": "fontawesome",
        "name": "Font Awesome",
        "version": "4.2",
        "prefix": "fa",
        "sections": [{
            'title': '40 New Icons in 4.2',
            'icons': ['fa-angellist', 'fa-area-chart', 'fa-at', 'fa-bell-slash', 'fa-bell-slash-o', 'fa-bicycle', 'fa-binoculars', 'fa-birthday-cake', 'fa-bus', 'fa-calculator', 'fa-cc', 'fa-cc-amex', 'fa-cc-discover', 'fa-cc-mastercard', 'fa-cc-paypal', 'fa-cc-stripe', 'fa-cc-visa', 'fa-copyright', 'fa-eyedropper', 'fa-futbol-o', 'fa-google-wallet', 'fa-ils', 'fa-ioxhost', 'fa-lastfm', 'fa-lastfm-square', 'fa-line-chart', 'fa-meanpath', 'fa-newspaper-o', 'fa-paint-brush', 'fa-paypal', 'fa-pie-chart', 'fa-plug', 'fa-shekel', 'fa-sheqel', 'fa-slideshare', 'fa-soccer-ball-o', 'fa-toggle-off', 'fa-toggle-on', 'fa-trash', 'fa-tty', 'fa-twitch', 'fa-wifi', 'fa-yelp']
        }, {
            'title': 'Web Application Icons',
            'icons': ['fa-adjust', 'fa-anchor', 'fa-archive', 'fa-arrows', 'fa-arrows-h', 'fa-arrows-v', 'fa-asterisk', 'fa-ban', 'fa-bar-chart-o', 'fa-barcode', 'fa-bars', 'fa-beer', 'fa-bell', 'fa-bell-o', 'fa-bolt', 'fa-book', 'fa-bookmark', 'fa-bookmark-o', 'fa-briefcase', 'fa-bug', 'fa-building-o', 'fa-bullhorn', 'fa-bullseye', 'fa-calendar', 'fa-calendar-o', 'fa-camera', 'fa-camera-retro', 'fa-caret-square-o-down', 'fa-caret-square-o-left', 'fa-caret-square-o-right', 'fa-caret-square-o-up', 'fa-certificate', 'fa-check', 'fa-check-circle', 'fa-check-circle-o', 'fa-check-square', 'fa-check-square-o', 'fa-circle', 'fa-circle-o', 'fa-clock-o', 'fa-cloud', 'fa-cloud-download', 'fa-cloud-upload', 'fa-code', 'fa-code-fork', 'fa-coffee', 'fa-cog', 'fa-cogs', 'fa-comment', 'fa-comment-o', 'fa-comments', 'fa-comments-o', 'fa-compass', 'fa-credit-card', 'fa-crop', 'fa-crosshairs', 'fa-cutlery', 'fa-dashboard', 'fa-desktop', 'fa-dot-circle-o', 'fa-download', 'fa-edit', 'fa-ellipsis-h', 'fa-ellipsis-v', 'fa-envelope', 'fa-envelope-o', 'fa-eraser', 'fa-exchange', 'fa-exclamation', 'fa-exclamation-circle', 'fa-exclamation-triangle', 'fa-external-link', 'fa-external-link-square', 'fa-eye', 'fa-eye-slash', 'fa-female', 'fa-fighter-jet', 'fa-film', 'fa-filter', 'fa-fire', 'fa-fire-extinguisher', 'fa-flag', 'fa-flag-checkered', 'fa-flag-o', 'fa-flash', 'fa-flask', 'fa-folder', 'fa-folder-o', 'fa-folder-open', 'fa-folder-open-o', 'fa-frown-o', 'fa-gamepad', 'fa-gavel', 'fa-gear', 'fa-gears', 'fa-gift', 'fa-glass', 'fa-globe', 'fa-group', 'fa-hdd-o', 'fa-headphones', 'fa-heart', 'fa-heart-o', 'fa-home', 'fa-inbox', 'fa-info', 'fa-info-circle', 'fa-key', 'fa-keyboard-o', 'fa-laptop', 'fa-leaf', 'fa-legal', 'fa-lemon-o', 'fa-level-down', 'fa-level-up', 'fa-lightbulb-o', 'fa-location-arrow', 'fa-lock', 'fa-magic', 'fa-magnet', 'fa-mail-forward', 'fa-mail-reply', 'fa-mail-reply-all', 'fa-male', 'fa-map-marker', 'fa-meh-o', 'fa-microphone', 'fa-microphone-slash', 'fa-minus', 'fa-minus-circle', 'fa-minus-square', 'fa-minus-square-o', 'fa-mobile', 'fa-mobile-phone', 'fa-money', 'fa-moon-o', 'fa-music', 'fa-pencil', 'fa-pencil-square', 'fa-pencil-square-o', 'fa-phone', 'fa-phone-square', 'fa-picture-o', 'fa-plane', 'fa-plus', 'fa-plus-circle', 'fa-plus-square', 'fa-plus-square-o', 'fa-power-off', 'fa-print', 'fa-puzzle-piece', 'fa-qrcode', 'fa-question', 'fa-question-circle', 'fa-quote-left', 'fa-quote-right', 'fa-random', 'fa-refresh', 'fa-reply', 'fa-reply-all', 'fa-retweet', 'fa-road', 'fa-rocket', 'fa-rss', 'fa-rss-square', 'fa-search', 'fa-search-minus', 'fa-search-plus', 'fa-share', 'fa-share-square', 'fa-share-square-o', 'fa-shield', 'fa-shopping-cart', 'fa-sign-in', 'fa-sign-out', 'fa-signal', 'fa-sitemap', 'fa-smile-o', 'fa-sort', 'fa-sort-alpha-asc', 'fa-sort-alpha-desc', 'fa-sort-amount-asc', 'fa-sort-amount-desc', 'fa-sort-asc', 'fa-sort-desc', 'fa-sort-down', 'fa-sort-numeric-asc', 'fa-sort-numeric-desc', 'fa-sort-up', 'fa-spinner', 'fa-square', 'fa-square-o', 'fa-star', 'fa-star-half', 'fa-star-half-empty', 'fa-star-half-full', 'fa-star-half-o', 'fa-star-o', 'fa-subscript', 'fa-suitcase', 'fa-sun-o', 'fa-superscript', 'fa-tablet', 'fa-tachometer', 'fa-tag', 'fa-tags', 'fa-tasks', 'fa-terminal', 'fa-thumb-tack', 'fa-thumbs-down', 'fa-thumbs-o-down', 'fa-thumbs-o-up', 'fa-thumbs-up', 'fa-ticket', 'fa-times', 'fa-times-circle', 'fa-times-circle-o', 'fa-tint', 'fa-toggle-down', 'fa-toggle-left', 'fa-toggle-right', 'fa-toggle-up', 'fa-trash-o', 'fa-trophy', 'fa-truck', 'fa-umbrella', 'fa-unlock', 'fa-unlock-alt', 'fa-unsorted', 'fa-upload', 'fa-user', 'fa-users', 'fa-video-camera', 'fa-volume-down', 'fa-volume-off', 'fa-volume-up', 'fa-warning', 'fa-wheelchair', 'fa-wrench']
        }, {
            'title': 'Form Control Icons',
            'icons': ['fa-check-square', 'fa-check-square-o', 'fa-circle', 'fa-circle-o', 'fa-dot-circle-o', 'fa-minus-square', 'fa-minus-square-o', 'fa-plus-square', 'fa-plus-square-o', 'fa-square', 'fa-square-o']
        }, {
            'title': 'Currency Icons',
            'icons': ['fa-bitcoin', 'fa-btc', 'fa-cny', 'fa-dollar', 'fa-eur', 'fa-euro', 'fa-gbp', 'fa-inr', 'fa-jpy', 'fa-krw', 'fa-money', 'fa-rmb', 'fa-rouble', 'fa-rub', 'fa-ruble', 'fa-rupee', 'fa-try', 'fa-turkish-lira', 'fa-usd', 'fa-won', 'fa-yen']
        }, {
            'title': 'Text Editor Icons',
            'icons': ['fa-align-center', 'fa-align-justify', 'fa-align-left', 'fa-align-right', 'fa-bold', 'fa-chain', 'fa-chain-broken', 'fa-clipboard', 'fa-columns', 'fa-copy', 'fa-cut', 'fa-dedent', 'fa-eraser', 'fa-file', 'fa-file-o', 'fa-file-text', 'fa-file-text-o', 'fa-files-o', 'fa-floppy-o', 'fa-font', 'fa-indent', 'fa-italic', 'fa-link', 'fa-list', 'fa-list-alt', 'fa-list-ol', 'fa-list-ul', 'fa-outdent', 'fa-paperclip', 'fa-paste', 'fa-repeat', 'fa-rotate-left', 'fa-rotate-right', 'fa-save', 'fa-scissors', 'fa-strikethrough', 'fa-table', 'fa-text-height', 'fa-text-width', 'fa-th', 'fa-th-large', 'fa-th-list', 'fa-underline', 'fa-undo', 'fa-unlink']
        }, {
            'title': 'Directional Icons',
            'icons': ['fa-angle-double-down', 'fa-angle-double-left', 'fa-angle-double-right', 'fa-angle-double-up', 'fa-angle-down', 'fa-angle-left', 'fa-angle-right', 'fa-angle-up', 'fa-arrow-circle-down', 'fa-arrow-circle-left', 'fa-arrow-circle-o-down', 'fa-arrow-circle-o-left', 'fa-arrow-circle-o-right', 'fa-arrow-circle-o-up', 'fa-arrow-circle-right', 'fa-arrow-circle-up', 'fa-arrow-down', 'fa-arrow-left', 'fa-arrow-right', 'fa-arrow-up', 'fa-arrows', 'fa-arrows-alt', 'fa-arrows-h', 'fa-arrows-v', 'fa-caret-down', 'fa-caret-left', 'fa-caret-right', 'fa-caret-square-o-down', 'fa-caret-square-o-left', 'fa-caret-square-o-right', 'fa-caret-square-o-up', 'fa-caret-up', 'fa-chevron-circle-down', 'fa-chevron-circle-left', 'fa-chevron-circle-right', 'fa-chevron-circle-up', 'fa-chevron-down', 'fa-chevron-left', 'fa-chevron-right', 'fa-chevron-up', 'fa-hand-o-down', 'fa-hand-o-left', 'fa-hand-o-right', 'fa-hand-o-up', 'fa-long-arrow-down', 'fa-long-arrow-left', 'fa-long-arrow-right', 'fa-long-arrow-up', 'fa-toggle-down', 'fa-toggle-left', 'fa-toggle-right', 'fa-toggle-up']
        }, {
            'title': 'Video Player Icons',
            'icons': ['fa-arrows-alt', 'fa-backward', 'fa-compress', 'fa-eject', 'fa-expand', 'fa-fast-backward', 'fa-fast-forward', 'fa-forward', 'fa-pause', 'fa-play', 'fa-play-circle', 'fa-play-circle-o', 'fa-step-backward', 'fa-step-forward', 'fa-stop', 'fa-youtube-play']
        }, {
            'title': 'Brand Icons',
            'icons': ['fa-adn', 'fa-android', 'fa-apple', 'fa-bitbucket', 'fa-bitbucket-square', 'fa-bitcoin', 'fa-btc', 'fa-css3', 'fa-dribbble', 'fa-dropbox', 'fa-facebook', 'fa-facebook-square', 'fa-flickr', 'fa-foursquare', 'fa-github', 'fa-github-alt', 'fa-github-square', 'fa-gittip', 'fa-google-plus', 'fa-google-plus-square', 'fa-html5', 'fa-instagram', 'fa-linkedin', 'fa-linkedin-square', 'fa-linux', 'fa-maxcdn', 'fa-pagelines', 'fa-pinterest', 'fa-pinterest-square', 'fa-renren', 'fa-skype', 'fa-stack-exchange', 'fa-stack-overflow', 'fa-trello', 'fa-tumblr', 'fa-tumblr-square', 'fa-twitter', 'fa-twitter-square', 'fa-vimeo-square', 'fa-vk', 'fa-weibo', 'fa-windows', 'fa-xing', 'fa-xing-square', 'fa-youtube', 'fa-youtube-play', 'fa-youtube-squar']
        }, {
            'title': 'Medical Icons',
            'icons': ['fa-ambulance', 'fa-h-square', 'fa-hospital-o', 'fa-medkit', 'fa-plus-square', 'fa-stethoscope', 'fa-user-md', 'fa-wheelchair']
        }]

    }, {
        "type": "themify",
        "name": "Themify Icons",
        "version": "",
        "prefix": "",
        "sections": [{
            'title': 'Arrows & Direction Icons',
            'icons': ['ti-arrow-up', 'ti-arrow-right', 'ti-arrow-left', 'ti-arrow-down', 'ti-arrows-vertical', 'ti-arrows-horizontal', 'ti-angle-up', 'ti-angle-right', 'ti-angle-left', 'ti-angle-down', 'ti-angle-double-up', 'ti-angle-double-right', 'ti-angle-double-left', 'ti-angle-double-down', 'ti-move', 'ti-fullscreen', 'ti-arrow-top-right', 'ti-arrow-top-left', 'ti-arrow-circle-up', 'ti-arrow-circle-right', 'ti-arrow-circle-left', 'ti-arrow-circle-down', 'ti-arrows-corner', 'ti-split-v', 'ti-split-v-alt', 'ti-split-h', 'ti-hand-point-up', 'ti-hand-point-right', 'ti-hand-point-left', 'ti-hand-point-down', 'ti-back-right', 'ti-back-left', 'ti-exchange-vertical']
        }, {
            'title': 'Web App Icons',
            'icons': ['ti-wand', 'ti-save', 'ti-save-alt', 'ti-direction', 'ti-direction-alt', 'ti-user', 'ti-link', 'ti-unlink', 'ti-trash', 'ti-target', 'ti-tag', 'ti-desktop', 'ti-tablet', 'ti-mobile', 'ti-email', 'ti-star', 'ti-spray', 'ti-signal', 'ti-shopping-cart', 'ti-shopping-cart-full', 'ti-settings', 'ti-search', 'ti-zoom-in', 'ti-zoom-out', 'ti-cut', 'ti-ruler', 'ti-ruler-alt-2', 'ti-ruler-pencil', 'ti-ruler-alt', 'ti-bookmark', 'ti-bookmark-alt', 'ti-reload', 'ti-plus', 'ti-minus', 'ti-close', 'ti-pin', 'ti-pencil', 'ti-pencil-alt', 'ti-paint-roller', 'ti-paint-bucket', 'ti-na', 'ti-medall', 'ti-medall-alt', 'ti-marker', 'ti-marker-alt', 'ti-lock', 'ti-unlock', 'ti-location-arrow', 'ti-layout', 'ti-layers', 'ti-layers-alt', 'ti-key', 'ti-image', 'ti-heart', 'ti-heart-broken', 'ti-hand-stop', 'ti-hand-open', 'ti-hand-drag', 'ti-flag', 'ti-flag-alt', 'ti-flag-alt-2', 'ti-eye', 'ti-import', 'ti-export', 'ti-cup', 'ti-crown', 'ti-comments', 'ti-comment', 'ti-comment-alt', 'ti-thought', 'ti-clip', 'ti-check', 'ti-check-box', 'ti-camera', 'ti-announcement', 'ti-brush', 'ti-brush-alt', 'ti-palette', 'ti-briefcase', 'ti-bolt', 'ti-bolt-alt', 'ti-blackboard', 'ti-bag', 'ti-world', 'ti-wheelchair', 'ti-car', 'ti-truck', 'ti-timer', 'ti-ticket', 'ti-thumb-up', 'ti-thumb-down', 'ti-stats-up', 'ti-stats-down', 'ti-shine', 'ti-shift-right', 'ti-shift-left', 'ti-shift-right-alt', 'ti-shift-left-alt', 'ti-shield', 'ti-notepad', 'ti-server', 'ti-pulse', 'ti-printer', 'ti-power-off', 'ti-plug', 'ti-pie-chart', 'ti-panel', 'ti-package', 'ti-music', 'ti-music-alt', 'ti-mouse', 'ti-mouse-alt', 'ti-money', 'ti-microphone', 'ti-menu', 'ti-menu-alt', 'ti-map', 'ti-map-alt', 'ti-location-pin', 'ti-light-bulb', 'ti-info', 'ti-infinite', 'ti-id-badge', 'ti-hummer', 'ti-home', 'ti-help', 'ti-headphone', 'ti-harddrives', 'ti-harddrive', 'ti-gift', 'ti-game', 'ti-filter', 'ti-files', 'ti-file', 'ti-zip', 'ti-folder', 'ti-envelope', 'ti-dashboard', 'ti-cloud', 'ti-cloud-up', 'ti-cloud-down', 'ti-clipboard', 'ti-calendar', 'ti-book', 'ti-bell', 'ti-basketball', 'ti-bar-chart', 'ti-bar-chart-alt', 'ti-archive', 'ti-anchor', 'ti-alert', 'ti-alarm-clock', 'ti-agenda', 'ti-write', 'ti-wallet', 'ti-video-clapper', 'ti-video-camera', 'ti-vector', 'ti-support', 'ti-stamp', 'ti-slice', 'ti-shortcode', 'ti-receipt', 'ti-pin2', 'ti-pin-alt', 'ti-pencil-alt2', 'ti-eraser', 'ti-more', 'ti-more-alt', 'ti-microphone-alt', 'ti-magnet', 'ti-line-double', 'ti-line-dotted', 'ti-line-dashed', 'ti-ink-pen', 'ti-info-alt', 'ti-help-alt', 'ti-headphone-alt', 'ti-gallery', 'ti-face-smile', 'ti-face-sad', 'ti-credit-card', 'ti-comments-smiley', 'ti-time', 'ti-share', 'ti-share-alt', 'ti-rocket', 'ti-new-window', 'ti-rss', 'ti-rss-alt']
        }, {
            'title': 'Control Icons',
            'icons': ['ti-control-stop', 'ti-control-shuffle', 'ti-control-play', 'ti-control-pause', 'ti-control-forward', 'ti-control-backward', 'ti-volume', 'ti-control-skip-forward', 'ti-control-skip-backward', 'ti-control-record', 'ti-control-eject']
        }, {
            'title': 'Text Editor',
            'icons': ['ti-paragraph', 'ti-uppercase', 'ti-underline', 'ti-text', 'ti-Italic', 'ti-smallcap', 'ti-list', 'ti-list-ol', 'ti-align-right', 'ti-align-left', 'ti-align-justify', 'ti-align-center', 'ti-quote-right', 'ti-quote-left']
        }, {
            'title': 'Layout Icons',
            'icons': ['ti-layout-width-full', 'ti-layout-width-default', 'ti-layout-width-default-alt', 'ti-layout-tab', 'ti-layout-tab-window', 'ti-layout-tab-v', 'ti-layout-tab-min', 'ti-layout-slider', 'ti-layout-slider-alt', 'ti-layout-sidebar-right', 'ti-layout-sidebar-none', 'ti-layout-sidebar-left', 'ti-layout-placeholder', 'ti-layout-menu', 'ti-layout-menu-v', 'ti-layout-menu-separated', 'ti-layout-menu-full', 'ti-layout-media-right', 'ti-layout-media-right-alt', 'ti-layout-media-overlay', 'ti-layout-media-overlay-alt', 'ti-layout-media-overlay-alt-2', 'ti-layout-media-left', 'ti-layout-media-left-alt', 'ti-layout-media-center', 'ti-layout-media-center-alt', 'ti-layout-list-thumb', 'ti-layout-list-thumb-alt', 'ti-layout-list-post', 'ti-layout-list-large-image', 'ti-layout-line-solid', 'ti-layout-grid4', 'ti-layout-grid3', 'ti-layout-grid2', 'ti-layout-grid2-thumb', 'ti-layout-cta-right', 'ti-layout-cta-left', 'ti-layout-cta-center', 'ti-layout-cta-btn-right', 'ti-layout-cta-btn-left', 'ti-layout-column4', 'ti-layout-column3', 'ti-layout-column2', 'ti-layout-accordion-separated', 'ti-layout-accordion-merged', 'ti-layout-accordion-list', 'ti-widgetized', 'ti-widget', 'ti-widget-alt', 'ti-view-list', 'ti-view-list-alt', 'ti-view-grid', 'ti-upload', 'ti-download', 'ti-loop', 'ti-layout-sidebar-2', 'ti-layout-grid4-alt', 'ti-layout-grid3-alt', 'ti-layout-grid2-alt', 'ti-layout-column4-alt', 'ti-layout-column3-alt', 'ti-layout-column2-alt']
        }, {
            'title': 'Brand Icons',
            'icons': ['ti-flickr', 'ti-flickr-alt', 'ti-instagram', 'ti-google', 'ti-github', 'ti-facebook', 'ti-dropbox', 'ti-dropbox-alt', 'ti-dribbble', 'ti-apple', 'ti-android', 'ti-yahoo', 'ti-trello', 'ti-stack-overflow', 'ti-soundcloud', 'ti-sharethis', 'ti-sharethis-alt', 'ti-reddit', 'ti-microsoft', 'ti-microsoft-alt', 'ti-linux', 'ti-jsfiddle', 'ti-joomla', 'ti-html5', 'ti-css3', 'ti-drupal', 'ti-wordpress', 'ti-tumblr', 'ti-tumblr-alt', 'ti-skype', 'ti-youtube', 'ti-vimeo', 'ti-vimeo-alt', 'ti-twitter', 'ti-twitter-alt', 'ti-linkedin', 'ti-pinterest', 'ti-pinterest-alt', 'ti-themify-logo', 'ti-themify-favicon', 'ti-themify-favicon-alt']
        }]
    }];
}]);
'use strict';
/** 
  * controller for Messages
*/
app.controller('InboxCtrl', ["$scope", "$state", function ($scope, $state) {
    $scope.noAvatarImg = "assets/images/default-user.png";

    $scope.messages = [{
        "from": "John Stark",
        "date": 1400956671914,
        "subject": "Reference Request - Nicole Bell",
        "email": "stark@example.com",
        "avatar": "assets/images/avatar-6.jpg",
        "starred": false,
        "sent": false,
        "spam": false,
        "content": "<p>Hi Peter, <br>Thanks for the e-mail. It is always nice to hear from people, especially from you, Scott.</p> <p>I have not got any reply, a positive or negative one, from Seibido yet.<br>Let's wait and hope that it will make a BOOK.</p> <p>Have you finished your paperwork for Kaken and writing academic articles?<br>If you have some free time in the near future, I want to meet you and explain to you our next project.</p> <p>Why not drink out in Hiroshima if we are accepted?<br>We need to celebrate ourselves, don't we?<br>Let's have a small end-of-the-year party!</p> <p>Sincerely, K. Nakagawa</p>",
        "id": 50223456
    }, {
        "from": "James Patterson",
        "date": 1400956671914,
        "subject": "Position requirements",
        "email": "patterson@example.com",
        "avatar": "assets/images/avatar-9.jpg",
        "starred": true,
        "sent": false,
        "spam": false,
        "content": "<p>Dear Mr. Clarks</p> <p>I am interested in the Coordinator position advertised on XYZ. My resume is enclosed for your review. Given my related experience and excellent capabilities I would appreciate your consideration for this job opening. My skills are an ideal match for this position.</p> <p> <strong>Your Requirements:</strong> </p> <ul> <li>Responsible for evening operations in Student Center and other facilities, including managing registration, solving customer problems, dealing with risk management and emergencies, enforcement of department policies.</li> <li>Assists with hiring, training, and management of staff. Coordinate statistics and inventory.</li> <li>Experience in the supervision of student staff and strong interpersonal skills are also preferred.</li> <li>Valid Minnesota driver's license with good driving record. Ability to travel to different sites required.</li> <li>Experience in collegiate programming and management.</li> </ul> <p> <strong>My Qualifications:</strong> </p> <ul> <li>Register students for courses, design and manage program software, solve customer problems, enforce department policies, and serve as a contact for students, faculty, and staff.</li> <li>Hiring, training, scheduling and management of staff, managing supply inventory, and ordering.</li> <li>Minnesota driver's license with NTSA defensive driving certification.</li> <li>Extensive experience in collegiate programming and management.</li> <li>Excellent interpersonal and communication skills.</li> </ul> <p>I appreciate your taking the time to review my credentials and experience. Again, thank you for your consideration.</p> <p>Sincerely,<br> <br> James</p>",
        "id": 50223457
    }, {
        "from": "Mary Ferguson",
        "date": 1400956671914,
        "subject": "Employer's job requirements",
        "email": "mary@example.com",
        "avatar": "assets/images/avatar-8.jpg",
        "starred": false,
        "sent": false,
        "spam": false,
        "content": "<p>Dear Mr. Clarks</p> <p>In response to your advertisement in the<em> Milliken Valley Sentinel </em> for Vice President, Operations, please consider the following:</p> <p> <strong>Develop and implement strategic operational plans.</strong> <br> 15+ years aggressive food company production management experience. Planned, implemented, coordinated, and revised all production operations in plant of 250+ employees.</p> <p> <strong>Manage people, resources and processes.</strong> <br> Developed and published weekly processing and packaging schedules to meet annual corporate sales demands of up to $50 million. Met all production requirements and minimized inventory costs.</p> <p> <strong>Coach and develop direct reports.</strong> <br> Designed and presented training programs for corporate, divisional and plant management personnel. Created employee involvement program resulting in $100,000+ savings annually.</p> <p> <strong>Ensure operational service groups meet needs of external and internal customers.</strong> <br> Chaired cross-functional committee of 16 associates that developed and implemented processes, systems and procedures plant-wide. Achieved year end results of 12% increase in production, 6% reduction in direct operational costs and increased customer satisfaction rating from 85% to 93.5%.</p> <p>I welcome the opportunity to visit with you about this position. My resume has been uploaded, per your instructions. I may be reached at the number above. Thanks again for your consideration.</p> <p>Sincerely,<br> <br> Mary Ferguson</p>",
        "id": 50223458
    }, {
        "from": "Jane Fieldstone",
        "date": 1400956671914,
        "subject": "Job Offer",
        "email": "fieldstone@example.com",
        "starred": false,
        "sent": false,
        "spam": false,
        "content": "<p>Dear Mr. Clarks,</p> <p>As we discussed on the phone, I am very pleased to accept the position of Marketing Manager with Smithfield Pottery. Thank you for the opportunity. I am eager to make a positive contribution to the company and to work with everyone on the Smithfield team.</p> <p>As we discussed, my starting salary will be $38,000 and health and life insurance benefits will be provided after 90 days of employment.</p> <p>I look forward to starting employment on July 1, 20XX. If there is any additional information or paperwork you need prior to then, please let me know.</p> <p>Again, thank you.</p> <p> <br> Jane Fieldstone</p>",
        "id": 50223459
    }, {
        "from": "Steven Thompson",
        "date": 1400956671914,
        "subject": "Personal invitation",
        "email": "thompson@example.com",
        "avatar": "assets/images/avatar-3.jpg",
        "starred": false,
        "sent": false,
        "spam": false,
        "content": "<p>Dear Peter,</p> <p>Good Day!</p> <p>We would like to invite you to the coming birthday party of our son Francis John Waltz Jr. as he is celebrating his first birthday. The said party will be on November 27, 2010 at Toy Kingdom just along Almond road. All kids are expected to wear their beautiful fancy dress.</p> <p>We will be delighted with your presence in this party together with your family. We will be arranging transportation for all the guests for your convenience in going to the venue of the said party promptly.</p> <p>It is a great honor for us to see you at the party and please do confirm your attendance before the party in the given number so that we will arrange the service accordingly.</p> <p>Best regards,</p> <p>Mr. and Mrs. Thompson</p>",
        "id": 50223460
    }, {
        "from": "Michael A. Faust",
        "date": 1400956671914,
        "subject": "Re: Group Meeting",
        "email": "faust@example.com",
        "starred": true,
        "sent": false,
        "spam": false,
        "content": "<p>Dear Sir</p><p>It was my pleasure to be introduced to you by Mr. Elliot Carson last Tuesday. I am delighted to make your acquaintance. Mr. Carson has highly recommended you as an esteemed businessman with integrity and good reputation.</p><p>Hence, it would be my pleasure to extend an invitation to you to join our Texas Businessmen Fellowship every last Saturday of the month from 6pm to 9pm at Texas Holiday Inn. This fellowship was set up by Texan businessmen who are sincere in assisting one another in honest business dealings and to look out for one another as a brother for another.</p><p>Attendance and membership are by invitation only. We share about the business trends and strategies as well as pitfalls to avoid so that it would make our members sharper in our business acumen. Every member is free to share his business knowledge, skills and tips. We want all members to succeed as a businessman.</p><p>As you are highly recommended by Mr. Carson, one of our founders, we shall be pleased to have you join us this month. Dress code: Smart casual. There would be a dinner at the fellowship so that members can be in a relaxed environment to mingle with one another.</p><p>We look forward to your confirmation to this invitation so that the necessary preparations can be done.</p><p>Respectfully yours,</p><p>Michael A. Faust</p>",
        "id": 50223461
    }, {
        "from": "Nicole Bell",
        "date": 1400956671914,
        "subject": "Congratulations ",
        "email": "nicole@example.com",
        "avatar": "assets/images/avatar-2.jpg",
        "starred": false,
        "sent": false,
        "spam": false,
        "content": "<p>Dear friend Peter,</p><p>I am feeling very happy today to congratulate you as you got promotion. I got the news two days before that you are promoted from the post of junior manager to the post of senior manager. You really deserved that promotion. You were a employee of that company since 10 years. In these 10 years you have served the company a lot. With your skills, hard work, intelligence you have contributed to the companies success. Due to all these reasons you had to get promotion.</p><p>Personally I am very happy to see you getting successful in your life. This time also it was very delightful to hear about your success. I hope god bless you and give you pink of health. I will always ask god to give you everything that you need in your life. He may bless you with lot of happiness in your future. </p><p>Give my love to your children and regards to your parents.</p><p>Your’s affectionately,</p><p>Nicole Bell.</p>",
        "id": 50223462
    }, {
        "from": "Google Geoff",
        "date": 1400956671914,
        "subject": "JobSearch information letter",
        "email": "mutating@example.com",
        "starred": false,
        "sent": false,
        "spam": true,
        "content": "<p>Dear recipient,</p><p>Avangar Technologies announces the beginning of a new unprecendented global employment campaign. reviser yeller winers butchery twenties Due to company's exploding growth Avangar is expanding business to the European region. During last employment campaign over 1500 people worldwide took part in Avangar's business and more than half of them are currently employed by the company. And now we are offering you one more opportunity to earn extra money working with Avangar Technologies. druggists blame classy gentry Aladdi</p><p>We are looking for honest, responsible, hard-working people that can dedicate 2-4 hours of their time per day and earn extra Â£300-500 weekly. All offered positions are currently part-time and give you a chance to work mainly from home.</p><p>lovelies hockey Malton meager reordered</p><p>Please visit Avangar's corporate web site (http://www.avangar.com/sta/home/0077.htm) for more details regarding these vacancies.</p>",
        "id": 50223463
    }, {
        "from": "Shane Michaels",
        "date": new Date(),
        "subject": "Marketing agreement between two companies",
        "email": "shane@example.com",
        "starred": false,
        "sent": false,
        "spam": false,
        "content": "<p>This letter is with regards to the advertisement given in the yesterdays newspaper &amp; we feel proud to introduce ourselves as M/s ABC advertising agency. We are ready to take up your proposal of doing marketing work for your company. We will charge $10,000 for a week for this work of marketing. This price includes print material like posters, handbills, radio announcements, advertisements in local newspaper as well as on television channels &amp; also street-to-street mike announcements. Your company will give the wordings of the announcement &amp; the payment can be made after the work gets complete. Mode of payment will be through cheques &amp; payment should be made in three installments, first on agreement, second at the time when work commences &amp; lastly when the work is completed.</p><p>Yours sincerely,</p><p>Shane Michaels</p>",
        "id": 50223464
    }, {
        "from": "Kenneth Ross",
        "date": new Date(),
        "subject": "Sincere request to keep in touch.",
        "email": "kenneth@example.com",
        "avatar": "assets/images/avatar-5.jpg",
        "starred": false,
        "sent": false,
        "spam": false,
        "content": "<p>Dear Mr. Clarks,</p><p>I was shocked to see my letter after having just left and  part away from college just a couple of weeks ago. Well it’s my style to bring back together and  hold on to our college group who seems to get separated and  simply go along their own ways. Just giving it a sincere try, who wish to live life just like those college days, to share and  support for every minute crust and  fragments happening in the life.</p><p>So without any compulsion and  without any special invitation this is a one time offer cum request cum order to keep in touch and  also to live forever as best buddies. Hoping to see you at Café da Villa on this Sunday evening to celebrate our new beginning in a grand way.</p><p>Thanking you,</p>",
        "id": 50223465
    }];
}]);
app.controller('ViewMessageCrtl', ['$scope', '$stateParams',
function ($scope, $stateParams) {
    function getById(arr, id) {
        for (var d = 0, len = arr.length; d < len; d += 1) {
            if (arr[d].id == id) {

                return arr[d];
            }
        }
    }

    $scope.message = getById($scope.messages, $stateParams.inboxID);

}]);
'use strict';
/*global app, moment, angular, window, L*/
/*jslint unparam:true*/
(function (angular) {
  app.controller('IntegrationsCtrl', ["$scope", "SocialConfigService", "AccountService", "userConstant", "SweetAlert", "ipCookie", "toaster", "$location", "$state", "$window", function ($scope, SocialConfigService, AccountService, userConstant, SweetAlert, ipCookie, toaster, $location, $state, $window) {

    /*
     * Global Variables
     * - credentialTypes: constant for social network names
     */

    $scope.credentialTypes = userConstant.credential_types;

    /*
     * @getAllSocialConfig
     * get the social accounts
     */



    $scope.getAccount = function () {
      AccountService.getAccount(function (account) {
        $scope.account = account;
        var stripe = _.find(account.credentials, function (cred) {
          return cred.type === 'stripe';
        });
        SocialConfigService.getAllSocialConfig(function (data) {
          if (stripe) {
            stripe.accountType = "account";
            stripe.id = Math.uuid(8);
            stripe.type = "st";
            //the stripe account is part of the social config
            //data.socialAccounts.push(stripe);
          }
          _.each(data.socialAccounts, function (socialAccount) {
            //get profile/page info
            if (socialAccount.type === 'fb') {
              SocialConfigService.getFBProfile(socialAccount.id, function (profile) {
                socialAccount.profile = profile;
              });
            } else if(socialAccount.type === 'stripe') {
                //change it to st?
                socialAccount.type = 'st';
            }
          });
          if(!_.find(data.socialAccounts, function(cred){return cred.type === 'st'})){
              //add the credential from the account.
              data.socialAccounts.push(stripe);
          }
          $scope.socialAccounts = data.socialAccounts;
          $scope.checkForIntegration();
          console.log();
        });
      });
    };

    $scope.checkForIntegration = function()
    {
      var completedIntegration = ipCookie("socialAccount");
      if (completedIntegration) {
        if (completedIntegration.redirectTo !== '/account/integrations') {
          var redirectUrl = completedIntegration.redirectTo;
          $location.path(redirectUrl);
        } else {
          var _filteredAccount = _.where($scope.socialAccounts, {
            type: completedIntegration.type
          });
          var _count = _filteredAccount.length;
          if(completedIntegration.accountsCount != _filteredAccount.length)
          {
           $scope.minRequirements = true;
           toaster.pop('success', "Integrated Successfully", completedIntegration.socialAccount + ' has been added.');
          }
        }
      }
      ipCookie.remove("socialAccount", {
        path: "/"
      });
    };

    $scope.getAccount();

    /*
     * @socialFilter
     * filter the social account to only get the parent accounts
     */

    $scope.socialFilter = function (item) {
      return item.accountType !== 'adminpage';
    };

    /*
     * @disconnectSocial
     * disconnect the social account
     */

    $scope.disconnectSocial = function (sa, index) {
      console.log('disconnectSocial >>>');
      SweetAlert.swal({
        title: "Are you sure?",
        text: "Do you want to disconnect this social network?",
        type: "warning",
        showCancelButton: true,
        confirmButtonColor: "#DD6B55",
        confirmButtonText: "Yes, disconnect it!",
        cancelButtonText: "No, do not disconnect it!",
        closeOnConfirm: true,
        closeOnCancel: true
      }, function (isConfirm) {
        if (isConfirm) {
          console.log('sa ', sa, index);
          sa.loading = true;
          if (sa.type === $scope.credentialTypes.STRIPE) {
            $scope.account.credentials = _.without($scope.account.credentials, _.findWhere($scope.account.credentials, {
              accessToken: sa.accessToken
            }));
            AccountService.updateAccount($scope.account, function (account) {
              $scope.socialAccounts.splice(index, 1);
              $scope.account = account;
            });
          } else {
            SocialConfigService.deleteSocialConfigEntry(sa.id, function () {
              SocialConfigService.getAllSocialConfig(function (data) {
                $scope.socialAccounts.splice(index, 1);
              });
            });
          }
        }
      });
    };

    /*
     * @socailRedirect
     * redirect users to social network and setting up a temporary cookie
     */

    $scope.currentHost = $window.location.host;
    $scope.redirectUrl = '/admin/account/integrations';

    $scope.socailRedirect = function (socialAccount, type) {
      //var _count =  $scope.socialAccounts[0].type
      var _filteredAccount = _.where($scope.socialAccounts, {
        type: type
      });

      var _count = _filteredAccount.length;

      var account_cookie = ipCookie("socialAccount");
      //Set the amount of time a socialAccount should last.
      var expireTime = new Date();
      expireTime.setMinutes(expireTime.getMinutes() + 10);
      if (account_cookie === undefined) {
        var cookieValue = {
          "socialAccount": socialAccount,
          "redirectTo": '/account/integrations',
          "accountsCount": _count,
          "type": type
        };
        ipCookie("socialAccount", cookieValue, {
          expires: expireTime,
          path: "/"
        });
      } else {
        //If it does exist, delete it and set a new one with new expiration time
        ipCookie.remove("socialAccount", {
          path: "/"
        });
        var cookieValue = {
          "socialAccount": socialAccount,
          "redirectTo": '/account/integrations',
          "accountsCount": _count,
          "type": type
        };
        ipCookie("socialAccount", cookieValue, {
          expires: expireTime,
          path: "/",
          redirectTo: "/account/integrations"
        });
      }

      var _redirectUrl = '/redirect/?next=' + $scope.currentHost + '/socialconfig/' + socialAccount.toLowerCase() + '?redirectTo=' + $scope.redirectUrl + '&socialNetwork=' + socialAccount;
      if (socialAccount === 'Stripe') {
        ///redirect/?next={{currentHost}}/stripe/connect&socialNetwork=stripe
        _redirectUrl = '/redirect/?next=' + $scope.currentHost + '/stripe/connect/';
      }

      if (socialAccount === 'Paypal') {
        //$state.go('app.support.helptopics');
        //return;
          _redirectUrl = '/admin/#/support/help-topics?title=adding-paypal-as-an-payment-option'
      }
      $window.location = _redirectUrl;
    };

  }]);
}(angular));

'use strict';
/** 
  * controller for angular-ladda
  * An angular directive wrapper for Ladda buttons.
*/
app.controller('LaddaCtrl', ["$scope", "$timeout", function ($scope, $timeout) {
    $scope.ldloading = {};
    $scope.clickBtn = function (style) {
        $scope.ldloading[style.replace('-', '_')] = true;
        $timeout(function () {
            $scope.ldloading[style.replace('-', '_')] = false;
        }, 2000);
    };
    $scope.clickProgressBtn = function (style) {
        $scope.ldloading[style.replace('-', '_') + "_progress"] = true;
        $timeout(function () {
            $scope.ldloading[style.replace('-', '_') + "_progress"] = 0.1;
        }, 500);
        $timeout(function () {
            $scope.ldloading[style.replace('-', '_') + "_progress"] += 0.1;
        }, 1000);
        $timeout(function () {
            $scope.ldloading[style.replace('-', '_') + "_progress"] += 0.1;
        }, 1500);
        $timeout(function () {
            $scope.ldloading[style.replace('-', '_') + "_progress"] = false;
        }, 2000);
    };
}]);
'use strict';
/**
 * Indigenous Main Controller
 */
app.controller('AppCtrl', ['$rootScope', '$scope', '$state', '$translate', '$localStorage', '$window', '$document', '$timeout', '$modal', 'cfpLoadingBar', 'UserService', 'AccountService', 'accountConstant',
  function ($rootScope, $scope, $state, $translate, $localStorage, $window, $document, $timeout, $modal, cfpLoadingBar, UserService, AccountService, accountConstant) {

    AccountService.getAccount(function (account) {
      $scope.account = account;

      $rootScope.account = account;
      AccountService.setMainAccount($scope.account);
        if(account.showhide.dohy && $state.current.name ==='app.dashboard') {
            console.log('Going to Dohy');
            $state.go('app.dohy');
        }
      if (account.locked_sub && !$state.includes('app.account.billing')) {
        $state.go('app.account.billing');
      }

      if (account.firstLogin) {
	    //$state.go('app.support.gettingstarted');
        account.firstLogin = false;
        AccountService.updateAccount(account, function () {
          console.log('account updated');
        });
      }

    });

    var fullWidthPages = ['app.onboarding'];

    $rootScope.$on('$stateChangeSuccess', function(e, current, pre) {
      if (fullWidthPages.indexOf($state.current.name) > -1) {
        $scope.hideSidebar = true;
      } else {
        $scope.hideSidebar = false;
      }

    });

    // Loading bar transition
    // -----------------------------------
    var $win = $($window);

    $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {
      //start loading bar on stateChangeStart
      $rootScope.app.layout.isMinimalAdminChrome =  false;
      if ($scope.account && $scope.account.locked_sub && $state.includes('app.account.billing')) {
        cfpLoadingBar.complete();
      } else {
        cfpLoadingBar.start();
      }

    });
    $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {
      //stop loading bar on stateChangeSuccess
      event.targetScope.$watch("$viewContentLoaded", function () {

        cfpLoadingBar.complete();
      });

      // scroll top the page on change state

      $document.scrollTo(0, 0);

      if (angular.element('.email-reader').length) {
        angular.element('.email-reader').animate({
          scrollTop: 0
        }, 0);
      }

      // Save the route title
      $rootScope.currTitle = $state.current.title;
    });

    // State not found
    $rootScope.$on('$stateNotFound', function (event, unfoundState, fromState, fromParams) {
      //$rootScope.loading = false;
      console.log(unfoundState.to);
      // "lazy.state"
      console.log(unfoundState.toParams);
      // {a:1, b:2}
      console.log(unfoundState.options);
      // {inherit:false} + default options
    });

    $rootScope.pageTitle = function () {
      return $rootScope.app.name + ' - ' + ($rootScope.currTitle || $rootScope.app.description);
    };

    // save settings to local storage
    if (angular.isDefined($localStorage.layout)) {
      $scope.app.layout = $localStorage.layout;

    } else {
      $localStorage.layout = $scope.app.layout;
    }
    $scope.$watch('app.layout', function () {
      // save to local storage
      $localStorage.layout = $scope.app.layout;
    }, true);

    //global function to scroll page up
    $scope.toTheTop = function () {

      $document.scrollTopAnimated(0, 600);

    };

    // angular translate
    // ----------------------

    $scope.language = {
      // Handles language dropdown
      listIsOpen: false,
      // list of available languages
      available: {
        'en': 'English',
        'it_IT': 'Italiano',
        'de_DE': 'Deutsch'
      },
      // display always the current ui language
      init: function () {
        var proposedLanguage = $translate.proposedLanguage() || $translate.use();
        var preferredLanguage = $translate.preferredLanguage();
        // we know we have set a preferred one in app.config
        $scope.language.selected = $scope.language.available[(proposedLanguage || preferredLanguage)];
      },
      set: function (localeId, ev) {
        $translate.use(localeId);
        $scope.language.selected = $scope.language.available[localeId];
        $scope.language.listIsOpen = !$scope.language.listIsOpen;
      }
    };

    $scope.language.init();

    // Function that find the exact height and width of the viewport in a cross-browser way
    var viewport = function () {
      var e = window,
        a = 'inner';
      if (!('innerWidth' in window)) {
        a = 'client';
        e = document.documentElement || document.body;
      }
      return {
        width: e[a + 'Width'],
        height: e[a + 'Height']
      };
    };
    // function that adds information in a scope of the height and width of the page
    $scope.getWindowDimensions = function () {
      return {
        'h': viewport().height,
        'w': viewport().width
      };
    };
    // Detect when window is resized and set some variables
    $scope.$watch($scope.getWindowDimensions, function (newValue, oldValue) {
      $scope.windowHeight = newValue.h;
      $scope.windowWidth = newValue.w;
      if (newValue.w >= 992) {
        $scope.isLargeDevice = true;
      } else {
        $scope.isLargeDevice = false;
      }
      if (newValue.w < 992) {
        $scope.isSmallDevice = true;
      } else {
        $scope.isSmallDevice = false;
      }
      if (newValue.w <= 768) {
        $scope.isMobileDevice = true;
      } else {
        $scope.isMobileDevice = false;
      }
    }, true);
    // Apply on resize
    $win.on('resize', function () {
      //$scope.$apply();
    });

    // Top Bar User
    // -----------------------------------
    UserService.getUser(function (user) {
      $scope.currentUser = user;
    });

    $scope.openTopBarMediaModal = function () {
        if($state.current.name === 'app.website.ssbSiteBuilder.editor'){
            clickandInsertImageButton();
            return;
        }
      $scope.modalInstance = $modal.open({
        templateUrl: 'media-modal',
        controller: 'MediaModalCtrl',
        size: 'lg',
        keyboard: false,
        backdrop: 'static',
        resolve: {
          showInsert: function () {

          },
          insertMedia: function () {

          },
          isSingleSelect: function () {
              return true;
          }
        }
      });
    };

  }
]);

'use strict';
/*global app*/
(function (angular) {
  app.controller('ManageTopicsCtrl', ["$scope", "$location", "toaster", "$filter", "$modal", "WebsiteService", function ($scope, $location, toaster, $filter, $modal, WebsiteService) {

    WebsiteService.getTopics(function (topics) {
      console.log('topics ', topics);
      $scope.topics = topics;
    });

    $scope.topicCategories = [
        , 'Emails', 'Getting Started', 'Integrations', 'Orders', 'Posts', 'Products', 'Profile', 'Site Analytics', 'Social Feed', 'Websites'];

    $scope.openModal = function (url) {
      $scope.modalInstance = $modal.open({
        templateUrl: url,
        keyboard: false,
        backdrop: 'static',
        scope: $scope
      });
    };

    $scope.closeModal = function () {
      $scope.modalInstance.close();
    };

    $scope.getters = {
      components: function (value) {
        return value.length;
      },
      created: function (value) {
        return value.created.date;
      },
      modified: function (value) {
        return value.modified.date;
      }
    };

    $scope.resetTemplateDetails = function () {
      $scope.templateDetails = false;
      $scope.selectedTemplate = null;
      $scope.showChangeURL = false;
    };

    $scope.validateCreatePage = function (page, restrict) {
      $scope.createPageValidated = false;
      if (page) {
        if (page.handle === '') {
          $scope.handleError = true;
        } else {
          $scope.handleError = false;
          if (!restrict) {
            page.handle = $filter('slugify')(page.title);
          }
        }
        if (page.title === '') {
          $scope.titleError = true;
        } else {
          $scope.titleError = false;
        }
        if (page && page.title && page.title !== '' && page.handle && page.handle !== '') {
          $scope.createPageValidated = true;
        }
      }
    };

    $scope.createTopic = function (newtopic, $event) {
      console.log('create topic >>> ', newtopic);
      // $scope.validateCreatePage(topic, true);

      // if (!$scope.createPageValidated) {
      //   $scope.titleError = true;
      //   $scope.handleError = true;
      //   return false;
      // }

      // $scope.titleError = false;
      // $scope.handleError = false;

      // var topicData = {
      //   title: topic.title,
      //   category: 'website'
      // };


      // if (!hasHandle) {
        newtopic.handle = $filter('slugify')(newtopic.title);
        WebsiteService.createTopic(newtopic, function (createdTopic) {
          toaster.pop('success', 'Topic Created', 'The ' + createdTopic.title + ' topic was created successfully.');
          $scope.closeModal();


          $scope.topics.unshift(createdTopic);
          $scope.displayedTopics.unshift(createdTopic);
          newtopic.title = "";
          newtopic.category = "";

          //$scope.resetTopicsDetails();
        });
      // } else {
      //   toaster.pop('error', "Page URL " + page.handle, "Already exists");
      //   $event.preventDefault();
      //   $event.stopPropagation();
      // }
    };

    $scope.viewSingle = function (topic) {
      $location.path('/support/manage-topics/').search({
        topic_id: topic._id
      });
    };

    $scope.filterScreenshot = {};

    $scope.pageScreenshotOptions = [{
      name: 'Screenshot',
      value: true
    }, {
      name: 'No Screenshot',
      value: false
    }];

    /*
     * @triggerInput
     * - trigger the hidden input to trick smart table into activating filter
     */

    $scope.triggerInput = function (element) {
      angular.element(element).trigger('input');
    };

    $scope.clearFilter = function (event, input) {
      $scope.filterScreenshot = {};
      $scope.triggerInput(input);
    };

  }]);
}(angular));

'use strict';
/** 
  * controllers for GoogleMap 
  * AngularJS Directive
*/
app.controller('MapCoordinatesCtrl', ["$scope", "$compile", function ($scope, $compile) {
    var TILE_SIZE = 256;

    function bound(value, opt_min, opt_max) {
        if (opt_min != null)
            value = Math.max(value, opt_min);
        if (opt_max != null)
            value = Math.min(value, opt_max);
        return value;
    }

    function degreesToRadians(deg) {
        return deg * (Math.PI / 180);
    }

    function radiansToDegrees(rad) {
        return rad / (Math.PI / 180);
    }

    function MercatorProjection() {
        this.pixelOrigin_ = new google.maps.Point(TILE_SIZE / 2, TILE_SIZE / 2);
        this.pixelsPerLonDegree_ = TILE_SIZE / 360;
        this.pixelsPerLonRadian_ = TILE_SIZE / (2 * Math.PI);
    }


    MercatorProjection.prototype.fromLatLngToPoint = function (latLng, opt_point) {
        var me = this;
        var point = opt_point || new google.maps.Point(0, 0);
        var origin = me.pixelOrigin_;

        point.x = origin.x + latLng.lng() * me.pixelsPerLonDegree_;

        // Truncating to 0.9999 effectively limits latitude to 89.189. This is
        // about a third of a tile past the edge of the world tile.
        var siny = bound(Math.sin(degreesToRadians(latLng.lat())), -0.9999, 0.9999);
        point.y = origin.y + 0.5 * Math.log((1 + siny) / (1 - siny)) * -me.pixelsPerLonRadian_;
        return point;
    };

    MercatorProjection.prototype.fromPointToLatLng = function (point) {
        var me = this;
        var origin = me.pixelOrigin_;
        var lng = (point.x - origin.x) / me.pixelsPerLonDegree_;
        var latRadians = (point.y - origin.y) / -me.pixelsPerLonRadian_;
        var lat = radiansToDegrees(2 * Math.atan(Math.exp(latRadians)) - Math.PI / 2);
        return new google.maps.LatLng(lat, lng);
    };

    $scope.$on('mapInitialized', function (event, map) {
        var numTiles = 1 << map.getZoom();
        var projection = new MercatorProjection();
        $scope.chicago = map.getCenter();
        $scope.worldCoordinate = projection.fromLatLngToPoint($scope.chicago);
        $scope.pixelCoordinate = new google.maps.Point($scope.worldCoordinate.x * numTiles, $scope.worldCoordinate.y * numTiles);
        $scope.tileCoordinate = new google.maps.Point(Math.floor($scope.pixelCoordinate.x / TILE_SIZE), Math.floor($scope.pixelCoordinate.y / TILE_SIZE));
    });
}]);
app.controller('EventSimpleCtrl', ['$scope', '$timeout',
function ($scope, $timeout) {
    var marker, map;
    $scope.$on('mapInitialized', function (evt, evtMap) {
        map = evtMap;
        marker = map.markers[0];
    });
    $scope.centerChanged = function (event) {
        $timeout(function () {
            map.panTo(marker.getPosition());
        }, 3000);
    }
    $scope.click = function (event) {
        map.setZoom(8);
        map.setCenter(marker.getPosition());
    }
}]);
app.controller('EventPropertiesCtrl', ["$scope", function ($scope) {
    $scope.$on('mapInitialized', function (evt, map) {
        var infoWindow = map.infoWindows[1];
        $scope.zoomChanged = function (e) {
            infoWindow.setContent('Zoom: ' + map.getZoom());
            map.setCenter(infoWindow.getPosition());
        }
    });
}]);
app.controller('ControlCustomStateCtrl', ["$scope", function ($scope) {
    $scope.home = new google.maps.LatLng(41.850033, -87.6500523);
    $scope.goHome = function () {
        $scope.map.setCenter($scope.home);
    }
    $scope.setHome = function () {
        $scope.home = $scope.map.getCenter();
    }
}]);
'use strict';
/*global app*/
app.controller('AddComponentModalCtrl', ['$scope', '$document', '$modalInstance', '$timeout', 'WebsiteService', 'toaster', 'components', 'clickedIndex', 'isEmail', 'pageHandle', function ($scope, $document, $modalInstance, $timeout, WebsiteService, toaster, components, clickedIndex, isEmail, pageHandle) {

  //passed in components from parent ctrl
  $scope.components = components;
  //passed in clickedIndex from parent ctrl
  $scope.clickedIndex = clickedIndex;
  //save loading var to
  $scope.saveLoading = false;
  //set email specific componentFilters etc.
  $scope.isEmail = isEmail;

  $scope.pageHandle = pageHandle;

  $scope.saveLoading = false;


    /*
    * @addComponent
    * - add the component to the page by retrieving the component and animating the entry
    */
    $scope.addComponent = function (addedType) {
        if (!$scope.saveLoading) {
            $scope.saveLoading = true;
            var componentType = null;
            if (addedType.type === 'footer' || addedType.type === 'navigation' || addedType.type === 'single-post' || addedType.type === 'blog-teaser' || addedType.type === 'blog') {
                componentType = _.findWhere($scope.components, {
                  type: addedType.type
                });
                if (componentType) {
                  toaster.pop('error', componentType.type + " component already exists");
                  $scope.saveLoading = false;
                  return;
                }
            }

            WebsiteService.getComponent(addedType, addedType.version || 1, function (newComponent) {
                var componentIndex = $scope.clickedIndex + 1;
                if (newComponent) {
                    $scope.closeModal();
                    $scope.components.splice(componentIndex, 0, newComponent);
                    $timeout(function () {
                        var element = document.getElementById(newComponent._id);
                        if (element) {
                            $document.scrollToElementAnimated(element, 175, 1000);
                            $(window).trigger('resize');
                        }
                    }, 500);
                    toaster.pop('success', "Component Added", "The " + newComponent.type + " component was added successfully.");

                    if (addedType.type === 'simple-form') {
                        $scope.setDefaultAutoresponderEmail(componentIndex);
                    }
                }
            });
        }
    };

    /*
     * select the default email for simple form as welcome-aboard
     */
    $scope.setDefaultAutoresponderEmail = function(componentIndex) {

        var simpleFormComponent = $scope.components[componentIndex - 1];

        WebsiteService.getEmails(true, function (emails) {
            if (!simpleFormComponent.emailId) {

                var _welcomeEmail = _.find(emails, function (_email) {
                    return _email.handle === 'welcome-aboard';
                });

                if (_welcomeEmail) {
                    simpleFormComponent.emailId = _welcomeEmail._id;
                }

            }
        });

    };

  /*
   * @closeModal
   * - close the modal and remove the backdrop
   */

  $scope.closeModal = function () {
    $timeout(function () {
      $modalInstance.close();
      angular.element('.modal-backdrop').remove();
    });
  };

  /*
   * @componentTypes
   * - an array of component types and icons for the add component modal
   */

  $scope.componentTypes = [{
    title: 'Blog',
    type: 'blog',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/blog.png',
    filter: 'blog',
    description: 'Use this component for your main blog page which displays all your posts with a sidebar of categories, tags, recent posts, and posts by author.',
    enabled: true
  }, {
    title: 'Blog Teaser',
    type: 'blog-teaser',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/blog-teaser.png',
    filter: 'blog',
    description: 'The Blog Teaser is perfect to showcase a few of your posts with a link to your full blog page.',
    enabled: true
  }, {
    title: 'Masthead',
    type: 'masthead',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/masthead.jpg',
    filter: 'misc',
    description: 'Introduce your business with this component on the top of your home page.',
    enabled: true
  }, {
    title: 'Feature List',
    type: 'feature-list',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/feature-list.jpg',
    filter: 'features',
    description: 'Showcase what your business offers with a feature list.',
    enabled: true
  }, {
    title: 'Contact Us',
    type: 'contact-us',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/contact-us.jpg',
    filter: 'contact',
    description: 'Let your visitors where your located, how to contact you, and what your business hours are.',
    enabled: true
  }, {
    title: 'Coming Soon',
    type: 'coming-soon',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/coming-soon.jpg',
    filter: 'misc',
    description: 'Even if your site isn\'t ready you can use this component to let your visitors know you will be availiable soon.',
    enabled: true
  }, {
    title: 'Feature block',
    type: 'feature-block',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/feature-block.jpg',
    filter: 'features',
    description: 'Use this component to show one important feature or maybe a quote.',
    enabled: true
  },{
    title: 'Footer',
    type: 'footer',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/footer.png',
    filter: 'misc',
    description: 'Use this component to show footer on your page.',
    enabled: false
  }, {
    title: 'Image Gallery',
    type: 'image-gallery',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/gallery.jpg',
    filter: 'images',
    description: 'Display your images in this image gallery component with fullscreen large view.',
    enabled: true
  }, {
    title: 'Image Text',
    version: 1,
    type: 'image-text',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/image-text.jpg',
    filter: 'images',
    description: 'Show an image next to a block of text on the right or the left.',
    enabled: true
  }, {
    title: 'Meet Team',
    type: 'meet-team',
    icon: 'fa fa-users',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/meet-team.png',
    filter: 'team',
    description: 'Let your visitors know about the team behind your business. Show profile image, position, bio, and social links for each member.',
    enabled: true
  }, {
    title: 'Navigation 1',
    type: 'navigation',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/navbar-v1.jpg',
    filter: 'navigation',
    description: 'A simple navigation bar with the logo on the left and nav links on the right. Perfect for horizontal logos.',
    version: 1,
    enabled: true
  }, {
    title: 'Navigation 2',
    type: 'navigation',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/nav-v2-preview.png',
    filter: 'navigation',
    description: 'If your logo is horizontal or square, this navigation will showcase your logo perfectly with addtional space for more links.',
    version: 2,
    enabled: true
  }, {
    title: 'Navigation 3',
    type: 'navigation',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/nav-v3-preview.png',
    filter: 'navigation',
    description: 'This navigation features a large block navigation links for a modern feel.',
    version: 3,
    enabled: true
  }, {
    title: 'Products',
    type: 'products',
    icon: 'fa fa-money',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/products.png',
    filter: 'products',
    description: 'Use this as the main products page to start selling. It comes together with a cart and checkout built in.',
    enabled: true
  }, {
    title: 'Pricing Tables',
    type: 'pricing-tables',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/pricing-tables.png',
    filter: 'text',
    description: 'Subscription product types with multiple options are best when shown in a pricing table to help the visitor decide which one is best for them.',
    enabled: true
  }, {
    title: 'Simple form',
    type: 'simple-form',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/simple-form.jpg',
    filter: 'forms',
    description: 'Automatically create contacts in the backend when a visitor submits this form. Add first name, last name, email, or phone number fields.',
    enabled: true
  }, {
    title: 'Single Post',
    type: 'single-post',
    icon: 'custom single-post',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/45274f46-0a21-11e5-83dc-0aee4119203c.png',
    filter: 'blog',
    description: 'Used for single post design. This is a mandatory page used to show single posts. This will apply to all posts.',
    enabled: true
  }, {
    title: 'Social',
    type: 'social-link',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/social-links.jpg',
    filter: 'social',
    description: 'Let your visitors know where else to find you on your social networks. Choose from 18 different networks.',
    enabled: true
  }, {
    title: 'Video',
    type: 'video',
    icon: 'fa fa-video',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/video.png',
    filter: 'video',
    description: 'Showcase a video from Youtube, Vimeo, or an uploaded one. You can simply add the url your video is currently located.',
    enabled: true
  }, {
    title: 'Text Block',
    type: 'text-only',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/text-block.jpg',
    filter: 'text',
    description: 'A full width component for a large volume of text. You can also add images within the text.',
    enabled: true
  }, {
    title: 'Thumbnail Slider',
    type: 'thumbnail-slider',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/thumbnail.png',
    filter: 'images',
    description: 'Perfect for sponsor or client logos you have worked with in the past. Works best with logos that have a transparent background. ',
    enabled: true
  }, {
    title: 'Top Bar',
    type: 'top-bar',
    icon: 'fa fa-info',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/top-bar.png',
    filter: 'contact',
    description: 'Show your social networks, phone number, business hours, or email right on top that provides visitors important info quickly.',
    enabled: true
  }, {
    title: 'Testimonials',
    type: 'testimonials',
    icon: 'fa fa-info',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/45263570-0a21-11e5-87dd-b37fd2717aeb.png',
    filter: 'text',
    description: 'A component to showcase your testimonials.',
    enabled: true
  }];

  if ($scope.isEmail) {
    $scope.componentTypes = [{
      title: 'Header',
      type: 'email-header',
      preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/blog.png',
      filter: 'email',
      description: 'Use this component for email header section.',
      enabled: true
    }, {
      title: 'Content 1 Column',
      type: 'email-1-col',
      preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/blog.png',
      filter: 'layout',
      description: 'Use this component for single column content.',
      enabled: true
    }, {
      title: 'Content 2 Column',
      type: 'email-2-col',
      preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/blog.png',
      filter: 'layout',
      description: 'Use this component for 2 column content.',
      enabled: true
    }, {
      title: 'Content 3 Column',
      type: 'email-3-col',
      preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/blog.png',
      filter: 'layout',
      description: 'Use this component for 3 column content.',
      enabled: true
    }, {
      title: 'Social Links',
      type: 'email-social',
      preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/blog.png',
      filter: 'social',
      description: 'Use this component for social links.',
      enabled: true
    }, {
      title: 'Horizontal Rule',
      type: 'email-hr',
      preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/blog.png',
      filter: 'layout',
      description: 'Use this component to insert a horizontal rule between components.',
      enabled: true
    }, {
      title: 'Footer',
      type: 'email-footer',
      preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/blog-teaser.png',
      filter: 'email',
      description: 'A footer for your email.',
      enabled: true
    }]
  } else {
    // Add footer component only if this is not present on current page(Case when user add a blank page using blank template)
    var checkIfFooterExists = _.findWhere($scope.components, {
      type: 'footer'
    });
    if(!checkIfFooterExists)
    {
      var footerComponent = _.findWhere($scope.componentTypes, {
        type: 'footer'
      });
      footerComponent.enabled = true;
    }
    if($scope.pageHandle == 'single-post')
    {
      var checkIfPostExists = _.findWhere($scope.components, {
        type: 'single-post'
      });
      if(!checkIfPostExists)
      {
        var postComponent = _.findWhere($scope.componentTypes, {
          type: 'single-post'
        });
        postComponent.enabled = true;
      }
    }
  }

  //component label placeholder
  var componentLabel;

  //enabled component types
  $scope.enabledComponentTypes = _.where($scope.componentTypes, {
    enabled: true
  });





  /************************************************************************************************************
   * Takes the componentTypes object and gets the value for the filter property from any that are enabled.
   * It then makes that list unique, sorts the results alphabetically, and and removes the misc value if
   * it exists. (The misc value is added back on to the end of the list later)
   ************************************************************************************************************/
  $scope.componentFilters = _.without(_.uniq(_.pluck(_.sortBy($scope.enabledComponentTypes, 'filter'), 'filter')), 'misc');

  // Iterates through the array of filters and replaces each one with an object containing an
  // upper and lowercase version
  _.each($scope.componentFilters, function (element, index) {
    componentLabel = element.charAt(0).toUpperCase() + element.substring(1).toLowerCase();
    $scope.componentFilters[index] = {
      'capitalized': componentLabel,
      'lowercase': element
    };
    componentLabel = null;
  });

  // Manually add the All option to the begining of the list
  $scope.componentFilters.unshift({
    'capitalized': 'All',
    'lowercase': 'all'
  });

  // Manually add the Misc section back on to the end of the list
  // Exclude 'Misc' filter for emails
  if (!$scope.isEmail)
    $scope.componentFilters.push({
      'capitalized': 'Misc',
      'lowercase': 'misc'
    });

  $scope.setFilterType = function (label) {
    $scope.typefilter = label;
  };
}]);

'use strict';
/*global app, moment, angular, window*/
/*jslint unparam:true*/

app.controller('ComponentSettingsModalCtrl', ['$scope', '$rootScope', '$modalInstance', '$http', '$timeout', '$q', '$compile', '$filter', 'WebsiteService', 'ContactService', 'ProductService', 'GeocodeService', 'toaster', 'hoursConstant', 'components', 'clickedIndex', 'contactMap', 'website', 'blog', 'isDirty', 'isSinglePost', 'openParentModal', 'showInsert', 'blogImage', 'accountShowHide', 'CampaignService', 'testimonialSlider', 'websiteLinks', 'isEmail', function ($scope, $rootScope, $modalInstance, $http, $timeout, $q, $compile, $filter, WebsiteService, ContactService, ProductService, GeocodeService, toaster, hoursConstant, components, clickedIndex, contactMap, website, blog, isDirty, isSinglePost, openParentModal, showInsert, blogImage, accountShowHide, CampaignService, testimonialSlider, websiteLinks, isEmail) {

  $scope.blog = {};
  $scope.components = components;
  $scope.openParentModal = openParentModal;
  $scope.clickedIndex = clickedIndex;
  $scope.componentEditing = components[clickedIndex];
  $scope.contactMap = contactMap;
  $scope.website = website;
  $scope.blog.post = blog;
  $scope.isDirty = isDirty;
  $scope.isSinglePost = isSinglePost;
  $scope.showInsert = showInsert;
  $scope.originalBlog = angular.copy($scope.blog.post);
  $scope.place = {};
  $scope.place.address = null;
  $scope.errorMapData = false;
  $scope.checkIfAddess = false;
  $scope.blogImage = blogImage;
  $scope.isEmail = isEmail;
  $scope.testimonialSlider = testimonialSlider;
  $scope.emailLoaded = false;
  $scope.websiteLinks = websiteLinks;

  /*
   * @getPages
   * -
   */

  WebsiteService.getPages(function (pages) {
    var parsed = angular.fromJson(pages);
    var arr = [];
    _.each(parsed, function (page) {
      arr.push(page);
    });
    $scope.allPages = arr;
    if (!accountShowHide.blog) {
      var _blogPage = _.findWhere($scope.allPages, {
        handle: 'blog'
      });
      if (_blogPage) {
        var _index = _.indexOf($scope.allPages, _blogPage);
        $scope.allPages.splice(_index, 1);
      }
    }
    $scope.filterdedPages = $filter('orderBy')($scope.allPages, "title", false);
  });

  WebsiteService.getEmails(true, function (emails) {
    $timeout(function () {
      $scope.emailLoaded = true;
    }, 0);
    console.log("Emails loaded");

    $scope.emails = emails;

    // select the default email for simple form as welcome-aboard
    if ($scope.componentEditing.type === 'simple-form' && !$scope.componentEditing.emailId) {
      var _welcomeEmail = _.find(emails, function (_email) {
        return _email.handle === 'welcome-aboard';
      });

      if (_welcomeEmail) {
        $scope.componentEditing.emailId = _welcomeEmail._id;
      }
    }

  });

  CampaignService.getCampaigns(function (campaigns) {
    console.log('campaigns >>> ', campaigns);
    $scope.campaigns = campaigns;
  });

  /*
   * @getAllProducts
   * - get products for products and pricing table components
   */

  $scope.availableProductTags = [];

  ProductService.getProducts(function (data) {
    $scope.products = data;
    _.each(data, function (product) {
      if (product.status === 'active' && product.tags && product.tags.length > 0) {
        _.each(product.tags, function (tag) {
          if ($scope.availableProductTags.indexOf(tag) === -1) {
            $scope.availableProductTags.push(tag);
          }
        });
      }
    });
    $scope.availableProductTagsString = $scope.availableProductTags.join(",");
  });

  $scope.getAllContactTags = function(){
    ContactService.getContactTags(function(tags){
      $scope.contactTags = tags;
      $scope.setTags(tags);
    });
    ContactService.getContacts(function(contacts){
      ContactService.getAllContactTags(contacts,function(tags){
        $scope.contactTags = tags;
        $scope.setTags(tags);
      });
    })
  }

  $scope.setTags = function (_contactTags) {
    console.log('setTags >>>');
    _.each($scope.componentEditing.tags, function (tag , index) {
      var matchingTag = _.findWhere($scope.contactTags, {
        data: tag
      });
      if(matchingTag)
      {
        _contactTags.push(matchingTag);
      }
      else {
        _contactTags.push({
            data : tag,
            label : tag
        });
      }
    });
    $scope.contactTags = _.uniq(_contactTags, function(c) { return c.label; })
    console.log('$scope.componentEditing.tags >>>', $scope.componentEditing.tags);
  };


  $scope.testOptions = {
    min: 5,
    max: 100,
    step: 5,
    precision: 2,
    orientation: 'horizontal', // vertical
    handle: 'round', //'square', 'triangle' or 'custom'
    tooltip: 'show', //'hide','always'
    tooltipseparator: ':',
    tooltipsplit: false,
    enabled: true,
    naturalarrowkeys: false,
    range: false,
    ngDisabled: false,
    reversed: false
  };

  $scope.sliderValue = 1;

  $scope.addBackground = function () {
    $scope.$parent.showInsert = true;
    $scope.openParentModal('media-modal', 'MediaModalCtrl', null, 'lg');
  };

  $scope.addFeaturedPost = function () {
    $scope.$parent.showInsert = true;
    $scope.blogImage.featured_image = true;
    $scope.openParentModal('media-modal', 'MediaModalCtrl', null, 'lg');
  };

  /*
   * @revertComponent
   * -
   */
  $scope.originalWebsite = angular.copy($scope.website);

  $scope.revertComponent = function () {
    if ($scope.componentEditing.type === 'navigation') {
      $scope.website.linkLists = $scope.originalWebsite.linkLists;
    }
    if ($scope.blog.post && $scope.originalBlog) {
      $scope.blog.post.featured_image = $scope.originalBlog.featured_image;
      $scope.blog.post.post_excerpt = $scope.originalBlog.post_excerpt;
    }
    $scope.components[clickedIndex] = $scope.originalComponent;
    $timeout(function () {
      $(window).trigger('resize');
    }, 0);
    $scope.closeModal();
  };

  /*
   * @spectrum
   * - variables for the spectrum color picker in the settings modal
   */

  $scope.spectrum = {
    options: {
      showPalette: true,
      clickoutFiresChange: true,
      showInput: true,
      showButtons: false,
      allowEmpty: true,
      hideAfterPaletteSelect: false,
      showPaletteOnly: true,
      togglePaletteOnly: true,
      togglePaletteMoreText: 'more',
      togglePaletteLessText: 'less',
      preferredFormat: 'hex',
      appendTo: 'body',
      palette: [
        ["#C91F37", "#DC3023", "#9D2933", "#CF000F", "#E68364", "#F22613", "#CF3A24", "#C3272B", "#8F1D21", "#D24D57"],
        ["#f47998", "#F47983", "#DB5A6B", "#C93756", "#FCC9B9", "#FFB3A7", "#F62459", "#F58F84", "#875F9A", "#5D3F6A"],
        ["#89729E", "#763568", "#8D608C", "#A87CA0", "#5B3256", "#BF55EC", "#8E44AD", "#9B59B6", "#BE90D4", "#4D8FAC"],
        ["#5D8CAE", "#22A7F0", "#19B5FE", "#59ABE3", "#48929B", "#317589", "#89C4F4", "#4B77BE", "#1F4788", "#003171"],
        ["#044F67", "#264348", "#7A942E", "#8DB255", "#5B8930", "#6B9362", "#407A52", "#006442", "#87D37C", "#26A65B"],
        ["#26C281", "#049372", "#2ABB9B", "#16A085", "#36D7B7", "#03A678", "#4DAF7C", "#D9B611", "#F3C13A", "#F7CA18"],
        ["#E2B13C", "#A17917", "#F5D76E", "#F4D03F", "#FFA400", "#E08A1E", "#FFB61E", "#FAA945", "#FFA631", "#FFB94E"],
        ["#E29C45", "#F9690E", "#CA6924", "#F5AB35", "#BFBFBF", "#F2F1EF", "#BDC3C7", "#ECF0F1", "#D2D7D3", "#757D75"],
        ["#EEEEEE", "#ABB7B7", "#6C7A89", "#95A5A6"]
      ]
    }
  };

  /*
   * @componentTypes
   * - an array of component types and icons for the add component modal
   */

  $scope.componentTypes = [{
    title: 'Blog',
    type: 'blog',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/blog.png',
    filter: 'blog',
    description: 'Use this component for your main blog pages which displays all your posts with a sidebar of categories, tags, recent posts, and posts by author.',
    enabled: true
  }, {
    title: 'Blog Teaser',
    type: 'blog-teaser',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/blog-teaser.png',
    filter: 'blog',
    description: 'The Blog Teaser is perfect to showcase a few of your posts with a link to you full blog page.',
    enabled: true
  }, {
    title: 'Masthead',
    type: 'masthead',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/masthead.jpg',
    filter: 'misc',
    description: 'Introduce your business with this component on the top of your home page.',
    enabled: true
  }, {
    title: 'Feature List',
    type: 'feature-list',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/feature-list.jpg',
    filter: 'features',
    description: 'Showcase what your business offers with a feature list.',
    enabled: true
  }, {
    title: 'Contact Us',
    type: 'contact-us',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/contact-us.jpg',
    filter: 'contact',
    description: 'Let your visitors where your located, how to contact you, and what your business hours are.',
    enabled: true
  }, {
    title: 'Coming Soon',
    type: 'coming-soon',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/coming-soon.jpg',
    filter: 'misc',
    description: 'Even if your site isn\'t ready you can use this component to let your visitors know you will be availiable soon.',
    enabled: true
  }, {
    title: 'Feature block',
    type: 'feature-block',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/feature-block.jpg',
    filter: 'features',
    description: 'Use this component to show one important feature or maybe a quote.',
    enabled: true
  }, {
    title: 'Image Gallery',
    type: 'image-gallery',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/gallery.jpg',
    filter: 'images',
    description: 'Display your images in this image gallery component with fullscreen large view.',
    enabled: true
  }, {
    title: 'Image Text',
    version: 1,
    type: 'image-text',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/image-text.jpg',
    filter: 'images',
    description: 'Show an image next to a block of text on the right or the left.',
    enabled: true
  }, {
    title: 'Meet Team',
    type: 'meet-team',
    icon: 'fa fa-users',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/meet-team.png',
    filter: 'team',
    description: 'Let your visitors know about the team behind your business. Show profile image, position, bio, and social links for each member.',
    enabled: true
  }, {
    title: 'Navigation 1',
    type: 'navigation',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/navbar-v1.jpg',
    filter: 'navigation',
    description: 'A simple navigation bar with the logo on the left and nav links on the right. Perfect for horizontal logos.',
    version: 1,
    enabled: true
  }, {
    title: 'Navigation 2',
    type: 'navigation',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/nav-v2-preview.png',
    filter: 'navigation',
    description: 'If your logo is horizontal or square, this navigation will showcase your logo perfectly with addtional space for more links.',
    version: 2,
    enabled: true
  }, {
    title: 'Navigation 3',
    type: 'navigation',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/nav-v3-preview.png',
    filter: 'navigation',
    description: 'This navigation features a large block navigation links for a modern feel.',
    version: 3,
    enabled: true
  }, {
    title: 'Products',
    type: 'products',
    icon: 'fa fa-money',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/products.png',
    filter: 'products',
    description: 'Use this as the main products page to start selling. It comes together with a cart and checkout built in.',
    enabled: true
  }, {
    title: 'Pricing Tables',
    type: 'pricing-tables',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/pricing-tables.png',
    filter: 'products',
    description: 'Subscription product types with multiple options are best when shown in a pricing table to help the visitor decide which one is best for them.',
    enabled: true
  }, {
    title: 'Simple form',
    type: 'simple-form',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/simple-form.jpg',
    filter: 'forms',
    description: 'Automatically create contacts in the backend when a visitor submits this form. Add first name, last name, email, or phone number fields.',
    enabled: true
  }, {
    title: 'Single Post',
    type: 'single-post',
    icon: 'custom single-post',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/45274f46-0a21-11e5-83dc-0aee4119203c.png',
    filter: 'blog',
    description: 'Used for single post design. This is a mandatory page used to show single posts. This will apply to all posts.',
    enabled: false
  }, {
    title: 'Social',
    type: 'social-link',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/social-links.jpg',
    filter: 'social',
    description: 'Let your visitors know where else to find you on your social networks. Choose from 18 different networks.',
    enabled: true
  }, {
    title: 'Video',
    type: 'video',
    icon: 'fa fa-video',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/video.png',
    filter: 'video',
    description: 'Showcase a video from Youtube, Vimeo, or an uploaded one. You can simply add the url your video is currently located.',
    enabled: true
  }, {
    title: 'Text Block',
    type: 'text-only',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/text-block.jpg',
    filter: 'text',
    description: 'A full width component for a large volume of text. You can also add images within the text.',
    enabled: true
  }, {
    title: 'Thumbnail Slider',
    type: 'thumbnail-slider',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/thumbnail.png',
    filter: 'images',
    description: 'Perfect for sponsor or client logos you have worked with in the past. Works best with logos that have a transparent background. ',
    enabled: true
  }, {
    title: 'Top Bar',
    type: 'top-bar',
    icon: 'fa fa-info',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/top-bar.png',
    filter: 'contact',
    description: 'Show your social networks, phone number, business hours, or email right on top that provides visitors important info quickly.',
    enabled: true
  }, {
    title: 'Testimonials',
    type: 'testimonials',
    icon: 'fa fa-info',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/45263570-0a21-11e5-87dd-b37fd2717aeb.png',
    filter: 'text',
    description: 'A component to showcase your testimonials.',
    enabled: true
  },
  {
    title: 'Footer',
    type: 'footer',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/footer.png',
    filter: 'misc',
    description: 'Use this component to show footer on your page.',
    enabled: false
  }];

  $scope.componentOpacityValues = [{
    label: 10,
    value: 0.1
  }, {
    label: 20,
    value: 0.2
  }, {
    label: 30,
    value: 0.3
  }, {
    label: 40,
    value: 0.4
  }, {
    label: 50,
    value: 0.5
  }, {
    label: 60,
    value: 0.6
  }, {
    label: 70,
    value: 0.7
  }, {
    label: 80,
    value: 0.8
  }, {
    label: 90,
    value: 0.9
  }, {
    label: 100,
    value: 1
  }];

  /*
   * @removeImage
   * -
   */

  $scope.removeImage = function (remove) {
    if ($scope.componentEditing && $scope.componentEditing.bg && $scope.componentEditing.bg.img) {
      if (($scope.componentEditing.bg.img.show === false && remove === true) || remove === false) {
        if (remove === false) {
          $scope.componentEditing.bg.img.url = null;
        }
        $scope.componentEditing.bg.img.blur = false;
        $scope.componentEditing.bg.img.parallax = false;
        $scope.componentEditing.bg.img.overlay = false;
        $scope.componentEditing.bg.img.undernav = false;
        $scope.componentEditing.bg.img.fullscreen = false;
      }

    }
  };

  $scope.closeModal = function () {
    $timeout(function () {
      $scope.$apply(function () {
        if ($scope.componentEditing.type === "contact-us") {
          $scope.validateGeoAddress(function () {
            if ($scope.errorMapData) {
              $scope.componentEditing.location = $scope.originalComponent.location;
            }
            if ($scope.contactHoursInvalid) {
              $scope.componentEditing.hours = $scope.originalComponent.hours;
            }
            $modalInstance.close();
            angular.element('.modal-backdrop').remove();
          });
        } else {
          $modalInstance.close();
          angular.element('.modal-backdrop').remove();
        }
      });
    });
  };

  $scope.$watch('newLink.linkPage', function (newValue) {
    if (newValue) {
      $scope.currentPage = _.find($scope.filterdedPages, function (page) {
        return page.handle === newValue;
      });
    }
  });

  $scope.initializeEditLinks = function (link, status) {
    if (link.page) {
      if (status) {
        link.data = null;
      }
      $scope.currentPage = _.find($scope.filterdedPages, function (page) {
        return page.handle === link.page;
      });
    }
  };

  /*
   * @initializeLinks
   * -
   */

  $scope.initializeLinks = function (status) {
    $scope.addLink = status;
    $scope.newLink = {
      linkUrl: null,
      linkTitle: null,
      linkType: null,
      linkPage: null
    };
  };

  /*
   * @setLinkUrl
   * -
   */

  $scope.setLinkUrl = function () {
    $scope.newLink.linkTitle = angular.element("#linkSection option:selected").html();
  };

  /*
   * @setLinkTitle
   * -
   */

  $scope.setLinkTitle = function (value, index, newLink) {
    var newArray = _.first(angular.copy($scope.components), [index + 1]);
    var hash = _.filter(newArray, function (obj) {
      return obj.type === value;
    });
    if (hash.length > 1) {
      return value.replace("-", " ") + "-" + (hash.length - 1);
    }
    return value.replace("-", " ");
  };

  /*
   * @numberOfProductOptions
   * - list of product options for the dropdown in component settings
   */

  $scope.numberOfProductOptions = [{
    name: 'All',
    value: 0
  }, {
    name: '1',
    value: 1
  }, {
    name: '2',
    value: 2
  }, {
    name: '3',
    value: 3
  }, {
    name: '4',
    value: 4
  }, {
    name: '5',
    value: 5
  }, {
    name: '10',
    value: 10
  }, {
    name: '15',
    value: 15
  }, {
    name: '20',
    value: 20
  }];


  /*
   * @deleteLinkFromNav
   * -
   */

  $scope.deleteLinkFromNav = function (index) {
    if ($scope.componentEditing.customnav) {
      $scope.componentEditing.linkLists.forEach(function (value) {
        if (value.handle === "head-menu") {
          value.links.splice(index, 1);
          $timeout(function () {
              $scope.$apply(function () {
                $scope.updateLinkList();
              })
          }, 500);
        }
      });
    } else {
      $scope.website.linkLists.forEach(function (value) {
        if (value.handle === "head-menu") {
          value.links.splice(index, 1);
          $timeout(function () {
              $scope.$apply(function () {
                $scope.updateLinkList();
              })
          }, 500);
        }
      });
    }
  };

  $scope.checkDuplicateLinkTitle = function(title, customLinks, update){
    var returnVal = false;
    var _list = null;
    if($scope.componentEditing.linkLists)
      $scope.componentEditing.linkLists.forEach(function (value, index) {
        if (value.handle === "head-menu") {
          _list = value;
        }
      });
    if(!customLinks && $scope.website.linkLists){
      $scope.website.linkLists.forEach(function (value, index) {
        if (value.handle === "head-menu") {
          _list = value;
        }
      })
    }

    if(_list){
      var matchedLinkList = _.filter(_list.links, function(lnk){
        return lnk.label.toLowerCase() == title.toLowerCase();
      });
      if(!update && matchedLinkList.length){
        returnVal = true;
      }
      if(update && matchedLinkList.length > 1){
        returnVal = true;
      }
    }
    if(returnVal){
      if(update)
      {
        $scope.website.linkLists = angular.copy($scope.originalLinkList);
        $scope.componentEditing.linkLists = angular.copy($scope.originalCustomLinkList);
      }
      toaster.pop('warning', "Link title already exists.");
    }
    if(update && !returnVal){

      $scope.updateLinkList();
    }
    return returnVal;
  }

  /*
   * @addLinkToNav
   * -
   */

  $scope.addLinkToNav = function () {

    if ($scope.newLink && $scope.newLink.linkTitle && $scope.newLink.linkUrl) {
      if($scope.checkDuplicateLinkTitle($scope.newLink.linkTitle, $scope.componentEditing.customnav)){
        return;
      }
      if ($scope.componentEditing.customnav) {
        if (!$scope.componentEditing.linkLists) {
          $scope.componentEditing.linkLists = [];
          $scope.componentEditing.linkLists.push({
            name: "Head Menu",
            handle: "head-menu",
            links: []
          });
        }
        $scope.componentEditing.linkLists.forEach(function (value, index) {
          if (value.handle === "head-menu") {
            value.links.push({
              label: $scope.newLink.linkTitle,
              type: "link",
              linkTo: {
                data: $scope.newLink.linkUrl,
                type: $scope.newLink.linkType,
                page: $scope.newLink.linkPage
              }
            });
            $scope.initializeLinks(false);
          }
        });
      } else {
        $scope.website.linkLists.forEach(function (value, index) {
          if (value.handle === "head-menu") {
            value.links.push({
              label: $scope.newLink.linkTitle,
              type: "link",
              linkTo: {
                data: $scope.newLink.linkUrl,
                type: $scope.newLink.linkType,
                page: $scope.newLink.linkPage
              }
            });
            $scope.initializeLinks(false);
          }
        });
      }

    }
    $timeout(function () {
        $scope.$apply(function () {
          $scope.updateLinkList();
        })
    }, 500);
  };

  /*
   * @updateLinkList
   * - when the navigation is reordered, update the linklist in the website object
   */

  $scope.updateLinkList = function (index) {
    var linkLabelsArr = [];
    var editedLinksLists = angular.element('.head-menu-links');
    _.each(editedLinksLists, function (link) {
      var linkLabel = link.attributes['data-label'].value;
      if (linkLabel) {
        linkLabelsArr.push(linkLabel);
      }
    });
    if (linkLabelsArr.length) {
      if ($scope.componentEditing.customnav) {
        $scope.componentEditing.linkLists.forEach(function (value, index) {
          if (value.handle === "head-menu") {
            var newLinkListOrder = [];
            _.each(editedLinksLists, function (link, index) {
              if (value) {
                var matchedLinkList = _.findWhere(value.links, {
                  label: linkLabelsArr[index]
                });
                newLinkListOrder.push(matchedLinkList);
              }
            });
            if (newLinkListOrder.length) {
              $scope.componentEditing.linkLists[index].links = newLinkListOrder;
            }
          }
        });
      } else {
        $scope.website.linkLists.forEach(function (value, index) {
          if (value.handle === "head-menu") {
            var newLinkListOrder = [];
            _.each(editedLinksLists, function (link, index) {
              if (value) {
                var matchedLinkList = _.findWhere(value.links, {
                  label: linkLabelsArr[index]
                });
                newLinkListOrder.push(matchedLinkList);
              }
            });
            if (newLinkListOrder.length) {
              $scope.website.linkLists[index].links = newLinkListOrder;
              if($scope.websiteLinks && $scope.websiteLinks.refreshWebsiteLinks)
                $scope.websiteLinks.refreshWebsiteLinks($scope.website.linkLists);
            }

          }
        });
      }

    } else {

      if ($scope.componentEditing.customnav) {
        $scope.website.linkLists.forEach(function (value, index) {
          if (value.handle === "head-menu") {
            $scope.componentEditing.linkLists[index].links = [];
            //$scope.saveCustomComponent();
          }
        });
      } else {
        $scope.website.linkLists.forEach(function (value, index) {
          if (value.handle === "head-menu") {
            $scope.website.linkLists[index].links = [];
            //$scope.updateWebsite($scope.website);
          }
        });
      }

    }

    $scope.originalLinkList = angular.copy($scope.website.linkLists);
    $scope.originalCustomLinkList = angular.copy($scope.componentEditing.linkLists);
  };

  $scope.refreshSlider = function () {
    console.log('refresh slider');
    $timeout(function () {
      $rootScope.$broadcast('rzSliderForceRender');
    }, 0);
  };

  $scope.setLatLon = function (lat, lon) {
    $scope.componentEditing.location.lat = lat;
    $scope.componentEditing.location.lon = lon;
  };

  $scope.updateContactUsAddress = function () {
    if (!angular.equals($scope.originalContactMap, $scope.componentEditing.location)) {
      $scope.locationAddress = null;
       $scope.setLatLon();
      $scope.validateGeoAddress();
    }
  };

  $scope.validateGeoAddress = function (fn) {
    GeocodeService.validateAddress($scope.componentEditing.location, $scope.locationAddress, function (data, results) {
      if (data && results.length === 1) {
        $timeout(function () {
          $scope.$apply(function () {
            $scope.setLatLon(results[0].geometry.location.lat(), results[0].geometry.location.lng());
            $scope.errorMapData = false;
            angular.copy($scope.componentEditing.location, $scope.originalContactMap);
            $scope.contactMap.refreshMap();
          });
        }, 0);
      } else {
        $timeout(function () {
          $scope.$apply(function () {
            $scope.errorMapData = true;
            angular.copy($scope.componentEditing.location, $scope.originalContactMap);
          });
        }, 0);
      }
      if (fn) {
        fn();
      }
    });
  };

  $scope.saveComponent = function () {
    $scope.isDirty.dirty = true;
    $timeout(function () {
      $(window).trigger('resize');
    }, 0);
  };

  $scope.saveContactComponent = function (is_address) {
    if(is_address){
      $scope.contactMap.refreshMap();
      $scope.place.address = GeocodeService.stringifyAddress($scope.componentEditing.location);
    }
    else{
      $scope.contactMap.refreshHours();
    }
    $scope.isDirty.dirty = true;
  };

  $scope.saveTestimonialComponent = function () {
    $scope.isDirty.dirty = true;
    $scope.testimonialSlider.refreshSlider();
  };

  $scope.saveComponentChanges = function () {
    $scope.isDirty.dirty = true;
    $timeout(function () {
      $(window).trigger('resize');
    }, 0);
  };

  $scope.spacingArr = [{
    name: 'Top',
    category: 'padding',
    value: 'paddingTop',
    icon: 'long-arrow-up'
  }, {
    name: 'Bottom',
    category: 'padding',
    value: 'paddingBottom',
    icon: 'long-arrow-down'
  }, {
    name: 'Right',
    category: 'padding',
    value: 'paddingRight',
    icon: 'long-arrow-right'
  }, {
    name: 'Left',
    category: 'padding',
    value: 'paddingLeft',
    icon: 'long-arrow-left'
  }, {
    name: 'Top',
    category: 'margin',
    value: 'marginTop',
    icon: 'long-arrow-up'
  }, {
    name: 'Bottom',
    category: 'margin',
    value: 'marginBottom',
    icon: 'long-arrow-down'
  }, {
    name: 'Right',
    category: 'margin',
    value: 'marginRight',
    icon: 'long-arrow-right'
  }, {
    name: 'Left',
    category: 'margin',
    value: 'marginLeft',
    icon: 'long-arrow-left'
  }];

  $scope.resolutions = [320, 360, 480, 720, 768, 960, 1024, 1280, 1360, 1366, 1440, 1600, 1680, 1920, '100%'];

  function replaceHtmlTags(text){
    return text ? String(text).replace(/<br \/>/gm, ' ').replace(/<[^>]+>/gm, '') : "";
  }
  function setDefualts(){
    if(!$scope.componentEditing.bg)
      $scope.componentEditing.bg = {};
    if($scope.componentEditing.bg && !angular.isDefined($scope.componentEditing.bg.opacity))
      $scope.componentEditing.bg.opacity = 1;

    if($scope.componentEditing.bg && $scope.componentEditing.bg.img && !angular.isDefined($scope.componentEditing.bg.img.overlayopacity))
      $scope.componentEditing.bg.img.overlayopacity = 1;
  }

  /*
   * @editComponent
   * -
   */

  $scope.editComponent = function () {

    if ($scope.componentEditing) {

      var componentType;
      console.log('$scope.componentEditing.spacing', $scope.componentEditing.spacing);
      if (!$scope.componentEditing.spacing) {
        console.log('component editing doesnt have spacing');
        var pt, pb = 50;
        var mw = "100%";
        if($scope.componentEditing.type === "contact-us" || $scope.componentEditing.type === "navigation"){
          pt = pb = 0;
        }
        $scope.componentEditing.spacing = {
          'pt': pt,
          'pb': pb,
          'pl': 0,
          'pr': 0,
          'mt': 0,
          'mb': 0,
          'mr': 'auto',
          'ml': 'auto',
          'mw': mw,
          'usePage': false
        };
      }

      setDefualts();

      if($scope.componentEditing.type === "simple-form")
      {
        $scope.getAllContactTags();
      }

      if ($scope.componentEditing.type === 'navigation') {
        componentType = _.findWhere($scope.componentTypes, {
          type: $scope.componentEditing.type,
          version: parseInt($scope.componentEditing.version, 10)
        });
        $scope.originalLinkList = angular.copy($scope.website.linkLists);
        $scope.originalCustomLinkList = angular.copy($scope.componentEditing.linkLists);
      } else {
        componentType = _.findWhere($scope.componentTypes, {
          type: $scope.componentEditing.type
        });
      }

      if (componentType && componentType.icon) {
        $scope.componentEditing.icon = componentType.icon;
      }
      if (componentType && componentType.title) {
        $scope.componentEditing.header_title = componentType.title;
      }
    }
    if ($scope.componentEditing.type === "simple-form") {
      if (!$scope.componentEditing.fields.length) {
        $scope.componentEditing.fields.push({
          "display": "First Name",
          "value": false,
          "name": "first"
        }, {
          "display": "Last Name",
          "value": false,
          "name": "last"
        }, {
          "display": "Phone Number",
          "value": false,
          "name": "phone"
        });
      }

      if (!$scope.componentEditing.redirectType) {
        $scope.componentEditing.redirectType = 'page';
      }
    }

    if ($scope.componentEditing.type === "contact-us") {
      $scope.hours = hoursConstant;
      if(!angular.isDefined($scope.componentEditing.boxOpacity)){
        $scope.componentEditing.boxOpacity = 1;
      }

      $scope.place.address = GeocodeService.stringifyAddress($scope.componentEditing.location);
      $scope.originalContactMap = angular.copy($scope.componentEditing.location);
      if ($scope.componentEditing.hours) {
        _.each($scope.componentEditing.hours, function (element, index) {
          if (element.day === "Sat" || element.day === "Sun") {
            if (element.start === "") {
              element.start = "9:00 am";
            }
            if (element.end === "") {
              element.end = "5:00 pm";
            }
            if (!element.start2 || element.start2 === "") {
              element.start2 = "9:00 am";
            }
            if (!element.end2 || element.end2 === "") {
              element.end2 = "9:00 am";
            }
          }
        });
      }
    }
    $scope.contactHoursInvalid = false;
    $scope.contactHours = [];
    var i = 0;
    for (i; i <= 6; i++) {
      $scope.contactHours.push({
        "valid": true
      });
    }

    if ($scope.componentEditing && $scope.componentEditing.type == "top-bar") {
      $scope.topbarInfo = {};
      $scope.topbarInfo.hours =  replaceHtmlTags($scope.componentEditing.businessHours);
      $scope.topbarInfo.email =  replaceHtmlTags($scope.componentEditing.email);
      $scope.topbarInfo.phone =  replaceHtmlTags($scope.componentEditing.phone);
    }

    if ($scope.componentEditing) {
      WebsiteService.getComponentVersions($scope.componentEditing.type, function (versions) {
        $scope.componentEditingVersions = versions;
        if ($scope.componentEditing && $scope.componentEditing.version) {
          $scope.componentEditing.version = $scope.componentEditing.version.toString();
          $scope.versionSelected = $scope.componentEditing.version;
        }
        $scope.originalCurrentPage = angular.copy($scope.currentPage);
      });
    }
    angular.element('#feature-convert').iconpicker({
      iconset: 'fontawesome',
      icon: 'fa-credit-card',
      rows: 5,
      cols: 5,
      placement: 'right',
    });

    angular.element('#feature-convert').on('change', function (e) {
      if (!$scope.featureIcon) {
        $scope.featureIcon = {};
      }
      if ($scope.featureIcon) {
        $scope.featureIcon.icon = e.icon;
      }
    });


    $modalInstance.opened.then(function(){
      $timeout(function () {
        $rootScope.$broadcast('rzSliderForceRender');
        $scope.originalComponent = angular.copy($scope.componentEditing);
      }, 1000);
    });
  };


  $scope.editComponent();
  var componentForm = {
    street_number: 'short_name',
    route: 'long_name',
    locality: 'long_name',
    administrative_area_level_1: 'short_name',
    postal_code: 'short_name',
    country: 'short_name'
  };
  $scope.setDefaultAddress = function () {
    $scope.componentEditing.location.address = "";
    $scope.componentEditing.location.address2 = "";
    $scope.componentEditing.location.city = "";
    $scope.componentEditing.location.state = "";
    $scope.componentEditing.location.zip = "";
    $scope.componentEditing.location.country = "";
  };
  $scope.fillInAddress = function (place) {
    // Get each component of the address from the place details
    // and fill the corresponding field on the form.
    $scope.setDefaultAddress();
    var i = 0;
    var addressType, val;
    for (i; i < place.address_components.length; i++) {
      addressType = place.address_components[i].types[0];
      if (componentForm[addressType]) {
        val = place.address_components[i][componentForm[addressType]];
        if (addressType === 'street_number') {
          $scope.componentEditing.location.address = val;
        } else if (addressType === 'route') {
          $scope.componentEditing.location.address2 = val;
        } else if (addressType === 'locality') {
          $scope.componentEditing.location.city = val;
        } else if (addressType === 'administrative_area_level_1') {
          $scope.componentEditing.location.state = val;
        } else if (addressType === 'postal_code') {
          $scope.componentEditing.location.zip = val;
        } else if (addressType === 'country') {
          $scope.componentEditing.location.country = val;
        }
      }
    }
    $scope.componentEditing.location.lat = place.geometry.location.lat();
    $scope.componentEditing.location.lon = place.geometry.location.lng();
  };
  $scope.$watch('place.address', function (newValue) {
    if (newValue) {
      if (angular.isObject(newValue)) {
        $scope.fillInAddress(newValue);
        $scope.locationAddress = newValue;
        $scope.setLatLon();
        $scope.validateGeoAddress();
      }
    }
  });

  /*
   * @validateHours
   *
   */

  $scope.validateHours = function (hours, index) {
    $scope.contactHours[index].valid = true;
    if (!hours.closed) {
      var startTime = hours.start;
      var endTime = hours.end;
      if (startTime && endTime) {
        startTime = startTime.split(" ")[1] === 'pm' && startTime.split(":")[0] !== '12' ? parseInt(startTime.split(":")[0], 10) + 12 : parseInt(startTime.split(":")[0], 10);
        endTime = endTime.split(" ")[1] === 'pm' && endTime.split(":")[0] !== '12' ? parseInt(endTime.split(":")[0], 10) + 12 : parseInt(endTime.split(":")[0], 10);
        startTime = parseInt(hours.start.split(":")[1], 10) === 30 ? startTime + 0.5 : startTime;
        endTime = parseInt(hours.end.split(":")[1], 10) === 30 ? endTime + 0.5 : endTime;
      }
      if (hours.split && $scope.componentEditing.splitHours) {
        angular.element("#business_hours_start_" + index).removeClass('has-error');
        angular.element("#business_hours_start2_" + index).removeClass('has-error');
        angular.element("#business_hours_end_" + index).removeClass('has-error');
        var startTime2 = hours.start2;
        var endTime2 = hours.end2;
        if (startTime2 && endTime2) {
          startTime2 = startTime2.split(" ")[1] === 'pm' && startTime2.split(":")[0] !== '12' ? parseInt(startTime2.split(":")[0], 10) + 12 : parseInt(startTime2.split(":")[0], 10);
          endTime2 = endTime2.split(" ")[1] === 'pm' && endTime2.split(":")[0] !== '12' ? parseInt(endTime2.split(":")[0], 10) + 12 : parseInt(endTime2.split(":")[0], 10);
          startTime2 = parseInt(hours.start2.split(":")[1], 10) === 30 ? startTime2 + 0.5 : startTime2;
          endTime2 = parseInt(hours.end2.split(":")[1], 10) === 30 ? endTime2 + 0.5 : endTime2;
        }
        if (startTime > endTime || startTime > startTime2 || startTime > endTime2) {
          if (startTime > endTime) {
            angular.element("#business_hours_start_" + index).addClass('has-error');
          } else if (startTime > startTime2) {
            angular.element("#business_hours_start_" + index).addClass('has-error');
          } else if (startTime > endTime2) {
            angular.element("#business_hours_start_" + index).addClass('has-error');
          }
          $scope.contactHours[index].valid = false;
        }
        if (endTime > startTime2 || endTime > endTime2) {
          if (endTime > startTime2) {
            angular.element("#business_hours_end_" + index).addClass('has-error');
          } else if (endTime > endTime2) {
            angular.element("#business_hours_end_" + index).addClass('has-error');
          }
          $scope.contactHours[index].valid = false;
        }
        if (startTime2 > endTime2) {
          angular.element("#business_hours_start2_" + index).addClass('has-error');
          $scope.contactHours[index].valid = false;
        }
      } else if (!hours.wholeday) {
        angular.element("#business_hours_start_" + index).removeClass('has-error');
        if (startTime > endTime) {
          angular.element("#business_hours_start_" + index).addClass('has-error');
          $scope.contactHours[index].valid = false;
        }
      }
    }

    var validate = _.where($scope.contactHours, {
      valid: false
    });
    if (validate && validate.length) {
      $scope.contactHoursInvalid = true;
    } else {
      $scope.contactHoursInvalid = false;
    }

  };

  $scope.slugifyAnchor = function (url) {
    if (url) {
      $scope.componentEditing.anchor = $filter('slugify')(url);
    }
  };

  $scope.sortNavConfig = {
      onEnd: function (evt) {
        $scope.updateLinkList();
      }
    };

  $scope.tagToContact = function(value) {
    return ContactService.tagToContact(value);
  }

}]);

'use strict';
/*global app, Papa*/
app.controller('importContactModalCtrl', ['$scope', '$location', '$timeout', '$modalInstance', 'FileUploader', 'editableOptions', 'ContactService', 'userConstant', 'SocialConfigService', 'getContacts', 'toaster', function ($scope, $location, $timeout, $modalInstance, FileUploader, editableOptions, ContactService, userConstant, SocialConfigService, getContacts, toaster) {

  $scope.getContacts = getContacts;
  /*
   * @editableOptions
   * - editable options for xeditable in preview contacts
   */

  editableOptions.theme = 'bs3';

  $scope.socailType = "";
  $scope.socailList = false;
  $scope.groupList = false;
  $scope.socialAccounts = {};
  $scope.googlePlusActive = false;

  SocialConfigService.getAllSocialConfig(function (config) {
    $scope.socialAccounts = config.socialAccounts;
    var _match = _.find(config.trackedAccounts, function (_account) {
      return _account.type === 'go';
    });
    if (_match) {
      $scope.googlePlusActive = true;
    }
  });

  $scope.dropdownFocus = function () {
    console.log('dropdownFocus >>>');
  };

  $scope.importContacts = function (selectedAccount) {
    console.log('importContacts >>> ', selectedAccount);
    var foundSocialId = false;
    if (selectedAccount.type === userConstant.social_types.GOOGLE) {
      foundSocialId = true;
      $scope.tempGoogleAccount = selectedAccount;
      SocialConfigService.getGoogleGroups(selectedAccount.id, function (data) {
        data.push({
          name: 'All',
          id: 'All'
        });
        $scope.socialAccountGroups = data;
      });
      //$scope.closeModal();
      //toaster.pop('success', "Contacts import initiated.");
      //SocialConfigService.importGoogleContact(selectedAccount.id, function(data) {
      //    $scope.closeModal();
      //    toaster.pop('success', "Your Google contacts are being imported in the background.");
      //});
    }
    if (selectedAccount.type === userConstant.social_types.LINKEDIN) {
      foundSocialId = true;
      $scope.closeModal();
      toaster.pop('success', "Contacts import initiated.");
      SocialConfigService.importLinkedinContact(selectedAccount.id, function () {
        $scope.closeModal();
        toaster.pop('success', "Your LinkedIn contacts are being imported in the background.");

      });
      $scope.socailList = false;
      $scope.groupList = false;
    }

    if (foundSocialId === false) {
      $scope.closeModal();
      toaster.pop('warning', "No such account integrated.");
      $scope.socailList = false;
      $scope.groupList = false;
    }
  };

  $scope.showSocialAccountSelect = function (socailType) {

    $scope.socailType = socailType;
    $scope.socailList = false;
    $scope.showCSVUpload = false;

    if (socailType === 'csv') {
      $scope.showCSVUpload = true;
    }

    if (socailType === userConstant.social_types.GOOGLE) {
      $scope.socailList = true;
      $scope.groupList = true;
    } else {
      $scope.groupList = false;
    }
  };

  $scope.importGoogleContacts = function (groupId) {
    $scope.closeModal();
    toaster.pop('success', "Contacts import initiated.");
    SocialConfigService.importGoogleContactsForGroup($scope.tempGoogleAccount.id, groupId.id, function () {
      $scope.closeModal();
      $scope.minRequirements = true;
      toaster.pop('success', "Your Google contacts are being imported in the background.");
    });
    $scope.tempGoogleAccount = null;
    $scope.socailList = false;
    $scope.groupList = false;
  };

  /*
   * @closeModal
   * -
   */

  $scope.closeModal = function (redirect) {
    $timeout(function () {
      $modalInstance.close();
      angular.element('.modal-backdrop').remove();
      if (redirect) {
        $location.path(redirect);
      }
    });
  };

  $scope.validateEmail = function (_email) {
    var regex = new RegExp('^[_a-z0-9]+(\.[_a-z0-9]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,4})$');
    return regex.test(_email);
  };

  $scope.validatePhone = function (_phone) {
    var regex = new RegExp('^([0-9\(\)/\+ \-]*)$');
    return regex.test(_phone);
  };

  /*
   * @validatePhones
   * - validate a list of phones and update error rows array
   */

  $scope.validatePhones = function (fn) {
    //get matched email headers
    var _formattedColumns = $scope.formatColumns();
    var _phoneIndex = _formattedColumns.phone.index;
    var _errorRows = [];
    _.each($scope.csvResults, function (_row, index) {
      if (index !== 0) {
        var _phone = _row[_phoneIndex];
        if (_phone && !$scope.validatePhone(_phone)) {
          _errorRows.push(index);
        }
      }
    });

    if (_errorRows.length > 0) {

      var matchingColumn = _.find($scope.contactColumns, function (_col) {
        return _col.value === 'phone';
      });
      if (matchingColumn.errorRows.length > 0) {
        matchingColumn.errorRows = _.union(_errorRows, matchingColumn.errorRows);
        $scope.errorRows = _.union(matchingColumn.errorRows, $scope.errorRows);
      } else {
        matchingColumn.errorRows = _errorRows;
        if ($scope.errorRows.length > 0) {
          $scope.errorRows = _.union(_errorRows, $scope.errorRows);
        } else {
          $scope.errorRows = _errorRows;
        }
      }
    }
    if (fn) {
      fn();
    }
  };


  /*
   * @uploader
   * - instance of file uploaded
   */

  var uploader = new FileUploader({
    url: '/api/1.0/assets/',
    filters: []
  });
  $scope.uploader = uploader;

  /*
   * @uploader.filters
   * - filters for the fileuploader
   */

  // uploader.filters.push({
  //   name: 'csvFilter',
  //   fn: function (item) {
  //     if (/\/(csv)$/.test(item.type) === true) {
  //       return true;
  //     }
  //     $scope.fileTypeError = 'Incorrect filetype';
  //     return false;
  //   }
  // });

  /*
   * @onAfterAddingFile
   * - uploader callback on upload
   */

  uploader.onAfterAddingFile = function (fileItem) {
    $scope.csvUploaded([fileItem._file]);
  };

  /*
   * @contactColumns
   * - list of main columns with list of known for mapping
   * - ['given name', 'first', 'first name'] -- specific to general
   */

  $scope.contactColumns = [{
    name: 'First Name',
    value: 'first',
    match: '',
    known: ['given name', 'first name', 'first'],
    errorRows: []
  }, {
    name: 'Middle Name',
    value: 'middle',
    match: '',
    known: ['addtional name', 'middle', 'middle name'],
    errorRows: []
  }, {
    name: 'Last Name',
    value: 'last',
    match: '',
    known: ['family name', 'last', 'last name'],
    errorRows: []
  }, {
    name: 'Email Address',
    value: 'email',
    match: '',
    known: ['e-mail 1 - value', 'email', 'email address', 'e-mail', 'e-mail address'],
    errorRows: []
  }, {
    name: 'Phone Number',
    value: 'phone',
    match: '',
    known: ['phone 1 - value', 'phone', 'business phone', 'personal phone', 'phone number', 'number'],
    errorRows: []
  }, {
    name: 'Website URL',
    value: 'website',
    match: '',
    known: ['website', 'web page', 'url', 'site', 'site url'],
    errorRows: []
  }, {
    name: 'Company Name',
    value: 'company',
    match: '',
    known: ['company', 'company name'],
    errorRows: []
  }, {
    name: 'Gender',
    value: 'gender',
    match: '',
    known: ['gender', 'sex'],
    errorRows: []
  }, {
    name: 'Birthday',
    value: 'birthday',
    match: '',
    known: ['birthday', 'bday', 'b-day', 'dob', 'date of birth'],
    errorRows: []
  }, {
    name: 'Tags',
    value: 'tags',
    match: '',
    known: [],
    errorRows: []
  }, {
    name: 'Address',
    value: 'address',
    match: '',
    known: ['address 1 - street', 'address', 'business street'],
    errorRows: []
  }, {
    name: 'Address 2',
    value: 'address2',
    match: '',
    known: ['address 1 - extended address', 'address2', 'business street 2'],
    errorRows: []
  }, {
    name: 'City',
    value: 'city',
    match: '',
    known: ['address 1 - city', 'city', 'business city'],
    errorRows: []
  }, {
    name: 'State',
    value: 'state',
    match: '',
    known: ['address 1 - region', 'state', 'business state'],
    errorRows: []
  }, {
    name: 'Zip',
    value: 'zip',
    match: '',
    known: ['address 1 - postal code', 'zip', 'zip code', 'postal code', 'business postal code'],
    errorRows: []
  }];

  /*
   * @guessHeaders
   * - on upload match fields automatically based on known variations
   */

  $scope.guessHeaders = function (fn) {
    _.each($scope.contactColumns, function (_column) {
      var bestMatch = {
        value: '',
        percent: 0
      };
      _.each($scope.csvHeaders, function (_header) {
        var columnName = _column.value;
        //first make lowercase
        var header = _header.replace(new RegExp('[^a-zA-Z ]'), "").toLowerCase();
        //check in list of known header matches
        if (_column.known.indexOf(_header.toLowerCase()) > -1) {
          bestMatch.value = _header;
          bestMatch.percent = 1;
        } else {
          //if not in known list get a best match percent score
          var percentMatch = header.score(columnName);
          if (percentMatch > bestMatch.percent) {
            bestMatch.value = _header;
            bestMatch.percent = percentMatch;
          }
        }
      });
      if (bestMatch.percent >= 0) {
        _column.match = bestMatch.value;
      }
    });
    $scope.updatePreview();

    if (fn) {
      fn();
    }
  };

  /*
   * @variables
   * - variables for parsing and matching
   */

  $scope.csvResults = [];
  $scope.uploadingCsv = false;
  var startUpload;
  $scope.endUpload = 0;
  var _results = [];
  $scope.csv = {
    percent: 0
  };
  $scope.previewContact = {};
  $scope.currentRow = 1;
  var startServerUploadTime;
  $scope.alerts = [];
  $scope.errorRows = [];


  /*
   * @csvComplete
   * - after csv has been uploaded but not imported
   */

  $scope.csvComplete = function (results) {
    $timeout(function () {
      $scope.uploadingCsv = false;
      $scope.csvHeaders = results.data[0];
      $scope.csvResults = results.data;

      $scope.guessHeaders(function () {
        $scope.validateEmails(function () {
          $scope.validatePhones(function () {
            console.log('Validation Complete');
          });
        });
      });

      var _diff = (new Date() - startUpload) / 1000;
      $scope.endUpload = _diff.toFixed(2);
    }, 2500);
  };

  /*
   * @changeFile
   * - redirect to upload section and reset variables
   */

  $scope.changeFile = function () {
    $scope.csvHeaders = [];
    $scope.csvResults = [];
    $scope.previewContact = {};
    $scope.currentRow = 1;
    startUpload = 0;
    $scope.endUpload = 0;
    _.each($scope.contactColumns, function (_col) {
      _col.match = '';
      _col.index = '';
    });
    _results = [];
    $scope.csv.percent = 0;
  };

  /*
   * @increaseRow
   * - increase the row and update the preview contact
   */

  $scope.increaseRow = function () {
    if ($scope.currentRow < $scope.csvResults.length - 1) {
      $scope.currentRow = $scope.currentRow + 1;
      $scope.updatePreview();
    }
  };

  /*
   * @decreaseRow
   * - decrease the row and update the preview contact
   */

  $scope.decreaseRow = function () {
    if ($scope.currentRow > 1) {
      $scope.currentRow = $scope.currentRow - 1;
      $scope.updatePreview();
    }
  };

  /*
   * @goToRow
   * - decrease the row and update the preview contact
   */

  $scope.goToRow = function (_row) {
    $scope.currentRow = _row;
    $scope.updatePreview();
    $scope.showPreviewPulse = true;
    $timeout(function () {
      $scope.showPreviewPulse = false;
    }, 1000);
  };

  /*
   * @updatePreview
   * - update the preview when details are changed
   */

  $scope.updatePreview = function (selected) {
    if (selected && !selected.match) {
      selected.index = null;
    }
    var _formattedColumns = $scope.formatColumns();
    _.each($scope.contactColumns, function (_column) {
      var _colVal = _column.value;
      var _formatIndex = _formattedColumns[_colVal].index;
      $scope.previewContact[_colVal] = $scope.csvResults[$scope.currentRow][_formatIndex];
    });
  };

  /*
   * @updateColumn
   * - update an individual column when editing with xeditable
   */

  $scope.updateColumn = function (data, col) {
    var _formattedColumns = $scope.formatColumns();
    $scope.csvResults[$scope.currentRow][_formattedColumns[col.value].index] = data;
    $scope.errorRows = _.reject($scope.errorRows, function (d) {
      return d === $scope.currentRow;
    });
    var matchingColumn = _.find($scope.contactColumns, function (_col) {
      return _col.value === col.value;
    });
    matchingColumn.errorRows = _.reject(matchingColumn.errorRows, function (d) {
      return d === $scope.currentRow;
    });
  };

  /*
   * @formatColumns
   * - format columns for values as keys for easy pulling
   */

  $scope.formatColumns = function () {
    var _formattedColumns = [];
    _.each($scope.contactColumns, function (_column) {
      var indexMatch = _.indexOf($scope.csvHeaders, _column.match);
      if (indexMatch >= 0) {
        _column.index = indexMatch;
      }
      _formattedColumns[_column.value] = _column;
    });
    return _formattedColumns;
  };

  /*
   * @blankFormattedContact
   * - black formatted contact object for uploading
   */

  var blankFormattedContact = {
    first: '',
    middle: '',
    last: '',
    birthday: '',
    gender: '',
    details: [{
      _id: Math.uuid(8),
      source: "csv",
      location: "",
      emails: [],
      photos: {
        square: "",
        small: "",
        medium: "",
        large: ""
      },
      websites: [],
      company: "",
      phones: [],
      addresses: [{
        _id: Math.uuid(8),
        type: "w",
        address: '',
        address2: '',
        city: '',
        state: '',
        zip: '',
        country: '',
        countryCode: '',
        displayName: '',
        lat: "",
        lon: "",
        defaultShipping: false,
        defaultBilling: false
      }]
    }]
  };

  /*
   * @uploadMatchedCSV
   * - import the formatted CSV and create contacts
   */

  $scope.uploadMatchedCSV = function () {
    startServerUploadTime = new Date();
    var _formattedColumns = $scope.formatColumns();
    var contactsToAdd = [];
    var partAddress = ['address', 'address2', 'city', 'state', 'zip', 'country', 'lat', 'lon'];
    var nameParts = ['first', 'middle', 'last'];
    var topLevelParts = ['company', 'gender', 'birthday'];
    var _formattedContact = angular.copy(blankFormattedContact);
    _.each($scope.csvResults, function (_result, i) {
      if (i !== 0) {

        _.each($scope.contactColumns, function (_column) {
          var _colVal = _column.value;
          var _formatIndex = _formattedColumns[_colVal].index;
          var _csvResult = _result[_formatIndex];
          if (_csvResult) {
            var _formatVal = _formattedColumns[_colVal].value;
            var _details = _formattedContact.details[0];

            if (partAddress.indexOf(_colVal) > -1) {
              _details.addresses[0][_colVal] = _csvResult;
            }

            if (_formatVal === 'email') {
              var _email = {
                _id: Math.uuid(8),
                email: _csvResult
              };
              _details.emails.push(_email);
            }

            if (_formatVal === 'phone') {
              var _phone = {
                _id: Math.uuid(8),
                number: _csvResult
              };
              _details.phones.push(_phone);
            }

            if (_formatVal === 'website') {
              var _website = {
                _id: Math.uuid(8),
                website: _csvResult
              };
              _details.websites.push(_website);
            }

            if (topLevelParts.indexOf(_colVal) > -1) {
              _formattedContact[_colVal] = _csvResult;
            }

            if (nameParts.indexOf(_colVal) > -1) {
              _formattedContact[_colVal] = _csvResult;
            }
          }

        });

        contactsToAdd.push(_formattedContact);
        _formattedContact = angular.copy(blankFormattedContact);
      }
    });

    $scope.uploadingServerCsv = true;
    ContactService.resetCount();
    ContactService.importCsvContacts(contactsToAdd, function () {
      console.log('upload started ...', $scope.uploadingServerCsv);
    });
  };

  /*
   * @on:importingContacts
   * - callback from service to update import progress
   */

  $scope.$on('importingContacts', function (event, args) {
    console.log('on import ', args);
    $scope.serverUploadPercent = Math.round(args.current / args.total * 100);
    if (args.current === args.total) {
      $scope.uploadingComplete = true;
      var _diff = (new Date() - startServerUploadTime) / 1000;
      $scope.endServerUpload = _diff.toFixed(2);
      $scope.getContacts();
    }
  });

  /*
   * @validateEmails
   * - validate a list of emails and update error rows array
   */

  $scope.validateEmails = function (fn) {
    //get matched email headers
    var _formattedColumns = $scope.formatColumns();
    var _emailIndex = _formattedColumns.email.index;
    var _errorRows = [];
    _.each($scope.csvResults, function (_row, index) {
      if (index !== 0) {
        var _email = _row[_emailIndex];
        if (!$scope.validateEmail(_email)) {
          console.log('email not validated');
          _errorRows.push(index);
        }
      }
    });

    if (_errorRows.length > 0) {

      var matchingColumn = _.find($scope.contactColumns, function (_col) {
        return _col.value === 'email';
      });
      if (matchingColumn.errorRows.length > 0) {
        matchingColumn.errorRows = _.union(_errorRows, matchingColumn.errorRows);
        $scope.errorRows = _.union(matchingColumn.errorRows, $scope.errorRows);
      } else {
        matchingColumn.errorRows = _errorRows;
        if ($scope.errorRows.length > 0) {
          $scope.errorRows = _.union(_errorRows, $scope.errorRows);
        } else {
          $scope.errorRows = _errorRows;
        }
      }
    }
    if (fn) {
      fn();
    }
  };

  $scope.closeAlert = function (index) {
    $scope.alerts.splice(index, 1);
  };

  /*
   * @csvUploaded
   * - if file is in accepted types, begin the CSV upload with uploader config
   * - else if file is unknown type, attempt quick parse to check that file could probably be parsed as csv
   * - quick check checks first 5 rows, if they all have same # of columns, probably good data
   *
   */

  var acceptedFiletypes = ['text/csv', 'application/vnd.ms-excel', 'application/msexcel', 'application/x-msexcel', 'application/x-ms-excel', 'application/x-excel', 'application/x-dos_ms_excel', 'application/xls', 'application/x-xls', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];

  $scope.csvUploaded = function (files) {
    var numColumnsArray = [];
    var filteredNumColumnsArray = [];
    var parsedLikeCSV = false;

    $scope.incorrectFileType = false;

    console.log('file type >>> ', files);

    if (acceptedFiletypes.indexOf(files[0].type) > -1) {
      parseUploadedFile();
    } else {
      //quick check
      Papa.parse(files[0], {
        step: function (results, parser) {
          numColumnsArray.push(results.data[0].length)

          if (numColumnsArray.length === 5) {
            filteredNumColumnsArray = numColumnsArray.filter(function(value){ return value === numColumnsArray[0] });
            parsedLikeCSV = numColumnsArray[0] > 1 && (numColumnsArray.length === filteredNumColumnsArray.length);
            if (!parsedLikeCSV) {
              parseError();
            } else {
              parseUploadedFile();
            }
            parser.abort();
            $scope.$apply();
          }

        },
        error: function (error) {
          parseError(error);
        },
        fastMode: true
      });
    }

    function parseError(error) {
      $scope.incorrectFileType = true;
      $scope.incorrectFile = files[0];
      $scope.$apply();
    }

    function parseUploadedFile() {
      startUpload = new Date();
      $scope.fileName = files[0].name;
      $scope.uploadingCsv = true;
      var config = {
        delimiter: "", // auto-detect
        newline: "", // auto-detect
        header: false,
        dynamicTyping: false,
        preview: 0,
        encoding: "",
        worker: false,
        comments: false,
        complete: function (results, file) {
          results.data = _results;
          $scope.csvComplete(results, file);
        },
        step: function (results) {
          _results.push(results.data[0]);
          var progress = results.meta.cursor;
          var newPercent = Math.round(progress / files[0].size * 100);
          if (newPercent !== $scope.csv.percent) {
            $timeout(function () {
              $scope.csv.percent = newPercent;
              $scope.$apply();
            });
          }
        },
        error: parseError,
        download: false,
        skipEmptyLines: true,
        keepEmptyRows: false,
        chunk: undefined,
        fastMode: undefined,
        beforeFirstChunk: undefined,
      };
      $timeout(function () {
        Papa.parse(files[0], config);
      }, 1000);
    }

  };
}]);

'use strict';
/*global app, moment, angular*/
/*jslint unparam:true*/
app.controller('MediaModalCtrl', ['$scope', '$injector', '$modalInstance', '$http', '$timeout', 'FileUploader', 'AssetsService', 'ToasterService', 'showInsert', 'insertMedia', 'isSingleSelect', 'SweetAlert', "$window", function ($scope, $injector, $modalInstance, $http, $timeout, FileUploader, AssetsService, ToasterService, showInsert, insertMedia, isSingleSelect, SweetAlert, $window) {
  var uploader, footerElement, headerElement, contentElement, mediaElement, mediaModalElement;

  $scope.showInsert = showInsert;
  $scope.loadingAssets = true;
  $scope.maximumUploadItems = 20;

  AssetsService.getAssetsByAccount(function (data) {
    if (data instanceof Array) {
      $scope.originalAssets = data.slice(0);
      $scope.assets = data.slice(0);
      if ($scope.insertMediaType) {
        $scope.m.selectAll(scope.insertMediaType, true);
      }
      $timeout(function() {
        $scope.loadingAssets = false;
      }, 500);
    }
  });

  $scope.successCopy = function () {
      ToasterService.show('success', 'Successfully copied text to your clipboard! Now just paste it wherever you would like.');
  };

  /*
   * @closeModal
   * -
   */

  $scope.closeModal = function () {
    console.log('closeModal >>> ');
    $timeout(function () {
      $modalInstance.close();
      angular.element('.modal-backdrop').remove();
    });
  };

  function resizeModal() {
    if (contentElement) {
      contentElement.css('height', angular.element($window).height() - 30 + 'px');
      mediaElement.css('height', angular.element($window).height() - 30 + 'px');
      $scope.bodyHeight = angular.element($window).height() - 210 + 'px';

      var filterType = $('.filter-type');
      $timeout(function () {
        filterType.removeClass('filter-type');
      }, 0);
      $timeout(function () {
        filterType.addClass('filter-type');
      }, 0);
    }

  };

  uploader = $scope.uploader = new FileUploader({
    url: '/api/1.0/assets/',
    removeAfterUpload: true,
    filters: [{
      name: "SizeLimit",
      fn: function (item) {
        switch (item.type.substring(0, item.type.indexOf('/'))) {
          case "video":
            if (500 * 1024 * 1024 + 1 > parseInt(item.size)) {
              return true;
            } else {
              ToasterService.show('error', 'The maximum video file size 500MB. Unable to Upload.');
            }
            break;
          case "image":
          case "audio":
            //size in bytes
            if (50 * 1024 * 1024 > parseInt(item.size)) {
              return true;
            } else {
              ToasterService.show('error', 'The maximum audio file size 50MB. Unable to Upload.');
            }
            break;
          case "document":
          default:
            //size in bytes
            if (10 * 1024 * 1024 > parseInt(item.size)) {
              return true;
            } else {
              ToasterService.show('error', 'The maximum file size 10MB. Unable to Upload.');
            }
        }
        return false;
      }
    }]
  });

  uploader.filters.push({
    name: 'customFilter',
    fn: function (item /*{File|FileLikeObject}*/ , options) {
      if(this.queue.length < $scope.maximumUploadItems)
        $scope.maxLengthExceed = false;
      else
        $scope.maxLengthExceed = true;
      return this.queue.length < $scope.maximumUploadItems;
    }
  });

  uploader.onSuccessItem = function (fileItem, response, status, headers) {
    $scope.uploadComplete = false;
    $scope.selectModel.select_all = false;
    var file_name = fileItem.file.name;
    file_name = file_name.replace(/ /g, "_");
    response.files[0].filename = file_name;
    response.files[0].mimeType = fileItem.file.type;
    $scope.originalAssets.push(response.files[0]);
    $scope.assets.push(response.files[0]);
    response.files[0].checked = true;
    $scope.m.singleSelect(response.files[0]);
  };

  uploader.onErrorItem = function (item, response, status, headers) {
    $scope.uploadComplete = false;
    ToasterService.show('error', 'Connection timed out');
  };

  // mediaModalElement.on('shown.bs.modal', function (e) {
  //   console.log('$scope.$parent.showInsert ', $scope.$parent.showInsert);
  //   if (e.relatedTarget) {
  //     $scope.showInsert = $(e.relatedTarget).attr("media-modal-show-insert");
  //     $scope.blogImage = $(e.relatedTarget).attr("blog-post-image");
  //     angular.element($window).trigger("resize")
  //     contentElement.css('visibility', 'visible')
  //   } else if ($scope.$parent.showInsert) {
  //     $scope.showInsert = true;
  //     angular.element($window).trigger("resize")
  //     contentElement.css('visibility', 'visible');
  //   }

  // });

  angular.element($window).resize(function () {
    resizeModal();
  });

  $scope.lastSelect = null;
  $scope.isSingleSelect = isSingleSelect;
  $scope.showType = "all";
  $scope.editingImage = false;
  $scope.selectModel = {
    select_all: false
  };
  $scope.batch = [];
  $scope.m = $scope.m || {};
  $scope.isMobile = false;

  $scope.checkMobile = function () {
    var check = false;
    (function (a, b) {
      if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) check = true
    })(navigator.userAgent || navigator.vendor || $window.opera);
    $scope.isMobile = check;
    return check;
  };

  $scope.checkMobile();
  //http://en.wikipedia.org/wiki/Internet_media_type
  $scope.typeMimes = {
    image: ['image/png', 'image/jpeg', 'image/gif', 'image/*'],
    video: ['video/mpeg', 'video/mp4', 'video/webm', 'video/x-flv', 'video/x-ms-wmv', 'video/*' ],
    audio: ['audio/mpeg', 'audio/mp3', 'audio/*'],
    document: ['application/octet-stream', 'application/pdf', 'text/plain']
  };



  $scope.getFileType = function(mime){
    if(mime.match('audio.*'))
      return "audio"
    else if(mime.match('video.*'))
      return "video"
    else if(mime.match('image.*'))
      return "image"
    else if(mime === 'application/pdf')
      return "pdf"
    else if(mime === 'application/octet-stream' || mime === 'text/plain')
      return "octet-stream"
  }

  $scope.m.selectTriggerFn = function (status) {
    $scope.selectModel.select_all = status;
    $scope.m.selectAll();
    $scope.singleSelected = false;
  };

  $scope.m.selectAll = function (showType, filterOnly) {
    filterOnly = filterOnly || false;

    if (showType) {
      $scope.showType = showType;
    }
    $scope.batch = [];
    $scope.assets = [];
    $scope.mimeList = [];

    if ($scope.showType !== 'all') {
      $scope.mimeList = $scope.typeMimes[$scope.showType];
    }

    $scope.originalAssets.forEach(function (value, index) {
      if (!filterOnly) {
        value.checked = $scope.selectModel.select_all;
      }

      if ($scope.showType === 'all') {
        $scope.assets.push(value);
        if (value.checked) {
          $scope.batch.push(value);
        }
      } else {
        if ($scope.mimeList.indexOf(value.mimeType) > -1 || $scope.getFileType(value.mimeType) === $scope.showType ) {
          $scope.assets.push(value);
          if (value.checked) {
            $scope.batch.push(value);
          }
        }
      }
    });
    $scope.lastSelect = null;
    $scope.m.selectAllStatus();
  };

  $scope.m.singleSelect = function (asset) {
    $scope.singleSelected = asset.checked;
    $timeout(function () {
      if (!$scope.isSingleSelect || !$scope.singleSelected || $scope.selectModel.select_all) {
        //$scope.batch.push(asset);
        var hasAsset = false;
        $scope.batch.forEach(function (v, i) {
          if (asset._id === v._id) {
            $scope.batch.splice(i, 1);
            hasAsset = true;
          }
        });
        if (!hasAsset) {
          $scope.batch.push(asset)
        }

        $scope.m.selectAllStatus();
      } else if ($scope.isSingleSelect) {
        $scope.batch.forEach(function (v) {
          if (asset._id !== v._id) {
            v.checked = false;
          }
        });

        $scope.batch = [];
        if ($scope.singleSelected)
          $scope.batch.push(asset);
        $scope.m.selectAllStatus();
      }
    }, 0)
  };

  $scope.m.toggleShiftKey = function (event) {
    $scope.isSingleSelect = !$scope.isSingleSelect;
  };

  $scope.m.selectAllStatus = function () {
    var allTrue = false;
    if ($scope.assets.length > 0) {
      allTrue = true;
      $scope.assets.forEach(function (v, i) {
        if (v.checked !== true) {
          allTrue = false;
        }
      });
    }
    $scope.selectModel.select_all = allTrue;
  };

  $scope.m.deleteAsset = function (asset) {

  angular.element('.modal.in').hide();
   var _deleteText = "Do you want to delete";
   SweetAlert.swal({
      title: "Are you sure?",
      text: _deleteText,
      type: "warning",
      showCancelButton: true,
      confirmButtonColor: "#DD6B55",
      confirmButtonText: "Yes, delete!",
      cancelButtonText: "No, do not delete!",
      closeOnConfirm: true,
      closeOnCancel: true,
    }, function (isConfirm) {
      if (isConfirm) {
        if (asset)
          $scope.batch.push(asset);
        if($scope.batch && $scope.batch.length){
          $scope.batch = _.uniq($scope.batch);
          AssetsService.deleteAssets($scope.batch, function (resp, status) {
            if (status === 200) {
              $scope.originalAssets.forEach(function (v, i) {
                  if (v._id === $scope.batch[0]['_id']) {
                    $scope.originalAssets.splice(i, 1);
                  }
                });
                $scope.assets.forEach(function (v, i) {
                  if (v._id === $scope.batch[0]['_id']) {
                    $scope.assets.splice(i, 1);
                  }
                });
                $scope.batch.forEach(function (v, i) {
                  if (v._id === $scope.batch[0]['_id']) {
                    $scope.batch.splice(i, 1);
                  }
              });
              SweetAlert.swal("Saved!", "deleted.", "success");
              angular.element('.modal.in').show();
            }
            else
            {
              SweetAlert.swal("Error!", "error deleting files.", "error");
              angular.element('.modal.in').show();
            }
            $scope.selectModel.select_all = false;
            $scope.singleSelected = false;
          });
        }
        else
        {
          SweetAlert.swal("Error!", "No file found for deletion.", "error");
          angular.element('.modal.in').show();
        }
      } else {
        angular.element('.modal.in').show();
      }
    });
  };

  $scope.m.editImage = function (asset) {
    $scope.editingImage = true;
    $scope.singleAsset = asset;

    var targetImage = $('#targetEditImage');
  };

  $scope.m.goback = function () {
    $scope.editingImage = false;
  };

  $scope.m.onInsertMedia = function () {
    if ($scope.batch.length > 0) {
      if (insertMedia) {
        if ($scope.isSingleSelect) {
            insertMedia($scope.batch[$scope.batch.length - 1], $scope.type || $scope.insertMediaType);
        } else {
            insertMedia($scope.batch, $scope.type || $scope.insertMediaType);
        }
        $scope.type = null;
      } else {
        if ($scope.isSingleSelect) {
            insertMedia($scope.batch[$scope.batch.length - 1]);
        } else {
            insertMedia($scope.batch);
        }
      }
    }
    $scope.m.selectTriggerFn(false);
    $scope.singleSelected = false;
    $scope.closeModal();
  };
  $scope.m.onCallbackOnMediaClose = function(){
    insertMedia();
    $scope.closeModal();
  }

  $scope.m.onAssetUpdateCallback = function (asset) {
    var originalAsset = angular.copy(asset);
    originalAsset.checked = false;
    AssetsService.updateAsset(originalAsset, function (data, status) {
      if (status == 200) {
        ToasterService.show('success', 'Asset updated.');
      }
    });
  };

}]);

'use strict';
/*global app, moment, angular, window*/
/*jslint unparam:true*/

app.controller('SSBComponentSettingsModalCtrl', ['$scope', '$rootScope', '$http', '$timeout', '$q', '$compile', '$filter', 'WebsiteService', 'ContactService', 'ProductService', 'GeocodeService', 'toaster', 'hoursConstant', 'CampaignService', 'SimpleSiteBuilderService', 'SweetAlert', '$window', 'AccountService', function ($scope, $rootScope, $http, $timeout, $q, $compile, $filter, WebsiteService, ContactService, ProductService, GeocodeService, toaster, hoursConstant, CampaignService, SimpleSiteBuilderService, SweetAlert, $window, AccountService) {

  $scope.blog = {};

  $scope.$parent.$watchGroup(['vm.uiState.activeSectionIndex', 'vm.uiState.activeComponentIndex'], function() {
    var section = $scope.$parent.vm.state.page.sections[$scope.$parent.vm.uiState.activeSectionIndex];
    if (section && section.components && section.components[$scope.$parent.vm.uiState.activeComponentIndex]) {
        $scope.components = section.components;
        $scope.component = section.components[$scope.$parent.vm.uiState.activeComponentIndex];
    }
  }, true);

  $scope.website = $scope.$parent.vm.state.website;
  $scope.originalWebsite = angular.copy($scope.website);
  // $scope.blog.post = blog;
  $scope.isDirty = {};
  // $scope.isSinglePost = isSinglePost;
  // $scope.showInsert = showInsert;
  // $scope.originalBlog = angular.copy($scope.blog.post);
  $scope.emailLoaded = false;

  $scope.availableProductTags = [];

  $scope.barConfig = {
    animation: 0,
    handle: '.reorder',
    draggable: '.fragment',
    ghostClass: "sortable-ghost",
    scroll: true,
    scrollSensitivity: 200,
    scrollSpeed: 20, // px
    onSort: function (evt) {
      // $scope.scrollToComponent(evt.newIndex); TOOD: reimplement
    },
    onStart: function (evt) {
      $scope.dragging = true;
    },
    onEnd: function (evt) {
      $scope.dragging = false;
    }
  };

  $scope.testOptions = {
    min: 5,
    max: 100,
    step: 5,
    precision: 2,
    orientation: 'horizontal', // vertical
    handle: 'round', //'square', 'triangle' or 'custom'
    tooltip: 'show', //'hide','always'
    tooltipseparator: ':',
    tooltipsplit: false,
    enabled: true,
    naturalarrowkeys: false,
    range: false,
    ngDisabled: false,
    reversed: false
  };

  $scope.sliderValue = 1;

  $scope.addBackground = function () {
    $scope.$parent.showInsert = true;
    $scope.openParentModal('media-modal', 'MediaModalCtrl', null, 'lg');
  };

  $scope.addFeaturedPost = function () {
    $scope.$parent.showInsert = true;
    $scope.blogImage.featured_image = true;
    $scope.openParentModal('media-modal', 'MediaModalCtrl', null, 'lg');
  };

  /*
   * @revertComponent
   * -
   */

  $scope.revertComponent = function () {
    if ($scope.component.type === 'navigation') {
      $scope.website.linkLists = $scope.originalWebsite.linkLists;
    }
    if ($scope.blog.post && $scope.originalBlog) {
      $scope.blog.post.featured_image = $scope.originalBlog.featured_image;
      $scope.blog.post.post_excerpt = $scope.originalBlog.post_excerpt;
    }
    $scope.components[clickedIndex] = $scope.originalComponent;
    $timeout(function () {
      angular.element($window).trigger('resize');
    }, 0);
    $scope.closeModal();
  };

  /*
   * @spectrum
   * - variables for the spectrum color picker in the settings modal
   */

  $scope.spectrum = {
    options: {
      showPalette: true,
      clickoutFiresChange: true,
      showInput: true,
      showButtons: false,
      allowEmpty: true,
      hideAfterPaletteSelect: false,
      showPaletteOnly: true,
      togglePaletteOnly: true,
      togglePaletteMoreText: 'more',
      togglePaletteLessText: 'less',
      preferredFormat: 'hex',
      appendTo: 'body',
      palette: [
        ["#C91F37", "#DC3023", "#9D2933", "#CF000F", "#E68364", "#F22613", "#CF3A24", "#C3272B", "#8F1D21", "#D24D57"],
        ["#f47998", "#F47983", "#DB5A6B", "#C93756", "#FCC9B9", "#FFB3A7", "#F62459", "#F58F84", "#875F9A", "#5D3F6A"],
        ["#89729E", "#763568", "#8D608C", "#A87CA0", "#5B3256", "#BF55EC", "#8E44AD", "#9B59B6", "#BE90D4", "#4D8FAC"],
        ["#5D8CAE", "#22A7F0", "#19B5FE", "#59ABE3", "#48929B", "#317589", "#89C4F4", "#4B77BE", "#1F4788", "#003171"],
        ["#044F67", "#264348", "#7A942E", "#8DB255", "#5B8930", "#6B9362", "#407A52", "#006442", "#87D37C", "#26A65B"],
        ["#26C281", "#049372", "#2ABB9B", "#16A085", "#36D7B7", "#03A678", "#4DAF7C", "#D9B611", "#F3C13A", "#F7CA18"],
        ["#E2B13C", "#A17917", "#F5D76E", "#F4D03F", "#FFA400", "#E08A1E", "#FFB61E", "#FAA945", "#FFA631", "#FFB94E"],
        ["#E29C45", "#F9690E", "#CA6924", "#F5AB35", "#BFBFBF", "#F2F1EF", "#BDC3C7", "#ECF0F1", "#D2D7D3", "#757D75"],
        ["#EEEEEE", "#ABB7B7", "#6C7A89", "#95A5A6"]
      ]
    }
  };

  /*
   * @componentTypes
   * - an array of component types and icons for the add component modal
   */

  $scope.componentTypes = [{
    title: 'Blog',
    type: 'blog',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/blog.png',
    filter: 'blog',
    description: 'Use this component for your main blog pages which displays all your posts with a sidebar of categories, tags, recent posts, and posts by author.',
    enabled: true
  }, {
    title: 'Blog Teaser',
    type: 'blog-teaser',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/blog-teaser.png',
    filter: 'blog',
    description: 'The Blog Teaser is perfect to showcase a few of your posts with a link to you full blog page.',
    enabled: true
  }, {
    title: 'Masthead',
    type: 'masthead',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/masthead.jpg',
    filter: 'misc',
    description: 'Introduce your business with this component on the top of your home page.',
    enabled: true
  }, {
    title: 'Feature List',
    type: 'feature-list',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/feature-list.jpg',
    filter: 'features',
    description: 'Showcase what your business offers with a feature list.',
    enabled: true
  }, {
    title: 'Contact Us',
    type: 'contact-us',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/contact-us.jpg',
    filter: 'contact',
    description: 'Let your visitors where your located, how to contact you, and what your business hours are.',
    enabled: true
  }, {
    title: 'Coming Soon',
    type: 'coming-soon',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/coming-soon.jpg',
    filter: 'misc',
    description: 'Even if your site isn\'t ready you can use this component to let your visitors know you will be availiable soon.',
    enabled: true
  }, {
    title: 'Feature block',
    type: 'feature-block',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/feature-block.jpg',
    filter: 'features',
    description: 'Use this component to show one important feature or maybe a quote.',
    enabled: true
  }, {
    title: 'Image Gallery',
    type: 'image-gallery',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/gallery.jpg',
    filter: 'images',
    description: 'Display your images in this image gallery component with fullscreen large view.',
    enabled: true
  }, {
    title: 'Image Text',
    version: 1,
    type: 'image-text',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/image-text.jpg',
    filter: 'images',
    description: 'Show an image next to a block of text on the right or the left.',
    enabled: true
  }, {
    title: 'Meet Team',
    type: 'meet-team',
    icon: 'fa fa-users',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/meet-team.png',
    filter: 'team',
    description: 'Let your visitors know about the team behind your business. Show profile image, position, bio, and social links for each member.',
    enabled: true
  }, {
    title: 'Navigation 1',
    type: 'navigation',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/navbar-v1.jpg',
    filter: 'navigation',
    description: 'A simple navigation bar with the logo on the left and nav links on the right. Perfect for horizontal logos.',
    version: 1,
    enabled: true
  }, {
    title: 'Navigation 2',
    type: 'navigation',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/nav-v2-preview.png',
    filter: 'navigation',
    description: 'If your logo is horizontal or square, this navigation will showcase your logo perfectly with addtional space for more links.',
    version: 2,
    enabled: true
  }, {
    title: 'Navigation 3',
    type: 'navigation',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/nav-v3-preview.png',
    filter: 'navigation',
    description: 'This navigation features a large block navigation links for a modern feel.',
    version: 3,
    enabled: true
  }, {
    title: 'Products',
    type: 'products',
    icon: 'fa fa-money',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/products.png',
    filter: 'products',
    description: 'Use this as the main products page to start selling. It comes together with a cart and checkout built in.',
    enabled: true
  }, {
    title: 'Pricing Tables',
    type: 'pricing-tables',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/pricing-tables.png',
    filter: 'products',
    description: 'Subscription product types with multiple options are best when shown in a pricing table to help the visitor decide which one is best for them.',
    enabled: true
  }, {
    title: 'Simple form',
    type: 'simple-form',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/simple-form.jpg',
    filter: 'forms',
    description: 'Automatically create contacts in the backend when a visitor submits this form. Add first name, last name, email, or phone number fields.',
    enabled: true
  }, {
    title: 'Single Post',
    type: 'single-post',
    icon: 'custom single-post',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/45274f46-0a21-11e5-83dc-0aee4119203c.png',
    filter: 'blog',
    description: 'Used for single post design. This is a mandatory page used to show single posts. This will apply to all posts.',
    enabled: false
  }, {
    title: 'Social',
    type: 'social-link',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/social-links.jpg',
    filter: 'social',
    description: 'Let your visitors know where else to find you on your social networks. Choose from 18 different networks.',
    enabled: true
  }, {
    title: 'Video',
    type: 'video',
    icon: 'fa fa-video',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/video.png',
    filter: 'video',
    description: 'Showcase a video from Youtube, Vimeo, or an uploaded one. You can simply add the url your video is currently located.',
    enabled: true
  }, {
    title: 'Text Block',
    type: 'text-only',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/text-block.jpg',
    filter: 'text',
    description: 'A full width component for a large volume of text. You can also add images within the text.',
    enabled: true
  }, {
    title: 'Thumbnail Slider',
    type: 'thumbnail-slider',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/thumbnail.png',
    filter: 'images',
    description: 'Perfect for sponsor or client logos you have worked with in the past. Works best with logos that have a transparent background. ',
    enabled: true
  }, {
    title: 'Top Bar',
    type: 'top-bar',
    icon: 'fa fa-info',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/top-bar.png',
    filter: 'contact',
    description: 'Show your social networks, phone number, business hours, or email right on top that provides visitors important info quickly.',
    enabled: true
  }, {
    title: 'Testimonials',
    type: 'testimonials',
    icon: 'fa fa-info',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/45263570-0a21-11e5-87dd-b37fd2717aeb.png',
    filter: 'text',
    description: 'A component to showcase your testimonials.',
    enabled: true
  },
  {
    title: 'Footer',
    type: 'footer',
    preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/footer.png',
    filter: 'misc',
    description: 'Use this component to show footer on your page.',
    enabled: false
  }];

  $scope.componentOpacityValues = [{
    label: 10,
    value: 0.1
  }, {
    label: 20,
    value: 0.2
  }, {
    label: 30,
    value: 0.3
  }, {
    label: 40,
    value: 0.4
  }, {
    label: 50,
    value: 0.5
  }, {
    label: 60,
    value: 0.6
  }, {
    label: 70,
    value: 0.7
  }, {
    label: 80,
    value: 0.8
  }, {
    label: 90,
    value: 0.9
  }, {
    label: 100,
    value: 1
  }];

  /*
   * @removeImage
   * -
   */

  $scope.removeImage = function (remove) {
    if ($scope.component && $scope.component.bg && $scope.component.bg.img) {
      if (($scope.component.bg.img.show === false && remove === true) || remove === false) {
        if (remove === false) {
          $scope.component.bg.img.url = null;
        }
        $scope.component.bg.img.blur = false;
        $scope.component.bg.img.parallax = false;
        $scope.component.bg.img.overlay = false;
        $scope.component.bg.img.undernav = false;
        $scope.component.bg.img.fullscreen = false;
      }

    }
  };

  $scope.closeModal = function () {
    $timeout(function () {
      $scope.$apply(function () {
        if ($scope.component.type === "contact-us") {
          $scope.validateGeoAddress(function () {
            if ($scope.errorMapData) {
              $scope.component.location = $scope.originalComponent.location;
            }
            if ($scope.contactHoursInvalid) {
              $scope.component.hours = $scope.originalComponent.hours;
            }
            $modalInstance.close();
            angular.element('.modal-backdrop').remove();
          });
        } else {
          $modalInstance.close();
          angular.element('.modal-backdrop').remove();
        }
      });
    });
  };

  $scope.$watch('newLink.linkPage', function (newValue) {
    if (newValue) {
      $scope.currentPage = _.find($scope.filteredPages, function (page) {
        return page.handle === newValue;
      });
    }
  });

  function getPageComponents(page) {
    var components = [];
    if (page.components && page.components.length && !page.sections.length) {
        components = page.components;
    }
    else{
        _.each(page.sections, function (section) {
            if (section && section.components) {
              _.each(section.components, function (component) {
                if (component) {
                  if(section.components.length > 1){
                    component.sectionTitle = section.name;
                  }
                  else if(section.components.length === 1){
                    if(section.name && component.type && section.name.toLowerCase() !== component.type.toLowerCase()){
                      component.sectionTitle = section.name;
                    }
                  }
                  components.push(component)
                }
              })
            }
        })
    }
    return components;
  }

  $scope.initializeEditLinks = function (link, status, isSection) {
    if (link.page) {
      if (status) {
        link.data = null;
      }
      if(isSection)
        link.ssb = true;
      $scope.linkPage = link.page;
      $scope.currentPage = _.find($scope.filteredPages, function (page) {
        return page.handle === link.page;
      });
    }
  };


  $scope.selectedData = function(link, component){
    if(link && link.linkTo.ssb)
        return link.linkTo.data === component._id
    else if(link && component.anchor){
        return link.linkTo.data === component.anchor
    }
    else
        return link.linkTo.data === component._id
  }

  /*
   * @initializeLinks
   * -
   */

  $scope.initializeLinks = function (status) {
    $scope.addLink = status;
    $scope.newLink = {
      linkUrl: null,
      linkTitle: null,
      linkType: null,
      linkPage: null,
      ssb: true
    };
  };

  /*
   * @setLinkUrl
   * -
   */

  $scope.setLinkUrl = function () {
    $scope.newLink.linkTitle = angular.element("#linkSection option:selected").html();
  };

  /*
   * @setLinkTitle
   * -
   */

  $scope.setLinkTitle = function (value, index, newLink) {
    var title = value.replace("-", " ");
    var sectionTitle = $scope.currentPage.components[index].sectionTitle;
    var newArray = _.first(angular.copy($scope.currentPage.components), [index + 1]);
    var hash = _.filter(newArray, function (obj) {
      return obj.type === value;
    });

    if(sectionTitle){
      title = sectionTitle + " - " + title;
    }
    if (hash.length > 1) {
      if(sectionTitle){
        var headerSection = _.filter(hash, function (obj) {
          return obj.sectionTitle === sectionTitle;
        });
        if(headerSection.length > 1){
          title = sectionTitle + " - " + (hash.length - 1) + " - " + title;
        }
      }
      else{
        title = title + "-" + (hash.length - 1);
      }
    }
    return title;
  };

  /*
   * @numberOfProductOptions
   * - list of product options for the dropdown in component settings
   */

  $scope.numberOfProductOptions = [{
    name: 'All',
    value: 0
  }, {
    name: '1',
    value: 1
  }, {
    name: '2',
    value: 2
  }, {
    name: '3',
    value: 3
  }, {
    name: '4',
    value: 4
  }, {
    name: '5',
    value: 5
  }, {
    name: '10',
    value: 10
  }, {
    name: '15',
    value: 15
  }, {
    name: '20',
    value: 20
  }];

  /*
   * @deleteLinkFromNav
   * -
   */

  $scope.deleteLinkFromNav = function (index, links) {
    SweetAlert.swal({
      title: "Are you sure?",
      text: "Do you want to remove this link from main menu",
      type: "warning",
      showCancelButton: true,
      confirmButtonColor: "#DD6B55",
      confirmButtonText: "Yes, remove this link!",
      cancelButtonText: "No, do not remove this link!",
      closeOnConfirm: true,
      closeOnCancel: true
    }, function (isConfirm) {
      if (isConfirm) {
        var link = links[index];
        updateParentPageSettings(link.linkTo.type, link.linkTo.data, false);
        links.splice(index, 1);
      }
    });

  };

  /*
   * @updateParentPageSettings
   * -
   */

   function updateParentPageSettings(linkType, linkUrl, status, oldUrl) {
    if(linkType === 'page' && !$scope.customnav && linkUrl === $scope.$parent.vm.state.page.handle){
      $scope.$parent.vm.state.page.mainmenu = status;
    }
    // case when current page is updated to another page.
    if(linkType === 'page' && !$scope.customnav && oldUrl && oldUrl === $scope.$parent.vm.state.page.handle){
       $scope.$parent.vm.state.page.mainmenu = false;
    }
  };


  /*
   * @addLinkToNav
   * -
   */

  $scope.addLinkToNav = function () {

    if ($scope.newLink && $scope.newLink.linkTitle && $scope.newLink.linkUrl) {
      if ($scope.component.customnav) {
        if (!$scope.component.linkLists || !$scope.component.linkLists.length) {
          $scope.component.linkLists = [];
          $scope.component.linkLists.push({
            name: "Head Menu",
            handle: "head-menu",
            links: []
          });
        }
        $scope.component.linkLists.forEach(function (value, index) {
          if (value.handle === "head-menu") {
            value.links.push({
              label: $scope.newLink.linkTitle,
              type: "link",
              linkTo: {
                data: $scope.newLink.linkUrl,
                type: $scope.newLink.linkType,
                page: $scope.newLink.linkPage,
                ssb: true
              }
            });
            $scope.initializeLinks(false);

          }
        });
      } else {
        $scope.website.linkLists.forEach(function (value, index) {
          if (value.handle === "head-menu") {
            value.links.push({
              label: $scope.newLink.linkTitle,
              type: "link",
              linkTo: {
                data: $scope.newLink.linkUrl,
                type: $scope.newLink.linkType,
                page: $scope.newLink.linkPage,
                ssb: true
              }
            });
            updateParentPageSettings($scope.newLink.linkType, $scope.newLink.linkUrl, true);
            $scope.initializeLinks(false);

          }
        });
      }

    }
  };

  /*
   * @setPageLinkTitle
   * -
   */
    $scope.setPageLinkTitle = function (url, update, link, oldUrl) {
        var _label = null;
        var _page = _.findWhere($scope.filteredPages, {
            handle: url
          });
        if(_page){
          _label =  _page.menuTitle || _page.title;
        }
        if(!$scope.component.customnav){
            if(update){
              link.label = _label;
              updateParentPageSettings(link.linkTo.type, url, true, oldUrl);
            }
            else{
              $scope.newLink.linkTitle = _label
            }
        }
        else{
            if(!update){
              $scope.newLink.linkTitle = _label
            }
        }
    };


  $scope.refreshSlider = function () {
    console.log('refresh slider');
    $timeout(function () {
      $rootScope.$broadcast('rzSliderForceRender');
    }, 0);
  };

  $scope.saveComponentVersion = function () {
    $scope.$parent.vm.pendingChanges = true;
    $scope.isDirty.dirty = true;
    $timeout(function () {
      angular.element($window).trigger('resize');
    }, 0);
  };

  $scope.saveComponent = function () {
    $scope.$parent.vm.pendingChanges = true;
    $scope.isDirty.dirty = true;
    $timeout(function () {
      angular.element($window).trigger('resize');
    }, 0);
  };

  $scope.saveContactComponent = function (is_address) {
    if(is_address){
      $scope.contactMap.refreshMap();
      $scope.place.address = GeocodeService.stringifyAddress($scope.component.location);
    }
    else{
      $scope.contactMap.refreshHours();
    }
    $scope.$parent.vm.pendingChanges = true;
    $scope.isDirty.dirty = true;
  };

  $scope.saveTestimonialComponent = function () {
    $scope.$parent.vm.pendingChanges = true;
    $scope.isDirty.dirty = true;
    $scope.testimonialSlider.refreshSlider();
  };

  $scope.saveComponentChanges = function () {
    $scope.$parent.vm.pendingChanges = true;
    $scope.isDirty.dirty = true;
    $timeout(function () {
      angular.element($window).trigger('resize');
    }, 0);
  };

  $scope.spacingArr = [{
    name: 'Top',
    category: 'padding',
    value: 'paddingTop',
    icon: 'long-arrow-up'
  }, {
    name: 'Bottom',
    category: 'padding',
    value: 'paddingBottom',
    icon: 'long-arrow-down'
  }, {
    name: 'Right',
    category: 'padding',
    value: 'paddingRight',
    icon: 'long-arrow-right'
  }, {
    name: 'Left',
    category: 'padding',
    value: 'paddingLeft',
    icon: 'long-arrow-left'
  }, {
    name: 'Top',
    category: 'margin',
    value: 'marginTop',
    icon: 'long-arrow-up'
  }, {
    name: 'Bottom',
    category: 'margin',
    value: 'marginBottom',
    icon: 'long-arrow-down'
  }, {
    name: 'Right',
    category: 'margin',
    value: 'marginRight',
    icon: 'long-arrow-right'
  }, {
    name: 'Left',
    category: 'margin',
    value: 'marginLeft',
    icon: 'long-arrow-left'
  }];

  $scope.resolutions = [320, 360, 480, 720, 768, 960, 1024, 1280, 1360, 1366, 1440, 1600, 1680, 1920, '100%'];

  /*
   * @editComponent
   * -
   */

  $scope.editComponent = function () {

    if ($scope.component) {

      var componentType;

      if(!$scope.component.bg)
        $scope.component.bg = {};
      if($scope.component.bg && !angular.isDefined($scope.component.bg.opacity))
        $scope.component.bg.opacity = 1;

      if($scope.component.bg && $scope.component.bg.img && !angular.isDefined($scope.component.bg.img.overlayopacity))
        $scope.component.bg.img.overlayopacity = 1;


      if ($scope.component.type === 'navigation') {
        componentType = _.findWhere($scope.componentTypes, {
          type: $scope.component.type,
          version: parseInt($scope.component.version, 10)
        });
      } else {
        componentType = _.findWhere($scope.componentTypes, {
          type: $scope.component.type
        });
      }

      if (componentType && componentType.icon) {
        $scope.component.icon = componentType.icon;
      }
      if (componentType && componentType.title) {
        $scope.component.header_title = componentType.title;
      }

      if ($scope.component.type === "simple-form") {

        if (!$scope.component.fields.length) {
          $scope.component.fields.push({
            "display": "First Name",
            "value": false,
            "name": "first"
          }, {
            "display": "Last Name",
            "value": false,
            "name": "last"
          }, {
            "display": "Phone Number",
            "value": false,
            "name": "phone"
          });
        }

        if (!$scope.component.redirectType) {
          $scope.component.redirectType = 'page';
        }
        $scope.fieldsCount = [];

        var i = 0;
        for (i; i <= $scope.component.fields.length; i++) {
          $scope.fieldsCount.push(i + 1);
        }



      }

      $scope.alignmentOptions = [
        'left', 'center', 'right'
      ]

        $scope.fontSizeOptions = [
          8,9,10,11,12,14,18,24,30,36,48,60,72,96
        ]

      if ($scope.component.type === "contact-us") {
        $scope.hours = hoursConstant;
        if(!angular.isDefined($scope.component.boxOpacity)){
          $scope.component.boxOpacity = 1;
        }

        $scope.place.address = GeocodeService.stringifyAddress($scope.component.location);
        $scope.originalContactMap = angular.copy($scope.component.location);
        if ($scope.component.hours) {
          _.each($scope.component.hours, function (element, index) {
            if (element.day === "Sat" || element.day === "Sun") {
              if (element.start === "") {
                element.start = "9:00 am";
              }
              if (element.end === "") {
                element.end = "5:00 pm";
              }
              if (!element.start2 || element.start2 === "") {
                element.start2 = "9:00 am";
              }
              if (!element.end2 || element.end2 === "") {
                element.end2 = "9:00 am";
              }
            }
          });
        }
      }
    }

    $scope.contactHoursInvalid = false;
    $scope.contactHours = [];
    var i = 0;
    for (i; i <= 6; i++) {
      $scope.contactHours.push({
        "valid": true
      });
    }

    if ($scope.component) {
      WebsiteService.getComponentVersions($scope.component.type, function (versions) {
        $scope.componentVersions = versions;
        if ($scope.component && $scope.component.version) {
          $scope.component.version = $scope.component.version.toString();
          $scope.versionSelected = $scope.component.version;
        }
        $scope.originalCurrentPage = angular.copy($scope.currentPage);
      });
    }
    angular.element('#feature-convert').iconpicker({
      iconset: 'fontawesome',
      icon: 'fa-credit-card',
      rows: 5,
      cols: 5,
      placement: 'right',
    });

    angular.element('#feature-convert').on('change', function (e) {
      if (!$scope.featureIcon) {
        $scope.featureIcon = {};
      }
      if ($scope.featureIcon) {
        $scope.featureIcon.icon = e.icon;
      }
    });


    // $modalInstance.opened.then(function(){
      $timeout(function () {
        $rootScope.$broadcast('rzSliderForceRender');
        $scope.originalComponent = angular.copy($scope.component);
      }, 1000);
    // });
  };

  var componentForm = {
    street_number: 'short_name',
    route: 'long_name',
    locality: 'long_name',
    administrative_area_level_1: 'short_name',
    postal_code: 'short_name',
    country: 'short_name'
  };
  $scope.setDefaultAddress = function () {
    $scope.component.location.address = "";
    $scope.component.location.address2 = "";
    $scope.component.location.city = "";
    $scope.component.location.state = "";
    $scope.component.location.zip = "";
    $scope.component.location.country = "";
  };
  $scope.fillInAddress = function (place) {
    // Get each component of the address from the place details
    // and fill the corresponding field on the form.
    $scope.setDefaultAddress();
    var i = 0;
    var addressType, val;
    for (i; i < place.address_components.length; i++) {
      addressType = place.address_components[i].types[0];
      if (componentForm[addressType]) {
        val = place.address_components[i][componentForm[addressType]];
        if (addressType === 'street_number') {
          $scope.component.location.address = val;
        } else if (addressType === 'route') {
          $scope.component.location.address2 = val;
        } else if (addressType === 'locality') {
          $scope.component.location.city = val;
        } else if (addressType === 'administrative_area_level_1') {
          $scope.component.location.state = val;
        } else if (addressType === 'postal_code') {
          $scope.component.location.zip = val;
        } else if (addressType === 'country') {
          $scope.component.location.country = val;
        }
      }
    }
    $scope.component.location.lat = place.geometry.location.lat();
    $scope.component.location.lon = place.geometry.location.lng();
  };
  $scope.$watch('place.address', function (newValue) {
    if (newValue) {
      if (angular.isObject(newValue)) {
        $scope.fillInAddress(newValue);
        $scope.locationAddress = newValue;
        $scope.setLatLon();
        $scope.validateGeoAddress();
      }
    }
  });


  $scope.slugifyAnchor = function (url) {
    if (url) {
      $scope.component.anchor = $filter('slugify')(url);
    }
  };

  $scope.init = function() {

      /*
       * @getPages
       * -
       */
      AccountService.getAccount(function(account) {
        SimpleSiteBuilderService.getPagesWithSections().then(function(pages){
          var allPages = pages.data;

          // Suppress blog post and blog pages

          allPages = allPages.filter(function(page) {
            return page.handle !== 'blog-post' && page.handle !== 'single-post' && page.handle !== 'coming-soon'
          })
          // If account blog is disabled then blog link should be suppressed

          var _blogListPage = _.findWhere(allPages, {
              handle: 'blog-list'
          });

          if (!account.showhide.blog) {
              allPages = allPages.filter(function(page) {
                  return page.handle !== 'blog-list' && page.handle !== 'blog'
              })
          }
          // If account blog and ssbBlog are enabled then show 'blog-list' not 'blog'
          else if(account.showhide.blog && account.showhide.ssbBlog && _blogListPage){
              allPages = allPages.filter(function(page) {
                  return page.handle !== 'blog'
              })

              // Make sure 'blog-list' page points to 'blog'

              _blogListPage.handle = 'blog';
          }
          // Make sure 'blog-list' page appear only if ssbBlog is true
          else if(!account.showhide.ssbBlog){
              allPages = allPages.filter(function(page) {
                  return page.handle !== 'blog-list'
              })
          }

          $scope.allPages = angular.copy(allPages);



          $scope.filteredPages = $filter('orderBy')(allPages, "title", false);
          _.each($scope.filteredPages, function (page) {
              page.components = getPageComponents(page);
          })
          if($scope.linkPage)
              $scope.currentPage = _.find($scope.filteredPages, function (page) {
                  return page.handle === $scope.linkPage;
              });
        })
      })
        

      WebsiteService.getEmails(true, function (emails) {
        $timeout(function () {
          $scope.emailLoaded = true;
        }, 0);
        console.log("Emails loaded");

        $scope.emails = emails;

        //select the default email for simple form as welcome-aboard
        if ($scope.component && $scope.component.type === 'simple-form' && !$scope.component.emailId) {
          var _welcomeEmail = _.find(emails, function (_email) {
            return _email.handle === 'welcome-aboard';
          });

          if (_welcomeEmail) {
            $scope.component.emailId = _welcomeEmail._id;
          }
        }

      });

      CampaignService.getCampaigns(function (campaigns) {
        console.log('campaigns >>> ', campaigns);
        $scope.campaigns = campaigns;
      });

      /*
       * @getAllProducts
       * - get products for products and pricing table components
       */

      ProductService.getProducts(function (data) {
        $scope.products = data;
        _.each(data, function (product) {
          if (product.status === 'active' && product.tags && product.tags.length > 0) {
            _.each(product.tags, function (tag) {
              if ($scope.availableProductTags.indexOf(tag) === -1) {
                $scope.availableProductTags.push(tag);
              }
            });
          }
        });
        $scope.availableProductTagsString = $scope.availableProductTags.join(",");
      });

      ContactService.getContactTags(function(tags){
        $scope.contactTags = tags;
      });

      $scope.editComponent();


  };

  $timeout($scope.init, 500);

}]);

'use strict';
/*global app*/
app.controller('TemplateSettingsModalCtrl', ['$scope', '$document', '$modalInstance', '$timeout', 'WebsiteService', 'toaster', 'components', 'clickedIndex', function ($scope, $document, $modalInstance, $timeout, WebsiteService, toaster, components, clickedIndex) {

  //passed in components from parent ctrl
  $scope.components = components;
  //passed in clickedIndex from parent ctrl
  $scope.clickedIndex = clickedIndex;
  //save loading var to
  $scope.saveLoading = false;

  $scope.addBackground = function () {
    $scope.$parent.showInsert = true;
    $scope.openParentModal('media-modal', 'MediaModalCtrl', null, 'lg');
  };

}]);

'use strict';
/** 
  * controllers for angular-nestable 
  * Angular module for jQuery nestable plugin
*/
app.controller('nestableCtrl', ["$scope", function ($scope) {
    $scope.mdl = [{
        item: {
            text: 'Products'
        },
        children: [{
            item: {
                text: 'Features'
            },
            children: []
        }, {
            item: {
                text: 'Gallery'
            },
            children: []
        }, {
            item: {
                text: 'Plans'
            },
            children: [{
                item: {
                    text: 'Purchase'
                },
                children: []
            }, {
                item: {
                    text: 'Confirmation'
                },
                children: []
            }]
        }]
    }, {
        item: {
            text: 'About Us'
        },
        children: [{
            item: {
                text: 'Executive Team'
            },
            children: []
        }, {
            item: {
                text: 'Corporate Responsibility'
            },
            children: []
        }]
    }, {
        item: {
            text: 'Careers'
        },
        children: [{
            item: {
                text: 'Search Jobs'
            },
            children: []
        }, {
            item: {
                text: 'Events'
            },
            children: []
        }]
    }, {
        item: {
            text: 'Contact Us'
        },
        children: []
    }];
}]);

'use strict';
/**
 * controllers for ng-table
 * Simple table with sorting and filtering on AngularJS
 */
var data = [{
    id: 1,
    name: "Batman",
    alias: "Bruce Wayne",
    publisher: "DC Comics",
    gender: "male",
    power: 37
}, {
    id: 2,
    name: "Superman",
    alias: "Clark Kent",
    publisher: "DC Comics",
    gender: "male",
    power: 94
}, {
    id: 3,
    name: "Catwoman",
    alias: "Selina Kyle",
    publisher: "DC Comics",
    gender: "female",
    power: 24
}, {
    id: 4,
    name: "Spider-Man",
    alias: "Peter Benjamin Parker",
    publisher: "Marvel Comics",
    gender: "male",
    power: 58
}, {
    id: 5,
    name: "Banshee",
    alias: "Sean Cassidy",
    publisher: "Marvel Comics",
    gender: "male",
    power: 60
}, {
    id: 6,
    name: "Black Mamba",
    alias: "Tanya Sealy",
    publisher: "Marvel Comics",
    gender: "female",
    power: 78
}, {
    id: 7,
    name: "Batgirl",
    alias: "Mary Elizabeth Kane",
    publisher: "DC Comics",
    gender: "female",
    power: 12
}, {
    id: 8,
    name: "Blade",
    alias: "Eric Brooks",
    publisher: "Marvel Comics",
    gender: "male",
    power: 33
}, {
    id: 9,
    name: "Captain America",
    alias: "Steven Grant Rogers",
    publisher: "Marvel Comics",
    gender: "male",
    power: 46
}, {
    id: 10,
    name: "Lex Luthor",
    alias: "Alexander 'Lex' Joseph Luthor",
    publisher: "DC Comics",
    gender: "male",
    power: 10
}, {
    id: 11,
    name: "Marvel Girl",
    alias: "Rachel Anne Summers",
    publisher: "Marvel Comics",
    gender: "female",
    power: 95
}, {
    id: 12,
    name: "Penguin",
    alias: "Oswald Chesterfield Cobblepot",
    publisher: "DC Comics",
    gender: "male",
    power: 30
}, {
    id: 13,
    name: "Rogue",
    alias: "Anna Marie",
    publisher: "Marvel Comics",
    gender: "female",
    power: 80
}];
app.controller('ngTableCtrl', ["$scope", "ngTableParams", function ($scope, ngTableParams) {
    $scope.tableParams = new ngTableParams({
        page: 1, // show first page
        count: 5 // count per page
    }, {
        total: data.length, // length of data
        getData: function ($defer, params) {
            $defer.resolve(data.slice((params.page() - 1) * params.count(), params.page() * params.count()));
        }
    });
}]);
app.controller('ngTableCtrl2', ["$scope", "$filter", "ngTableParams", function ($scope, $filter, ngTableParams) {
    $scope.tableParams = new ngTableParams({
        page: 1, // show first page
        count: 5, // count per page
        sorting: {
            name: 'asc' // initial sorting
        }
    }, {
        total: data.length, // length of data
        getData: function ($defer, params) {
            // use build-in angular filter
            var orderedData = params.sorting() ? $filter('orderBy')(data, params.orderBy()) : data;
            $defer.resolve(orderedData.slice((params.page() - 1) * params.count(), params.page() * params.count()));
        }
    });
}]);
app.controller('ngTableCtrl3', ["$scope", "$filter", "ngTableParams", function ($scope, $filter, ngTableParams) {
    $scope.tableParams = new ngTableParams({
        page: 1, // show first page
        count: 5, // count per page
        filter: {
            name: 'M' // initial filter
        }
    }, {
        total: data.length, // length of data
        getData: function ($defer, params) {
            // use build-in angular filter
            var orderedData = params.filter() ? $filter('filter')(data, params.filter()) : data;
            $scope.users = orderedData.slice((params.page() - 1) * params.count(), params.page() * params.count());
            params.total(orderedData.length);
            // set total for recalc pagination
            $defer.resolve($scope.users);
        }
    });
}]);
app.controller('ngTableCtrl4', ["$scope", "$filter", "ngTableParams", function ($scope, $filter, ngTableParams) {
    $scope.tableParams = new ngTableParams({
        page: 1, // show first page
        count: 10 // count per page

    }, {
        total: data.length, // length of data
        getData: function ($defer, params) {
            // use build-in angular filter
            var orderedData = params.sorting() ? $filter('orderBy')(data, params.orderBy()) : data;
            $defer.resolve(orderedData.slice((params.page() - 1) * params.count(), params.page() * params.count()));

        }
    });
}]);
app.controller('ngTableCtrl5', ["$scope", "$filter", "ngTableParams", function ($scope, $filter, ngTableParams) {
    $scope.tableParams = new ngTableParams({
        page: 1, // show first page
        count: 10 // count per page
    }, {
        total: data.length, // length of data
        getData: function ($defer, params) {
            // use build-in angular filter
            var orderedData = params.sorting() ? $filter('orderBy')(data, params.orderBy()) : data;

            $defer.resolve(orderedData.slice((params.page() - 1) * params.count(), params.page() * params.count()));
        }
    });
}]);
app.controller('ngTableCtrl6', ["$scope", "$filter", "ngTableParams", function ($scope, $filter, ngTableParams) {
    var data = [{
        "id": 1,
        "lm": 138661285100,
        "ln": "Smith",
        "fn": "John",
        "dc": "CEO",
        "em": "j.smith@company.com",
        "ph": "617-321-4567",
        "ac": true,
        "dl": false
    }, {
        "id": 2,
        "lm": 138661285200,
        "ln": "Taylor",
        "fn": "Lisa",
        "dc": "VP of Marketing",
        "em": "l.taylor@company.com",
        "ph": "617-522-5588",
        "ac": true,
        "dl": false
    }, {
        "id": 3,
        "lm": 138661285300,
        "ln": "Jones",
        "fn": "James",
        "dc": "VP of Sales",
        "em": "j.jones@company.com",
        "ph": "617-589-9977",
        "ac": true,
        "dl": false
    }, {
        "id": 4,
        "lm": 138661285400,
        "ln": "Wong",
        "fn": "Paul",
        "dc": "VP of Engineering",
        "em": "p.wong@company.com",
        "ph": "617-245-9785",
        "ac": true,
        "dl": false
    }, {
        "id": 5,
        "lm": 138661285500,
        "ln": "King",
        "fn": "Alice",
        "dc": "Architect",
        "em": "a.king@company.com",
        "ph": "617-244-1177",
        "ac": true,
        "dl": false
    }, {
        "id": 6,
        "lm": 138661285600,
        "ln": "Brown",
        "fn": "Jan",
        "dc": "Software Engineer",
        "em": "j.brown@company.com",
        "ph": "617-568-9863",
        "ac": true,
        "dl": false
    }, {
        "id": 7,
        "lm": 138661285700,
        "ln": "Garcia",
        "fn": "Ami",
        "dc": "Software Engineer",
        "em": "a.garcia@company.com",
        "ph": "617-327-9966",
        "ac": true,
        "dl": false
    }, {
        "id": 8,
        "lm": 138661285800,
        "ln": "Green",
        "fn": "Jack",
        "dc": "Software Engineer",
        "em": "j.green@company.com",
        "ph": "617-565-9966",
        "ac": true,
        "dl": false
    }, {
        "id": 9,
        "lm": 138661285900,
        "ln": "Liesen",
        "fn": "Abraham",
        "dc": "Plumber",
        "em": "a.liesen@company.com",
        "ph": "617-523-4468",
        "ac": true,
        "dl": false
    }, {
        "id": 10,
        "lm": 138661286000,
        "ln": "Bower",
        "fn": "Angela",
        "dc": "Product Manager",
        "em": "a.bower@company.com",
        "ph": "617-877-3434",
        "ac": true,
        "dl": false
    }, {
        "id": 11,
        "lm": 138661286100,
        "ln": "Davidoff",
        "fn": "Fjodor",
        "dc": "Database Admin",
        "em": "f.davidoff@company.com",
        "ph": "617-446-9999",
        "ac": true,
        "dl": false
    }, {
        "id": 12,
        "lm": 138661286200,
        "ln": "Vitrovic",
        "fn": "Biljana",
        "dc": "Director of Communications",
        "em": "b.vitrovic@company.com",
        "ph": "617-111-1111",
        "ac": true,
        "dl": false
    }, {
        "id": 13,
        "lm": 138661286300,
        "ln": "Valet",
        "fn": "Guillaume",
        "dc": "Software Engineer",
        "em": "g.valet@company.com",
        "ph": "617-565-4412",
        "ac": true,
        "dl": false
    }, {
        "id": 14,
        "lm": 138661286400,
        "ln": "Tran",
        "fn": "Min",
        "dc": "Gui Designer",
        "em": "m.tran@company.com",
        "ph": "617-866-2554",
        "ac": true,
        "dl": false
    }];
    $scope.tableParams = new ngTableParams({
        page: 1,
        count: 10
    }, {
        total: data.length,
        getData: function ($defer, params) {
            var orderedData = params.sorting() ? $filter('orderBy')(data, params.orderBy()) : data;
            $defer.resolve(orderedData.slice((params.page() - 1) * params.count(), params.page() * params.count()));
        }
    });

    $scope.editId = -1;

    $scope.setEditId = function (pid) {
        $scope.editId = pid;
    };
}]);

'use strict';
/** 
 * controller for help-topics
 */
(function (angular) {
  app.controller('OldHelpTopicsCtrl', ["$scope", function ($scope) {
    $scope.firstAccordionControl = {
      onExpand: function (expandedPaneIndex) {
        console.log('expanded:', expandedPaneIndex);
      },
      onCollapse: function (collapsedPaneIndex) {
        console.log('collapsed:', collapsedPaneIndex);
      }
    };
    $scope.panes = [{
      header: "Can I use my own domain name?",
      content: "Yes! No need to go changing all of those business cards! Please send a request via chat or email to info@indigenous.io.",
      category: "Website"
    }, {
      header: "Can I use my existing website?",
      content: "No. For you to be able to utilize all of the cool integrated features we have, your site needs to be built on the Indigenous platform. However, you can customize our templates to get a feel very similar to your existing website. Or, try something fresh and give your site a makeover. Remember, you can always easily make changes.",
      category: "Website"
    }, {
      header: "Will I lose all of my content and blog posts?",
      content: "Not at all. You can upload your content and media to use in our templates. We can also move your blog posts over for you; just sent us a request via chat or email to info@indigenous.io.",
      category: "Website"
    }, {
      header: "Do I need a designer to make changes to my website?",
      content: "Absolutely not. Using our templates and drag-and-drop technology, it’s easy to upload media and restructure the design of your site.",
      category: "Website"
    }, {
      header: "How do I select a page template?",
      content: "Go to the Website tab, click on “Themes,” and select your template.",
      category: "Website"
    }, {
      header: "How do I create a page?",
      content: "Go to the Website tab, click “Add” in the top right corner, and select “Page.”",
      category: "Website"
    }, {
      header: "Can I create pages without selecting a theme?",
      content: "Yes. However, selecting a theme first will help you to create a cohesive site efficiently. If you’re not sure where to begin, use our Getting Started Checklist.",
      category: "Website"
    }, {
      header: "How do I create a blog post?",
      content: "Go to the Website tab, click “Add” in the top right corner, and select “Post.”",
      category: "Website"
    }, {
      header: "How do I add a feature or functionality to my site that’s not offered in the templates?",
      content: "We’re working to make sure everything you need is at your fingertips, but if there’s a feature you don’t see, send us a request via chat or email to info@indigenous.io. We like wish lists because we know how to answer them.",
      category: "Website"
    }, {
      header: "How do I add a new customer?",
      content: "Go to the Customers tab and click “Add” in the top right corner.",
      category: "Customers"
    }, {
      header: "Are customers added automatically?",
      content: "Yes. When a visitor enters his/her email address on your site, a profile is automatically generated.",
      category: "Customers"
    }, {
      header: "Is there a limit to how many customers I can add?",
      content: "No. Currently, there is no tiered membership. You can add as many customers as you like.",
      category: "Customers"
    }, {
      header: "Can I import/export my existing contact data?",
      content: "Yes. You can import your contacts from Facebook, LinkedIn, and Google+). Soon, you will be able to import .csv files. If you need to export files, please send a request via chat or email to info@indigenous.io.",
      category: "Customers"
    }, {
      header: "How can I tag customers with labels?",
      content: "All customers are automatically tagged as “Lead.” You can then go in and edit that label, which allows for targeted communication and marketing. Soon, you will be able to have multiple labels for each customer.",
      category: "Customers"
    }, {
      header: "Can I add variables/fields in customer profiles? ",
      content: "Indigenous tracks all of the activities of your customers in their respective profiles, but if there’s additional field that you’d like to see, please send a request via chat or email to info@indigenous.io.",
      category: "Customers"
    }, {
      header: "How do I see my customers in a list?",
      content: "Go the Customers tab, click on the gear (Settings) icon in the top right corner, and select “List” under Default View.",
      category: "Customers"
    }, {
      header: "How do I add products?",
      content: "Go to the Commerce tab, click “Add” in the top right corner, and fill in the fields. These products will not be visible on your site until you have added a store page with the products component under the Website tab.",
      category: "Commerce"
    }, {
      header: "How do I add a store to my site?",
      content: "A store is a page on your site. Go to the Website tab, click “Add” in the top right corner, and select “Page.” Then, select a store template and add the product component. ",
      category: "Commerce"
    }, {
      header: "What happens if I add a store before I add products?",
      content: "Visitors will see a message saying, “We’re busy getting our products ready. Please come back soon!”",
      category: "Commerce"
    }, {
      header: "What kinds of products can I add?",
      content: "You can add physical, digital, subscription, and external link products.",
      category: "Commerce"
    }, {
      header: "Where can I see my customer orders?",
      content: "This feature is coming soon and when complete you will go the Commerce tab and click on “Orders.” You can also see orders in individual customer profile activity feeds and in your dashboard activity feed.",
      category: "Commerce"
    }, {
      header: "Where does my money go?",
      content: "Straight into your wallet! Commerce is linked to and processed through your Stripe account.",
      category: "Commerce"
    }, {
      header: "How do I add my social accounts?",
      content: "Go to the Account tab, click on “Integrations,” and easily connect your Facebook, LinkedIn, Twitter, and Google+ accounts.",
      category: "Marketing"
    }, {
      header: "How do I track my social media?",
      content: "Go to the Marketing tab and click on “Social Feed” to see a collaborative filterable view of your social media activity. ",
      category: "Marketing"
    }, {
      header: "How do I post to social media?",
      content: "Go to the Marketing tab and click on “Social Feed” to post, like, comment, edit, and delete on multiple sites, all from one place!",
      category: "Marketing"
    }, {
      header: "Can I create targeted social media messages?",
      content: "You will be able to use the labels and tracked activities in your customer profiles to create targeted social media messages.",
      category: "Marketing"
    }, {
      header: "Can I set up automated campaigns?",
      content: "Absolutely! You can use our campaign builder under the Marketing tab to enter your own content into smart and modifiable campaign templates. We will soon have more trigger and conditional options that allow you to send communication based on tracked customer activity (e.g. whether a specific email is opened, if no emails are opened for a certain amount of time, etc.).",
      category: "Marketing"
    }, {
      header: "How do I know what marketing is working well?",
      content: "Go to your Dashboard and click on “Marketing” to see what campaigns and individual posts are generating leads and conversions.",
      category: "Marketing"
    }, {
      header: "How do I send out a targeted email?",
      content: "Go to the Marketing tab and click on “Campaigns” to filter customers by label.",
      category: "Marketing"
    }, {
      header: "How do I know what my customers are doing on my site?",
      content: "Go the Dashboard tab and click on “Activity” to see what customers are doing alongside easy-to-read summaries of your site analytics (who’s visiting and how often, etc.).",
      category: "Dashboard"
    }, {
      header: "Where can I see my site analytics?",
      content: "Go to the Website tab and click on “Site Analytics” to who’s visiting and how often, etc. in easy-to-read graphs and charts.",
      category: "Dashboard"
    }, {
      header: "Can I add additional employees?",
      content: "Not currently. If you require multiple users on one account, please send your request via chat or email to info@indigenous.io.",
      category: "Dashboard"
    }, {
      header: "Can I use Indigenous on my mobile phone or device?",
      content: "Absolutely. You have all of the same capabilities on a mobile device that you would have on your computer.",
      category: "Dashboard"
    }, {
      header: "Can I rearrange how my dashboard looks?",
      content: "Not currently, but if there’s a concern, please let us know via chat or email to info@indigenous.io.",
      category: "Dashboard"
    }, {
      header: "Where can I see my past invoices?",
      content: "Go to the Account tab and click on “Billing.”",
      category: "Account"
    }, {
      header: "Where can I see my past invoices?",
      content: "Go to the Account tab and click on “Billing.”",
      category: "Account"
    }, {
      header: "What happens if I cancel Indigenous?",
      content: "We will store your data for 30 days, and you may request export of your data, but more importantly, please let us know why you’re considering canceling, and how our platform can serve you better.",
      category: "Account"
    }, {
      header: "Can I get my money back?",
      content: "Your startup fee and monthly payments are non-refundable, but we are committed to making Indigenous work for you, so please send your concerns via chat or email to info@indigenous.io.",
      category: "Account"
    }, {
      header: "What is the first thing I should do?",
      content: "Enter your basic personal and business information under “Account information.” Then, consult our Getting Started checklist and begin building your business with Indigenous.",
      category: "Account"
    }, {
      header: "Where can I change my credit card information?",
      content: "Go to the Account tab and click on “Billing.” ",
      category: "Account"
    }, {
      header: "What if forget my password?",
      content: "Click on “Forgot Your Password?” on the login page to have instructions for setting up a new password sent to your associated email account. If you cannot access that email account, please send a request via email to info@indigenous.io.",
      category: "Account"
    }, {
      header: "Where can I get one-on-one support?",
      content: "We provide 24/7 live chat support. You can also schedule a one-on-one demo with one of our team members.",
      category: "Account"
    }];
  }]);
})(angular);
'use strict';
/*global app, angular*/
(function (angular) {
    app.controller('OnboardingCtrl', ["$scope", "$window", "toaster", "ContactService", function ($scope, $window, toaster, ContactService) {
        console.log('onboarding');
        console.log('$scope.currentUser ', $scope.currentUser);
        // Someday, we may do some awesome things here to collect or detect traits of the user; f/e their pictures
        // and profile details from social networks, associations from the same, geography, business details from
        // email addresses and existing sites, etc. For now, we'll play them a video.
        initialize();
    }]);
}(angular));
'use strict';
/*global app, moment, angular, window*/
/*jslint unparam:true*/
(function (angular) {
    app.controller('OrderDetailCtrl', ["$scope", "toaster", "$modal", "$filter", "$stateParams", "$location", "OrderService", "ContactService", "UserService", "ProductService", "SweetAlert", "orderConstant", "productConstant", function ($scope, toaster, $modal, $filter, $stateParams, $location, OrderService, ContactService, UserService, ProductService, SweetAlert, orderConstant, productConstant) {

            $scope.dataLoaded = false;
            $scope.billing = {sameAsBilling: false};

            //TODO
            // - $q all api calls
            // 1. getCustomers
            // 2. getUsers
            // 3. getProducts
            // 4. get Order
            if (orderConstant) {
                $scope.FailedStatus = orderConstant.order_status.FAILED;
            }

            /*
             * @dateOptions
             * -
             */

            $scope.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };

            $scope.maxOrderDate = moment();
            $scope.maxOrderDate.add(orderConstant.MAX_ORDER_DAYS || 15, 'days');
            /*
             * @getCustomers
             * get all customers to for customer select
             */

            ContactService.getContacts(function (customers) {
                $scope.customers = customers;
                $scope.getUsers();
            });

            /*
             * @closeModal
             * -
             */

            $scope.closeModal = function () {
                $scope.modalInstance.close();
            };

            /*
             * @openModal
             * -
             */

            $scope.openModal = function (modal) {
                $scope.modalInstance = $modal.open({
                    templateUrl: modal,
                    keyboard: false,
                    backdrop: 'static',
                    scope: $scope
                });
            };

            $scope.formatOrderStatus = function (status) {
                return OrderService.formatOrderStatus(status);
            };

            /*
             * @getUsers
             * get all users for this account
             */

            $scope.getUsers = function () {
                UserService.getUsers(function (users) {
                    $scope.users = users;
                    $scope.getProducts();
                });
            };

            /*
             * @getProducts
             * get all products
             */

            $scope.getProducts = function () {
                ProductService.getProducts(function (products) {
                    $scope.products = products;
                    $scope.activeProducts = products.filter(function (product) {
                        return product.status === productConstant.product_status_types.ACTIVE
                    });
                    $scope.getOrder();
                });
            };

            $scope.eliminateUsedProducts = function () {
                $scope.filterProducts = angular.copy($scope.activeProducts);
                _.each($scope.order.line_items, function (line_item) {
                    var matchProduct = _.find($scope.filterProducts, function (product) {
                        return product._id === line_item.product_id;
                    });
                    if (matchProduct) {
                        var index = _.indexOf($scope.filterProducts, matchProduct);
                        if (index > -1) {
                            $scope.filterProducts.splice(index, 1);
                        }
                    }
                });
            };

            /*
             * @getOrder
             * get order based on the orderId in url
             */

            /*
             * @compareAddress
             * compare order shipping and billing address
             */

            $scope.compareAddress = function () {
                if ($scope.order.shipping_address && $scope.order.billing_address && $scope.order.billing_address.hasOwnProperty("address_1") && angular.equals($scope.order.shipping_address, $scope.order.billing_address)) {
                    $scope.billing.sameAsBilling = true;
                }
            };

            $scope.getOrder = function () {
                OrderService.getOrders(function (orders) {
                    if ($stateParams.orderId) {
                        var order = _.find(orders, function (order) {
                            return order._id === $stateParams.orderId;
                        });
                        //add customer obj to each note
                        // var notes = order.notes;
                        order.notes = $scope.matchUsers(order);
                        order.line_items = $scope.matchProducts(order);
                        $scope.currentStatus = order.status;

                        order.locked = true; // TODO: remove this when server sends 'locked' property
                        $scope.order = order;
                        console.info('order >>>', order);
                        $scope.eliminateUsedProducts();
                        $scope.selectedCustomer = _.find($scope.customers, function (customer) {
                            return customer._id === $scope.order.customer_id;
                        });
                        $scope.calculateTotals();
                        $scope.compareAddress();
                    } else {
                        $scope.order = {
                            created: {
                                date: new Date().toISOString()
                            },
                            order_id: orders.length + 1,
                            status: 'pending_payment',
                            line_items: [],
                            notes: []
                        };
                        $scope.eliminateUsedProducts();
                        console.log('$scope.order ', $scope.order);

                    }
                    $scope.originalOrder = angular.copy($scope.order);
                    $scope.dataLoaded = true;
                });
            };

            $scope.checkIfDirty = function () {
                var isDirty = false;
                if ($scope.newNote)
                    isDirty = true;
                if ($scope.originalOrder && !angular.equals($scope.originalOrder, $scope.order))
                    isDirty = true;
                return isDirty;
            }

            $scope.resetDirty = function () {
                $scope.originalOrder = null;
                $scope.order = null;
            }

            /*
             * @calculateTotals
             * -
             */

            $scope.calculateTotals = function () {
                console.log('calculateTotals >>>');
                var _subtotal = 0;
                var _total = 0;
                var _discount = 0;
                var _tax = 0;
                var _taxrate = $scope.order.tax_rate || 0;
                var _subtotalTaxable = 0;

                _.each($scope.order.line_items, function (line_item) {
                    if (!line_item.product) {
                        return;
                    }
                    var item_price = line_item.on_sale ? line_item.sale_price : line_item.regular_price;
                    if (line_item.quantity) {
                        line_item.total = item_price * line_item.quantity;
                    }
                    if (line_item.discount) {
                        var _dc = parseFloat(line_item.discount);
                        line_item.total -= _dc;
                        _discount += _dc;
                        _total -= _dc;
                    }
                    _subtotal += parseFloat(item_price) * parseFloat(line_item.quantity);
                    _total += parseFloat(item_price) * parseFloat(line_item.quantity);
                    if (line_item.taxable) {
                        _subtotalTaxable += parseFloat(item_price) * parseFloat(line_item.quantity);
                    }
                });

                $scope.order.subtotal = _subtotal;
                $scope.order.total_discount = _discount;
                if (_discount) {
                    $scope.calculatedDiscountPercent = ((parseFloat(_discount) * 100) / parseFloat(_subtotal)).toFixed(2);
                } else {
                    $scope.calculatedDiscountPercent = '';
                }
                if (_subtotalTaxable > 0) {
                    $scope.order.total_tax = (_subtotalTaxable - _discount) * _taxrate;
                } else {
                    $scope.order.total_tax = 0;
                }

                $scope.order.total = ((_subtotal + $scope.order.total_tax) - _discount);
            };

            /*
             * @totalWithDiscount
             * -
             */

            $scope.totalWithDiscount = function (total, discount) {
                return parseFloat(total) + parseFloat(discount);
            };

            var checkBeforeRedirect = function (cust) {

                SweetAlert.swal({
                    title: "Are you sure?",
                    text: "You have unsaved data that will be lost",
                    type: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#DD6B55",
                    confirmButtonText: "Yes, save changes!",
                    cancelButtonText: "No, do not save changes!",
                    closeOnConfirm: true,
                    closeOnCancel: true
                }, function (isConfirm) {
                    if (isConfirm) {
                        $scope.saveOrder(1, cust);
                    } else {
                        SweetAlert.swal("Cancelled", "Your edits were NOT saved.", "error");
                    }
                });
            };

            /*
             * @navToCustomer
             */
            $scope.navToCustomer = function (cust) {
                if ($stateParams.orderId) {
                    var cust_url = '/contacts/' + cust._id;
                    $location.url(cust_url).search({
                        order: "true",
                        id: $scope.order._id
                    });
                } else {
                    checkBeforeRedirect(cust);
                }

            };


            /*
             * @clearCustomer
             * - clear the customer
             */

            $scope.clearCustomer = function () {
                $scope.selectedCustomer = null;
            };

            /*
             * @clearProduct
             * - clear the product
             */

            $scope.clearProduct = function () {
                $scope.selectedProduct = null;
            };

            /*
             * @matchUsers
             * match users to the order notes
             */
            $scope.matchUsers = function (order) {

                var notes = order.notes;

                if (notes && notes.length > 0 && $scope.users) {

                    _.each(notes, function (_note) {

                        var matchingUser = _.find($scope.users, function (_user) {
                            return _user._id === _note.user_id;
                        });

                        if (matchingUser) {

                            _note.user = {
                                _id: matchingUser._id,
                                first: matchingUser.first,
                                last: matchingUser.last,
                                email: matchingUser.email,
                                profilePhotos: matchingUser.profilePhotos
                            };

                        }

                    });
                }

                return notes;
            };


            /*
             * @matchProducts
             * match products to the order line items
             */

            $scope.matchProducts = function (order) {
                var lineitems = order.line_items || {};
                if (lineitems.length > 0) {
                    _.each(lineitems, function (item) {
                        var matchProduct = _.find($scope.products, function (product) {
                            return product._id === item.product_id;
                        });
                        item.product = matchProduct;
                        if (!$stateParams.orderId) {
                            item.discount = 0.00;
                        }
                    });
                }

                return lineitems;
            };

            /*
             * @addNote
             * add a note to an order
             */

            $scope.addNote = function () {

                if (!$scope.order.notes) {
                    $scope.order.notes = [];
                }

                var date = moment();
                var _noteToPush = {
                    note: $scope.newNote,
                    user_id: $scope.currentUser._id,
                    date: date.toISOString()
                };

                $scope.order.notes.push(_noteToPush);

                $scope.pushLocalNote($scope.order, true);

                if ($scope.order && $scope.order._id) {
                    OrderService.updateOrder($scope.order, function (updatedOrder) {
                        toaster.pop('success', 'Note added to order.');
                        $scope.newNote = '';
                        $scope.order = updatedOrder;
                        angular.copy($scope.order, $scope.originalOrder);
                    });
                } else if ($scope.order) {
                    $scope.newNote = '';
                }

            };

            /*
             * @pushLocalNote
             * push a recently created note to the ui
             */

            $scope.pushLocalNote = function (order, new_order) {
                order.notes = $scope.matchUsers(order);
                if (!new_order) {
                    var noteToPush = order.notes[order.notes.length - 1];
                    $scope.order.notes.push(noteToPush);
                }
            };

            /*
             * @addProductLineItem
             * add a product line item to the order
             */

            $scope.checkOnSaleFn = function (_product) {
                if (_product.on_sale) {
                    if (_product.sale_date_from && _product.sale_date_to) {
                        var date = new Date();
                        var startDate = new Date(_product.sale_date_from);
                        var endDate = new Date(_product.sale_date_to);
                        if (startDate <= date && date <= endDate) {
                            return true; //false in this case
                        }
                        return false;
                    }
                    return true;
                }
            };

            $scope.addProductLineItem = function (selected) {
                console.log('selected ', selected);
                var _line_item = {
                    "product_id": selected._id,
                    "quantity": 1,
                    "regular_price": selected.regular_price,
                    "sale_price": selected.on_sale ? selected.sale_price : null,
                    "on_sale": $scope.checkOnSaleFn(selected),
                    "taxable": selected.taxable || false,
                    "sku": selected.sku,
                    "total": selected.regular_price,
                    "name": selected.name,
                    "product": selected,
                    "type": selected.type
                };
                $scope.order.line_items.push(_line_item);
                $scope.calculateTotals();
                $scope.clearProduct();
                $scope.eliminateUsedProducts();
                $scope.closeModal();
            };

            /*
             * @removeLineItem
             * remove a product line item from the order
             */

            $scope.removeLineItem = function (index) {
                var lineItems = $scope.order.line_items;
                var filteredLineItems = [];
                _.each(lineItems, function (item, i) {
                    if (i !== index) {
                        filteredLineItems.push(item);
                    }
                });
                $scope.order.line_items = filteredLineItems;
                $scope.eliminateUsedProducts();
                $scope.calculateTotals();
            };

            /*
             * @openProductLineItemModal
             * add a product line item modal
             */

            $scope.openProductLineItemModal = function () {
                console.log('openProductLineItemModal');
                $scope.openModal('add-product-lineitem-modal');
            };

            /*
             * @formatInput
             * format the customer input to show "First Last (#ID email)"
             */

            $scope.formatInput = function (model) {
                if (model) {
                    var email = 'No Email';
                    if (model.details[0] && model.details[0].emails.length > 0) {
                        email = model.details[0].emails[0].email;
                    }
                    return (model.first || '') + ' ' + (model.last || '') + ' (#' + model._id + ' ' + email + ') ';
                }

                return '';
            };

            /*
             * @open
             * -
             */

            $scope.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                $scope.opened = !$scope.opened;
            };

            /*
             * @endOpen
             * -
             */

            $scope.endOpen = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                $scope.startOpened = false;
                $scope.endOpened = !$scope.endOpened;
            };

            /*
             * @startOpen
             * -
             */

            $scope.startOpen = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                $scope.endOpened = false;
                $scope.startOpened = !$scope.startOpened;
            };

            /*
             * @customerSync
             * sync order shipping and billing information with selected customer
             */

            $scope.customerSync = function (type) {
                var customer = $scope.selectedCustomer;
                var addresses = customer.details[0].addresses;
                var emails = customer.details[0].emails;
                var phones = customer.details[0].phones;
                var defaultBilling, defaultShipping;
                //find default address else get first
                var i = 0;
                for (i; i < addresses.length; i++) {
                    if (addresses[i].defaultBilling) {
                        defaultBilling = addresses[i];
                    }
                    if (addresses[i].defaultShipping) {
                        defaultShipping = addresses[i];
                    }
                }

                if (!defaultBilling) {
                    defaultBilling = addresses[0];
                }
                if (!defaultShipping) {
                    defaultShipping = addresses[0];
                }

                //check if exists and set defaults

                var first = '';
                if (customer.first) {
                    first = customer.first;
                }

                var last = '';
                if (customer.last) {
                    last = customer.last;
                }

                var phone = '';
                if (phones.length > 0) {
                    phone = phones[0].number;
                }

                var email = '';
                if (emails.length > 0) {
                    email = emails[0].email;
                }

                var company = '';
                if (customer.company) {
                    company = customer.company;
                }

                var billingAddress1 = '';
                var billingAddress2 = '';
                var billingCity = '';
                var billingState = '';
                var billingPostcode = '';
                var billingCountry = '';

                if (defaultBilling) {

                    if (defaultBilling.address) {
                        billingAddress1 = defaultBilling.address;
                    }

                    if (defaultBilling.address2) {
                        billingAddress2 = defaultBilling.address2;
                    }

                    if (defaultBilling.city) {
                        billingCity = defaultBilling.city;
                    }

                    if (defaultBilling.state) {
                        billingState = defaultBilling.state;
                    }

                    if (defaultBilling.zip) {
                        billingPostcode = defaultBilling.zip;
                    }

                    if (defaultBilling.country) {
                        billingCountry = defaultBilling.country;
                    }

                }

                var shippingAddress1 = '';
                var shippingAddress2 = '';
                var shippingCity = '';
                var shippingState = '';
                var shippingPostcode = '';
                var shippingCountry = '';

                if (defaultShipping) {

                    if (defaultShipping.address) {
                        shippingAddress1 = defaultShipping.address;
                    }

                    if (defaultShipping.address2) {
                        shippingAddress2 = defaultShipping.address2;
                    }

                    if (defaultShipping.city) {
                        shippingCity = defaultShipping.city;
                    }

                    if (defaultShipping.state) {
                        shippingState = defaultShipping.state;
                    }

                    if (defaultShipping.zip) {
                        shippingPostcode = defaultShipping.zip;
                    }

                    if (defaultShipping.country) {
                        shippingCountry = defaultShipping.country;
                    }

                }

                if (type === 'billing') {
                    var newBillingAddress = {
                        "first_name": first,
                        "last_name": last,
                        "phone": phone,
                        "email": email,
                        "company": company,
                        "address_1": billingAddress1,
                        "address_2": billingAddress2,
                        "city": billingCity,
                        "state": billingState,
                        "postcode": billingPostcode,
                        "country": billingCountry
                    };
                    $scope.order.billing_address = newBillingAddress;
                }

                if (type === 'shipping') {
                    var newShippingAddress = {
                        "first_name": first,
                        "last_name": last,
                        "phone": phone,
                        "email": email,
                        "company": company,
                        "address_1": shippingAddress1,
                        "address_2": shippingAddress2,
                        "city": shippingCity,
                        "state": shippingState,
                        "postcode": shippingPostcode,
                        "country": shippingCountry
                    };
                    $scope.order.shipping_address = newShippingAddress;
                }
            };

            /*
             * @statusUpdated
             * the order status has been updated
             */

            $scope.statusUpdated = function (newStatus) {
                if ($scope.order.status === newStatus) {
                    return;
                }
                var toasterMsg = 'Status has been updated to ';
                var note = 'Order status changed from ' + $scope.order.status + ' to ' + newStatus;
                if (newStatus === 'processing') {
                    toaster.pop('success', toasterMsg + ' "Processing"');
                    //send processing email
                }

                if (newStatus === 'on_hold') {
                    toaster.pop('success', toasterMsg + '"On Hold"');
                }


                if (newStatus === 'pending_payment') {
                    toaster.pop('success', toasterMsg + '"Pending Payment"');
                }

                if (newStatus === 'completed') {
                    if ($scope.order._id) {
                        OrderService.completeOrder($scope.order._id, note, function (completedOrder) {
                            toaster.pop('success', toasterMsg + '"Completed"');
                            $scope.originalOrder.status = 'completed';
                            var update = false;
                            if (angular.equals($scope.order, $scope.originalOrder))
                                update = true;
                            $scope.pushLocalNote(completedOrder);
                            if (update)
                                angular.copy($scope.order, $scope.originalOrder);
                        });
                    } else {
                        toaster.pop('success', toasterMsg + '"Completed"');
                    }

                }

                if (newStatus === 'cancelled') {
                    toaster.pop('success', toasterMsg + '"Cancelled"');
                }

                if (newStatus === 'refunded') {
                    SweetAlert.swal({
                        title: "Are you sure?",
                        text: "This order will be refunded and all funds will be returned.",
                        type: "warning",
                        showCancelButton: true,
                        confirmButtonColor: "#DD6B55",
                        confirmButtonText: "Yes, refund it.",
                        cancelButtonText: "No, cancel!",
                        closeOnConfirm: false,
                        closeOnCancel: false
                    }, function (isConfirm) {
                        if (isConfirm) {
                            OrderService.refundOrder($scope.order._id, $scope.reasonData, function (data, error) {
                                if (error) {
                                    SweetAlert.swal(error.status, error.message, "error");
                                } else {
                                    console.log('data ', data);
                                    if ($scope.order.payment_details.payKey) {
                                        SweetAlert.swal("Refunded", "Order has been refunded.", "success");
                                        toaster.pop('warning', 'We currently do not support refunding payments from Paypal. Please log into your paypal account and initiate the refund from there.');
                                    } else {
                                        SweetAlert.swal("Refunded", "Order has been refunded.", "success");
                                    }
                                    $scope.order.status = newStatus;
                                    $scope.currentStatus = newStatus;
                                }
                            });
                        } else {
                            SweetAlert.swal("Cancelled", "Order refund cancelled.", "error");
                        }
                    });
                }

                if (newStatus === 'failed') {
                    toaster.pop('success', toasterMsg + '"Failed"');
                }
                if (newStatus !== 'refunded') {
                    $scope.order.status = newStatus;
                    $scope.currentStatus = newStatus;
                }

            };

            /*
             * @sendEmail
             * re-send a variety of emails
             */

            $scope.sendEmail = function (type) {
                console.log('sending email type: ', type);
                // if (type === 'new-order') {}
                // if (type === 'cancelled-order') {}
                // if (type === 'processing-order') {}
                // if (type === 'completed-order') {}
                // if (type === 'customer-invoice') {}
            };

            /*
             * @print
             * print a variety of things
             */

            $scope.print = function (type) {
                console.log('printing type: ', type);
                // if (type === 'invoice') {}
                // if (type === 'packing-slip') {}
            };

            /*
             * @saveOrder
             * -
             */

            $scope.saveOrder = function (flag, cust, invalid) {
                $scope.pageSaving = true;
                $scope.formSubmitted = true;
                $scope.saveLoading = true;
                // Set order customer Id
                if ($scope.selectedCustomer) {
                    $scope.order.customer_id = $scope.selectedCustomer._id;
                } else {
                    $scope.order.customer_id = null;
                }

                //validate

                if (!$scope.order) {
                    toaster.pop('error', 'Orders can not be blank.');
                    $scope.saveLoading = false;
                    return;
                }

                if (!$scope.order.created.date) {
                    $scope.order.created.date = new Date().toISOString();
                }

                if (!$scope.order.customer_id) {
                    toaster.pop('error', 'Orders must contain a customer.');
                    $scope.saveLoading = false;
                    return;
                }
                if ($scope.order.line_items.length <= 0) {
                    toaster.pop('error', 'Products cannot be blank');
                    $scope.saveLoading = false;
                    return;
                }
                if (!$scope.order.billing_address || invalid) {
                    $scope.billingEdit = true;
                    toaster.pop('error', 'Billing details cannot be blank');
                    $scope.saveLoading = false;
                    return;
                }
                if ($stateParams.orderId) {
                    OrderService.updateOrder($scope.order, function (updatedOrder) {
                        $scope.saveLoading = false;
                        angular.copy($scope.order, $scope.originalOrder);
                        console.log('updatedOrder ', updatedOrder);
                        toaster.pop('success', 'Order updated successfully.');
                        $scope.pageSaving = false;
                        $location.path('/commerce/orders');
                    });
                } else {
                    OrderService.createOrder($scope.order, function (updatedOrder) {
                        toaster.pop('success', 'Order created successfully.');
                        angular.copy($scope.order, $scope.originalOrder);
                        $scope.saveLoading = false;
                        $scope.pageSaving = false;
                        if (flag == 1) {
                            SweetAlert.swal("Saved!", "Your edits were saved to the page.", "success");
                            var cust_url = '/customers/' + cust._id;
                            $location.url(cust_url).search({
                                order: "true",
                                id: updatedOrder._id,
                            });
                        } else {
                            $location.path('/commerce/orders');
                        }
                    });
                }
            };

            $scope.isDonationOrderFn = function () {
                if (!$scope.order) {
                    return isDonation;
                }

                var isDonation = _.findWhere($scope.order.line_items, {type: 'DONATION'}) ? true : false;
                return isDonation;
            };

        }]);
}(angular));

'use strict';
/*global app, moment, angular, window*/
/*jslint unparam:true*/
(function (angular) {
  app.controller('OrdersCtrl', ["$scope", "toaster", "$modal", "$filter", "$state", "OrderService", "ContactService", "orderConstant", "ProductService", "$window", "$location", function ($scope, toaster, $modal, $filter, $state, OrderService, ContactService, orderConstant, ProductService, $window, $location) {

    $scope.tableView = 'list';
    $scope.itemPerPage = 100;
    $scope.showPages = 15;
    $scope.orderConstant = orderConstant;
    /*
     * @openModal
     * -
     */
    $scope.openModal = function (template) {
      $scope.modalInstance = $modal.open({
        templateUrl: template,
        keyboard: false,
        backdrop: 'static',
        scope: $scope
      });
    };

    /*
     * @closeModal
     * -
     */

    $scope.closeModal = function () {
      $scope.modalInstance.close();
    };

    /*
     * @getContacts
     * get all contacts to for contact select
     */

    ContactService.getContacts(function (contacts) {
      $scope.contacts = contacts;
    });

    /*
     * @newOrder
     * -
     */

    $scope.newOrder = function () {
      $state.go('app.commerce.orderdetail');
    };

    /*
     * @formatInput
     * format the customer input to show "First Last (#ID email)"
     */

    $scope.formatInput = function (model) {
      console.log('model >>> ', model);
      var email;
      if (model && model.email) {
        email = model.email;
      } else {
        email = 'No Email';
      }

      return model.first + ' ' + model.last + ' (#' + model._id + ' ' + email + ') ';
    };

    /*
     * @getOrders
     * - get all the orders for this account and create line_items_total
     *   and add decimal point to total then create scope
     */
    $scope.getProducts = function () {
      ProductService.getProducts(function (products) {
        $scope.products = products;
        $scope.getOrder();
      });
    };
    ProductService.getProducts(function (products) {
      $scope.products = products;
      OrderService.getOrders(function (orders) {
        _.each(orders, function (order) {
          if (order.line_items) {
            order.line_items_total = order.line_items.length;
          } else {
            order.line_items_total = 0;
          }
          $scope.matchProducts(order);
          $scope.setOrderCustomer(order);
          order.total = order.total;
        });
        $scope.orders = orders;
        $scope.showOrders = true;
      });
    });

    $scope.matchProducts = function (order) {
      var lineitems = order.line_items || {};
      if (lineitems.length > 0) {
        _.each(lineitems, function (item) {
          var matchProduct = _.find($scope.products, function (product) {
            return product._id === item.product_id;
          });
          item.product = matchProduct;
        });
      }
    };

    $scope.formatOrderStatus = function (status) {
      return OrderService.formatOrderStatus(status);
    };

    /*
     * @orderStatusOptions
     * - an array of order status types for use in a select
     */

    $scope.orderStatusOptions = [{
      name: 'Pending Payment',
      value: 'pending_payment'
    }, {
      name: 'Processing',
      value: 'processing'
    }, {
      name: 'On Hold',
      value: 'on_hold'
    }, {
      name: 'Completed',
      value: 'completed'
    }, {
      name: 'Cancelled',
      value: 'cancelled'
    }, {
      name: 'Refunded',
      value: 'refunded'
    }, {
      name: 'Failed',
      value: 'failed'
    }];

    /*
     * @getters
     * - getters for the sort on the table
     */

    $scope.orderStatus = '';
    $scope.line_items = '';
    $scope.filterorder = {};

    $scope.getters = {
      customerName: function (value) {
        if(value.customer)
          return value.customer.first + ' ' + value.customer.last;
        else
          return "";
      },
      line_items: function (value) {
        return value.line_items.length;
      },
      created: function (value) {
        return value.created.date;
      },
      modified: function (value) {
        return value.modified.date;
      },
      order_status: function (value) {
        return value;
      }
    };

    /*
     * @triggerInput
     * - trigger the hidden input to trick smart table into activating filter
     */

    $scope.triggerInput = function (element) {
      angular.element(element).trigger('input');
    };

    /*
     * @viewSingle
     * - view a single order redirect on click
     */

    $scope.viewSingle = function (order) {
      if (order) {
        $location.path('/commerce/orders/' + order._id);
      } else {
        $location.path('/commerce/orders/neworder');
      }
    };

    /*
     * @clear
     * - clear the filter box to bring back original list
     */

    //TODO: Not clearing table
    $scope.clear = function ($event, elem) {
      $event.stopPropagation();
      $scope.filterorder.selected = null;
      $scope.triggerInput(elem);
    };

    $scope.setOrderCustomer = function(order){
        if(order && order.customer){
           order.customerDetailedName = (order.customer.first || "") + " " + (order.customer.last || "") + " (" + order.customer._id + ")";
        }
    }


  }]);
}(angular));

'use strict';
/*global app, moment, angular, window, CKEDITOR*/
/*jslint unparam:true*/
(function (angular) {
  app.controller('PagesCtrl', ["$scope", "$location", "toaster", "$filter", "$modal", "WebsiteService", "pageConstant", "$timeout", "SimpleSiteBuilderService", function ($scope, $location, toaster, $filter, $modal, WebsiteService, pageConstant, $timeout, SimpleSiteBuilderService) {
    $scope.tableView = 'list';
    $scope.itemPerPage = 40;
    $scope.showPages = 15;
    $scope.showChangeURL = false;
    $scope.createpage = {};
    $scope.pageConstant = pageConstant;
    $scope.setHomePage = function () {
      if ($scope.createpage.homepage) {
        $scope.createpage.title = 'Home';
        $scope.createpage.handle = 'index';
      }
    };

    $scope.default_image_url = "/admin/assets/images/default-page.jpg";

    $scope.filterPages = function () {
      $scope.showFilter = !$scope.showFilter;
      $scope.filterScreenshots($scope.pages);
    };

    $scope.orderByFn = function () {
      $scope.pages = $filter('orderBy')($scope.pages, 'modified.date', true);
    };

    $scope.filterScreenshots = function (pages) {
      _.each(pages, function (page) {
        if (page) {
          page.hasScreenshot = false;
          if (page.screenshot) {
            if ($("#screenshot_" + page._id).attr("src") === $scope.default_image_url) {
              page.hasScreenshot = false;
            } else {
              page.hasScreenshot = true;
            }
          }
        }
      });
    };

    $scope.formatPages = function (pages, fn) {
      var pagesArr = [];
      _.each(pages, function (page) {
        if (page) {
          if (page.components) {
            page.components = page.components.length;
          } else {
            page.components = 0;
          }
          page.hasScreenshot = false;
          if (page.screenshot) {
            if ($("#screenshot_" + page._id).attr("src") === $scope.default_image_url) {
              page.hasScreenshot = false;
            }
            page.hasScreenshot = true;
          }
          if (page.type !== 'template' && page.handle !== 'blog' && page.handle !== 'single-post') {
            pagesArr.push(page);
          }
        }
      });

      if (fn) {
        fn(pagesArr);
      }
    };

    $scope.$watch('pages.length', function (newValue, oldValue) {
      if (newValue) {
        $scope.totalPages = $scope.pages.filter(function(page) { return !page.ssb; }).length;
      }
    });

    WebsiteService.getTemplates(function (templates) {
      $scope.templates = templates;
    });

    $scope.openModal = function (template) {
      $scope.modalInstance = $modal.open({
        templateUrl: template,
        keyboard: false,
        backdrop: 'static',
        scope: $scope
      });
      $scope.modalInstance.result.finally($scope.closeModal());
    };

    $scope.closeModal = function () {
      $scope.modalInstance.close();
      $scope.resetTemplateDetails();
      if(!$scope.createpage.showhomepage){
        $scope.createpage = {};
      }
      else{
        $scope.createpage.homepage = true;
        $scope.createpage.title = 'Home';
        $scope.createpage.handle = 'index';
      }
    };


    $scope.getters = {
      components: function (value) {
        return value.length;
      },
      created: function (value) {
        return value.created.date;
      },
      modified: function (value) {
        return value.modified.date;
      }
    };

    $scope.setTemplateDetails = function (templateDetails) {
      $scope.templateDetails = true;
      $scope.selectedTemplate = templateDetails;
    };

    $scope.resetTemplateDetails = function () {
      $scope.templateDetails = false;
      $scope.selectedTemplate = null;
      $scope.showChangeURL = false;
    };

    $scope.slugifyHandle = function (title) {
      if (title) {
        $scope.createpage.handle = $filter('slugify')(title);
      }
    };

    $scope.validateCreatePage = function (page, restrict) {
      $scope.createPageValidated = false;
      if (page) {
        if (page.handle === '') {
          $scope.handleError = true;
        } else {
          $scope.handleError = false;
          if (!restrict) {
            page.handle = $filter('slugify')(page.title);
          } else {
            page.handle = $filter('slugify')(page.handle);
          }
        }
        if (page.title === '') {
          $scope.titleError = true;
        } else {
          $scope.titleError = false;
        }
        if (page && page.title && page.title !== '' && page.handle && page.handle !== '') {
          $scope.createPageValidated = true;
        }
      }
    };

    $scope.createPageFromTemplate = function (page, $event) {
      $scope.saveLoading = true;
      $scope.validateCreatePage(page, true);

      $scope.titleError = false;
      $scope.handleError = false;
      if (!$scope.createPageValidated) {
        $scope.titleError = true;
        $scope.handleError = true;
        $scope.saveLoading = false;
        return false;
      }

      if ($scope.createpage.homepage)
        page.handle = 'index';

      var pageData = {
        title: page.title,
        handle: page.handle,
        mainmenu: page.mainmenu
      };

      var error = WebsiteService.checkSystemRoute(page.handle);
      if(error){        
        toaster.pop('error', error);
        $scope.saveLoading = false;
        return false;
      }


      var hasHandle = false;
      _.each($scope.pages, function (_page) {
        if (_page.handle === page.handle) {
          hasHandle = true;
        }
      });

      
      

      if (!hasHandle) {
        WebsiteService.createPageFromTemplate($scope.selectedTemplate._id, pageData, function (_newPage, error) {
          if(error && !_newPage)
          {
            toaster.pop('error', error.message);
            $event.preventDefault();
            $event.stopPropagation();
            $scope.saveLoading = false;
            return;
          }
          var newpage = angular.copy(_newPage);
          toaster.pop('success', 'Page Created', 'The ' + newpage.title + ' page was created successfully.');
          $scope.minRequirements = true;
          $scope.saveLoading = false;
          if(newpage.handle == 'index'){
            $scope.createpage.showhomepage = false;
          }
          $scope.closeModal();

          if (newpage.components) {
            newpage.components = newpage.components.length;
          } else {
            newpage.components = 0;
          }


          $scope.pages.unshift(newpage);
          $scope.displayedPages.unshift(newpage);
          page.title = "";
          page.handle = "";
          $scope.checkAndSetIndexPage($scope.pages);
          $scope.resetTemplateDetails();
          resetSitebuilderPages();
        });
      } else {
        toaster.pop('error', "Page URL " + page.handle, "Already exists");
        $event.preventDefault();
        $event.stopPropagation();
        $scope.saveLoading = false;
      }
    };

    $scope.viewSingle = function (page) {
      $location.path('/website/pages/').search({pagehandle: page.handle});
    };

    $scope.viewSimpleSiteBuilderSingle = function (page) {
      $location.path('/website/site-builder/pages/' + page._id);
    };

    $scope.filterScreenshot = {};

    $scope.pageScreenshotOptions = [{
      name: 'Screenshot',
      value: true
    }, {
      name: 'No Screenshot',
      value: false
    }];

    /*
     * @triggerInput
     * - trigger the hidden input to trick smart table into activating filter
     */

    $scope.triggerInput = function (element) {
      angular.element(element).trigger('input');
    };

    $scope.clearFilter = function (event, input) {
      $scope.filterScreenshot = {};
      $scope.triggerInput(input);
    };

    $scope.toggleHandle = function (val) {
      $scope.showChangeURL = val;
    };

    var repeater;
    $scope.pages = [];

    $scope.checkAndSetIndexPage = function(pages)
    {
        var indexExists = _.find(pages, function (page) {
          return page.handle === 'index';
        });
        if (!indexExists) {
          $scope.createpage.showhomepage = true;
          $scope.createpage.homepage = true;
          $scope.createpage.title = 'Home';
          $scope.createpage.handle = 'index';
        } else {
          $scope.createpage.homepage = false;
        }
    }

    $scope.getPages = function () {
      // $timeout.cancel(repeater);
      WebsiteService.getPages(function (returnedPages) {
        var pages = angular.copy(returnedPages);
        if ($scope.pages.length === 0) {
          $scope.checkAndSetIndexPage(pages);
          $scope.formatPages(pages, function (pagesArr) {
            $scope.pages = pagesArr;
            $scope.orderByFn();
            $scope.displayPages = true;
          });
        }
        if (pages.length > $scope.pages.length && $scope.pages.length !== 0) {
          var intersection = _.filter(pages, function (obj) {
            return !_.find($scope.pages, function (item) {
              return item._id === obj._id;
            });
          });
          $scope.formatPages(intersection, function (pagesArr) {
            _.each(pagesArr, function (_pages) {
              $scope.pages.push(_pages);
            });
            $scope.orderByFn();
            $scope.displayPages = true;
          });

        }
        // repeater = $timeout($scope.getPages, 30000);
      });
    };

    $scope.getPages();

    function resetSitebuilderPages(){
      SimpleSiteBuilderService.pages = null;
    }

  }]);
  app.filter('ignoreSsbPages', function () {
  return function (pages) {
    if (pages) {
      return pages.filter(function (page) {        
            return !page.ssb;          
      });
    }
  };
});
}(angular));

'use strict';
/**
 * controller for products
 */
(function(angular) {
    app.controller('PostsCtrl', ["$scope", "$location", "toaster", "$modal", "$filter", "WebsiteService", "$log", "postConstant", function($scope, $location, toaster, $modal, $filter, WebsiteService, $log, postConstant) {
        $scope.tableView = 'list';
        $scope.itemPerPage = 40;
        $scope.showPages = 15;
        $scope.post_statuses = postConstant.post_status.dp;
        $scope.filterpost = {};
        $scope.post = {};
        WebsiteService.getPosts(function(posts) {
            var postsArr = [];
            for (var key in posts) {
                if (posts.hasOwnProperty(key)) {
                    var iPost = posts[key];

                    iPost.hasPhoto = false;
                    if(iPost.featured_image) {
                        iPost.hasPhoto = true;
                    }

                    postsArr.push(iPost);
                }
            }
            $scope.posts = postsArr;
            $scope.orderByFn();
            $scope.showPosts = true;
            //$log.debug($scope.posts);
        });

        //get website
        WebsiteService.getWebsite(function(website) {
            $scope.website = website;
        })

        $scope.orderByFn = function()
        {
            $scope.posts = $filter('orderBy')($scope.posts, 'modified.date', true);
        }
        
        $scope.getters = {
            created: function (value) {
                return value.created.date;
            },
            modified: function (value) {
                return value.modified.date;
            }
        };


        $scope.triggerInput = function(element) {
            angular.element(element).trigger('input');
        };

        $scope.filterPosts = {};

        $scope.clearFilter = function(event, input, filter) {
            $scope.filterPosts[filter] = {};
            $scope.triggerInput(input);
        };

        $scope.postsFeaturedImageOptions = [{
            name: 'Photo',
            value: true
        }, {
            name: 'No Photo',
            value: false
        }];

        $scope.$watch('post.post_title', function(newValue, oldValue) {
            if (newValue) {
                $scope.post.post_url = $filter('slugify')(newValue);
            }
        });

        $scope.$watch('post.post_url', function(newValue, oldValue) {
            if (newValue) {
                $scope.post.post_url = $filter('slugify')(newValue);
            }
        });

        $scope.createPostValidated = false;
          $scope.validateCreatePost = function(post, restrict) {
            console.log('post ', post);
            if (!post || !post.post_title || post.post_title == '') {
              $scope.postTitleError = true
            } else {              
              $scope.postTitleError = false
            }
            if (!post || !post.post_author || post.post_author == '') {
              $scope.postAuthorError = true
            } else {
              $scope.postAuthorError = false
            }
            if (!post || !post.post_url || post.post_url == '') {
              $scope.postUrlError = true
            } else {
              $scope.postUrlError = false
            }
            if (post && post.post_title && post.post_title != '' && post.post_author && post.post_author != '' && post.post_url && post.post_url != '') {
              $scope.createPostValidated = true;
            } else
                $scope.createPostValidated = false;
          };

        $scope.openPostModal = function(size) {
            $scope.modalInstance = $modal.open({
                templateUrl: 'new-post-modal',
                size: size,
                keyboard: false,
                backdrop: 'static',
                scope: $scope
            });
        };

        $scope.cancel = function() {
            $scope.modalInstance.close();
        };

        $scope.createPost = function(postData) {
            $scope.saveLoading = true;
            $scope.validateCreatePost(postData, true);
            console.log('$scope.createPostValidated ', $scope.createPostValidated);
            if (!$scope.createPostValidated) {
                $scope.saveLoading = false;
                return false;
            }
           
            postData.websiteId = $scope.website._id;
            WebsiteService.getSinglePost(postData.post_url, function (data) {
                if (data && data._id) {
                    $scope.saveLoading = false;
                    toaster.pop('error', "Post URL " + postData.post_url, "Already exists");
                }
                else
                    WebsiteService.createPost($scope.blogId || -1, postData, function(data) {
                      toaster.pop('success', "Post Created", "The " + data.post_title + " post was created successfully.");
                      $scope.minRequirements = true;
                      $scope.cancel();
                      $scope.posts.unshift(data);
                      $scope.displayedPosts.unshift(data);
                      $scope.saveLoading = false;
                      $scope.post = {};
                    })
            })
        };

        $scope.viewSingle = function(post) {
            $location.path('/website/posts/').search({posthandle: post.post_url});
        };

        $scope.goToPage = function(page) {
            $location.path('/website/pages/').search({pagehandle: page});
        };

        /*
         * @clear
         * - clear the filter box to bring back original list
         */
        $scope.clear = function ($event, elem) {
          $event.stopPropagation();
          $scope.filterpost.selected = null;
          $scope.triggerInput(elem);
        };
    }]);
})(angular);

'use strict';
/*global app, moment, angular, window*/
/*jslint unparam:true*/
(function (angular) {
    app.controller('ProductsCtrl', ["$scope", "$modal", "$window", "AccountService", "ProductService", "$filter", "productConstant", "ipCookie", "$location", function ($scope, $modal, $window, AccountService, ProductService, $filter, ProductConstant, ipCookie, $location) {
        $scope.tableView = 'list';
        $scope.itemPerPage = 100;
        $scope.showPages = 15;
        $scope.newProduct = {
            status: 'inactive',
            allowAddOns: true
        };
        $scope.sortFields = {'modified.date': -1};

        console.log('ProductConstant.product_types.dp ', ProductConstant.product_types.dp);
        $scope.productTypeOptions = ProductConstant.product_types.dp;

        $scope.checkPaymentAccountExistsFn = function (cb) {
            AccountService.getAccount(function (account) {
                var stripe = _.find(account.credentials, function (cred) {
                    return cred.type === 'stripe';
                });
                $scope.stripeAccountExist = stripe;
                var paypal = account.commerceSettings.paypal;

                if (cb && (stripe || paypal)) {
                    cb(true);
                } else {
                    cb(false);
                }
            });
        };

        $scope.checkPaymentAccountExistsFn(function (value) {
            if (value) {
                ProductService.getProductsWithSort($scope.sortFields, function (products) {
                    $scope.products = products;
                    $scope.showProducts = true;
                    $scope.noPaymentAccount = false;
                });
            } else {
                $scope.noPaymentAccount = true;
            }
        });

        $scope.openProductModal = function (size) {
            $scope.modalInstance = $modal.open({
                templateUrl: 'new-product-modal',
                size: size,
                keyboard: false,
                backdrop: 'static',
                scope: $scope
            });
        };

        $scope.openImportModal = function (size) {
            $scope.modalInstance = $modal.open({
                templateUrl: 'import-product-modal',
                size: size,
                keyboard: false,
                backdrop: 'static',
                scope: $scope
            });
        };

        $scope.cancel = function () {
            $scope.modalInstance.close();
        };

        $scope.addProduct = function () {
            $scope.saveLoading = true;
            ProductService.postProduct($scope.newProduct, function (product) {
                $scope.displayedProducts.unshift(product);
                $scope.products.unshift(product);
                $scope.modalInstance.close();
                $scope.newProduct = {};
                $scope.minRequirements = true;
                $scope.saveLoading = false;
            });
        };

        $scope.viewSingleProduct = function (product) {
            $location.path('/commerce/products/' + product._id);
        };

        $scope.formatStatus = function (status) {
            var formattedStatus = ' -- ';
            if (status) {
                var matchingStatus = _.findWhere($scope.productStatusTypes, {
                    data: status
                });
                if (matchingStatus) {
                    formattedStatus = matchingStatus.label;
                }
            }

            return formattedStatus;
        };

        /*
         * @clearFilter
         * - clear the filter for the status when the red X is clicked
         */

        $scope.filterProduct = {};

        $scope.clearFilter = function (event, input, filter) {
            $scope.filterProduct[filter] = {};
            $scope.triggerInput(input, false);
        };

        $scope.productImageTypes = [
            {
                label: "Image",
                data: "true"
            },
            {
                label: "No Image",
                data: "false"
            }
        ];

        ProductService.productStatusTypes(function (types) {
            $scope.productStatusTypes = types;
        });
        /*
         * @triggerInput
         * - trigger the hidden input to trick smart table into activating filter
         */

        $scope.triggerInput = function (element, custom) {
            angular.element(element).trigger('input');
        };

        $scope.resizeGrid = function (filtered) {
            $timeout(function () {
                if (!$scope.inserted) {
                    $scope.inserted = true;
                    if ($("tr.product-item").length) {
                        $scope.maxProductHeight = Math.max.apply(null, $("tr.product-item").map(function () {
                            return $(this).height();
                        }).get());
                        $scope.maxProductHeight = $scope.maxProductHeight + 3;
                    }
                }
                $("tr.product-item").css("min-height", $scope.maxProductHeight);
            }, 500)
        }

        $scope.inserted = false;
        $scope.$watch('tableView', function (newValue, oldValue) {
            if (newValue == "grid") {
                $scope.resizeGrid();
            }
        });

        $scope.$watch('displayedProducts', function (newValue, oldValue) {
            if (newValue && $scope.tableView === 'grid') {
                $scope.resizeGrid();
            }
        });

        /*
         * @socailRedirect
         * redirect users to social network and setting up a temporary cookie
         */

        $scope.currentHost = $window.location.host;
        $scope.redirectUrl = '/admin/commerce/products';

        $scope.socailRedirect = function (socialAccount) {
            var account_cookie = ipCookie("socialAccount");
            //Set the amount of time a socialAccount should last.
            var expireTime = new Date();
            expireTime.setMinutes(expireTime.getMinutes() + 10);
            if (account_cookie === undefined) {
                var cookieValue = {
                    "socialAccount": socialAccount,
                    "redirectTo": '/commerce/products'
                };
                ipCookie("socialAccount", cookieValue, {
                    expires: expireTime,
                    path: "/"
                });
            } else {
                //If it does exist, delete it and set a new one with new expiration time
                ipCookie.remove("socialAccount", {
                    path: "/"
                });
                var cookieValue = {
                    "socialAccount": socialAccount,
                    "redirectTo": '/commerce/products'
                };
                ipCookie("socialAccount", cookieValue, {
                    expires: expireTime,
                    path: "/"
                });
            }
            var _redirectUrl = '/redirect/?next=' + $scope.currentHost + '/' + socialAccount.toLowerCase() + '/connect/';
            if (socialAccount === 'Paypal') {
                //$state.go('app.support.helptopics');
                //return;
                _redirectUrl = '/admin/#/support/help-topics?title=adding-paypal-as-an-payment-option'
            }

            $window.location = _redirectUrl;
        };

        $scope.sortFn = function (field) {
            if ($scope.sortFields[field]) {
                if ($scope.sortFields[field] == 1) {
                    $scope.sortFields[field] = -1;
                } else {
                    $scope.sortFields[field] = 1;
                }
            } else {
                $scope.sortFields = {};
                $scope.sortFields[field] = 1;
            }
            ProductService.getProductsWithSort($scope.sortFields, function (products) {
                $scope.products = products;
            });
        };
    }]);
}(angular));

'use strict';
/*global app, moment, angular, window*/
/*jslint unparam:true*/
(function (angular) {
  app.controller('ProductsDetailCtrl', ["$scope", "$modal", "$timeout", 'editableOptions', "$state", "$stateParams", "$q", "CommonService", "ProductService", "PaymentService", "UserService", "AccountService", "WebsiteService",  "toaster", "SweetAlert", "productConstant", function ($scope, $modal, $timeout, editableOptions, $state, $stateParams, $q, CommonService, ProductService, PaymentService, UserService, AccountService, WebsiteService, toaster, SweetAlert, ProductConstant) {


    /*
     * set editor theme
     */
    editableOptions.theme = 'bs3';
    $scope.isProduct = true;
    $scope.existingEmail = {};

    $scope.isProductDirty = {
      dirty : false
    }

    $scope.slickConfig = {
        infinite: false,
        dots: false,
        slidesToShow: 3,
        slidesToScroll: 1,
        focusOnSelect: true
    };

    $scope.slickSlideIndex = 0;
    $scope.isMediaSingleSelect = false;

    /*
     * @openModal
     * -
     */

    $scope.openModal = function (modal) {
      $scope.modalInstance = $modal.open({
        templateUrl: modal,
        keyboard: false,
        backdrop: 'static',
        scope: $scope
      });
    };

    /*
     * @openMediaModal
     * -
     */

    $scope.openMediaModal = function () {
      $scope.showInsert = true;
      $scope.modalInstance = $modal.open({
        templateUrl: 'media-modal',
        controller: 'MediaModalCtrl',
        size: 'lg',
        keyboard: false,
        backdrop: 'static',
        resolve: {
          showInsert: function () {
            return $scope.showInsert;
          },
          insertMedia: function () {
            return $scope.insertMedia;
          },
          isSingleSelect: function () {
              return $scope.isMediaSingleSelect;
          }
        }
      });
    };

    /*
     * @closeModal
     * -
     */

    $scope.closeModal = function (cancel) {
      if (cancel === true) {
        $scope.editCancelFn();
      } else {
        $scope.modalInstance.close();
      }
    };

    UserService.getUser(function (user) {
      $scope.user = user;
    });

    $scope.pickerOptions = {
      startDate: moment().subtract(29, 'days').toDate(),
      endDate: new Date(),
      format: 'YYYY-MM-DD',
      opens: 'left',
      ranges: {
        'Today': [moment(), moment()],
        'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
        'Last 7 Days': [moment().subtract(6, 'days'), moment()],
        'Last 30 Days': [moment().subtract(29, 'days'), moment()],
        'This Month': [moment().startOf('month'), moment().endOf('month')],
        'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
      }
    };

    $scope.initDatePicker = function(){
      $timeout(function() {
        $scope.myform.$dirty = false;
      }, 0);
    }

    $scope.selectedDate = {};
    var startDate =  moment();
    var endDate = moment().add(6, 'days');
    $scope.selectedDate.range = {
        startDate: new Date(startDate),
        endDate: new Date(endDate)
    };

    var setProductEmailSettings = function(product){
      product.emailSettings = {
          "emailId": "",
          "offset": "", //in minutes
          "fromEmail": "",
          "fromName": '',
          "replyTo": '',
          "bcc": '',
          "subject": '',
          "vars": [],
          "sendAt": {}
        }
    }

     /*
     * @getProduct
     * - get single product based on stateparams
     */
    $scope.getProduct = function(){
      var promise = ProductService.getSingleProduct($stateParams.productId, function (product) {
        console.log(product);
        var startDate = product.sale_date_from;
        var endDate = product.sale_date_to;
        if (!startDate && !endDate) {
          startDate = moment();
          endDate = moment().add(6, 'days');
        }
        $scope.selectedDate.range = {
          startDate: new Date(startDate),
          endDate: new Date(endDate)
        };
        product.regular_price = parseFloat(product.regular_price);
        $scope.product = product;
        $scope.originalIcon = product.icon;
        if (product.assets && product.assets.length) {
            $scope.isMediaSingleSelect = true;
        }
        console.log('product ', product);
        var p_icon = $scope.product.icon;
        if(p_icon && !p_icon.indexOf("fa-") == 0)
          p_icon = "fa-cube";

        angular.element('#convert').iconpicker({
          iconset: 'fontawesome',
          icon: p_icon,
          rows: 5,
          cols: 5,
          placement: 'right'
        });

        $scope.getProductTags();

        if (!$scope.product.attributes) {
          $scope.product.attributes = [{
            'name': '',
            'values': []
          }];
        }

        if ($scope.product.downloads.length <= 0) {
          $scope.product.downloads = [{
            'id': Math.uuid(8),
            'name': '',
            'file': ''
          }];
        }

        var promises = [];
        if ($scope.product.product_attributes.stripePlans) {
          $scope.product.product_attributes.stripePlans.forEach(function (value, index) {
            promises.push(PaymentService.getPlanPromise(value.id));
            productPlanStatus[value.id] = value.active;
            productPlanSignupFee[value.id] = value.signup_fee;
          });
          $q.all(promises)
            .then(function (data) {
              data.forEach(function (value, index) {
                value.data.active = productPlanStatus[value.data.id];
                value.data.signup_fee = productPlanSignupFee[value.data.id];
                $scope.plans.push(value.data);
              });
            })
            .catch(function (err) {
              console.error(err);
            });
        }
      });
      return promise;
    }
    $scope.product_tags = [];
    var productPlanStatus = {};
    var productPlanSignupFee = {};

    /*
     * @insertMedia
     * - insert media function
     */

    $scope.insertMedia = function (assets) {
        if ($scope.isMediaSingleSelect == false) {
            var urls = _.pluck(assets, 'url');
        }
      if ($scope.currentDownload) {
        console.log('download');
        if ($scope.isMediaSingleSelect == false) {
            $scope.currentDownload.file = urls[0];
        } else {
            $scope.currentDownload.file = assets.url;
        }
      } else {
        console.log('product image');
        if ($scope.isMediaSingleSelect == false) {
            $scope.product.icon = urls[0];
            $scope.product.assets = urls;
        } else {
            $scope.product.icon = assets.url;
            $scope.product.assets[$scope.slickSlideIndex] = assets.url;
        }
      }
      $scope.setDownloadId();
    };

    $scope.setDownloadId = function (download) {
      $scope.currentDownload = download;
    };


    /*
     * @addAttribute
     * - add an attribute
     */

    $scope.addAttribute = function () {
      console.log('addAttribute');
      var tempAttribute = {
        "name": "",
        "values": []
      };
      $scope.product.attributes.push(tempAttribute);
      toaster.pop('success', 'New attribute has been added.');
    };

    /*
     * @addDownload
     * - add a download
     */

    $scope.addDownload = function () {
      console.log('addDownload');
      var tempDownload = {
        'id': Math.uuid(8),
        'name': '',
        'file': ''
      };

      $scope.product.downloads.push(tempDownload);
      toaster.pop('success', 'New download has been added.');
    };

    /*
     * @removeDownload
     * - remove a download
     */

    $scope.removeDownload = function (downloadId) {
      console.log('removeDownload');
      var _downloads = _.filter($scope.product.downloads, function (download) {
        return download.id !== downloadId;
      });

      $scope.product.downloads = _downloads;
      toaster.pop('warning', 'Download has been removed.');
    };

    /*
     * @removeAttribute
     * - remove an attribute
     */

    $scope.removeAttribute = function (index) {
      var formattedAttributes = [];
      var attributeRemoved = [];
      _.each($scope.product.attributes, function (attribute, i) {
        if (i !== index) {
          formattedAttributes.push(attribute);
        } else {
          attributeRemoved.push(attribute);
        }
      });
      $scope.product.attributes = formattedAttributes;
      var name;
      if (attributeRemoved[0].name.length > 0) {
        name = attributeRemoved[0].name;
      } else {
        name = 'Empty Attribute';

      }
      toaster.pop('error', name + ' attribute has been removed.');
    };

    $scope.ldloading = {};
    $scope.clickBtn = function (style) {
      $scope.ldloading[style.replace('-', '_')] = true;
      $timeout(function () {
        $scope.ldloading[style.replace('-', '_')] = false;
      }, 2000);
    };

    /*
     * @validateProduct
     * - validate the product before saved
     */

    $scope.validateProduct = function () {
      var _isValid = true;
      if (!$scope.product.name) {
        _isValid = false;
        $scope.productNameError = true;
      }
      if (!$scope.product.type) {
        _isValid = false;
        $scope.productTypeError = true;
      }
      return _isValid;
    };

     /*
     * @setEmail
     * - set email-related data
     */
    $scope.setEmail = function(newEmail) {
      if (newEmail) {
        var stepSettings = $scope.product.emailSettings;
        stepSettings.emailId = newEmail._id;
        stepSettings.fromEmail = newEmail.fromEmail;
        stepSettings.fromName = newEmail.fromName;
        stepSettings.replyTo = newEmail.replyTo;
        stepSettings.bcc = newEmail.bcc;
        stepSettings.subject = newEmail.subject;
      }
    };

    /*
     * @saveProductFn
     * - save product function
     */

    $scope.saveLoading = false;

    $scope.saveProductFn = function () {
      $scope.pageSaving = true;
      console.log('$scope.selectedDate ', $scope.selectedDate);
      if ($scope.selectedDate.range) {
        $scope.product.sale_date_from = new Date($scope.selectedDate.range.startDate).toISOString();
        $scope.product.sale_date_to = new Date($scope.selectedDate.range.endDate).toISOString();
      }
      $scope.setProductTags();
      if ($scope.validateProduct()) {
        $scope.saveLoading = true;
        if($scope.product.fulfillment_email){
          if(!$scope.emailToSend.title){
            toaster.pop('warning', 'Warning', "Email title can't not blank");
            $scope.saveLoading = false;
            return;
          }
          if($scope.emailTitleExists && $scope.selectedEmail.type === "new"){
            toaster.pop('warning', 'Warning', "Email title already exists");
            $scope.saveLoading = false;
            return;
          }

          var stepSettings = $scope.product.emailSettings;
          if (!stepSettings.emailId || (angular.isDefined($scope.existingEmail.replace) && !$scope.existingEmail.replace)) {
            $scope.emailToSend.productId = $scope.product._id;
            WebsiteService.createEmail($scope.emailToSend, function (newEmail) {
              $scope.isNewEmailObj = true;
              $scope.updateProductEmail(newEmail);
            });
          } else {
            $scope.isNewEmailObj = false;
            $scope.updateProductEmail($scope.emailToSend);
          }
        }
        else{
          $scope.saveProduct();
        }
      }
    };

    $scope.saveProduct = function(){
        ProductService.saveProduct($scope.product, function (product) {
          //format variation attributes
          $scope.product = product;
          angular.copy($scope.product, $scope.originalProduct);
          $scope.product_tags = [];
          $scope.getProductTags();
          if($scope.product.fulfillment_email){
            $scope.getEmails();
          }
          $scope.saveLoading = false;
          toaster.pop('success', 'Product Saved.');
          $scope.pageSaving = false;
        });
    }


    $scope.updateProductEmail = function (newEmail) {
      //set/format email and send date
      $scope.setEmail(newEmail);
      $scope.updatedEmail = angular.copy(newEmail);

      //update product email

      if($scope.updatedEmail && $scope.existingEmail.replace || ($scope.product && $scope.emailToSend.productId && $scope.emailToSend.productId === $scope.product._id)){
        WebsiteService.updateEmail($scope.updatedEmail, function(data, error) {
          $scope.saveProduct();
        });
      }
      else{
        $scope.saveProduct();
      }
    };

    $scope.removeVariation = function () {
      console.log('removeVariation');
    };


    ProductService.productStatusTypes(function(types) {
        $scope.productStatusOptions = types;
    });

    $scope.productTypes = ProductConstant.product_types;

    /*
     * @convert:iconpicker
     * - icon picker for product image replacement
     */


    $('#convert').on('change', function (e) {
      if ($scope.product && !$scope.product.is_image) {
        $scope.product.icon = e.icon;
      }
    });

    $scope.newSubscription = {
      planId: CommonService.generateUniqueAlphaNumericShort(),
      interval: 'week',
      interval_count: 1
    };

    $scope.plans = [];

    $scope.addSubscriptionFn = function (newSubscription, showToaster) {
      console.log('newSubscription ', newSubscription);
      if (!$scope.stripeAccountExist) {
        toaster.pop('error', 'Need to add a stripe account first.');
        $state.go('account');
      }
      $scope.newSubscription = newSubscription;
      var subscription_fee = $scope.signup_fee;
      $scope.newSubscription.amount = $scope.newSubscription.amount * 100;
      PaymentService.postCreatePlan($scope.newSubscription, function (subscription) {
        $scope.signup_fee = subscription_fee;
        subscription.signup_fee = subscription_fee;
        $scope.plans.push(subscription);
        var price = parseInt(subscription.amount, 10);
        if ($scope.product.product_attributes.stripePlans) {
          $scope.product.product_attributes.stripePlans.push({
            id: subscription.id,
            active: true,
            signup_fee: subscription_fee,
            price: price,
          });
        } else {
          $scope.product.product_attributes.stripePlans = [{
            id: subscription.id,
            active: true,
            signup_fee: subscription_fee,
            price: price,
          }];
        }


        productPlanStatus[subscription.id] = true;
        productPlanSignupFee[subscription.id] = $scope.signup_fee;
        $scope.saveProductFn();

        $scope.newSubscription = {
          planId: CommonService.generateUniqueAlphaNumericShort(),
          interval: 'week',
          interval_count: 1
        };
        $scope.signup_fee = null;
        $scope.closeModal('add-subscription-modal');
      }, showToaster);
    };

    $scope.planEditFn = function (planId) {
      console.log('planEditFn');
      $scope.editingPlan = true;
      $scope.openModal('add-subscription-modal');
      $scope.plans.forEach(function (value, index) {
        if (value.id === planId) {
          $scope.newSubscription = angular.copy(value);
          $scope.newSubscription.amount = $scope.newSubscription.amount / 100;
          $scope.newSubscription.planId = value.id;
          $scope.signup_fee = productPlanSignupFee[value.id];
        }
      });
    };

    $scope.editCancelFn = function () {
      $scope.editingPlan = false;
      $scope.saveLoadingPlan = false;
      $scope.signup_fee = null;
      $scope.newSubscription = {
        planId: CommonService.generateUniqueAlphaNumericShort(),
        interval: 'week',
        interval_count: 1
      };
      $scope.closeModal('add-subscription-modal');
    };

    $scope.planDeleteFn = function (planId, showToast, saveProduct, func) {
      var fn = func || false;
      PaymentService.deletePlan(planId, showToast, function () {
        $scope.plans.forEach(function (value, index) {
          if (value.id === planId) {
            $scope.plans.splice(index, 1);
          }
        });

        $scope.product.product_attributes.stripePlans.forEach(function (value, index) {
          if (value.id === planId) {
            $scope.product.product_attributes.stripePlans.splice(index, 1);
          }
        });

        if (saveProduct) {
          if (!$scope.plans.length) {
            $scope.product.status = 'inactive';
          }
          $scope.saveProductFn();
        }

        if (fn) {
          fn();
        }
      }, true);
    };

    $scope.editSubscriptionFn = function (newSubscription) {
      $scope.saveLoadingPlan = true;
      $scope.planDeleteFn(newSubscription.planId, false, false, function () {
        $scope.addSubscriptionFn(newSubscription, false);
        $scope.editCancelFn();
        toaster.pop('success', 'Plan updated.');
      });
    };

    $scope.getProductTags = function () {
      if ($scope.product.tags) {
        $scope.product.tags.forEach(function (v, i) {
          $scope.product_tags.push({
            text: v
          });
        });
      }
      $scope.originalTags = angular.copy($scope.product_tags);
    };

    $scope.setProductTags = function () {
      $scope.product.tags = [];
      $scope.product_tags.forEach(function (v, i) {
        if (v.text) {
          $scope.product.tags.push(v.text);
        }
      });
    };

    /*
     * @checkSalePrice
     * - check the sale to price to ensure its not more than the price
     */

    $scope.checkSalePrice = function () {
      console.log('sales_price ', $scope.product.sales_price);
    };

    /*
     * @deleteProductFn
     * -
     */

    $scope.deleteProductFn = function (product) {
      SweetAlert.swal({
        title: "Are you sure?",
        text: "Do you want to delete this product?",
        type: "warning",
        showCancelButton: true,
        confirmButtonColor: "#DD6B55",
        confirmButtonText: "Yes, delete it!",
        cancelButtonText: "No, do not delete it!",
        closeOnConfirm: true,
        closeOnCancel: true
      }, function (isConfirm) {
        if (isConfirm) {
          ProductService.deleteProduct(product._id, function () {
            toaster.pop('warning', 'Product Deleted.');
            $scope.originalProduct = angular.copy($scope.product);
            $state.go('app.commerce.products');
          });
        }
      });
    };

    $scope.setDefault = function(){
      if ($scope.product.is_image) {
        $scope.product.icon = $scope.originalIcon ? $scope.originalIcon : $scope.product.assets[0];
      } else {
        $scope.product.icon = 'fa-cube';
        angular.element('#convert').iconpicker('setIcon', 'fa-cube');
      }
    }

    function checkIfTagsChanged() {
      return !angular.equals($scope.originalTags, $scope.product_tags);
    }

    $scope.checkIfDirty = function(){
      var isDirty = false;
      if(($scope.originalProduct && !angular.equals($scope.originalProduct, $scope.product)) || checkIfTagsChanged())
        isDirty = true;
      return isDirty;
    }
    $scope.resetDirty = function(){
      $scope.originalProduct = null;
      $scope.product = null;
      $scope.originalTags = null;
    }


    // Email fulfillment related

    /*
     * @defaultNewEmail
     * - default new email to show for initial design unless user selects template
     */
    $scope.emailToSend = {
      "title": "",
      "type": "email",
      "subject": "Edit Subject",
      "fromName": "",
      "fromEmail": "",
      "replyTo": "",
      "bcc": "",
      "components": [{
        "_id": CommonService.generateUniqueAlphaNumericShort(),
        "anchor": CommonService.generateUniqueAlphaNumericShort(),
        "type": "email-header",
        "version": 1,
        "txtcolor": "#888888",
        "logo": "<h2>Logo Here</h2>",
        // "title": "<h2 class='center'>New Email</h2>",
        // "subtitle": "subtitle",
        // "text": "This is your new email",

        "bg": {
          "img": {
            "url": "",
            "width": null,
            "height": null,
            "parallax": false,
            "blur": false
          },
          "color": ""
        },
        "visibility": true
      },
      {
        "_id": CommonService.generateUniqueAlphaNumericShort(),
        "anchor": CommonService.generateUniqueAlphaNumericShort(),
        "type": "email-1-col",
        "version": 1,
        "txtcolor": "#888888",
        // "logo": "<h2>Logo Here</h2>",
        "title": '<h2 style="text-align:center;">One Column Layout Section</h2>',
        // "subtitle": "subtitle",
        "text": '<p style="text-align:center;">This is a single column content section.</p>',

        "bg": {
          "img": {
            "url": "",
            "width": null,
            "height": null,
            "parallax": false,
            "blur": false
          },
          "color": ""
        },
        "visibility": true
      },
      {
        "_id": CommonService.generateUniqueAlphaNumericShort(),
        "anchor": CommonService.generateUniqueAlphaNumericShort(),
        "type": "email-2-col",
        "version": 1,
        "txtcolor": "#888888",
        "title": '<h2 style="text-align:center;">Two Column Layout Section</h2>',
        // "subtitle": "subtitle",
        "text1": '<p style="text-align:center;">This is column 1.</p>',
        "text2": '<p style="text-align:center;">This is column 2.</p>',

        "bg": {
          "img": {
            "url": "",
            "width": null,
            "height": null,
            "parallax": false,
            "blur": false
          },
          "color": ""
        },
        "visibility": true
      },
      {
        "_id": CommonService.generateUniqueAlphaNumericShort(),
        "anchor": CommonService.generateUniqueAlphaNumericShort(),
        "type": "email-3-col",
        "version": 1,
        "txtcolor": "#888888",
        "title": '<h2 style="text-align:center;">Three Column Layout Section</h2>',
        // "subtitle": "subtitle",
        "text1": '<p style="text-align:center;">This is column 1.</p>',
        "text2": '<p style="text-align:center;">This is column 2.</p>',
        "text3": '<p style="text-align:center;">This is column 3.</p>',

        "bg": {
          "img": {
            "url": "",
            "width": null,
            "height": null,
            "parallax": false,
            "blur": false
          },
          "color": ""
        },
        "visibility": true
      },
      {
        "_id": CommonService.generateUniqueAlphaNumericShort(),
        "anchor": CommonService.generateUniqueAlphaNumericShort(),
        "type": "email-footer",
        "version": 1,
        "txtcolor": "#888888",
        // "logo": "<h2>Logo Here</h2>",
        // "title": "<h2 class='center'>New Email</h2>",
        // "subtitle": "subtitle",
        "text": "This is an email footer.",

        "bg": {
          "img": {
            "url": "",
            "width": null,
            "height": null,
            "parallax": false,
            "blur": false
          },
          "color": ""
        },
        "visibility": true
      }]
    };

    $scope.emailToSendCopy = angular.copy($scope.emailToSend);

    /*
     * @getAccount
     * - get account and autofill new email details
     */

    $scope.getAccount = function() {
      var promise = AccountService.getAccount(function (_account) {
        $scope.account = _account;
        $scope.stripeAccountExist = false;
        $scope.paypalAccountExist = $scope.account.commerceSettings.paypal;
        $scope.account.credentials.forEach(function(cred, index) {
            if (cred.type == 'stripe') {
                $scope.stripeAccountExist = true;
            }
        });
        $scope.setBusinessDetails();
        $scope.actualEmailToSend = angular.copy($scope.emailToSend);
      });
      return promise;
    };


    /*
     * @setBusinessDetails
     * - set any filled out info from business data
     */
    $scope.setBusinessDetails = function(update) {
      var account = $scope.account;
      var logo = account.business.logo || '<h2>Logo Here</h2>';
      var businessName = account.business.name || 'Edit name';
      var fromEmail = account.business.emails[0].email || 'Edit email';

      if ($scope.emailToSend) {
        if (logo.indexOf('http') != -1 && $scope.emailToSend.components[0].logo == '<h2>Logo Here</h2>') {
          $scope.emailToSend.components[0].logo = '<img src="' + account.business.logo + '"/>';
          $scope.emailToSendCopy.components[0].logo = '<img src="' + account.business.logo + '"/>';
        }
        if (businessName && ($scope.emailToSend.fromName == '' || update)) {
          $scope.emailToSend.fromName = account.business.name;
          $scope.emailToSendCopy.fromName = account.business.name;
        }
        if (fromEmail && ($scope.emailToSend.fromEmail == '' || update)) {
          $scope.emailToSend.fromEmail = account.business.emails[0].email;
          $scope.emailToSendCopy.fromEmail = account.business.emails[0].email;
        }
        if (fromEmail && ($scope.emailToSend.replyTo == '' || update)) {
          $scope.emailToSend.replyTo = account.business.emails[0].email;
          $scope.emailToSendCopy.replyTo = account.business.emails[0].email;
        }
      }
    };
    $scope.emails = [];
    $scope.selectedEmail = {
      type: 'new'
    };

    /*
     * @setEmailstoSendDetails
     *
     */
    $scope.setEmailDefaults = function (_name) {
      $scope.emailToSend.title = _name + ' Email';
      $scope.emailToSend.subject = _name;
      $scope.checkEmailTitle($scope.emailToSend.title);
    };



     /*
     * @changeCurrentEmail
     * - set selected email
     */
    $scope.changeCurrentEmail = function (selectedEmail) {
      $scope.emailToSend = selectedEmail;
      if((!$scope.emailToSend.productId || ($scope.product && $scope.emailToSend.productId !== $scope.product._id)))
        $scope.emailToSend.bcc = ""
      $scope.confirmOverrideExistingEmails();
    };


    $scope.getEmails = function() {
      if(!$scope.product.emailSettings){
        setProductEmailSettings($scope.product);
      }
      if($scope.product.fulfillment_email && $scope.product.emailSettings.emailId)
        $scope.selectedEmail = {
          type: 'template'
        };

      var promise = WebsiteService.getEmails(false, function (_emails) {
        var emailId = $scope.product.emailSettings.emailId;
        var matchedEmail = null;
        var emailMatch = function(email) {
          return email._id === emailId;
        };

        $scope.emails = angular.copy(_emails);
        $scope.originalEmails = angular.copy(_emails);

        $scope.setEmailDefaults($scope.product.name || '');

        matchedEmail = $scope.emails.filter(emailMatch)[0];
        if (emailId && matchedEmail) {
          $scope.emailToSend = matchedEmail;
          $scope.originalEmailToSend = angular.copy($scope.emailToSend);

        } else {
          console.log('email not found');
        }
        $scope.emailToSendPrevious = $scope.emails[0];
      });
      $scope.originalProduct = angular.copy($scope.product);
      return promise;
    };

    /*
     * @checkEmailTitle
     * - check email title doesnt exist already
     */
    $scope.checkEmailTitle = function (_name) {
      if ($scope.selectedEmail.type === 'new') {
        $scope.checkingEmailTitle = true;
        var exists = _.find($scope.originalEmails, function(email){
          return email.title && email.title.toLowerCase() == _name.toLowerCase();
        });
        $scope.emailTitleExists = exists ? true : false;
      } else {
        $scope.emailTitleExists = false;
      }

      $scope.emailTitleChecked = true;
      $scope.checkingEmailTitle = false;
    };

    /*
     * @clearEmail
     * - callback for toggle on radio input "New Email" vs. "Template"
     */
    $scope.clearEmail = function (newEmail) {
      $scope.checkingEmailTitle = false;
      if (newEmail) {
        $scope.emailToSendPrevious = angular.copy($scope.emailToSend);
        $scope.setBusinessDetails(newEmail);
        $scope.emailToSend = $scope.emailToSendCopy;
        $scope.emailToSend.title = $scope.product.name + ' Email';
        $scope.emailToSend.bcc = "";
        $scope.emailToSend.subject = $scope.product.name;
        $scope.checkEmailTitle($scope.emailToSend.title);
        if($scope.product && $scope.product.emailSettings)
          $scope.product.emailSettings.emailId = null;
      } else {
        $scope.setBusinessDetails();
        $scope.emailToSend = $scope.emailToSendPrevious;
        if($scope.product.emailSettings && !$scope.product.emailSettings.emailId && $scope.emailToSendPrevious)
          $scope.product.emailSettings.emailId = $scope.emailToSendPrevious._id
        $scope.actualEmailToSend = angular.copy($scope.emailToSend);
      }
    }


    $scope.confirmOverrideExistingEmails = function(){
      if((!$scope.emailToSend.productId || ($scope.product && $scope.emailToSend.productId !== $scope.product._id)) && $scope.selectedEmail.type != 'new'){
          SweetAlert.swal({
          title: "How would you like to use the selected email?",
          text: "You are saving changes to an email used by more than one product OR campaign. Do you wish to update the existing email (altering all products OR campaigns) or create and update a copy specific to this product?",
          type: "warning",
          showCancelButton: true,
          confirmButtonColor: "#DD6B55",
          confirmButtonText: "Save edits to existing email",
          cancelButtonText: "Create a copy",
          closeOnConfirm: true,
          closeOnCancel: true
        }, function (isConfirm) {
          if (isConfirm) {
            $timeout(function() {
              $scope.$apply(function () {
                $scope.isProductDirty.dirty = true;
                $scope.existingEmail.replace = true;
              })
            },0)

            if($scope.product.emailSettings && !$scope.product.emailSettings.emailId && $scope.emailToSendPrevious){
              $scope.product.emailSettings.emailId = $scope.emailToSendPrevious._id;
              $scope.emailToSend.title = $scope.emailToSendPrevious.title;
            }
            $scope.checkEmailTitle($scope.emailToSend.title);
          }
          else {
            $timeout(function() {
              $scope.$apply(function () {
                $scope.isProductDirty.dirty = true;
                $scope.existingEmail.replace = false;
              })
            },0)
            $scope.emailToSend.title = $scope.product.name + " " + moment().toDate().getTime();
            $scope.emailToSend.productId = null;
            $scope.selectedEmail.type = 'new';
            $scope.checkEmailTitle($scope.emailToSend.title);
          }
        })
      }
    }

    $scope.$watchGroup(['emailToSend.fromName', 'emailToSend.fromEmail', 'emailToSend.replyTo', 'emailToSend.bcc', 'emailToSend.subject'], function(newValue, oldValue){
       if(newValue && $scope.actualEmailToSend && !angular.equals($scope.actualEmailToSend, $scope.emailToSend) && !$scope.existingEmail.replace && $scope.selectedEmail.type != 'new'){
          $scope.confirmOverrideExistingEmails();
       }
    });

    $scope.setProductDirty = function(){
      if($scope.selectedEmail.type != 'new' && !$scope.existingEmail.replace){
        if(!$scope.isProductDirty.dirty){
          $timeout(function() {
            $scope.$apply(function () {
              $scope.isProductDirty.dirty = true;
              $scope.confirmOverrideExistingEmails();
            })
          },0)
        }
      }
    }

    CKEDITOR.on("instanceReady", function (ev) {
      ev.editor.on('key', function () {
        if(!$scope.isProductDirty.dirty){
          $scope.setProductDirty();
        }
      });
      ev.editor.on('change', function () {
        if(!$scope.isProductDirty.dirty){
          $scope.setProductDirty();
        }
      });
    })

    $scope.fullscreen = false;

    /*
     * @toggleFullscreen
     * -
     */
    $scope.toggleFullscreen = function () {
      $scope.transitionDone = false;
      if (!$scope.fullscreen) {
        $scope.fullscreen = true;
        $timeout(function () {
          $scope.transitionDone = true;
        }, 1000);
      } else {
        $scope.fullscreen = false;
        $timeout(function () {
          $scope.transitionDone = true;
        }, 1000);
      }
    };

    /*
     * @analyzeSubject
     * - email subject quality feedback
     */
    $scope.analyzeSubject = function (subject) {
      var subjectWords = subject.split(' ');
      var lowercaseSubjectWords = subject.toLowerCase().split(' ');
      var wordsToUse = ["freebie", "urgent", "breaking", "important", "alert", "thank you", "sneak peek", "alert", "daily", "free delivery", "cash", "quote", "save", "jokes", "promotional", "congratulations", "revision", "forecast", "snapshot", "token", "voluntary", "monthly", "deduction", "upgrade", "just", "content", "go", "wonderful"];
      var wordsNotToUse = ["free", "reminder", "canceled", "helping", "fundraising", "raffle", "fundraiser", "charity", "donate", "last chance", "breast cancer", "sign up", "help", "percent off", "newsletter", "report", "program", "half", "budget", "unlimited", "discount", "down", "sale", "suburbs", "decoder", "inland", "county", "wish", "forgotten", "thirds", "discussion", "romantic", "videos", "miss", "deals", "groovy", "conditions", "friday", "monday", "furry", "double", "volunteer", "learn"];

      var capitalized = true;
      var lessThan50Char = true;
      var lessThan10Words = true;
      var isAlphaNumeric = true;
      var containsWordToUse = true;
      var avoidsWordNotToUse = true;
      var moreThan4Words = true;
      var differentFromPreviousSubjects = true;

      _.each(subjectWords, function (word) {
        //All Words Capitalized
        if (word && word[0] !== word[0].toUpperCase()) {
          capitalized = false;
        }

        //does not include words to avoid
        if (wordsNotToUse.indexOf(word.toLowerCase()) >= 0) {
          avoidsWordNotToUse = false;
        }
      });

      //includes words to use
      if (_.intersection(lowercaseSubjectWords, wordsToUse).length <= 0) {
        containsWordToUse = false;
      }

      //Less than 50 characters
      if (subject.length > 49) {
        lessThan50Char = false;
      }

      //less than 10 words
      if (subjectWords.length > 9) {
        lessThan10Words = false;
      }

      //more than 4 words
      if (subjectWords.length < 4) {
        moreThan4Words = false;
      }

      if ($scope.emails && $scope.emails.length > 0) {
        //determine if previous subject emails are closely related by score
        var bestMatch = {
          value: '',
          percent: 0
        };

        var lowercaseSubject = subject.replace(new RegExp('[^a-zA-Z ]'), "").toLowerCase();
        _.each($scope.emails, function (email) {
          if (email.subject) {
            var lowercaseEmailSubject = email.subject.replace(new RegExp('[^a-zA-Z ]'), "").toLowerCase();
            var percentMatch = lowercaseSubject.score(lowercaseEmailSubject);
            if (bestMatch.percent < percentMatch) {
              bestMatch.value = email.subject;
              bestMatch.percent = percentMatch;
            }
          }
        });

        if (bestMatch.value && bestMatch.percent > 0.75) {
          differentFromPreviousSubjects = false;
          $scope.bestMatch = bestMatch;
        }
      }

      //No special characters except for question mark
      if (/^[a-zA-Z0-9- ]*$/.test(subject) === false) {
        isAlphaNumeric = false;
      }

      //TODO: contains personalization

      var percentRating = 100;
      var sixth = 12.5;
      var rulesBooleanArr = [capitalized, lessThan50Char, lessThan10Words, isAlphaNumeric, containsWordToUse, avoidsWordNotToUse, moreThan4Words, differentFromPreviousSubjects];
      _.each(rulesBooleanArr, function (rule) {
        if (rule === false) {
          percentRating = percentRating - sixth;
        }
      });

      $scope.subjectRules = {
        "capitalized": capitalized,
        "lessThan50Char": lessThan50Char,
        "lessThan10Words": lessThan10Words,
        "isAlphaNumeric": isAlphaNumeric,
        "containsWordToUse": containsWordToUse,
        "avoidsWordNotToUse": avoidsWordNotToUse,
        "moreThan4Words": moreThan4Words,
        "differentFromPreviousSubjects": differentFromPreviousSubjects
      };

      $scope.subjectScore = Math.round(percentRating);

    };


    $scope.$watch('emailToSend.subject', function (newValue, oldValue) {
      if (newValue) {
        $scope.analyzeSubject(newValue);
      }
    });

    $scope.assetSlideClickFn = function ($index) {
      $scope.slickSlideIndex = $index;
      $scope.isMediaSingleSelect = true;
      $scope.product.icon = $scope.product.assets[$index];
      $scope.originalIcon = $scope.product.icon;
    };

    $scope.planToggleActiveFn = function (id, active) {
      $scope.product.product_attributes.stripePlans.forEach(function(plan, index) {
        if (plan.id == id) {
          plan.active = active;
          console.log(plan);
        }
      });
    }

    $scope.cloneLoading = false;

    $scope.cloneProductFn = function () {
      $scope.cloneLoading = true;

      ProductService.cloneProduct($scope.product._id, function (clone) {
        toaster.pop('success', 'Product Cloned.');
        $scope.cloneLoading = false;
        $state.go('app.commerce.productsingle', {productId: clone._id});
      });
    };

    $scope.init = (function(){
      $scope.getProduct().then(function(data) {
        return $scope.getEmails();
      }).then(function(data) {
        return $scope.getAccount();
      })
    })();

  }]);
}(angular));

'use strict';
/*global app, moment, angular, window, CKEDITOR*/
/*jslint unparam:true*/
(function (angular) {
  app.controller('ProfileBusinessCtrl', ["$scope", "$modal", "$timeout", "toaster", "$stateParams", "UserService", "CommonService", "hoursConstant", "AccountService", "formValidations", function ($scope, $modal, $timeout, toaster, $stateParams, UserService, CommonService, hoursConstant, AccountService, formValidations) {

    $scope.isValid = true;
    $scope.hours = hoursConstant;
    $scope.formValidations = formValidations;
    //account API call for object population
    //account API call for object population

    AccountService.getAccount(function (account) {
        $scope.account = account;
        $scope.setDefaults();
        $scope.actualAccount = angular.copy(account);
    });

    //user API call for object population
    UserService.getUser(function (user) {
      $scope.user = user;
      $scope.fullName = [user.first, user.middle, user.last].join(' ');
      if (!$scope.user.business) {
        $scope.user.business = [];
      }
      if (!$scope.user.business.phones) {
        $scope.user.business.phones = [];
      }
      if (!$scope.user.business.addresses) {
        $scope.user.business.addresses = [];
      }
    });

    /*
     * @openMediaModal
     * -
     */

    $scope.openMediaModal = function () {
      $scope.showInsert = true;
      $scope.modalInstance = $modal.open({
        templateUrl: 'media-modal',
        controller: 'MediaModalCtrl',
        size: 'lg',
        keyboard: false,
        backdrop: 'static',
        resolve: {
          showInsert: function () {
            return $scope.showInsert;
          },
          insertMedia: function () {
            return $scope.insertPhoto;
          },
          isSingleSelect: function () {
              return true;
          }
        }
      });
    };

    // Add remove photo
    $scope.insertPhoto = function (asset) {
      $scope.account.business.logo = asset.url.replace(/^https?:/,'');
    };

    $scope.removePhoto = function (asset) {
      $scope.account.business.logo = null;
    };

    // Add/Remove email adresses
    $scope.accountAddEmailFn = function () {
      $scope.account.business.emails.push({
        _id: CommonService.generateUniqueAlphaNumericShort(),
        email: ''
      });
    };
    $scope.removeEmail = function (index) {
      $scope.account.business.emails.splice(index, 1);
    };

    $scope.showAddEmail = function (email) {
      return email._id === $scope.account.business.emails[0]._id;
    };

    // Add/Remove phone numbers
    $scope.accountAddPhoneFn = function () {
      $scope.account.business.phones.push({
        _id: CommonService.generateUniqueAlphaNumericShort(),
        number: '',
        extension: ''
      });
    };
    $scope.removePhone = function (index) {
      $scope.account.business.phones.splice(index, 1);
    };

    $scope.showAddPhone = function (phone) {
      return phone._id === $scope.account.business.phones[0]._id;
    };

    // Add/Remove address
    $scope.removeAddress = function (index) {
      $scope.account.business.addresses.splice(index, 1);
    };

    $scope.showAddAddress = function (address) {
      return address._id === $scope.account.business.addresses[0]._id;
    };

    $scope.accountAddAddressFn = function () {
      $scope.account.business.addresses.push({
        _id: CommonService.generateUniqueAlphaNumericShort(),
        address: '',
        address2: '',
        state: '',
        zip: '',
        country: '',
        defaultShipping: false,
        defaultBilling: false,
        city: '',
        countryCode: '',
        displayName: '',
        lat: '',
        lon: ''
      });
    };

    $scope.accountAddHoursFn = function () {
      $scope.account.business.splitHours = false;
      $scope.account.business.hours = [{
        day: "Mon",
        start: "9:00 am",
        end: "5:00 pm",
        start2: "9:00 am",
        end2: "5:00 pm",
        closed: false,
        split: false
      }, {
        day: "Tue",
        start: "9:00 am",
        end: "5:00 pm",
        start2: "9:00 am",
        end2: "5:00 pm",
        closed: false,
        split: false
      }, {
        day: "Wed",
        start: "9:00 am",
        end: "5:00 pm",
        start2: "9:00 am",
        end2: "5:00 pm",
        closed: false,
        split: false
      }, {
        day: "Thu",
        start: "9:00 am",
        end: "5:00 pm",
        start2: "9:00 am",
        end2: "5:00 pm",
        closed: false,
        split: false
      }, {
        day: "Fri",
        start: "9:00 am",
        end: "5:00 pm",
        start2: "9:00 am",
        end2: "5:00 pm",
        closed: false,
        split: false
      }, {
        day: "Sat",
        start: "9:00 am",
        end: "5:00 pm",
        start2: "9:00 am",
        end2: "5:00 pm",
        closed: true,
        split: false
      }, {
        day: "Sun",
        start: "9:00 am",
        end: "5:00 pm",
        start2: "9:00 am",
        end2: "5:00 pm",
        closed: true,
        split: false
      }];
    };

    $scope.setDefaults = function () {
      if (!$scope.account.business.phones) {
        $scope.account.business.phones = [];
      }

      if (!$scope.account.business.emails) {
        $scope.account.business.emails = [];
      }
      if (!$scope.account.business.addresses) {
        $scope.account.business.addresses = [];
      }
      if (!$scope.account.business.phones.length) {
        $scope.accountAddPhoneFn();
      }
      if (!$scope.account.business.emails.length) {
        $scope.accountAddEmailFn();
      }
      if (!$scope.account.business.addresses.length) {
        $scope.accountAddAddressFn();
      }
      if (!$scope.account.business.hours || !$scope.account.business.hours.length) {
        $scope.accountAddHoursFn();
      }
      if ($scope.account.business.hours) {
        _.each($scope.account.business.hours, function (element, index) {
          if (element.day === "Sat" || element.day === "Sun") {
            if (element.start === "") {
              element.start = "9:00 am";
            }
            if (element.end === "") {
              element.end = "5:00 pm";
            }
            if (element.start2 === "") {
              element.start2 = "9:00 am";
            }
            if (element.end2 === "") {
              element.end2 = "9:00 am";
            }
          }
        });
      }
    };

    $scope.profileSaveFn = function () {
      $scope.pageSaving = true;
      console.log('profileSaveFn >>>');
      angular.copy($scope.account, $scope.actualAccount);
      $scope.validateBeforeSave();
      if (!$scope.isValid) {
        toaster.pop("error", "Business hours are not valid");
        return;
      }
      var email = _.filter($scope.account.business.emails, function (mail) {
        return mail.email && mail.email.length > 0;
      });

      if (email.length <= 0) {
        toaster.pop("error", "Email is required.");
        return;
      }
      UserService.putAccount($scope.account, function (account) {
        $scope.account = account;
        toaster.pop('success', 'Profile Saved.');
        $scope.minRequirements = true;
        $scope.setDefaults();
        angular.copy($scope.account, $scope.actualAccount);
        $scope.pageSaving = false;
      });
    };

    $scope.checkProfileValidity = function () {
      var name = $scope.account.business.name;
      var email = _.filter($scope.account.business.emails, function (mail) {
        return mail.email !== "";
      });
      if (name !== "" && email.length > 0) {
        return true;
      }
    };

    $scope.validateBeforeSave = function () {
      $scope.isValid = true;
      _.each($scope.account.business.hours, function (element, index) {
        $scope.validateHours(element, index);
      });
    };

    $scope.validateHours = function (hours, index) {
      if (!hours.closed) {
        var startTime = hours.start;
        var endTime = hours.end;
        if (startTime && endTime) {
          startTime = (startTime.split(" ")[1] === 'pm' && startTime.split(":")[0] !== '12') || (startTime.split(" ")[1] === 'am' && startTime.split(":")[0] === '12') ? parseInt(startTime.split(":")[0], 10) + 12 : parseInt(startTime.split(":")[0], 10);
          endTime = (endTime.split(" ")[1] === 'pm' && endTime.split(":")[0] !== '12') || (endTime.split(" ")[1] === 'am' && endTime.split(":")[0] === '12') ? parseInt(endTime.split(":")[0], 10) + 12 : parseInt(endTime.split(":")[0], 10);
          startTime = parseInt(hours.start.split(":")[1], 10) === 30 ? startTime + 0.5 : startTime;
          endTime = parseInt(hours.end.split(":")[1], 10) === 30 ? endTime + 0.5 : endTime;

        }
        if (hours.split && $scope.account.business.splitHours) {
          angular.element("#business_hours_start_" + index + " .error").html("");
          angular.element("#business_hours_start_" + index).removeClass('has-error');
          angular.element("#business_hours_start2_" + index + " .error").html("");
          angular.element("#business_hours_start2_" + index).removeClass('has-error');
          angular.element("#business_hours_end_" + index + " .error").html("");
          angular.element("#business_hours_end_" + index).removeClass('has-error');
          var startTime2 = hours.start2;
          var endTime2 = hours.end2;
          if (startTime2 && endTime2) {
            startTime2 = (startTime2.split(" ")[1] === 'pm' && startTime2.split(":")[0] !== '12') || (startTime2.split(" ")[1] === 'am' && startTime2.split(":")[0] === '12') ? parseInt(startTime2.split(":")[0], 10) + 12 : parseInt(startTime2.split(":")[0], 10);
            endTime2 = (endTime2.split(" ")[1] === 'pm' && endTime2.split(":")[0] !== '12') || (endTime2.split(" ")[1] === 'am' && endTime2.split(":")[0] === '12') ? parseInt(endTime2.split(":")[0], 10) + 12 : parseInt(endTime2.split(":")[0], 10);
            startTime2 = parseInt(hours.start2.split(":")[1], 10) === 30 ? startTime2 + 0.5 : startTime2;
            endTime2 = parseInt(hours.end2.split(":")[1], 10) === 30 ? endTime2 + 0.5 : endTime2;
          }
          var msg = "";
          if (startTime > endTime || startTime > startTime2 || startTime > endTime2) {
            $scope.isValid = false;
            if (startTime > endTime) {
              msg = "Start time 1 can not be greater than end time 1";
              angular.element("#business_hours_start_" + index + " .error").html(msg);
              angular.element("#business_hours_start_" + index).addClass('has-error');
            } else if (startTime > startTime2) {
              msg = "Start time 1 can not be greater than start time 2";
              angular.element("#business_hours_start_" + index + " .error").html(msg);
              angular.element("#business_hours_start_" + index).addClass('has-error');
            } else if (startTime > endTime2) {
              msg = "Start time 1 can not be greater than end time 2";
              angular.element("#business_hours_start_" + index + " .error").html(msg);
              angular.element("#business_hours_start_" + index).addClass('has-error');
            }
          }
          if (endTime > startTime2 || endTime > endTime2) {
            $scope.isValid = false;
            if (endTime > startTime2) {
              msg = "End time 1 can not be greater than start time 2";
              angular.element("#business_hours_end_" + index + " .error").html(msg);
              angular.element("#business_hours_end_" + index).addClass('has-error');
            } else if (endTime > endTime2) {
              msg = "End time 1 can not be greater than end time 2";
              angular.element("#business_hours_end_" + index + " .error").html(msg);
              angular.element("#business_hours_end_" + index).addClass('has-error');
            }
          }
          if (startTime2 > endTime2) {
            $scope.isValid = false;
            msg = "Start time 2 can not be greater than end time 2";
            angular.element("#business_hours_start2_" + index + " .error").html(msg);
            angular.element("#business_hours_start2_" + index).addClass('has-error');
          }

        } else if (!hours.wholeday) {
          angular.element("#business_hours_start_" + index + " .error").html("");
          angular.element("#business_hours_start_" + index).removeClass('has-error');
          if (startTime > endTime) {
            $scope.isValid = false;
            angular.element("#business_hours_start_" + index + " .error").html("Start time can not be greater than end time");
            angular.element("#business_hours_start_" + index).addClass('has-error');
          }
        }
      }
    };

    $scope.checkIfDirty = function(){
      var isDirty = false;
      if($scope.actualAccount && !angular.equals($scope.actualAccount, $scope.account))
        isDirty = true;
      return isDirty;
    }
    $scope.resetDirty = function(){
      $scope.actualAccount = null;
      $scope.account = null;
    }

  }]);
}(angular));

'use strict';
/**
 * controller for personal business page
 */
(function (angular) {
  app.controller('ProfilePersonalCtrl',
      ["$scope", "$modal", "$timeout", "toaster", "$stateParams", "UserService", "PaymentService", "CommonService", "userConstant", "formValidations",
        function ($scope, $modal, $timeout, toaster, $stateParams, UserService, PaymentService, CommonService, userConstant, formValidations) {
    console.log('profile personal >>> ');

    //account API call for object population
    //account API call for object population
    // Add remove photo

    $scope.formValidations = formValidations;
    $scope.auth = {
      password: '',
      confirm: '',
    };
    $scope.invoices = [];
    $scope.profileUser = {};
    UserService.getUserActivity(function (activities) {
      $scope.activities = activities;
    });

    $scope.getSubscription = function(){
      PaymentService.getInvoicesForAccount(function (invoices) {
            var invoices = invoices;
            if(invoices.data.length && invoices.data[0].lines && invoices.data[0].lines.data.length == 2)
            {
              $scope.invoices = invoices.data[0].lines.data[1].plan;
            }
            else if(invoices.data.length && invoices.data[0].lines && invoices.data[0].lines.data.length == 1)
            {
               $scope.invoices = invoices.data[0].lines.data[0].plan;
            }
            console.log("Invoices: ", $scope.invoices);
          });
    };
    $scope.getSubscription();

    /*
     * @openMediaModal
     * -
     */

    $scope.openMediaModal = function () {
      $scope.showInsert = true;
      $scope.modalInstance = $modal.open({
        templateUrl: 'media-modal',
        controller: 'MediaModalCtrl',
        size: 'lg',
        keyboard: false,
        backdrop: 'static',
        resolve: {
          showInsert: function () {
            return $scope.showInsert;
          },
          insertMedia: function () {
            return $scope.insertPhoto;
          },
          isSingleSelect: function () {
              return true;
          }
        }
      });
    };

    $scope.insertPhoto = function (asset) {
      $scope.profileUser.profilePhotos[0] = asset.url;
    };

    $scope.removePhoto = function (asset) {
      $scope.profileUser.profilePhotos[0] = null;
    };

    $scope.setProfileUser = function(user) {
      $scope.profileUser= angular.copy(user);
      $scope.originalprofileUser = angular.copy($scope.profileUser);

      // we don't show a real password since we don't respond with password data
      $scope.auth.password = userConstant.personal_profile.PASSWORD_PLACEHOLDER;
      $scope.auth.confirm = userConstant.personal_profile.PASSWORD_PLACEHOLDER;
      $scope.passwordNotSame = false; // useful for HTML display
    };

    $scope.refreshUser = function() {
       angular.copy($scope.profileUser, $scope.currentUser);
     };

    $scope.setProfileUser($scope.currentUser);

    $scope.passwordChanged = function() {
      console.log('------ checking for password change --------');
      var changed = false;

      // check to see if the user messed with either form input
      if(($scope.auth.password !== userConstant.personal_profile.PASSWORD_PLACEHOLDER)
      || ($scope.auth.confirm !== userConstant.personal_profile.PASSWORD_PLACEHOLDER)) {
        console.log('------ detected password change --------');
        changed = true;
      }

      return changed;
    };

    $scope.validatePasswords = function() {
      console.log('------- validating password --------------');

      // make sure they are the same, else flip the passwordNotSame flag
      if($scope.auth.password === $scope.auth.confirm) {
        $scope.passwordNotSame = false;
      }
      else {
        $scope.passwordNotSame = true;
      }

      // return true when validated
      // return false when INvalidated
      return !$scope.passwordNotSame;
    };

    $scope.profileSaveFn = function () {
      //$scope.currentUser = $scope.profileUser;
     // simpleForm.$setPristine(true);
      $scope.pageSaving = true;
      angular.copy($scope.profileUser, $scope.originalprofileUser);
      if (!$scope.profileUser.email) {
        toaster.pop("error", "Email is required.");
        return;
      }
      if($scope.profileUser.email)
        $scope.profileUser.username = $scope.profileUser.email;
      UserService.putUser($scope.profileUser, function (user) {
        $scope.refreshUser();
        toaster.pop('success', 'Profile Saved.');
        angular.copy($scope.profileUser, $scope.originalprofileUser);
        $scope.pageSaving = false;
      });

      // check if password needs to be changed
      if($scope.passwordChanged()) {
        if( $scope.validatePasswords() ) {
          UserService.setPassword($scope.auth.password, function(user) {
            console.log('---- changed password successfully -----');
            toaster.pop('success', 'Password changed.');
          });
        }
        else {
          console.log('passwords are not valid');
        }
      }
    };

    /**********PAGINATION RELATED **********/
    $scope.curPage = 0;
    $scope.pageSize = 100;
    $scope.numberOfPages = function () {
      if ($scope.activities)
        return Math.ceil($scope.activities.length / $scope.pageSize);
      else
        return 0;
    };
    $scope.changePage = function (page) {
      $scope.curPage = $scope.curPage + page;
    }
    $scope.checkIfDirty = function(){
      var isDirty = false;
      if($scope.originalprofileUser && !angular.equals($scope.originalprofileUser, $scope.profileUser))
        isDirty = true;
      return isDirty;
    }
    $scope.resetDirty = function(){
      $scope.originalprofileUser = null;
      $scope.profileUser = null;
    }
  }]);
})(angular);

'use strict';
/**
 * AngularJS default filter with the following expression:
 * "person in people | filter: {name: $select.search, age: $select.search}"
 * performs a AND between 'name: $select.search' and 'age: $select.search'.
 * We want to perform a OR.
 */
app.filter('propsFilter', function () {
    return function (items, props) {
        var out = [];

        if (angular.isArray(items)) {
            items.forEach(function (item) {
                var itemMatches = false;

                var keys = Object.keys(props);
                for (var i = 0; i < keys.length; i++) {
                    var prop = keys[i];
                    var text = props[prop].toLowerCase();
                    if (item[prop].toString().toLowerCase().indexOf(text) !== -1) {
                        itemMatches = true;
                        break;
                    }
                }

                if (itemMatches) {
                    out.push(item);
                }
            });
        } else {
            // Let the output be the input untouched
            out = items;
        }

        return out;
    };
});

app.controller('SelectCtrl', ["$scope", "$http", "$timeout", function ($scope, $http, $timeout) {
    $scope.disabled = undefined;
    $scope.searchEnabled = undefined;

    $scope.enable = function () {
        $scope.disabled = false;
    };

    $scope.disable = function () {
        $scope.disabled = true;
    };

    $scope.enableSearch = function () {
        $scope.searchEnabled = true;
    }

    $scope.disableSearch = function () {
        $scope.searchEnabled = false;
    }

    $scope.clear = function () {
        $scope.person.selected = undefined;
        $scope.address.selected = undefined;
        $scope.country.selected = undefined;
    };

    $scope.someGroupFn = function (item) {

        if (item.name[0] >= 'A' && item.name[0] <= 'M')
            return 'From A - M';

        if (item.name[0] >= 'N' && item.name[0] <= 'Z')
            return 'From N - Z';

    };

    $scope.personAsync = { selected: "wladimir@email.com" };
    $scope.peopleAsync = [];

    $timeout(function () {
        $scope.peopleAsync = [
             { name: 'Adam', email: 'adam@email.com', age: 12, country: 'United States' },
             { name: 'Amalie', email: 'amalie@email.com', age: 12, country: 'Argentina' },
             { name: 'Estefanía', email: 'estefania@email.com', age: 21, country: 'Argentina' },
             { name: 'Adrian', email: 'adrian@email.com', age: 21, country: 'Ecuador' },
             { name: 'Wladimir', email: 'wladimir@email.com', age: 30, country: 'Ecuador' },
             { name: 'Samantha', email: 'samantha@email.com', age: 30, country: 'United States' },
             { name: 'Nicole', email: 'nicole@email.com', age: 43, country: 'Colombia' },
             { name: 'Natasha', email: 'natasha@email.com', age: 54, country: 'Ecuador' },
             { name: 'Michael', email: 'michael@email.com', age: 15, country: 'Colombia' },
             { name: 'Nicolás', email: 'nicole@email.com', age: 43, country: 'Colombia' }
        ];
    }, 3000);

    $scope.counter = 0;
    $scope.someFunction = function (item, model) {
        $scope.counter++;
        $scope.eventResult = { item: item, model: model };
    };

    $scope.removed = function (item, model) {
        $scope.lastRemoved = {
            item: item,
            model: model
        };
    };

    $scope.tagTransform = function (newTag) {
        var item = {
            name: newTag,
            email: newTag + '@email.com',
            age: 'unknown',
            country: 'unknown'
        };

        return item;
    };

    $scope.person = {};
    $scope.people = [
      { name: 'Adam', email: 'adam@email.com', age: 12, country: 'United States' },
      { name: 'Amalie', email: 'amalie@email.com', age: 12, country: 'Argentina' },
      { name: 'Estefanía', email: 'estefania@email.com', age: 21, country: 'Argentina' },
      { name: 'Adrian', email: 'adrian@email.com', age: 21, country: 'Ecuador' },
      { name: 'Wladimir', email: 'wladimir@email.com', age: 30, country: 'Ecuador' },
      { name: 'Samantha', email: 'samantha@email.com', age: 30, country: 'United States' },
      { name: 'Nicole', email: 'nicole@email.com', age: 43, country: 'Colombia' },
      { name: 'Natasha', email: 'natasha@email.com', age: 54, country: 'Ecuador' },
      { name: 'Michael', email: 'michael@email.com', age: 15, country: 'Colombia' },
      { name: 'Nicolás', email: 'nicolas@email.com', age: 43, country: 'Colombia' }
    ];

    $scope.availableColors = ['Red', 'Green', 'Blue', 'Yellow', 'Magenta', 'Maroon', 'Umbra', 'Turquoise'];

    $scope.multipleDemo = {};
    $scope.multipleDemo.colors = ['Blue', 'Red'];
    $scope.multipleDemo.colors2 = ['Blue', 'Red'];
    $scope.multipleDemo.selectedPeople = [$scope.people[5], $scope.people[4]];
    $scope.multipleDemo.selectedPeople2 = $scope.multipleDemo.selectedPeople;
    $scope.multipleDemo.selectedPeopleWithGroupBy = [$scope.people[8], $scope.people[6]];
    $scope.multipleDemo.selectedPeopleSimple = ['samantha@email.com', 'wladimir@email.com'];


    $scope.address = {};
    $scope.refreshAddresses = function (address) {
        var params = { address: address, sensor: false };
        return $http.get(
          'http://maps.googleapis.com/maps/api/geocode/json',
          { params: params }
        ).then(function (response) {
            $scope.addresses = response.data.results;
        });
    };

    $scope.country = {};
    $scope.countries = [ // Taken from https://gist.github.com/unceus/6501985
      { name: 'Afghanistan', code: 'AF' },
      { name: 'Åland Islands', code: 'AX' },
      { name: 'Albania', code: 'AL' },
      { name: 'Algeria', code: 'DZ' },
      { name: 'American Samoa', code: 'AS' },
      { name: 'Andorra', code: 'AD' },
      { name: 'Angola', code: 'AO' },
      { name: 'Anguilla', code: 'AI' },
      { name: 'Antarctica', code: 'AQ' },
      { name: 'Antigua and Barbuda', code: 'AG' },
      { name: 'Argentina', code: 'AR' },
      { name: 'Armenia', code: 'AM' },
      { name: 'Aruba', code: 'AW' },
      { name: 'Australia', code: 'AU' },
      { name: 'Austria', code: 'AT' },
      { name: 'Azerbaijan', code: 'AZ' },
      { name: 'Bahamas', code: 'BS' },
      { name: 'Bahrain', code: 'BH' },
      { name: 'Bangladesh', code: 'BD' },
      { name: 'Barbados', code: 'BB' },
      { name: 'Belarus', code: 'BY' },
      { name: 'Belgium', code: 'BE' },
      { name: 'Belize', code: 'BZ' },
      { name: 'Benin', code: 'BJ' },
      { name: 'Bermuda', code: 'BM' },
      { name: 'Bhutan', code: 'BT' },
      { name: 'Bolivia', code: 'BO' },
      { name: 'Bosnia and Herzegovina', code: 'BA' },
      { name: 'Botswana', code: 'BW' },
      { name: 'Bouvet Island', code: 'BV' },
      { name: 'Brazil', code: 'BR' },
      { name: 'British Indian Ocean Territory', code: 'IO' },
      { name: 'Brunei Darussalam', code: 'BN' },
      { name: 'Bulgaria', code: 'BG' },
      { name: 'Burkina Faso', code: 'BF' },
      { name: 'Burundi', code: 'BI' },
      { name: 'Cambodia', code: 'KH' },
      { name: 'Cameroon', code: 'CM' },
      { name: 'Canada', code: 'CA' },
      { name: 'Cape Verde', code: 'CV' },
      { name: 'Cayman Islands', code: 'KY' },
      { name: 'Central African Republic', code: 'CF' },
      { name: 'Chad', code: 'TD' },
      { name: 'Chile', code: 'CL' },
      { name: 'China', code: 'CN' },
      { name: 'Christmas Island', code: 'CX' },
      { name: 'Cocos (Keeling) Islands', code: 'CC' },
      { name: 'Colombia', code: 'CO' },
      { name: 'Comoros', code: 'KM' },
      { name: 'Congo', code: 'CG' },
      { name: 'Congo, The Democratic Republic of the', code: 'CD' },
      { name: 'Cook Islands', code: 'CK' },
      { name: 'Costa Rica', code: 'CR' },
      { name: 'Cote D\'Ivoire', code: 'CI' },
      { name: 'Croatia', code: 'HR' },
      { name: 'Cuba', code: 'CU' },
      { name: 'Cyprus', code: 'CY' },
      { name: 'Czech Republic', code: 'CZ' },
      { name: 'Denmark', code: 'DK' },
      { name: 'Djibouti', code: 'DJ' },
      { name: 'Dominica', code: 'DM' },
      { name: 'Dominican Republic', code: 'DO' },
      { name: 'Ecuador', code: 'EC' },
      { name: 'Egypt', code: 'EG' },
      { name: 'El Salvador', code: 'SV' },
      { name: 'Equatorial Guinea', code: 'GQ' },
      { name: 'Eritrea', code: 'ER' },
      { name: 'Estonia', code: 'EE' },
      { name: 'Ethiopia', code: 'ET' },
      { name: 'Falkland Islands (Malvinas)', code: 'FK' },
      { name: 'Faroe Islands', code: 'FO' },
      { name: 'Fiji', code: 'FJ' },
      { name: 'Finland', code: 'FI' },
      { name: 'France', code: 'FR' },
      { name: 'French Guiana', code: 'GF' },
      { name: 'French Polynesia', code: 'PF' },
      { name: 'French Southern Territories', code: 'TF' },
      { name: 'Gabon', code: 'GA' },
      { name: 'Gambia', code: 'GM' },
      { name: 'Georgia', code: 'GE' },
      { name: 'Germany', code: 'DE' },
      { name: 'Ghana', code: 'GH' },
      { name: 'Gibraltar', code: 'GI' },
      { name: 'Greece', code: 'GR' },
      { name: 'Greenland', code: 'GL' },
      { name: 'Grenada', code: 'GD' },
      { name: 'Guadeloupe', code: 'GP' },
      { name: 'Guam', code: 'GU' },
      { name: 'Guatemala', code: 'GT' },
      { name: 'Guernsey', code: 'GG' },
      { name: 'Guinea', code: 'GN' },
      { name: 'Guinea-Bissau', code: 'GW' },
      { name: 'Guyana', code: 'GY' },
      { name: 'Haiti', code: 'HT' },
      { name: 'Heard Island and Mcdonald Islands', code: 'HM' },
      { name: 'Holy See (Vatican City State)', code: 'VA' },
      { name: 'Honduras', code: 'HN' },
      { name: 'Hong Kong', code: 'HK' },
      { name: 'Hungary', code: 'HU' },
      { name: 'Iceland', code: 'IS' },
      { name: 'India', code: 'IN' },
      { name: 'Indonesia', code: 'ID' },
      { name: 'Iran, Islamic Republic Of', code: 'IR' },
      { name: 'Iraq', code: 'IQ' },
      { name: 'Ireland', code: 'IE' },
      { name: 'Isle of Man', code: 'IM' },
      { name: 'Israel', code: 'IL' },
      { name: 'Italy', code: 'IT' },
      { name: 'Jamaica', code: 'JM' },
      { name: 'Japan', code: 'JP' },
      { name: 'Jersey', code: 'JE' },
      { name: 'Jordan', code: 'JO' },
      { name: 'Kazakhstan', code: 'KZ' },
      { name: 'Kenya', code: 'KE' },
      { name: 'Kiribati', code: 'KI' },
      { name: 'Korea, Democratic People\'s Republic of', code: 'KP' },
      { name: 'Korea, Republic of', code: 'KR' },
      { name: 'Kuwait', code: 'KW' },
      { name: 'Kyrgyzstan', code: 'KG' },
      { name: 'Lao People\'s Democratic Republic', code: 'LA' },
      { name: 'Latvia', code: 'LV' },
      { name: 'Lebanon', code: 'LB' },
      { name: 'Lesotho', code: 'LS' },
      { name: 'Liberia', code: 'LR' },
      { name: 'Libyan Arab Jamahiriya', code: 'LY' },
      { name: 'Liechtenstein', code: 'LI' },
      { name: 'Lithuania', code: 'LT' },
      { name: 'Luxembourg', code: 'LU' },
      { name: 'Macao', code: 'MO' },
      { name: 'Macedonia, The Former Yugoslav Republic of', code: 'MK' },
      { name: 'Madagascar', code: 'MG' },
      { name: 'Malawi', code: 'MW' },
      { name: 'Malaysia', code: 'MY' },
      { name: 'Maldives', code: 'MV' },
      { name: 'Mali', code: 'ML' },
      { name: 'Malta', code: 'MT' },
      { name: 'Marshall Islands', code: 'MH' },
      { name: 'Martinique', code: 'MQ' },
      { name: 'Mauritania', code: 'MR' },
      { name: 'Mauritius', code: 'MU' },
      { name: 'Mayotte', code: 'YT' },
      { name: 'Mexico', code: 'MX' },
      { name: 'Micronesia, Federated States of', code: 'FM' },
      { name: 'Moldova, Republic of', code: 'MD' },
      { name: 'Monaco', code: 'MC' },
      { name: 'Mongolia', code: 'MN' },
      { name: 'Montserrat', code: 'MS' },
      { name: 'Morocco', code: 'MA' },
      { name: 'Mozambique', code: 'MZ' },
      { name: 'Myanmar', code: 'MM' },
      { name: 'Namibia', code: 'NA' },
      { name: 'Nauru', code: 'NR' },
      { name: 'Nepal', code: 'NP' },
      { name: 'Netherlands', code: 'NL' },
      { name: 'Netherlands Antilles', code: 'AN' },
      { name: 'New Caledonia', code: 'NC' },
      { name: 'New Zealand', code: 'NZ' },
      { name: 'Nicaragua', code: 'NI' },
      { name: 'Niger', code: 'NE' },
      { name: 'Nigeria', code: 'NG' },
      { name: 'Niue', code: 'NU' },
      { name: 'Norfolk Island', code: 'NF' },
      { name: 'Northern Mariana Islands', code: 'MP' },
      { name: 'Norway', code: 'NO' },
      { name: 'Oman', code: 'OM' },
      { name: 'Pakistan', code: 'PK' },
      { name: 'Palau', code: 'PW' },
      { name: 'Palestinian Territory, Occupied', code: 'PS' },
      { name: 'Panama', code: 'PA' },
      { name: 'Papua New Guinea', code: 'PG' },
      { name: 'Paraguay', code: 'PY' },
      { name: 'Peru', code: 'PE' },
      { name: 'Philippines', code: 'PH' },
      { name: 'Pitcairn', code: 'PN' },
      { name: 'Poland', code: 'PL' },
      { name: 'Portugal', code: 'PT' },
      { name: 'Puerto Rico', code: 'PR' },
      { name: 'Qatar', code: 'QA' },
      { name: 'Reunion', code: 'RE' },
      { name: 'Romania', code: 'RO' },
      { name: 'Russian Federation', code: 'RU' },
      { name: 'Rwanda', code: 'RW' },
      { name: 'Saint Helena', code: 'SH' },
      { name: 'Saint Kitts and Nevis', code: 'KN' },
      { name: 'Saint Lucia', code: 'LC' },
      { name: 'Saint Pierre and Miquelon', code: 'PM' },
      { name: 'Saint Vincent and the Grenadines', code: 'VC' },
      { name: 'Samoa', code: 'WS' },
      { name: 'San Marino', code: 'SM' },
      { name: 'Sao Tome and Principe', code: 'ST' },
      { name: 'Saudi Arabia', code: 'SA' },
      { name: 'Senegal', code: 'SN' },
      { name: 'Serbia and Montenegro', code: 'CS' },
      { name: 'Seychelles', code: 'SC' },
      { name: 'Sierra Leone', code: 'SL' },
      { name: 'Singapore', code: 'SG' },
      { name: 'Slovakia', code: 'SK' },
      { name: 'Slovenia', code: 'SI' },
      { name: 'Solomon Islands', code: 'SB' },
      { name: 'Somalia', code: 'SO' },
      { name: 'South Africa', code: 'ZA' },
      { name: 'South Georgia and the South Sandwich Islands', code: 'GS' },
      { name: 'Spain', code: 'ES' },
      { name: 'Sri Lanka', code: 'LK' },
      { name: 'Sudan', code: 'SD' },
      { name: 'Suriname', code: 'SR' },
      { name: 'Svalbard and Jan Mayen', code: 'SJ' },
      { name: 'Swaziland', code: 'SZ' },
      { name: 'Sweden', code: 'SE' },
      { name: 'Switzerland', code: 'CH' },
      { name: 'Syrian Arab Republic', code: 'SY' },
      { name: 'Taiwan, Province of China', code: 'TW' },
      { name: 'Tajikistan', code: 'TJ' },
      { name: 'Tanzania, United Republic of', code: 'TZ' },
      { name: 'Thailand', code: 'TH' },
      { name: 'Timor-Leste', code: 'TL' },
      { name: 'Togo', code: 'TG' },
      { name: 'Tokelau', code: 'TK' },
      { name: 'Tonga', code: 'TO' },
      { name: 'Trinidad and Tobago', code: 'TT' },
      { name: 'Tunisia', code: 'TN' },
      { name: 'Turkey', code: 'TR' },
      { name: 'Turkmenistan', code: 'TM' },
      { name: 'Turks and Caicos Islands', code: 'TC' },
      { name: 'Tuvalu', code: 'TV' },
      { name: 'Uganda', code: 'UG' },
      { name: 'Ukraine', code: 'UA' },
      { name: 'United Arab Emirates', code: 'AE' },
      { name: 'United Kingdom', code: 'GB' },
      { name: 'United States', code: 'US' },
      { name: 'United States Minor Outlying Islands', code: 'UM' },
      { name: 'Uruguay', code: 'UY' },
      { name: 'Uzbekistan', code: 'UZ' },
      { name: 'Vanuatu', code: 'VU' },
      { name: 'Venezuela', code: 'VE' },
      { name: 'Vietnam', code: 'VN' },
      { name: 'Virgin Islands, British', code: 'VG' },
      { name: 'Virgin Islands, U.S.', code: 'VI' },
      { name: 'Wallis and Futuna', code: 'WF' },
      { name: 'Western Sahara', code: 'EH' },
      { name: 'Yemen', code: 'YE' },
      { name: 'Zambia', code: 'ZM' },
      { name: 'Zimbabwe', code: 'ZW' }
    ];
}]);

'use strict';
/*global app, moment, angular, window*/
/*jslint unparam:true*/
(function (angular) {
  app.controller('SettingsCtrl', ["$scope", "$log", "$modal", "$state", "WebsiteService", "AccountService", "UserService", "toaster", "$timeout", '$location', 'SimpleSiteBuilderService', '$window', 'SweetAlert', 'pageConstant', function ($scope, $log, $modal, $state, WebsiteService, AccountService, UserService, toaster, $timeout, $location, SimpleSiteBuilderService, $window, SweetAlert, pageConstant) {
    $scope.keywords = [];

    console.log($location.absUrl().replace('main', 'hey'));
    /*
     * @settingsTitles
     * list of settings titles to map to
     */

    var viewTitles = {
      "website": "Website Settings",
      "commerce": "Commerce Settings",
      "customers": "Customers Settings",
      "emails": "Email Settings",
      "all": "Settings"
    };

    /*
     * @clearAllNotifications
     * clear all notification checkboxes
     */

    $scope.clearAllNotifications = function () {
      $scope.account.email_preferences.new_contacts = false;
      $scope.account.email_preferences.new_orders = false;
      $scope.account.email_preferences.helpful_tips = false;
    };

    $scope.clearNoNotifications = function () {
      $scope.account.email_preferences.no_notifications = false;
    };

    /*
     * @viewSettings
     * show section and navigate to tab
     */

    $scope.settingsView = 'all';
    $scope.viewTitle = viewTitles['all'];

    $scope.viewSettings = function (section, tab) {
      $scope.settingsView = section;
      $scope.viewTitle = viewTitles[section];
      $timeout(function () {
        angular.element('.sitesettings [heading="' + tab + '"] a').triggerHandler('click');
      }, 0);
    };


    AccountService.getAccount(function (account) {
        $scope.account = account;
            $scope.originalAccount = angular.copy(account);
            if (!account.commerceSettings) {
                account.commerceSettings = {
                taxes: true,
                taxbased: '',
                taxnexus: ''
            };
        }
    });

    $scope.$watch(function() { return SimpleSiteBuilderService.website; }, function(website){
        if(website){
            var _defaults = false;
            $scope.website = website;
            $scope.keywords = website.seo.keywords;
            if($scope.website){
              if(!$scope.website.title && $scope.account.business.name){
                $scope.website.title = angular.copy($scope.account.business.name);
                _defaults = true;
              }
              if(!$scope.website.seo){
                $scope.website.seo = {};
              }
              if(!$scope.website.seo.description && $scope.account.business.description){
                $scope.website.seo.description = angular.copy($scope.account.business.description);
                _defaults = true;
              }
            }
            if(_defaults){
              $scope.saveLoading = true;
              SimpleSiteBuilderService.saveWebsite($scope.website).then(function(response){
                $scope.saveLoading = false;
              });
            }
        }

    });

    /*
     * @saveSettings
     * save update account and website obj
     */

    $scope.saveLoading = false;

    $scope.saveSettings = function () {
      $scope.saveLoading = true;
      if(!$scope.account.subdomain && !$scope.account.domain)
      {
        $scope.saveLoading = false;
        toaster.pop('error', "Subdomain can't be blank");
        return;
      }

      if ($scope.account.commerceSettings.paypal && !$scope.account.commerceSettings.paypalAddress) {
          $scope.saveLoading = false;
          toaster.pop('error', "Paypal address can't be blank");
          return;
      }

        AccountService.updateAccount($scope.account, function (data, error) {
            if (error) {
                $scope.saveLoading = false;
                toaster.pop('error', error.message);
            } else {
                var _links = [];
                $scope.website.linkLists.forEach(function (value, index) {
                    if (value.handle === "head-menu") {
                        _links = value.links;
                    }
                })

                var _blogIndex = _.findIndex(_links, function(link) { return link.linkTo.data === pageConstant.page_handles.BLOG })

                // Add blog link to nav
                if($scope.account.showhide.blog && $scope.account.showhide.ssbBlog){
                    if(_blogIndex === -1){
                        _links.push({
                            label: pageConstant.page_handles.BLOG,
                            type: "link",
                            linkTo: {
                            data: pageConstant.page_handles.BLOG,
                            type: "page"
                            }
                        });
                    }

                }
                // Remove Blog Link From nav
                else{
                    if(_blogIndex > -1)
                        _links.splice(_blogIndex, 1);
                }

                SimpleSiteBuilderService.updateBlogPages().then(function(response){
                    SimpleSiteBuilderService.saveWebsite($scope.website).then(function(response){
                        $scope.saveLoading = false;
                        toaster.pop('success', " Website Settings saved.");
                        if ($scope.account.subdomain !== $scope.originalAccount.subdomain) {
                            var _newUrl = $location.absUrl().split($scope.originalAccount.subdomain);
                            $window.location.href = _newUrl[0] + $scope.account.subdomain + _newUrl[1];
                        }
                        var mainAccount = AccountService.getMainAccount();
                        if (mainAccount) {
                            mainAccount.showhide.blog = $scope.account.showhide.blog;
                        }

                        if ($scope.account.showhide.userScripts && $scope.website.resources.toggles.userScripts) {
                          SimpleSiteBuilderService.updateScriptResource($scope.website).then();
                        }
                    });
                });
            }

        });
    };

    /*
     * @insertFavicon
     * insert the favicon
     */

    $scope.insertFavicon = function (asset) {
      $scope.website.settings.favicon = asset.url.replace(/^(http|https):/i, "");
    };

    /*
     * @removeFavicon
     * remove the favicon
     */

    $scope.removeFavicon = function () {
      $scope.website.settings.favicon = '';
    };

    /*
     * @checkDomainExists
     * check to see if the domain already exist on change
     */

    $scope.domainError = false;
    $scope.modifysub = {};
    $scope.modifysub.show = false;

    $scope.checkDomainExists = function (account) {
      account.subdomain = account.subdomain.replace(/ /g, '').replace(/\./g, '_').replace(/@/g, '').replace(/_/g, ' ').replace(/\W+/g, '').toLowerCase();
      console.log('account.subdomain >>> ', account.subdomain);
      if (account.subdomain) {
        $scope.checkingSubdomain = true;
        if ($scope.originalAccount.subdomain != account.subdomain) {
          UserService.checkDuplicateSubdomain(account.subdomain, account._id, function (data) {
            $scope.hasCheckedSubdomain = true;
            $log.debug('checkDomainExists', data);
            $scope.checkingSubdomain = false;
            if (data.isDuplicate) {
              $scope.domainError = true;
            } else {
              $scope.domainError = false;
            }
          });
        } else {
          $scope.hasCheckedSubdomain = false;
          $scope.domainError = false;
          $scope.checkingSubdomain = false;
        }
      }
    };

    $scope.revertSubdomain = function () {
      $scope.hasCheckedSubdomain = '';
      $scope.modifysub.show = false;
      $scope.account.subdomain = $scope.originalAccount.subdomain;
    };

    /*
     * @calculateTaxOptions
     * -
     */

    $scope.calculateTaxOptions = [{
      name: 'Customer Shipping Address',
      value: 'customer_shipping'
    }, {
      name: 'Customer Billing Address',
      value: 'customer_billing'
    }, {
      name: 'Business Location',
      value: 'business_location'
    }];

    /*
     * @navigateTo
     * - navigate to view and close aside
     */

    $scope.navigateTo = function (section, $event) {
      $state.go(section);
      $scope.cancel($event);
    };


    /*
     * @updateSettings
     * -
     */

    // $scope.updateSettings = function () {
    //   var _account = $scope.account;
    //   _account.commerceSettings = $scope.settings;
    //   console.log('$scope.settings ', $scope.settings);
    //   AccountService.updateAccount(_account, function (updatedAccount) {
    //     toaster.clear();
    //     toaster.pop('success', 'Settings Successfully Updated');
    //     console.log('updatedAccount ', updatedAccount);
    //   });
    // };

    /*
     * @openMediaModal
     * -
     */

    $scope.openMediaModal = function () {
      $scope.showInsert = true;
      $scope.modalInstance = $modal.open({
        templateUrl: 'media-modal',
        controller: 'MediaModalCtrl',
        size: 'lg',
        keyboard: false,
        backdrop: 'static',
        resolve: {
          showInsert: function () {
            return $scope.showInsert;
          },
          insertMedia: function () {
            return $scope.insertFavicon;
          },
          isSingleSelect: function () {
              return true;
          }
        }
      });
    };

    /*
     * @closeModal
     * -
     */

    $scope.closeModal = function () {
      $scope.modalInstance.close();
    };

    // Add/Remove Meta tags
    $scope.accountAddMetaFn = function () {
      $scope.website.metatags = $scope.website.metatags || [];
      $scope.website.metatags.push({
        name:'',
        value:''
      });
    };
    $scope.removeMeta = function (index) {
      $scope.website.metatags.splice(index, 1);
    };

    $scope.showAddMeta = function (index) {
      return index === 0;
    };

    $scope.toggleEnableBlog = function(status){
        if(!status){
            SweetAlert.swal({
                title: "Are you sure?",
                text: "Your blog and posts will no longer be accessible",
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: "#DD6B55",
                confirmButtonText: "Ok",
                cancelButtonText: "Cancel",
                closeOnConfirm: true,
                closeOnCancel: true
            },
            function (isConfirm) {
                if (isConfirm) {

                }
                else{
                    $scope.account.showhide.blog = !status
                }
            });
        }

    }


  }]);
}(angular));

'use strict';
/*global app, moment, angular, Highcharts*/
/*jslint unparam:true*/
(function (angular) {
  app.controller('siteAnalyticsCtrl', ["$scope", "$modal", "UserService", "ChartAnalyticsService", "$timeout", function ($scope, $modal, UserService, ChartAnalyticsService, $timeout) {

    $scope.analyticsOverviewConfig = {};
    $scope.timeonSiteConfig = {};
    $scope.trafficSourcesConfig = {};
    $scope.newVsReturningConfig = {};
    $scope.customerOverviewConfig = {};
    $scope.analyticsOverviewConfig.title = {
      text: ''
    };
    $scope.timeonSiteConfig.title = {
      text: ''
    };
    $scope.trafficSourcesConfig.loading = true;
    $scope.newVsReturningConfig.loading = true;
    $scope.customerOverviewConfig.loading = true;
    $scope.displayVisitors = true;
    $scope.visitors = null;

    $scope.date = {
      startDate: moment().subtract(29, 'days').format(),
      endDate: moment().format()
    };

    var dateSwitch = false;
    $scope.$watch('selectedDate', function () {
      $scope.date.startDate = moment($scope.selectedDate.startDate).format();
      $scope.date.endDate = moment($scope.selectedDate.endDate).format();
      //update user preferences
      if (dateSwitch) {
        $scope.analyticsOverviewConfig = {};
        $scope.timeonSiteConfig = {};
        $scope.trafficSourcesConfig = {};
        $scope.newVsReturningConfig = {};
        $scope.customerOverviewConfig = {};
        $scope.analyticsOverviewConfig.title = {
          text: ''
        };
        $scope.timeonSiteConfig.title = {
          text: ''
        };

        $scope.locationData = null;
        $scope.pagedformattedTopPages = null;

        $scope.runAnalyticsReports($scope.analyticsAccount);
      }
      dateSwitch = true;
    });

    $scope.selectedDate = {
      startDate: moment().subtract(29, 'days').startOf('day'),
      endDate: moment()
    };

    $scope.pickerOptions = {
      startDate: moment().subtract(29, 'days').toDate(),
      endDate: moment().toDate(),
      format: 'YYYY-MM-DD',
      opens: 'left',
      ranges: {
        'Today': [moment().startOf('day'), moment()],
        'Yesterday': [moment().subtract(1, 'days').startOf('day'), moment().subtract(1, 'days').endOf('day')],
        'Last 7 Days': [moment().subtract(6, 'days').startOf('day'), moment().endOf('day')],
        'Last 30 Days': [moment().subtract(29, 'days').startOf('day'), moment().endOf('day')],
        'This Month': [moment().startOf('month'), moment().endOf('month')],
        'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
      }
    };

    UserService.getAccount(function (account) {
      $scope.analyticsAccount = account;
      $scope.runAnalyticsReports();
    });

    $scope.runAnalyticsReports = function () {
      ChartAnalyticsService.runPagedReports($scope.date, $scope.analyticsAccount, function (data) {
        $scope.formattedTopPages = _.reject(data.formattedTopPages, function(analytics){ return !angular.isDefined(analytics.page)});
        $scope.pagedformattedTopPages = _.reject(data.pagedformattedTopPages, function(analytics){ return !angular.isDefined(analytics.page)});
      });

      ChartAnalyticsService.runReports($scope.date, $scope.analyticsAccount, function (data) {
        $scope.setReportData(data);
      });
    };

    $scope.visitorDataReport = function (result2, result3) {
      var visitorsData = [];
      var currentTotalVisitors = 0;
      _.each(result2, function (visitor) {
        var subArr = [];
        var value = visitor.value || 0;
        currentTotalVisitors += value;
        subArr.push(new Date(visitor.timeframe.start).getTime());
        subArr.push(value);
        visitorsData.push(subArr);
      });

      $scope.visitorsData = visitorsData;

      var vistorsPreviousData = 0;
      _.each(result3, function (previousVisitor) {
        var value = previousVisitor.value || 0;
        vistorsPreviousData += value;
      });

      var visitorsPercent = ChartAnalyticsService.calculatePercentage(vistorsPreviousData, currentTotalVisitors);

      $scope.$apply(function () {
        $scope.visitors = currentTotalVisitors;
        $scope.visitorsPercent = visitorsPercent;
      });
    };

    $scope.locationReportData = function (result0) {
      // ======================================
      // Visitor Locations
      // ======================================

      var locationData = [];
      if (result0) {
        var _formattedLocations = [];
        _.each(result0, function (loc) {
          if (loc['ip_geo_info.province']) {
            _formattedLocations.push(loc);
          }
        });
        $scope.mostPopularState = _.max(_formattedLocations, function (o) {
          return o.result;
        });
        _.each(result0, function (location) {
          var _geo_info = ChartAnalyticsService.stateToAbbr(location['ip_geo_info.province']);
          if (_geo_info) {
            var subObj = {};
            subObj.code = _geo_info;
            subObj.value = location.result;
            var locationExists = _.find(locationData, function (loc) {
              return loc.code === location.code;
            });
            if (!locationExists && subObj.value) {
              locationData.push(subObj);
            }
          }
        });
      }

      $scope.$apply(function () {
        $scope.locationData = locationData;
      });
    };

    $scope.contentInteractionsReportData = function (result8, result10, result11) {
      // ----------------------------------------
      // Average Visit Duration
      // ----------------------------------------

      var avgSessionData = [];
      _.each(result8, function (session) {
        var subArr = [];
        var value = session.value || 0;
        subArr.push(new Date(session.timeframe.start).getTime());
        subArr.push(value);
        avgSessionData.push(subArr);
      });

      $scope.avgSessionData = avgSessionData;

      // ======================================
      // Bounces
      // ======================================

      var _bouncesData = [];
      var _totalBounces = 0;
      _.each(result10, function (bounce) {
        var subArr = [];
        var value = bounce.value || 0;
        _totalBounces += value;
        subArr.push(new Date(bounce.timeframe.start).getTime());
        subArr.push(value);
        _bouncesData.push(subArr);
      });

      $scope.bouncesData = _bouncesData;

      ChartAnalyticsService.timeOnSite($scope.avgSessionData, $scope.bouncesData, function (data) {
        $scope.timeonSiteConfig = data;
        $scope.timeonSiteConfig.loading = false;
      });


      var bouncesPercent = ChartAnalyticsService.calculatePercentage(_totalBounces, result11);
      $scope.$apply(function () {
        $scope.bounces = _totalBounces;
        $scope.bouncesPercent = bouncesPercent;
      });
    };

    $scope.setReportData = function (results) {
      var desktop, mobile;
      _.each(results[1].result, function (device) {
        var category = device['user_agent.device'];
        if (category === 'desktop') {
          desktop = device.result;
        }
        if (category === 'mobile') {
          mobile = device.result;
        } else {
          mobile = 0;
        }
      });

      $scope.desktop = desktop;
      $scope.mobile = mobile;

      $scope.device_data_loaded = true;

      // ----------------------------------------
      // Visitors
      // ----------------------------------------

      $scope.visitorDataReport(results[2].result, results[3].result);

      // ----------------------------------------
      // Pageviews Metric
      // ----------------------------------------

      var pageviewsData = [];
      var currentTotalPageviews = 0;
      _.each(results[4].result, function (pageView) {
        var subArr = [];
        var value = pageView.value || 0;
        currentTotalPageviews += value;
        subArr.push(new Date(pageView.timeframe.start).getTime());
        subArr.push(value);
        pageviewsData.push(subArr);
      });

      $scope.pageviews = currentTotalPageviews;
      $scope.pageviewsData = pageviewsData;

      var pageviewsPreviousData = 0;
      _.each(results[5].result, function (pageView) {
        var value = pageView.value || 0;
        pageviewsPreviousData += value;
      });

      $scope.pageviewsPreviousData = pageviewsPreviousData;

      var pageviewsPercent = ChartAnalyticsService.calculatePercentage(currentTotalPageviews, pageviewsPreviousData);
      $scope.pageviewsPercent = pageviewsPercent;

      // ----------------------------------------
      // Sessions
      // ----------------------------------------

      var _sessionsData = [];
      var _totalSessions = 0;
      _.each(results[6].result, function (session) {
        var subArr = [];
        var value = session.value || 0;
        _totalSessions += value;
        subArr.push(new Date(session.timeframe.start).getTime());
        subArr.push(value);
        _sessionsData.push(subArr);
      });
      $scope.sessions = _totalSessions;
      $scope.sessionsData = _sessionsData;


      ChartAnalyticsService.analyticsOverview($scope.pageviewsData, $scope.sessionsData, $scope.visitorsData, function (data) {
        $scope.$apply(function () {
          $scope.analyticsOverviewConfig = data;
        });
        $scope.analyticsOverviewConfig.loading = false;
      });

      var sessionsPreviousData = 0;
      _.each(results[7].result, function (previousSession) {
        var value = previousSession.value || 0;
        sessionsPreviousData += value;
      });

      var sessionsPercent = ChartAnalyticsService.calculatePercentage(_totalSessions, sessionsPreviousData);

      $scope.sessionsPercent = sessionsPercent;

      var secsToConv = 0;
      if (results[9].result) {
        secsToConv = (results[9].result / 1000);
      }

      var visitDuration = ChartAnalyticsService.secToTime(secsToConv);

      if (results[15].result === null) {
        results[15].result = 0;
      }

      $scope.visitDuration = visitDuration;

      var previousVisitDuration = results[15].result;

      var visitDurationPercent = ChartAnalyticsService.calculatePercentage(results[9].result, previousVisitDuration);
      $scope.visitDurationPercent = visitDurationPercent;



      $scope.contentInteractionsReportData(results[8].result, results[10].result, results[11].result);

      // ======================================
      // Traffic Sources
      // ======================================

      $scope.trafficSourceData = results[12].result;

      // ChartAnalyticsService.trafficSources($scope.trafficSourceData, function (data) {
      //   $scope.trafficSourcesConfig = data;
      //   $scope.trafficSourcesConfig.loading = false;
      // });

      // ======================================
      // New vs. Returning Customers
      // ======================================

      var newVsReturning = [
        ['New', results[14].result],
        ['Returning', results[13].result]
      ];

      $scope.newVsReturning = newVsReturning;

      ChartAnalyticsService.newVsReturning($scope.newVsReturning, function (data) {
        $scope.newVsReturningConfig = data;
        $scope.newVsReturningConfig.loading = false;
      });


      // ======================================
      // Content
      // Time on Site, Bounces
      // ======================================

      $scope.locationReportData(results[0].result);

      $scope.displayVisitors = $scope.visitors > 0;

      $scope.renderAnalyticsCharts();
    };

    $scope.renderAnalyticsCharts = function () {
      if ($("#visitor_locations").length) {
        $timeout(function () {
          var location_data = angular.copy($scope.locationData);
          ChartAnalyticsService.visitorLocations(location_data, Highcharts.maps['countries/us/us-all']);
        }, 100);
        if (!$scope.displayVisitors) {
          console.log('no visitors');
          // var deshBlockUI = blockUI.instances.get('deshboardBlock');
          // deshBlockUI.start("There haven't been any new visitors to your site yet. Once they do that data will be displayed here. To increase your site visitors you should add a social post.");
        }
      }
    };

  }]);
}(angular));

'use strict';

/* Controllers */

app.controller('SliderCtrl', ['$scope',
function ($scope) {
    $scope.sliders = {};
    $scope.sliders.sliderValue = 90;
    $scope.sliders.secondSliderValue = 75;
    $scope.sliders.thirdSliderValue = 65;
    $scope.sliders.fourthSliderValue = 50;
    $scope.sliders.fifthSliderValue = 70;
    $scope.sliders.sixthSliderValue = 80;

    $scope.sliders.verticalSliderValue = 90;
    $scope.sliders.secondVerticalSliderValue = 75;
    $scope.sliders.thirdVerticalSliderValue = 65;
    $scope.sliders.fourthVerticalSliderValue = 50;
    $scope.sliders.fifthVerticalSliderValue = 70;
    $scope.sliders.sixthVerticalSliderValue = 80;

    $scope.testOptions = {
        min: 0,
        max: 100,
        step: 1,
        value: 7,
        rangeValue: [2, 20]
    };

    $scope.sliders.rangeSliderValue = [10, 50];

    $scope.sliders.statusSliderValue = 5;

    $scope.myFormater = function (value) {
        return value + "%";
    };
}]);
'use strict';
/*global app, moment, angular*/
/*jslint unparam:true*/
(function (angular) {
  app.controller('SocialFeedCtrl', ["$scope", "$log", "$q", "toaster", "$modal", "$filter", "$location", "WebsiteService", "UserService", "SocialConfigService", "$timeout", function ($scope, $log, $q, toaster, $modal, $filter, $location, WebsiteService, UserService, SocialConfigService, $timeout) {

    /*
     * initialize all state in the controller, like a constructor.
     */

    $scope.init = function() {
      $scope.followModalCheckmarks = {};
      $scope.trackedAccounts = [];
      $scope.feed = [];
      $scope.feedLengths = {};
      $scope.orderByAttribute = 'date';
      $scope.addComment = {};
      $scope.followers = [];
    };

    // execute the 'constructor'
    $scope.init();

    /*
     * @openModal
     * -
     */

    $scope.openModal = function (modal) {
      $scope.modalInstance = $modal.open({
        templateUrl: modal,
        keyboard: false,
        backdrop: 'static',
        scope: $scope
      });
    };

    /*
     * @closeModal
     * -
     */

    $scope.closeModal = function () {
      $scope.modalInstance.close();
    };

    /*
     * @getSocialConfig
     * -
     */

    $scope.getSocialConfig = function () {
      SocialConfigService.getAllSocialConfig(function (config) {
        $scope.initializeSocialConfig(config);
      });
    };

    /*
     * @productionReadyAccount, checks to see if the account type is suitable for display
     */
    $scope.productionReadyAccount = function(acc) {
      return (acc.type === 'tw') || (acc.type === 'fb');
    };

    /*
     * @initializeSocialConfig
     * -
     */


    $scope.initializeSocialConfig = function (config) {

      $scope.config = config;

      _.each(config.trackedAccounts, function (trackedAccount) {

        //get profile/page info
        if (trackedAccount.accountType === 'account') {
          if (trackedAccount.type === 'fb') {
            SocialConfigService.getFBProfile(trackedAccount.id, function (profile) {
              trackedAccount.profile = profile;
            });

          }
        }
        if (trackedAccount.accountType === 'adminpage') {
          if (trackedAccount.type === 'fb') {
            SocialConfigService.getFBPageInfo(trackedAccount.id, trackedAccount.socialId, function (profile) {
              trackedAccount.profile = profile;
            });
          }
        }

        //toggle checked and push to trackedAccount
        trackedAccount.checked = true;
        $scope.trackedAccounts.push(trackedAccount);

        //get feed items
        if (trackedAccount.toggle) {
          if (trackedAccount.type === 'tw') {

            // get feed
            SocialConfigService.getTwitterFeed(trackedAccount.id, function (posts) {
              $scope.feedLengths[trackedAccount.id] = posts.length;
              //$log.debug('number of twitter posts: ' + posts.length);
              _.each(posts, function (post) {
                post.trackedId = trackedAccount.id;
                $scope.feed.push(post);
                //$log.debug(post);
              });
            });

            // get followers
            SocialConfigService.getTwitterFollowers(trackedAccount.id, function (posts) {
                $scope.followers = posts;
              // TODO: what does feedLengths need to be?
              $scope.feedLengths[trackedAccount.id] = posts.length;
              //$log.debug('number of twitter follower posts: ' + posts.length);
              _.each(posts, function (post) {
                post.trackedId = trackedAccount.id;
                $scope.feed.push(post);
                //$log.debug(post);
              });
            });
          }
          if (trackedAccount.type === 'fb') {
            SocialConfigService.getFBPosts(trackedAccount.id, function (posts) {
              $scope.feedLengths[trackedAccount.id] = posts.length;
              _.each(posts, function (post) {
                post.trackedId = trackedAccount.id;
                post.from.profile_pic = 'https://graph.facebook.com/' + post.from.sourceId + '/picture?width=32&height=32';
                $scope.feed.push(post);
                if($scope.trackedAccounts.length == 1)
                {
                 $scope.selectedSocial = $scope.trackedAccounts[0];
                }
              });
            });
          }
        }
      });
      //wait a few seconds to ensure everything is loaded
      $timeout(function () {
        $scope.$apply(function(){
          $scope.isLoaded = true;
        });
      }, 1500);
      //push the feed into the display
      $scope.displayFeed = $scope.feed;
    };

    /*
     * @filterFeed
     * -
     */

    $scope.filterFeed = function (type) {
      var updatedTrackedAccount = _.find($scope.trackedAccounts, function (trackedAccount) {
        return trackedAccount.id === type.id;
      });
      var newDisplayFeed = '';
      if (!type.checked) {
        newDisplayFeed = _.filter($scope.displayFeed, function (post) {
          return post.trackedId !== updatedTrackedAccount.id;
        });
        $scope.displayFeed = newDisplayFeed;
      } else {
        newDisplayFeed = _.filter($scope.feed, function (post) {
          return post.trackedId === updatedTrackedAccount.id;
        });
        _.each(newDisplayFeed, function (post) {
          $scope.displayFeed.push(post);
        });
      }
    };

    /*
     * @addPageFeed
     * add an admin feed to the social account using the parent access token
     */

    $scope.addPageFeed = function (obj) {
      var trackedAccount = _.find($scope.config.trackedAccounts, function (trackedAccount) {
        return trackedAccount.id === obj.id;
      });
      trackedAccount.toggle = true;
      SocialConfigService.updateTrackedAccount(trackedAccount, function (data) {
        trackedAccount.checked = true;
        if (trackedAccount.type === 'fb') {
          SocialConfigService.getFBPosts(trackedAccount.id, function (posts) {
            $scope.feedLengths[trackedAccount.id] = posts.length;
            _.each(posts, function (post) {
              post.trackedId = trackedAccount.id;
              $scope.feed.push(post);
              $scope.displayFeed.push(post);
            });
          });
        }
        $scope.minRequirements = true;
        toaster.pop('success', 'Feed Added');
      });
    };

    /*
     * @removePageFeed
     * delete a social account from the config
     */

    $scope.removePageFeed = function (admin) {
      var trackedAccount = _.find($scope.config.trackedAccounts, function (trackedAccount) {
        return trackedAccount.id === admin.id;
      });
      trackedAccount.toggle = false;
      SocialConfigService.updateTrackedAccount(trackedAccount, function (data) {
        var newFeed = _.filter($scope.displayFeed, function (obj) {
          return obj.trackedId !== trackedAccount.id;
        });
        $scope.displayFeed = newFeed;
        toaster.pop('warning', 'Social feed removed.');
      });
    };

    /*
     * @postToSocial
     * post to any of the social account using the social accountId and type
     */

    $scope.postContent = null;

    $scope.postToSocial = function (socialAccountId, post, type) {
      console.log('postTo >>> ', $scope.postTo);
      if (!$scope.postContent) {
        console.log('post content is empty');
        $scope.noContent = true;
        return false;
      }
      if (!$scope.selectedSocial) {
        console.log('post content is empty');
        $scope.noPostTo = true;
        return false;
      }

      //show spinner
      $scope.postingToSocial = true;
      if (type === 'fb') {
        $scope.handleFBPost(socialAccountId, post);
      }
      if (type === 'tw') {
        $scope.handleTwitterPost(socialAccountId, post);
      }
    };

    /*
     * @postContentChange
     * -
     */

    $scope.postContentChange = function () {
      if ($scope.postContent) {
        $scope.noContent = false;
      }
    };

    /*
     * @handleFBPost
     * handle the facebook post from @postToSocial
     */

    $scope.handleFBPost = function (socialAccountId, post) {
      SocialConfigService.postFBPost(socialAccountId, post, function (data) {
        console.log('post return data ', data);
        if (data.error) {
          $scope.postingToSocial = false;
          $scope.duplicatePostError = true;
          return false;
        }
        SocialConfigService.getFBPosts(socialAccountId, function (posts) {
          var matchingPost = _.findWhere(posts, {
            sourceId: data
          });
          if(matchingPost){
            $scope.displayFeed.push(matchingPost);
            $scope.feedLengths[socialAccountId] = posts.length;
          }
          $scope.afterPosting();
         })
      });
    };

    /*
     * @handleTwitterPost
     * handle the twitter post from @postToSocial
     */

    $scope.handleTwitterPost = function (socialAccountId, post) {
      SocialConfigService.postTwitterPost(socialAccountId, post, function (data) {
         SocialConfigService.getTwitterFeed(socialAccountId, function (posts) {
          var matchingPost = _.findWhere(posts, {
            sourceId: data.id_str
          });
          if(matchingPost){
              $scope.displayFeed.push(matchingPost);
              $scope.feedLengths[socialAccountId] = posts.length;
            }
          $scope.afterPosting();
         })
      });
    };

    /*
     * @afterPosting
     * after posting, clear the form and spinner
     */

    $scope.afterPosting = function () {
      //clear duplicate post error
      $scope.duplicatePostError = false;
      //clear spinner
      $scope.postingToSocial = false;
      //clear form
      $scope.postContent = null;

    };

    /*
     * @postToChange
     * when selecting what account to post to, change the selected social account
     */

    $scope.addCommentAdminPage = null;

    $scope.postToChange = function (type) {
      console.log('type ', type);
      $scope.noPostTo = false;
      $scope.selectedSocial = type;
      $scope.addCommentAdminPage = type;
    };

    /*
     * @showLikeModal
     * -
     */

    $scope.showLikeModal = function (post) {
      $scope.tempPost = post;
      $scope.openModal('like-unlike-modal');
      $scope.tempTrackedAccounts = angular.copy($scope.trackedAccounts);
      _.each($scope.tempTrackedAccounts, function (tempAccount, index) {
        $scope.tempTrackedAccounts[index].liked = $scope.checkLikeExistFn(tempAccount);
      });
    };

    /*
     * @showFavModal
     * -
     */

    $scope.showFavModal = function (post) {
      $log.debug('--showFavModal');
      $scope.tempPost = post;
      $scope.openModal('fav-unfav-modal');
      $scope.tempTrackedAccounts = angular.copy($scope.trackedAccounts);

      //$log.debug($scope.tempTrackedAccounts);
      _.each($scope.tempTrackedAccounts, function (tempAccount, index) {
        //$log.debug('account: ' + JSON.stringify(tempAccount));
        $scope.tempTrackedAccounts[index].favorited = $scope.checkFavExistFn(tempAccount);
      });
    };

    /*
     * @showFavModal
     * -
     */

    $scope.showFollowModal = function (post) {
      $log.debug('--showFollowModal');
      $scope.tempPost = post;

      //$scope.followModalCheckmarks.length = 0; //= [];

      $scope.openModal('follow-modal');

      $scope.tempTrackedAccounts = angular.copy($scope.trackedAccounts);

      //$log.debug($scope.tempTrackedAccounts);
      _.each($scope.tempTrackedAccounts, function (tempAccount, index) {
        //$log.debug('account: ' + JSON.stringify(tempAccount));
        //$scope.tempTrackedAccounts[index].favorited = $scope.checkFavExistFn(tempAccount);
        //$scope.followModalCheckmarks.push(false); // TODO: call API
        $scope.followModalCheckmarks[tempAccount.socialId] = false; // TODO: call API
        });
    };

    /*
     * @showRetweetModal
     * -
     */

    $scope.showTweetModal = function (post) {
      _.each(post.comments, function (comment) {
        //comment.picture = 'https://graph.facebook.com/' + comment.sourceId + '/picture?width=32&height=32';
      });
      $scope.addComment.post = post;
      $scope.tempTrackedAccounts = angular.copy($scope.trackedAccounts);
      //$scope.visibleComments = post.comments;

      // set the intitial value of the textarea because
      // "reply" means their handle is supposed to come before the message
      $scope.addComment.comment = '@' + post.from.name + ' ';

      //$scope.updateComments(post, 'tw');

      $scope.openModal('twitter-comments-modal');
    };

    $scope.showTweetDMModal = function (post) {
      _.each(post.comments, function (comment) {
        //comment.picture = 'https://graph.facebook.com/' + comment.sourceId + '/picture?width=32&height=32';
      });
      $scope.addComment.post = post;
      $scope.tempTrackedAccounts = angular.copy($scope.trackedAccounts);
      //$scope.visibleComments = post.comments;

      // set the intitial value of the textarea because
      // "reply" means their handle is supposed to come before the message


      //$scope.updateComments(post, 'tw');

      $scope.openModal('twitter-direct-message-modal');
    };

    $scope.showRetweetModal = function (post) {
      _.each(post.comments, function (comment) {
        //comment.picture = 'https://graph.facebook.com/' + comment.sourceId + '/picture?width=32&height=32';
      });
      $scope.addComment.post = post;
      $scope.tempTrackedAccounts = angular.copy($scope.trackedAccounts);
      //$scope.visibleComments = post.comments;

      // set the intitial value of the textarea because
      // "reply" means their handle is supposed to come before the message


      //$scope.updateComments(post, 'tw');

      $scope.openModal('twitter-retweet-modal');
    };

    /*
     * @showCommentModal
     * -
     */

    $scope.showCommentModal = function (post) {
      _.each(post.comments, function (comment) {
        comment.picture = 'https://graph.facebook.com/' + comment.sourceId + '/picture?width=32&height=32';
      });
      $scope.tempPost = post;
      $scope.visibleComments = post.comments;
      $scope.updateComments(post, 'fb');
      $scope.openModal('facebook-comments-modal');
    };

    /*
     * @addCommentFn
     * -
     */

    $scope.visibleComments = [];

    $scope.addCommentinModal = '';

    $scope.addCommentFn = function () {
      if ($scope.commentType === 'fb') {
        SocialConfigService.addFacebookPostComment($scope.selectedSocial.parentSocialAccount, $scope.addCommentPage.sourceId, $scope.addCommentinModal, function (comment) {
          var tempDate = new Date();
          tempDate.setHours(tempDate.getHours() + 7);
          var insertComment = {
            picture: $scope.selectedSocial.profile.picture.data.url,
            created: $filter('date')(tempDate, 'yyyy-MM-ddTHH:mm:ss') + '+0000',
            name: $scope.selectedSocial.profile.name,
            comment: $scope.addCommentinModal
          };
          $scope.visibleComments.unshift(insertComment);
          $scope.fbSelectedPost.comments.unshift(insertComment);
          $scope.addCommentinModal = '';
          toaster.pop('success', 'Comment added', 'Comment added to the facebook post.');
        });
      } else if ($scope.commentType === 'tw') {
        SocialConfigService.addTwitterReply($scope.selectedSocial.socialId, $scope.addCommentPage.sourceId, $scope.selectedSocial.screen_name, $scope.addCommentinModal, function (comment) {
          $scope.visibleComments.unshift({
            picture: $scope.selectedSocial.profile_image_url,
            created: new Date(),
            name: $scope.selectedSocial.name,
            comment: $scope.addCommentinModal
          });
          $scope.addCommentinModal = '';
          toaster.pop('success', 'Comment added', 'Comment added to the twitter post.');
        });
      } else {
        toaster.pop('error', 'Type miss match', 'Post type and admin type does not match.');
      }
    };

    /*
     * @updateComments
     * update the visible comments to display in the comment modal
     */

    $scope.updateComments = function (page, type) {
      console.log(page);
      $scope.commentType = type;
      if (type === 'tw') {
        $scope.commentUsers = $scope.twAdminPages;
      }
      if (type === 'fb') {
        $scope.commentUsers = $scope.fbAdminPages;
      }
      $scope.addCommentPage = page;
      console.log('comments ', page.comments);
      if (page.comments) {
        $scope.visibleComments = page.comments;
        $scope.fbSelectedPost = page;
      } else {
        $scope.visibleComments = [];
      }
    };

    /*
     * @checkLikeExistFn
     * -
     */

    $scope.checkLikeExistFn = function (account) {
      var status = false;
      if ($scope.tempPost === undefined) {
        return status;
      }
      if ($scope.tempPost.likes === undefined) {
        return status;
      }

      $scope.tempPost.likes.forEach(function (like, index) {
        //$log.debug(account.socialId, like.sourceId);
        if (account.socialId === like.sourceId) {
          status = true;
        }
      });

      return status;
    };

    /*
     * @checkFavExistFn
     * -
     */

    $scope.checkFavExistFn = function (account) {
      var status = false;
      if ($scope.tempPost === undefined) {
        return status;
      }
      if ($scope.tempPost.favorites === undefined) {
        return status;
      }

      $log.debug('--checking favorites');
      $scope.tempPost.favorites.forEach(function (like, index) {
        $log.debug(account.socialId, like.sourceId);
        if (account.socialId === like.sourceId) {
          status = true;
        }
      });
      $log.debug('--done checking favorites');

      return status;
    };

    /*
     * @likeFBPost
     * like a post on facebook
     */

    $scope.likeFBPost = function (page) {
      console.log('likeFBPost >>> ', page);
      var trackedAccount = _.find($scope.config.trackedAccounts, function (tracked) {
        return tracked.id === page.id;
      });
      console.log('trackedAccount >>> ', trackedAccount);
      console.log('$scope.tempPost.sourceId >>> ', $scope.tempPost.sourceId);
      SocialConfigService.likeFBPost(trackedAccount.id, $scope.tempPost.sourceId, function (postReturn) {
        console.log('postReturn ', postReturn);

        if ($scope.tempPost.likes) {
          $scope.tempPost.likes.push({
            sourceId: page.sourceId,
            name: page.name
          });
        } else {
          $scope.tempPost.likes = [{
            sourceId: page.sourceId,
            name: page.name
          }];
        }
        $scope.tempTrackedAccounts = angular.copy($scope.trackedAccounts);
        _.each($scope.tempTrackedAccounts, function (tempAccount, index) {
          $scope.tempTrackedAccounts[index].liked = $scope.checkLikeExistFn(tempAccount);
        });
        toaster.pop('success', 'liked post');
      });
    };

    /*
     * @removelikeFBPost
     * remove a like post on facebook
     */

    $scope.removeLikeFBPost = function (page, $event) {
      var trackedAccount = _.find($scope.config.trackedAccounts, function (tracked) {
        return tracked.socialId === page.socialId;
      });
      SocialConfigService.unlikeFBPost(trackedAccount.id, $scope.tempPost.sourceId, function (postReturn) {
        $scope.tempPost.likes.forEach(function (value, index) {
          if (value.sourceId === page.sourceId) {
            $scope.tempPost.likes.splice(index, 1);
          }
        });
        $scope.tempSocialAccounts = angular.copy($scope.socialAccounts);
        _.each($scope.tempSocialAccounts, function (tempAccount) {
          tempAccount.liked = $scope.checkLikeExistFn(tempAccount, 'account');
          _.each(tempAccount.admins, function (admin) {
            admin.liked = $scope.checkLikeExistFn(admin, 'admin');
          });
        });
        toaster.pop('warning', 'unliked post.');
      });
    };


    /*
     * @addTwitterPostFavorites
     * add a favorite on twitter post
     */

    $scope.addTwitterPostFavorites = function (page, $event) {
      $log.debug('addTwitterPostFavorites >>>');
      var trackedAccount = _.find($scope.config.trackedAccounts, function (tracked) {
        return tracked.socialId === page.socialId;
      });
      SocialConfigService.favTwitterPost(trackedAccount.id, $scope.tempPost.sourceId, function (postReturn) {
        //$log.debug('postReturn: ' + JSON.stringify(postReturn));
        //$scope.tempPost.favorited.forEach(function(value, index) {
        //    if (value.sourceId == page.sourceId) {
        //        $scope.tempPost.likes.splice(index, 1);
        //    }
        //});
        //$scope.tempSocialAccounts = angular.copy($scope.socialAccounts);
        //for (var i = 0; i < $scope.tempSocialAccounts.length; i++) {
        //    $scope.tempSocialAccounts[i].favorited = $scope.checkFavExistFn($scope.tempSocialAccounts[i], 'account');
        //    var admins = $scope.tempSocialAccounts[i].admins;
        //    for (var j = 0; j < admins.length; j++) {
        //        admins[j].liked = $scope.checkFavExistFn(admins[j], 'admin');
        //    }
        //}
        toaster.pop('warning', 'favorited post.');
      });
    };

    /*
     * @deleteTwitterPostFavorites
     * remove a favorite on twitter post
     */

    $scope.deleteTwitterPostFavorites = function (page, $event) {
      $log.debug('deleteTwitterPostFavorites >>>');
      var trackedAccount = _.find($scope.config.trackedAccounts, function (tracked) {
        return tracked.socialId === page.socialId;
      });
      SocialConfigService.unfavoriteTwitterPost(trackedAccount.id, $scope.tempPost.sourceId, function (postReturn) {
        //$log.debug('postReturn: ' + JSON.stringify(postReturn));
        //$scope.tempPost.favorited.forEach(function(value, index) {
        //    if (value.sourceId == page.sourceId) {
        //        $scope.tempPost.likes.splice(index, 1);
        //    }
        //});
        //$scope.tempSocialAccounts = angular.copy($scope.socialAccounts);
        //for (var i = 0; i < $scope.tempSocialAccounts.length; i++) {
        //    $scope.tempSocialAccounts[i].favorited = $scope.checkFavExistFn($scope.tempSocialAccounts[i], 'account');
        //    var admins = $scope.tempSocialAccounts[i].admins;
        //    for (var j = 0; j < admins.length; j++) {
        //        admins[j].liked = $scope.checkFavExistFn(admins[j], 'admin');
        //    }
        //}
        toaster.pop('warning', 'unfavorited post.');
      });
    };

    /*
     * updates the checkmarks used on the follow modal
     *
     * follower: the twitter ID that we want to follow/unfollow
     * id_str:
     */
    $scope.followTwitterCheck = function(follower, postReturn, account) {
      //account.following.push(follower.twitterId);
      if(follower === postReturn.id_str) {
        //var index = $scope.followModalCheckmarks.indexOf(account);
        //$log.debug('followTwitterCheck, search index=' + index.toString());
        $log.debug('followTwitterCheck, postReturn.following=' + postReturn.following.toString());

        //!postReturn.following
        if(postReturn.friendly) {
          //$scope.followModalCheckmarks[follower] = true;
          //$scope.followModalCheckmarks.push(account);

          $scope.followModalCheckmarks[account.socialId] = true;
        }
        else {
          // TODO: is postReturn.following useful here?
          //$log.warn('need to remove follower?');
          //delete $scope.followModalCheckmarks[follower];

          //if(index > -1) {
          //  $scope.followModalCheckmarks.splice(index,1);
          //}
          $scope.followModalCheckmarks[account.socialId] = false;
        }
      }
      //else {
      //  $log.debug('not following');
      //  $log.warn('not a follower?');
      //  //delete $scope.followModalCheckmarks[follower];
      //  if(index > -1) {
      //    $scope.followModalCheckmarks.splice(index,1);
      //  }
      //}
    };

    /*
     * followTwitterUser(account, follower)
     */
    $scope.followTwitterUser = function(account, follower) {
      $log.debug('---followTwitterUser, sourceID=', follower, account.id);
      SocialConfigService.followTwitterUser(account.id, follower, function(postReturn) {
        $log.debug('returned from followTwitterUser(' + JSON.stringify(postReturn) + ')');
        $scope.followTwitterCheck(follower, postReturn, account);
      });
    };

    /*
     * unfollowTwitterUser(account, follower)
     */
    $scope.unfollowTwitterUser = function(account, follower) {
      $log.debug('---unfollowTwitterUser, sourceID=' + follower);
      SocialConfigService.unfollowTwitterUser(account.id, follower, function(postReturn) {
        $log.debug('returned from unfollowTwitterUser(' + JSON.stringify(postReturn) + ')');
        $scope.followTwitterCheck(follower, postReturn, account);
      });
    };

    $scope.orderbyFilter = [{
      label: "Most liked",
      data: "likes"
    }, {
      label: "Most commented",
      data: "comments"
    }, {
      label: "Most Recent",
      data: "date"
    }
    ];

    $scope.sortBy = {
        label: "Most Recent",
        data: "date"
    };
    $scope.sortFeed = function (type) {
      $scope.orderByAttribute = type.data;
      $timeout(function () {
        $('#mcontainer').masonry();
      }, 1000);
    };


    angular.element(".sidebar-toggler").click(function(){
      if($scope && $scope.$state && $scope.$state.current && $scope.$state.current.name === "app.marketing.socialfeed"){
        $timeout(function () {
          if($('#mcontainer'))
            $('#mcontainer').masonry();
          $scope.sortFeed({label: "Most Recent", data: "date"});
        }, 500);
      }
    })

    $scope.addTwCommentFn = function (newComment) {
        SocialConfigService.addTwitterPostReply(newComment.socialId, newComment.post._id, newComment.comment, function(data) {
            console.log('twitter post reply response >>', data);
            SocialConfigService.getTwitterFeed(newComment.socialId, function (posts) {
             var matchingPost = _.findWhere(posts, {
               sourceId: data.id_str
             });
             if(matchingPost){
                 $scope.displayFeed.push(matchingPost);
                 $scope.feedLengths[newComment.socialId] = posts.length;
               }
             $scope.afterPosting();
             $scope.closeModal();
            });
        });
    };

    $scope.addTwDMFn = function (newComment) {
        SocialConfigService.addTwitterDirectMessage(newComment.socialId, newComment.post.from.sourceId || newComment.post.sourceId, newComment.comment, function(data) {
            console.log('twitter DM response >>', data);
            $scope.closeModal();
        });
    };

    $scope.isTwFollowerFn = function (sourceId) {
      console.log(sourceId);
        if (_.findWhere($scope.followers, {sourceId: String(sourceId)})) {
            return true;
        } else {
            return false;
        }
    };

    $scope.addRetweetFn = function (newComment) {
        SocialConfigService.addTwitterPostRetweet(newComment.socialId, newComment.post.sourceId, function(data) {
            $scope.displayFeed[_.indexOf($scope.displayFeed, _.findWhere($scope.displayFeed, {sourceId: newComment.post.sourceId}))].retweet_count += 1;
            console.log('twitter retweet response >>', data);
            SocialConfigService.getTwitterFeed(newComment.socialId, function (posts) {
             var matchingPost = _.findWhere(posts, {
               sourceId: data.id_str
             });
             if(matchingPost){
                 $scope.displayFeed.push(matchingPost);
                 $scope.feedLengths[newComment.socialId] = posts.length;
               }
             $scope.afterPosting();
             $scope.closeModal();
            });
        });
    };
  }]);
}(angular));

'use strict';
/** 
  * controller for ngSweetAlert
  * AngularJS wrapper for SweetAlert
*/
app.controller('SweetAlertCtrl', ['$scope', 'SweetAlert', function ($scope, SweetAlert) {

    $scope.demo1 = function () {
        SweetAlert.swal({
        	title: "Here's a message",
        	confirmButtonColor: "#007AFF"
        });
    };

    $scope.demo2 = function () {
        SweetAlert.swal({
        	title: "Here's a message!", 
        	text: "It's pretty, isn't it?",
        	confirmButtonColor: "#007AFF"
        });
    };

    $scope.demo3 = function () {
        SweetAlert.swal({
        	title: "Good job!", 
        	text: "You clicked the button!", 
        	type: "success",
        	confirmButtonColor: "#007AFF"
        });
    };

    $scope.demo4 = function () {
        SweetAlert.swal({
            title: "Are you sure?",
            text: "Your will not be able to recover this imaginary file!",
            type: "warning",
            showCancelButton: true,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "Yes, delete it!"
        }, function () {
            SweetAlert.swal({
            	title: "Booyah!",
            	confirmButtonColor: "#007AFF"
            });
        });
    };

    $scope.demo5 = function () {
        SweetAlert.swal({
            title: "Are you sure?",
            text: "Your will not be able to recover this imaginary file!",
            type: "warning",
            showCancelButton: true,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "Yes, delete it!",
            cancelButtonText: "No, cancel plx!",
            closeOnConfirm: false,
            closeOnCancel: false
        }, function (isConfirm) {
            if (isConfirm) {
                SweetAlert.swal({
                	title: "Deleted!", 
                	text: "Your imaginary file has been deleted.", 
                	type: "success",
                	confirmButtonColor: "#007AFF"
                });
            } else {
                SweetAlert.swal({
                	title: "Cancelled", 
                	text: "Your imaginary file is safe :)", 
                	type: "error",
                	confirmButtonColor: "#007AFF"
                });
            }
        });
    };

    $scope.demo6 = function () {
        SweetAlert.swal({
            title: "Sweet!",
            text: "Here's a custom image.",
            imageUrl: "http://oitozero.com/img/avatar.jpg",
            confirmButtonColor: "#007AFF"
        });
    };

}]);
'use strict';
/*global app*/
(function (angular) {
  app.controller('TemplatesCtrl', ["$scope", "$location", "toaster", "$filter", "$modal", "WebsiteService", function ($scope, $location, toaster, $filter, $modal, WebsiteService) {

    WebsiteService.getTemplates(function (templates) {
      var templatesArr = $scope.formatTemplates(templates);
      $scope.templates = templatesArr;
    });

    $scope.formatTemplates = function (templates) {
      var templatesArr = [];
      var key;
      for (key in templates) {
        if (templates.hasOwnProperty(key)) {
          if (templates[key].components) {
            templates[key].components = templates[key].components.length;
          } else {
            templates[key].components = 0;
          }
          templates[key].hasScreenshot = false;
          if (templates[key].screenshot) {
            templates[key].hasScreenshot = true;
          }
          templatesArr.push(templates[key]);
        }
      }

      return templatesArr;
    };

    $scope.openModal = function (template) {
      $scope.modalInstance = $modal.open({
        templateUrl: template,
        keyboard: false,
        backdrop: 'static',
        scope: $scope
      });
    };

    $scope.closeModal = function () {
      $scope.modalInstance.close();
    };

    $scope.getters = {
      components: function (value) {
        return value.length;
      },
      created: function (value) {
        return value.created.date;
      },
      modified: function (value) {
        return value.modified.date;
      }
    };

    $scope.setTemplateDetails = function (templateDetails) {
      $scope.templateDetails = true;
      $scope.selectedTemplate = templateDetails;
    };

    $scope.resetTemplateDetails = function () {
      $scope.templateDetails = false;
      $scope.selectedTemplate = null;
      $scope.showChangeURL = false;
    };

    $scope.$watch('createpage.title', function (newValue) {
      if (newValue) {
        $scope.createpage.handle = $filter('slugify')(newValue);
      }
    });

    $scope.$watch('createpage.handle', function (newValue) {
      if (newValue) {
        $scope.createpage.handle = $filter('slugify')(newValue);
      }
    });

    $scope.validateCreatePage = function (page, restrict) {
      $scope.createPageValidated = false;
      if (page) {
        if (page.handle === '') {
          $scope.handleError = true;
        } else {
          $scope.handleError = false;
          if (!restrict) {
            page.handle = $filter('slugify')(page.title);
          }
        }
        if (page.title === '') {
          $scope.titleError = true;
        } else {
          $scope.titleError = false;
        }
        if (page && page.title && page.title !== '' && page.handle && page.handle !== '') {
          $scope.createPageValidated = true;
        }
      }
    };

    $scope.createPageFromTemplate = function (page, $event) {
      $scope.validateCreatePage(page, true);

      if (!$scope.createPageValidated) {
        $scope.titleError = true;
        $scope.handleError = true;
        return false;
      }

      $scope.titleError = false;
      $scope.handleError = false;

      var pageData = {
        title: page.title,
        handle: page.handle,
        mainmenu: page.mainmenu
      };

      var hasHandle = false;
      var i = 0;
      for (i; i < $scope.pages.length; i++) {
        if ($scope.pages[i].handle === page.handle) {
          hasHandle = true;
        }
      }

      if (!hasHandle) {
        WebsiteService.createPageFromTemplate($scope.selectedTemplate._id, pageData, function (newpage) {
          toaster.pop('success', 'Page Created', 'The ' + newpage.title + ' page was created successfully.');
          $scope.closeModal();

          if (newpage.components) {
            newpage.components = newpage.components.length;
          } else {
            newpage.components = 0;
          }

          $scope.pages.unshift(newpage);
          $scope.displayedPages.unshift(newpage);
          page.title = "";
          page.handle = "";

          $scope.resetTemplateDetails();
        });
      } else {
        toaster.pop('error', "Page URL " + page.handle, "Already exists");
        $event.preventDefault();
        $event.stopPropagation();
      }
    };

    $scope.viewSingle = function (template) {
      $location.path('/website/templates/').search({
        templatehandle: template.handle
      });
    };

    $scope.filterScreenshot = {};

    $scope.pageScreenshotOptions = [{
      name: 'Screenshot',
      value: true
    }, {
      name: 'No Screenshot',
      value: false
    }];

    /*
     * @triggerInput
     * - trigger the hidden input to trick smart table into activating filter
     */

    $scope.triggerInput = function (element) {
      angular.element(element).trigger('input');
    };

    $scope.clearFilter = function (event, input) {
      $scope.filterScreenshot = {};
      $scope.triggerInput(input);
    };

  }]);
}(angular));

'use strict';
/** 
  * controller for AngularJS-Toaster
*/
app.controller('ToasterDemoCtrl', ['$scope', 'toaster', function ($scope, toaster) {
    $scope.toaster = {
        type: 'success',
        title: 'Title',
        text: 'Message'
    };
    $scope.pop = function () {
        toaster.pop($scope.toaster.type, $scope.toaster.title, $scope.toaster.text);
    };
}]);
'use strict';
/** 
  * controller for angular-bootstrap-nav-tree
  * An AngularJS directive that creates a Tree based on a Bootstrap "nav" list.
*/
app.controller('TreeCtrl', ["$scope", "$timeout", function ($scope, $timeout) {
    var apple_selected, tree, treedata_avm, treedata_geography;
    $scope.my_tree_handler = function (branch) {
        var _ref;
        $scope.output = "You selected: " + branch.label;
        if ((_ref = branch.data) != null ? _ref.description :
		void 0) {
            return $scope.output += '(' + branch.data.description + ')';
        }
    };
    apple_selected = function (branch) {
        return $scope.output = "APPLE! : " + branch.label;
    };
    treedata_avm = [{
        label: 'Animal',
        children: [{
            label: 'Dog',
            data: {
                description: "man's best friend"
            }
        }, {
            label: 'Cat',
            data: {
                description: "Felis catus"
            }
        }, {
            label: 'Hippopotamus',
            data: {
                description: "hungry, hungry"
            }
        }, {
            label: 'Chicken',
            children: ['White Leghorn', 'Rhode Island Red', 'Jersey Giant']
        }]
    }, {
        label: 'Vegetable',
        data: {
            definition: "A plant or part of a plant used as food, typically as accompaniment to meat or fish, such as a cabbage, potato, carrot, or bean.",
            data_can_contain_anything: true
        },
        onSelect: function (branch) {
            return $scope.output = "Vegetable: " + branch.data.definition;
        },
        children: [{
            label: 'Oranges'
        }, {
            label: 'Apples',
            children: [{
                label: 'Granny Smith',
                onSelect: apple_selected
            }, {
                label: 'Red Delicous',
                onSelect: apple_selected
            }, {
                label: 'Fuji',
                onSelect: apple_selected
            }]
        }]
    }, {
        label: 'Mineral',
        children: [{
            label: 'Rock',
            children: ['Igneous', 'Sedimentary', 'Metamorphic']
        }, {
            label: 'Metal',
            children: ['Aluminum', 'Steel', 'Copper']
        }, {
            label: 'Plastic',
            children: [{
                label: 'Thermoplastic',
                children: ['polyethylene', 'polypropylene', 'polystyrene', ' polyvinyl chloride']
            }, {
                label: 'Thermosetting Polymer',
                children: ['polyester', 'polyurethane', 'vulcanized rubber', 'bakelite', 'urea-formaldehyde']
            }]
        }]
    }];
    treedata_geography = [{
        label: 'North America',
        children: [{
            label: 'Canada',
            children: ['Toronto', 'Vancouver']
        }, {
            label: 'USA',
            children: ['New York', 'Los Angeles']
        }, {
            label: 'Mexico',
            children: ['Mexico City', 'Guadalajara']
        }]
    }, {
        label: 'South America',
        children: [{
            label: 'Venezuela',
            children: ['Caracas', 'Maracaibo']
        }, {
            label: 'Brazil',
            children: ['Sao Paulo', 'Rio de Janeiro']
        }, {
            label: 'Argentina',
            children: ['Buenos Aires', 'Cordoba']
        }]
    }];
    $scope.my_data = treedata_avm;
    $scope.try_changing_the_tree_data = function () {
        if ($scope.my_data === treedata_avm) {
            return $scope.my_data = treedata_geography;
        } else {
            return $scope.my_data = treedata_avm;
        }
    };
    $scope.my_tree = tree = {};
    $scope.try_async_load = function () {
        $scope.my_data = [];
        $scope.doing_async = true;
        return $timeout(function () {
            if (Math.random() < 0.5) {
                $scope.my_data = treedata_avm;
            } else {
                $scope.my_data = treedata_geography;
            }
            $scope.doing_async = false;
            return tree.expand_all();
        }, 1000);
    };
    return $scope.try_adding_a_branch = function () {
        var b;
        b = tree.get_selected_branch();
        return tree.add_branch(b, {
            label: 'New Branch',
            data: {
                something: 42,
                "else": 43
            }
        });
    };
}]);
'use strict';
/** 
  * controllers for Angular File Upload
*/
app.controller('UploadCtrl', ['$scope', 'FileUploader',
function ($scope, FileUploader) {
    var uploaderImages = $scope.uploaderImages = new FileUploader({
        url: 'upload.php'
    });

    // FILTERS

    uploaderImages.filters.push({
        name: 'imageFilter',
        fn: function (item/*{File|FileLikeObject}*/, options) {
            var type = '|' + item.type.slice(item.type.lastIndexOf('/') + 1) + '|';
            return '|jpg|png|jpeg|bmp|gif|'.indexOf(type) !== -1;
        }
    });

    // CALLBACKS

    uploaderImages.onWhenAddingFileFailed = function (item/*{File|FileLikeObject}*/, filter, options) {
        console.info('onWhenAddingFileFailed', item, filter, options);
    };
    uploaderImages.onAfterAddingFile = function (fileItem) {
        console.info('onAfterAddingFile', fileItem);
    };
    uploaderImages.onAfterAddingAll = function (addedFileItems) {
        console.info('onAfterAddingAll', addedFileItems);
    };
    uploaderImages.onBeforeUploadItem = function (item) {
        console.info('onBeforeUploadItem', item);
    };
    uploaderImages.onProgressItem = function (fileItem, progress) {
        console.info('onProgressItem', fileItem, progress);
    };
    uploaderImages.onProgressAll = function (progress) {
        console.info('onProgressAll', progress);
    };
    uploaderImages.onSuccessItem = function (fileItem, response, status, headers) {
        console.info('onSuccessItem', fileItem, response, status, headers);
    };
    uploaderImages.onErrorItem = function (fileItem, response, status, headers) {
        console.info('onErrorItem', fileItem, response, status, headers);
    };
    uploaderImages.onCancelItem = function (fileItem, response, status, headers) {
        console.info('onCancelItem', fileItem, response, status, headers);
    };
    uploaderImages.onCompleteItem = function (fileItem, response, status, headers) {
        console.info('onCompleteItem', fileItem, response, status, headers);
    };
    uploaderImages.onCompleteAll = function () {
        console.info('onCompleteAll');
    };

    console.info('uploader', uploaderImages);
}]);
app.controller('UploadCtrl2', ['$scope', 'FileUploader',
function ($scope, FileUploader) {
    var uploader = $scope.uploader = new FileUploader({
        url: 'upload.php'
    });

    // FILTERS

    uploader.filters.push({
        name: 'customFilter',
        fn: function (item/*{File|FileLikeObject}*/, options) {
            return this.queue.length < 10;
        }
    });

    // CALLBACKS

    uploader.onWhenAddingFileFailed = function (item/*{File|FileLikeObject}*/, filter, options) {
        console.info('onWhenAddingFileFailed', item, filter, options);
    };
    uploader.onAfterAddingFile = function (fileItem) {
        console.info('onAfterAddingFile', fileItem);
    };
    uploader.onAfterAddingAll = function (addedFileItems) {
        console.info('onAfterAddingAll', addedFileItems);
    };
    uploader.onBeforeUploadItem = function (item) {
        console.info('onBeforeUploadItem', item);
    };
    uploader.onProgressItem = function (fileItem, progress) {
        console.info('onProgressItem', fileItem, progress);
    };
    uploader.onProgressAll = function (progress) {
        console.info('onProgressAll', progress);
    };
    uploader.onSuccessItem = function (fileItem, response, status, headers) {
        console.info('onSuccessItem', fileItem, response, status, headers);
    };
    uploader.onErrorItem = function (fileItem, response, status, headers) {
        console.info('onErrorItem', fileItem, response, status, headers);
    };
    uploader.onCancelItem = function (fileItem, response, status, headers) {
        console.info('onCancelItem', fileItem, response, status, headers);
    };
    uploader.onCompleteItem = function (fileItem, response, status, headers) {
        console.info('onCompleteItem', fileItem, response, status, headers);
    };
    uploader.onCompleteAll = function () {
        console.info('onCompleteAll');
    };

    console.info('uploader', uploader);
}]);
'use strict';
/** 
  * controller for User Profile Example
*/
app.controller('UserCtrl', ["$scope", "flowFactory", function ($scope, flowFactory) {
    $scope.removeImage = function () {
        $scope.noImage = true;
    };
    $scope.obj = new Flow();

    $scope.userInfo = {
        firstName: 'Peter',
        lastName: 'Clark',
        url: 'www.example.com',
        email: 'peter@example.com',
        phone: '(641)-734-4763',
        gender: 'male',
        zipCode: '12345',
        city: 'London (UK)',
        avatar: 'assets/images/avatar-1-xl.jpg',
        twitter: '',
        github: '',
        facebook: '',
        linkedin: '',
        google: '',
        skype: 'peterclark82'
    };
    if ($scope.userInfo.avatar == '') {
        $scope.noImage = true;
    }
}]);
'use strict';
/** 
  * controller for Validation Form example
*/
app.controller('ValidationCtrl', ["$scope", "$state", "$timeout", "SweetAlert", function ($scope, $state, $timeout, SweetAlert) {

    $scope.master = $scope.myModel;
    $scope.form = {

        submit: function (form) {
            var firstError = null;
            if (form.$invalid) {

                var field = null, firstError = null;
                for (field in form) {
                    if (field[0] != '$') {
                        if (firstError === null && !form[field].$valid) {
                            firstError = form[field].$name;
                        }

                        if (form[field].$pristine) {
                            form[field].$dirty = true;
                        }
                    }
                }

                angular.element('.ng-invalid[name=' + firstError + ']').focus();
                SweetAlert.swal("The form cannot be submitted because it contains validation errors!", "Errors are marked with a red, dashed border!", "error");
                return;

            } else {
                SweetAlert.swal("Good job!", "Your form is ready to be submitted!", "success");
                //your code for submit
            }

        },
        reset: function (form) {

            $scope.myModel = angular.copy($scope.master);
            form.$setPristine(true);

        }
    };

}]);

'use strict';
/*global app, moment, angular, window*/
/*jslint unparam:true*/
(function (angular) {
  app.controller('WebsiteSettingsCtrl', ["$scope", "WebsiteService", "AccountService", "UserService", "toaster", function ($scope, WebsiteService, AccountService, UserService, toaster) {
    $scope.keywords = [];
    WebsiteService.getWebsite(function (website) {
      $scope.website = website;
      $scope.keywords = website.seo.keywords;
    });

    AccountService.getAccount(function (account) {
      $scope.account = account;
      $scope.blogSettings = null;
      if(account && account.showhide && account.showhide)
        $scope.blogSettings = angular.copy(account.showhide.blog);
    });

    // WebsiteService.getPages(function (pages) {
    //   console.log('pages ', pages);
    //   $scope.blogPage = _.find(pages, function(page){
    //     return page.handle === 'blog';
    //   });
    //   $scope.singlePost = _.find(pages, function(page){
    //     return page.handle === 'single-post';
    //   });
    // });

    $scope.saveLoading = false;

    $scope.saveWebsiteSettings = function () {
      $scope.saveLoading = true;
      AccountService.updateAccount($scope.account, function () {
        WebsiteService.updateWebsite($scope.website, function () {
          $scope.saveLoading = false;
          toaster.pop('success', " Website Settings saved.");
          if($scope.account && $scope.account.showhide)
          {
            if($scope.blogSettings !== $scope.account.showhide.blog)
              window.location.reload();
          }            
        });
      });
    };

    $scope.insertFavicon = function (asset) {
      $scope.website.settings.favicon = asset.url;
    };

    $scope.removeFavicon = function () {
      $scope.website.settings.favicon = '';
    };

    $scope.domainError = false;

    $scope.checkDomainExists = function (account) {
      UserService.checkDuplicateSubdomain(account.subdomain, account._id, function (data) {
        console.log('data ', data);

        if(data.isDuplicate) {
          $scope.domainError = true;
        } else {
          $scope.domainError = false;
        }
      });
    };

    $scope.editTemplate = function(type) {
      if (type === 'blog') {
        window.location = '/admin/#/website/pages/?pagehandle=blog';
      }

      if (type === 'post') {
        window.location = '/admin/#/website/pages/?pagehandle=single-post';
      }
    };

  }]);
}(angular));

'use strict';
/** 
  * controller for Wizard Form example
*/
app.controller('WizardCtrl', ['$scope', 'toaster',
function ($scope, toaster) {
    $scope.currentStep = 1;

    // Initial Value
    $scope.form = {

        next: function (form) {

            $scope.toTheTop();

            if (form.$valid) {
                nextStep();
            } else {
                var field = null, firstError = null;
                for (field in form) {
                    if (field[0] != '$') {
                        if (firstError === null && !form[field].$valid) {
                            firstError = form[field].$name;
                        }

                        if (form[field].$pristine) {
                            form[field].$dirty = true;
                        }
                    }
                }

                angular.element('.ng-invalid[name=' + firstError + ']').focus();
                errorMessage();
            }
        },
        prev: function (form) {
            $scope.toTheTop();
            prevStep();
        },
        goTo: function (form, i) {
            if (parseInt($scope.currentStep) > parseInt(i)) {
                $scope.toTheTop();
                goToStep(i);

            } else {
                if (form.$valid) {
                    $scope.toTheTop();
                    goToStep(i);

                } else
                    errorMessage();
            }
        },
        submit: function () {

        },
        reset: function () {

        }
    };


    var nextStep = function () {
        $scope.currentStep++;
    };
    var prevStep = function () {
        $scope.currentStep--;
    };
    var goToStep = function (i) {
        $scope.currentStep = i;
    };
    var errorMessage = function (i) {
        toaster.pop('error', 'Error', 'please complete the form in this step before proceeding');
    };
}]);

'use strict';
/**
 * controller for xeditable
 */

app.controller('TextSimpleCtrl', ["$scope",
function($scope) {
	$scope.example = {
		name: 'awesome user'
	};
}]);
app.controller('SelectLocalCtrl', ["$scope", "$filter",
function($scope, $filter) {
	$scope.example = {
		status: 2
	};

	$scope.statuses = [{
		value: 1,
		text: 'status1'
	}, {
		value: 2,
		text: 'status2'
	}, {
		value: 3,
		text: 'status3'
	}, {
		value: 4,
		text: 'status4'
	}];

	$scope.showStatus = function() {
		var selected = $filter('filter')($scope.statuses, {
			value: $scope.example.status
		});
		return ($scope.example.status && selected.length) ? selected[0].text : 'Not set';
	};
}]);
app.controller('TextareaCtrl', ["$scope",
function($scope) {
	$scope.example = {
		desc: 'Awesome user \ndescription!'
	};
}]);
app.controller('SelectRemoteCtrl', ["$scope", "$filter", "$http",
function($scope, $filter, $http) {
	$scope.example = {
		group: 4,
		groupName: 'admin' // original value
	};

	$scope.groups = [];

	$scope.loadGroups = function() {
		return $scope.groups.length ? null : $http.get('assets/api/groups.js').success(function(data) {
			$scope.groups = data.groups;
		});
	};

	$scope.$watch('example.group', function(newVal, oldVal) {
		if(newVal !== oldVal) {
			var selected = $filter('filter')($scope.groups, {
				id: $scope.example.group
			});
			$scope.example.groupName = selected.length ? selected[0].text : null;
		}
	});
}]);
app.controller('CheckboxCtrl', ["$scope",
function($scope) {
	$scope.example = {
		remember: true
	};
}]);
app.controller('ChecklistCtrl', ["$scope", "$filter",
function($scope, $filter) {
	$scope.example = {
		status: [2, 3]
	};

	$scope.statuses = [{
		value: 1,
		text: 'status1'
	}, {
		value: 2,
		text: 'status2'
	}, {
		value: 3,
		text: 'status3'
	}];

	$scope.showStatus = function() {
		var selected = [];
		angular.forEach($scope.statuses, function(s) {
			if($scope.example.status.indexOf(s.value) >= 0) {
				selected.push(s.text);
			}
		});
		return selected.length ? selected.join(', ') : 'Not set';
	};

}]);
app.controller('RadiolistCtrl', ["$scope", "$filter",
function($scope, $filter) {
	$scope.example = {
		status: 2
	};

	$scope.statuses = [{
		value: 1,
		text: 'status1'
	}, {
		value: 2,
		text: 'status2'
	}];

	$scope.showStatus = function() {
		var selected = $filter('filter')($scope.statuses, {
			value: $scope.example.status
		});
		return ($scope.example.status && selected.length) ? selected[0].text : 'Not set';
	};
}]);
app.controller('BsdateCtrl', ["$scope",
function($scope) {
	$scope.example = {
		dob: new Date(1984, 4, 15)
	};
}]);
app.controller('TypeaheadCtrl', ["$scope",
function($scope) {
	$scope.user = {
		state: 'Arizona'
	};

	$scope.states = ['Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Dakota', 'North Carolina', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'];
}]);
app.controller('TextCustomizeCtrl', ["$scope",
function($scope) {
	$scope.user = {
		name: 'awesome user'
	};
}]);
app.controller('TextBtnCtrl', ["$scope",
function($scope) {
	$scope.user = {
		name: 'awesome user'
	};
}]);
app.controller('SelectNobuttonsCtrl', ["$scope", "$filter",
function($scope, $filter) {
	$scope.user = {
		status: 2
	};

	$scope.statuses = [{
		value: 1,
		text: 'status1'
	}, {
		value: 2,
		text: 'status2'
	}, {
		value: 3,
		text: 'status3'
	}, {
		value: 4,
		text: 'status4'
	}];

	$scope.showStatus = function() {
		var selected = $filter('filter')($scope.statuses, {
			value: $scope.user.status
		});
		return ($scope.user.status && selected.length) ? selected[0].text : 'Not set';
	};
}]);
app.controller('SelectMultipleCtrl', ["$scope", "$filter",
function($scope, $filter) {
	$scope.user = {
		status: [2, 4]
	};

	$scope.statuses = [{
		value: 1,
		text: 'status1'
	}, {
		value: 2,
		text: 'status2'
	}, {
		value: 3,
		text: 'status3'
	}, {
		value: 4,
		text: 'status4'
	}];

	$scope.showStatus = function() {
		var selected = [];
		angular.forEach($scope.statuses, function(s) {
			if($scope.user.status.indexOf(s.value) >= 0) {
				selected.push(s.text);
			}
		});
		return selected.length ? selected.join(', ') : 'Not set';
	};
}]); 
(function(){

app.directive('dashboardAnalyticTileComponent', dashboardAnalyticTile);
/* @ngInject */
function dashboardAnalyticTile() {

    return {
        restrict: 'E',
        scope: {
            state: '=',
            uiState: '=',
            analytic: '='
        },
        replace: true,
        templateUrl: 'assets/js/dashboard/dashboard-analytic-tile/dashboard-analytic-tile.component.html',
        controller: 'DashboardAnalyticTileComponentController',
        controllerAs: 'vm',
        bindToController: true,
        link: function(scope, element, attrs, ctrl) {
            ctrl.init(element);
        }
    };

}

})();

(function(){

app.controller('DashboardAnalyticTileComponentController', dashboardAnalyticTileComponentController);

dashboardAnalyticTileComponentController.$inject = ['$scope', '$attrs', '$filter', 'DashboardService', '$modal', '$timeout'];
/* @ngInject */
function dashboardAnalyticTileComponentController($scope, $attrs, $filter, DashboardService, $modal, $timeout) {

    var vm = this;

    vm.init = init;

    vm.analyticMap = analyticMap;
    vm.uiDetails = [];

    //TODO: get from Dashboard.service
    vm.analyticData = {
        'visitors': {},
        'contacts': {},
        'CampaignMetrics': {},
        'Revenue': {},
        'SocialMedia': {}
    };

    function analyticMap() {

        var ret = {};

        switch(vm.analytic.name) {
            case 'visitors':

                ret.widgetTitle = 'Website';
                ret.buttonTitle = 'View Analytics';
                ret.data = [
                    {
                        analyticDataLabel: 'MTD NEW VISITORS',
                        analyticDataValue: DashboardService.state.analytics.visitors.total
                    },
                    {
                        analyticDataLabel: 'MTD PAGE VIEWS',
                        analyticDataValue: DashboardService.state.analytics.pageViews.total
                    }
                ]

                break;

            case 'contacts':

                ret.widgetTitle = 'Contacts';
                ret.buttonTitle = 'View Contacts';
                ret.data = [
                    {
                        analyticDataLabel: 'MTD CONTACTS',
                        analyticDataValue: DashboardService.state.analytics.contacts.total
                    },
                    {
                        analyticDataLabel: 'MTD LEADS',
                        analyticDataValue: DashboardService.state.analytics.contacts.leadTotal
                    }
                ]

                break;
            case 'CampaignMetrics':

                ret.widgetTitle = 'Campaigns';
                ret.buttonTitle = 'View Campaigns';
                ret.data = [
                    {
                        analyticDataLabel: 'MTD SENT',
                        analyticDataValue: DashboardService.state.analytics.campaigns.totalSent
                    },
                    {
                        analyticDataLabel: 'MTD OPENED',
                        analyticDataValue: DashboardService.state.analytics.campaigns.totalOpened
                    },
                    {
                        analyticDataLabel: 'MTD CLICKED',
                        analyticDataValue: DashboardService.state.analytics.campaigns.totalClicked
                    }
                ]

                break;
            case 'SocialMedia':

                ret.widgetTitle = 'Social Media';
                ret.buttonTitle = 'View Social Networks';
                ret.data = [
                    {
                        analyticDataLabel: 'FACEBOOK',
                        analyticDataValue: function() { return vm.analyticData['SocialMedia'].facebook }
                    },
                    {
                        analyticDataLabel: 'TWITTER',
                        analyticDataValue: function() { return vm.analyticData['SocialMedia'].twitter }
                    }
                ]

                break;
            case 'Orders':

                break;
            case 'Revenue':

                ret.widgetTitle = 'E-Commerce';
                ret.buttonTitle = 'View Revenue';
                ret.data = [
                    {
                        analyticDataLabel: 'YTD NEW REV.',
                        analyticDataValue: '$' + DashboardService.state.analytics.revenue.YTDTotalAmount
                    },
                    {
                        analyticDataLabel: 'YTD NEW ORDERS',
                        analyticDataValue: DashboardService.state.analytics.revenue.YTDTotalOrders
                    }
                ]

                break;
            default:
                //code
        }

        return ret;
    }

    function hideIfNotImplemented() {

        if (vm.uiDetails.data === undefined) {
            vm.element.parent().hide()
        }

    }
    $scope.$watch(function() { return DashboardService.state.analytics }, function(state, oldState) {
        if(state && state !== oldState){
            vm.uiDetails = vm.analyticMap();
        }
    })


    function init(element) {

        vm.element = element;

        $timeout(function() {
            vm.uiDetails = vm.analyticMap();
        }, 0);

    }

}

})();

(function(){

app.directive('dashboardWorkstreamTileComponent', dashboardWorkstreamTile);
/* @ngInject */
function dashboardWorkstreamTile() {

    return {
        restrict: 'E',
        scope: {
            state: '=',
            uiState: '=',
            workstream: '='
        },
        replace: true,
        templateUrl: 'assets/js/dashboard/dashboard-workstream-tile/dashboard-workstream-tile.component.html',
        controller: 'DashboardWorkstreamTileComponentController',
        controllerAs: 'vm',
        bindToController: true,
        link: function(scope, element, attrs, ctrl) {
            ctrl.init(element);
        }
    };

}

})();

(function(){

app.controller('DashboardWorkstreamTileComponentController', dashboardWorkstreamTileComponentController);

dashboardWorkstreamTileComponentController.$inject = ['$scope', '$attrs', '$filter', '$location', 'DashboardService', '$modal', '$timeout', '$document', '$interval'];
/* @ngInject */
function dashboardWorkstreamTileComponentController($scope, $attrs, $filter, $location, DashboardService, $modal, $timeout, $document, $interval) {

    var vm = this;

    vm.init = init;
    vm.workstreamClick = workstreamClick;
    vm.playWorkstreamVideo = playWorkstreamVideo;
    vm.videoClosed = videoClosed;
    vm.openModal = openModal;
    vm.closeModal = closeModal;
    vm.getVideoConfigObject = getVideoConfigObject;
    vm.callAliasMethod = callAliasMethod;
    vm.openMediaModal = openMediaModal;
    vm.augmentCompletePercentage = augmentCompletePercentage;
    vm.completePercentageStyle = '0%';
    vm.callbackOnMediaClose = callbackOnMediaClose;
    vm.videoConfig = {
        version: 3,
        text: null,
        visibility: true,
        type: 'video',
        videoType: 'youtube',
        // videoType: 'html5',
        video: null,
        videoWidth: 400,
        videoHeight: 400,
        videoAutoPlay: true,
        videoMp4: false,
        videoWebm: false,
        videoControls: false

    }

    vm.ssbPath = '/website/site-builder/pages/';
    vm.pagesPath = '/website/pages';

    // vm.onPlayerReady = onPlayerReady;

    /*
     * @workstreamClick
     * play video if workstream is not unlocked
     */
    function workstreamClick() {

        if (!vm.workstream.unlocked) {
            vm.uiState.openWorkstream = null;
            vm.playWorkstreamVideo().result.then(vm.videoClosed);

        } else {

            if (vm.uiState.openWorkstream && vm.uiState.openWorkstream._id === vm.workstream._id) {

                vm.uiState.openWorkstream = null;

            } else {
                vm.uiState.openWorkstream = vm.workstream;
                $timeout(function () {
                    var elementId = vm.workstream._id;
                    var element = document.getElementById(elementId);
                    if (element) {
                      $document.scrollToElementAnimated(element, 175, 1000);
                    }
                }, 0);

            }

        }

    }

    /*
     * @playWorkstreamVideo
     * open video in modal
     */
    function playWorkstreamVideo() {
        vm.videoConfig.video = vm.workstream.unlockVideoUrl;
        return vm.openModal('dashboard-workstream-tile-video');
    }

    /*
     * @videoClosed
     * called when video modal closes
     */
    function videoClosed(data) {
        DashboardService.unlockWorkstream(vm.workstream._id).then(function() {
            $timeout(function() {
                vm.workstreamClick();
            }, 500);
        });
    }

    /*
     * @closeModal
     * default close modal
     */
    function closeModal() {
        vm.modalInstance.close();
    }

    /*
     * @openModal
     * open any modal by passing modal templateId
     */

    function openModal(modalTemplate) {
      vm.modalInstance = $modal.open({
        templateUrl: modalTemplate,
        keyboard: false,
        backdrop: 'static',
        size: 'lg',
        scope: $scope
      });

      return vm.modalInstance;
    }

    function getVideoConfigObject(workstream) {
        var parsedUrl = urlParser.parse(workstream.unlockVideoUrl);
        var posterImage = null
        if(parsedUrl){
          posterImage = "//img.youtube.com/vi/"+parsedUrl.id+"/0.jpg";
        }
        return (
            angular.extend(vm.videoConfig, {
                video: workstream.unlockVideoUrl,
                videoAutoPlay: true,
                videoPosterImage : posterImage
            })
        )
    }

    /*
     * @callAliasMethod
     * call to alias methods
    */

    function callAliasMethod(alias){
        switch(alias.toLowerCase()) {
        case "mediamanager":
            vm.openMediaModal('media-modal', 'MediaModalCtrl', 'lg');
            break;
        case "websiteseo":
            $timeout(function () {
                angular.element(".topbar-settings").click();
            }, 0)
            break;
        case "chatwithsupport":
            Intercom('showNewMessage', '');
            break;
        case "createpage":

            if (DashboardService.state.account.showhide.ssbSiteBuilder) {
                //navigate to sitebuilder
                // $timeout(function() {
                    $location.path(vm.ssbPath);
                // })
            } else {
                //navigate to pages
                // $timeout(function() {
                    $location.path(vm.pagesPath);
                // });
            }

            break;
        default:
            //code
        }
    }

    /*
     * @openMediaModal
     * open Media Modal
    */

    function openMediaModal(modal, controller, size) {
        console.log('openModal >>> ', modal, controller);
        $scope.showDone = true;
        var _modal = {
            templateUrl: modal,
            keyboard: false,
            backdrop: 'static',
            size: 'md',
            scope: $scope,
            resolve: {
                vm: function() {
                    return vm;
                }
            }
        };
        if (controller) {
            _modal.controller = controller;
            _modal.resolve.showInsert = function () {
              return vm.showInsert;
            };
            _modal.resolve.insertMedia = function () {
              return vm.callbackOnMediaClose;
            };
            _modal.resolve.isSingleSelect = function () {
              return true;
            };
        }

        if (size) {
            _modal.size = 'lg';
        }

        vm.modalInstance = $modal.open(_modal);

        vm.modalInstance.result.then(null, function () {
            angular.element('.sp-container').addClass('sp-hidden');
        });
    }

    function callbackOnMediaClose(){
        // TODO: Need to call getWorkstream(vm.uiState.openWorkstream._id)
        // but it is not returning updated object.
        DashboardService.getWorkstreams().then(function(response){
            var data = response.data;
            if(data){
                vm.uiState.openWorkstream = _.findWhere(data, {
                    _id: vm.uiState.openWorkstream._id
                });
            }
        })
    }

    function augmentCompletePercentage(percentage) {

        var p = 0;

        var stop = $interval(function() {

            if (p === percentage) {
                $interval.cancel(stop);
            }
            vm.completeStyle = p;
            p = p + 1;
            vm.completePercentageStyle = p + '%';

        }, 10);

    }

    // Added a watch for completed worksreams

    $scope.$watch(function() { return vm.workstream.completePercentage }, function(newValue) {
        if(newValue && vm.completeStyle && newValue != vm.completeStyle ){
             vm.augmentCompletePercentage(parseInt(newValue, 10));
        }
    })

    function init(element) {

        vm.element = element;

        $timeout(function() {
            vm.augmentCompletePercentage(parseInt(vm.workstream.completePercentage, 10));
        }, 1000);

    }

}

})();


'use strict';
/*global app, moment, angular, window*/
/*jslint unparam:true*/
(function (angular) {
    app.controller('DOHYCtrl', ["$scope", "$location", "toaster", "$filter", "$modal", "$timeout", "DashboardService", function ($scope, $location, toaster, $filter, $modal, $timeout, DashboardService) {

        var vm = this;

        vm.state = {
            account: $scope.account
        }

        vm.uiState = {
            openWorkstream: { _id: undefined }
        };

        vm.showInsert = true;
        vm.openMediaModal = openMediaModal;
        vm.insertMedia = insertMedia;
        vm.buildViewModel = buildViewModel;
        vm.workstreamDisplayOrder = _.invert(_.object(_.pairs(DashboardService.workstreamDisplayOrder)));
        vm.analyticDisplayOrder = _.invert(_.object(_.pairs(DashboardService.analyticDisplayOrder)));

        $scope.$watch(function() { return DashboardService.state }, function(state) {

            state.workstreams = _.sortBy(state.workstreams, function(x) {
                return vm.workstreamDisplayOrder[x.name]
            });

            vm.state = state;

            $timeout(function() {
                vm.buildViewModel();
            }, 0);

        }, true);


        function buildViewModel() {

            var incompleteWorkstreams = [];
            var completeWorkstreams = [];
            var completeBlocks = 0;
            var incompleteBlocks = 0;
            var analyticsWidgets = []
            //var unlockedAnalyticsWidgets = []

            _.each(vm.state.workstreams, function(workstream){

                var analyticsWidgetsCopy = angular.copy(workstream.analyticWidgets);

                _.each(analyticsWidgetsCopy, function(analytic){
                    analytic.completed = workstream.unlocked && workstream.completed;
                    analyticsWidgets.push(analytic);
                })

                completeBlocks = workstream.blocks.filter(function(block) { return block.complete; }).length;
                incompleteBlocks = workstream.blocks.filter(function(block) { return !block.complete; }).length;

                workstream.completeRatio = completeBlocks + ' out of ' + (completeBlocks + incompleteBlocks) + ' completed.';
                workstream.completePercentage = $filter('number')(100 * completeBlocks / (completeBlocks + incompleteBlocks), 0);

            });


            //remove duplicates and set to state, and sort
            //vm.state.lockedAnalyticsWidgets = _.uniq(lockedAnalyticsWidgets, function(w) { return w.name; });
            vm.state.analyticsWidgets = _.sortBy(_.uniq(analyticsWidgets, function(w) { return w.name; }), function(x) {
                return vm.analyticDisplayOrder[x.name] && !x.completed
            });



            vm.state.completeWorkstreams = completeWorkstreams;
            vm.state.incompleteWorksreams = incompleteWorkstreams;

        }


        function openMediaModal(modal, controller, size) {
            console.log('openModal >>> ', modal, controller);
            var _modal = {
                templateUrl: modal,
                keyboard: false,
                backdrop: 'static',
                size: 'md',
                resolve: {
                    vm: function() {
                        return vm;
                    }
                }
            };
            if (controller) {
                _modal.controller = controller;
                _modal.resolve.showInsert = function () {
                  return vm.showInsert;
                };
                _modal.resolve.insertMedia = function () {
                  return vm.insertMedia;
                };
                _modal.resolve.isSingleSelect = function () {
                  return true
                };
            }

            if (size) {
                _modal.size = 'lg';
            }

            vm.modalInstance = $modal.open(_modal);

            vm.modalInstance.result.then(null, function () {
                angular.element('.sp-container').addClass('sp-hidden');
            });
        }

        function insertMedia(asset) {
            vm.state.account.business.logo = asset.url.replace(/^https?:/,'');
            DashboardService.updateAccount(vm.state.account).then(function(response){
                toaster.pop('success', 'Business Logo', 'The logo was updated successfully.');
                console.log('Account logo updated');
            })
        }

        (function init() {


        })();

    }]);
}(angular));

'use strict';
/*global app, window, $$*/
/*jslint unparam:true*/
(function () {

	app.factory('DashboardService', DashboardService);

	DashboardService.$inject = ['$http', '$q', '$timeout'];
	/* @ngInject */
	function DashboardService($http, $q, $timeout) {

        var dashboardService = {
            state: {
                workstreams:[],
                reports:{}
            }
        };
        var baseWorkstreamsAPIUrl = '/api/2.0/dashboard/workstreams';
        var baseReportsAPIUrl = '/api/2.0/dashboard/reports';
        var baseAnalyticsAPIUrl = '/api/2.0/dashboard/analytics';
        var baseAccountAPIUrl = '/api/1.0/account/';

        dashboardService.loading = { value:0 };
        dashboardService.updatedWorkstreams = false;
        dashboardService.lastWorkstreamSet = [];
        dashboardService.awayFromDashboard = false;
        dashboardService.polls = 0;
        dashboardService.numberPolling = 0;
        dashboardService.doPolling = true;

        dashboardService.workstreamDisplayOrder = [
            'Build an Online Presence',
            'Manage Contacts',
            'Engage Customers',
            'Make Sales'
        ];

        dashboardService.analyticDisplayOrder = [
            'visitors',
            'contacts',
            'CampaignMetrics',
            'Revenue',
            'SocialMedia'
        ];


        dashboardService.getWorkstreams = getWorkstreams;
        dashboardService.getWorkstream = getWorkstream;
        dashboardService.unlockWorkstream = unlockWorkstream;
        dashboardService.updateAccount = updateAccount;
        dashboardService.setAwayFromDashboard = setAwayFromDashboard;
        dashboardService.getAnalytics = getAnalytics;
        dashboardService.getAccount = getAccount;


		function dashRequest(fn) {
            dashboardService.loading.value = dashboardService.loading.value + 1;
            // console.info('dashService | loading +1 : ' + dashboardService.loading.value);
            fn.finally(function() {
                dashboardService.loading.value = dashboardService.loading.value - 1;
                // console.info('dashService | loading -1 : ' + dashboardService.loading.value);
            });
            return fn;
		}

        function getWorkstreams() {

            function success(newWorkstreamSet) {


                /*
                 * Server data always sets dashboard state
                 */
                dashboardService.state.workstreams = newWorkstreamSet;

                /*
                 * if we're on the dashboard
                 */
                if (!dashboardService.awayFromDashboard) {

                    /*
                     * save the last set from the server for comparison later
                     */
                    dashboardService.lastWorkstreamSet = angular.copy(newWorkstreamSet);

                    /*
                     * remove the ui-only props we dont want for the comparison
                     */
                    _.each(dashboardService.lastWorkstreamSet, function(ws) {
                        delete ws.completeRatio;
                        delete ws.completePercentage;
                    });

                } else {

                    /*
                     * we're on some other page, see if user is making things happen
                     */
                    if (!angular.equals(dashboardService.lastWorkstreamSet, newWorkstreamSet)) {

                        /*
                         * user has performed some steps, so flag that new data has come in
                         */
                        dashboardService.updatedWorkstreams = true;

                    } else {

                        /*
                         * user has not performed any workstream-related tasks, so no flag needed
                         */
                        dashboardService.updatedWorkstreams = false;
                    }

                }

                /*
                 * continuously poll for workstream updates
                 * - stop after ~10 minutes
                 * - dashboardService.polls can be reset on user navigation
                 * - only request when no other dashboard requests in flight
                 *
                 * TODO: should really be a server push w/ EventSource
                 * polyfill lib -> https://github.com/Yaffle/EventSource
                 */
                if(dashboardService.doPolling) {
                    if(dashboardService.numberPolling <=1) {
                        dashboardService.numberPolling--;
                        (function poll() {

                            if (dashboardService.polls < 300 && dashboardService.loading.value === 0) {
                                $timeout(dashboardService.getWorkstreams, 3000);
                                dashboardService.numberPolling++;
                                dashboardService.polls++;
                                // console.log('dashboardService.polls', dashboardService.polls);
                            } else {
                                $timeout(poll, 1000);
                            }

                        })();
                    } else {
                        dashboardService.numberPolling--;
                        // console.info('dashboardService skipping poll');
                    }
                }
            }

            function error(error) {
                console.error('DashboardService getWorkstreams error: ', JSON.stringify(error));
            }

            return dashRequest($http.get(baseWorkstreamsAPIUrl).success(success).error(error));
        }

        function getWorkstream(id) {

            function success(data) {
                console.info('DashboardService getWorkstream:', data);
            }

            function error(error) {
                console.error('DashboardService getWorkstream:', JSON.stringify(error));
            }

            return dashRequest($http.get(baseWorkstreamsAPIUrl + '/' + id).success(success).error(error));
        }

        function unlockWorkstream(id) {

            function success(data) {

                console.info('DashboardService unlockWorkstream:', data);

                //replace updated workstream with server response
                _.extend(_.findWhere(dashboardService.state.workstreams, { _id: data._id }), data);
                console.debug('data.unlocked', data.unlocked);

            }

            function error(error) {
                console.error('DashboardService unlockWorkstream:', JSON.stringify(error));
            }

            return dashRequest($http.post(baseWorkstreamsAPIUrl + '/' + id + '/unlock').success(success).error(error));

        }

        function getAnalytics() {

            function success(data) {
                console.log('DashboardService getAnalytics: ', JSON.stringify(data));
                dashboardService.state.analytics = data;
            }

            function error(error) {
                console.error('DashboardService getAnalytics error: ', JSON.stringify(error));
            }

            return dashRequest($http.get(baseAnalyticsAPIUrl).success(success).error(error));

        }

        function getAccount(account) {

            function success(data) {
                console.info('DashboardService getAccount:', JSON.stringify(data));
                dashboardService.state.account = data;
                if(data.ui_preferences && data.ui_preferences.polling === false) {
                    dashboardService.doPolling = false;
                }
            }

            function error(error) {
                console.error('DashboardService getAccount:', JSON.stringify(error));
            }
            return (
                dashRequest($http.get(baseAccountAPIUrl).success(success).error(error))
            );
        }

        function updateAccount(account) {

            function success(data) {
                console.info('DashboardService updateAccount:', data);
            }

            function error(error) {
                console.error('DashboardService updateAccount:', JSON.stringify(error));
            }
            return (
                dashRequest($http.put(baseAccountAPIUrl + [account._id].join('/'), account).success(success).error(error))
            );
        }

        function setAwayFromDashboard(away) {
            dashboardService.awayFromDashboard = away;

            dashboardService.polls = 0;
            dashboardService.numberPolling++;

            dashboardService.getAnalytics();
            dashboardService.getWorkstreams();
            dashboardService.getAccount();

            if (away) {
                console.log(away);
            }

        }

		(function init() {

            dashboardService.getAccount();
            dashboardService.getAnalytics();
            dashboardService.getWorkstreams();
            dashboardService.numberPolling++;

		})();


		return dashboardService;
	}

})();

app.directive('contactActivity', ['$filter', 'ContactService', '$modal', 'contactConstant', function($filter, ContactService, $modal, contactConstant) {

    return {
        require: [],
        restrict: 'E',
        transclude: false,
        scope: {
            singleContact: '=singleContact',
            allActivity: '=allActivity',
            newLeads: '=newLeads',
            contactsAtRisk: '=contactsAtRisk',
            currentPage: '=currentPage',
            numPerPage: '=numPerPage'
        },
        templateUrl: '/admin/assets/views/partials/activity.html',
        link: function(scope, element, attrs, controllers) {
            console.log('singleContact ', scope.singleContact);
            scope.next = false;
            scope.disablePaging = true;
            scope.main = {
                page: scope.currentPage,
                take: scope.numPerPage
            }
            if (scope.singleContact) {
                scope.contactId = scope.$parent.contactId;
                scope.newActivity = {
                    contactId: parseInt(scope.contactId),
                    start: new Date(),
                    end: new Date()
                };
                ContactService.getActivityTypes(function(activity_types) {
                    scope.activity_types = activity_types;
                });
            }

            scope.activityTypes = [];

            contactConstant.contact_activity_types.dp.forEach(function(value, index) {
              scope.activityTypes.push(value.label);
            });

            scope.updateActivityTypeFn = function(selection) {
                var activity_hash = _.findWhere(contactConstant.contact_activity_types.dp, {
                    label: selection
                });
                if(activity_hash)
                    scope.newActivity.activityType = activity_hash.data;
            };

            scope.openModal = function(modal) {
                scope.modalInstance = $modal.open({
                    templateUrl: modal,
                    scope: scope
                });
            };

            scope.closeModal = function() {
                scope.modalInstance.close();
            };

            scope.addActivityFn = function() {
                // Reinitializing the time to get current time
                if(scope.singleContact) {
                    angular.element("#contact_activity_type .error").html("");
                    angular.element("#contact_activity_type .error").removeClass('has-error');
                    var activity_type = angular.element("#contact_activity_type input").val();
                    var activity_hash = _.findWhere(contactConstant.contact_activity_types.dp, {
                        label: activity_type
                    });
                    if(!activity_type || !activity_type.trim())
                    {
                         angular.element("#contact_activity_type .error").html("Activity Type Required");
                         angular.element("#contact_activity_type .error").addClass('has-error');
                         return;
                    }
                    if(!activity_hash)
                    {
                        scope.newActivity.activityType = activity_type;
                    }else
                        scope.newActivity.activityType = activity_hash.data;
                    scope.newActivity.start = new Date();
                    scope.newActivity.end = new Date();
                }

                ContactService.postContactActivity(scope.newActivity, function(activity) {
                    if(scope.singleContact) {
                        activity.contact = scope.$parent.contact;
                    }
                    scope.all_activities.push(activity);
                    scope.all_activities = _.sortBy(scope.all_activities, function(o) {
                        return o.start;
                    }).reverse();
                    scope.newActivity = {
                        contactId: parseInt(scope.contactId),
                        start: new Date(),
                        end: new Date()
                    };
                    if (!angular.isDefined(scope.activity_type))
                        scope.activity_type = '';
                    scope.activities = $filter('filter')(scope.all_activities, {
                        activityType: scope.activity_type
                    });
                    scope.total = scope.activities.length;

                    scope.closeModal('addActivityModal');
                });
            };
            scope.filterActivities = function(newVal) {
                scope.main = {
                    page: scope.currentPage,
                    take: scope.numPerPage
                }

                scope.activity_type = newVal.activityTypeFilter.activityType;
                scope.activities = $filter('filter')(scope.all_activities, {
                    activityType: scope.activity_type
                });
                scope.total = scope.activities.length;
            }

            scope.loadPage = function() {
                var queryParams = {
                    limit: scope.main.take,
                    skip: (scope.main.page - 1) * scope.main.take
                }
                if (scope.singleContact) {
                    ContactService.getContactUnreadActivities(scope.contactId, function(activities) {
                        scope.unread = activities.length;
                    });

                    ContactService.getContactActivities(scope.contactId, function(activities) {
                        ContactService.getContact(scope.contactId, function (contact) {
                            for (var i = 0; i < activities.length; i++) {
                                activities[i]['contact'] = contact;
                                activities[i]['activityType'] = activities[i]['activityType'];
                            };
                            scope.activities = activities;
                            scope.activities = _.sortBy(scope.activities, function(o) {
                                return o.start;
                            }).reverse();
                            scope.all_activities = angular.copy(activities);
                            scope.total = scope.all_activities.length;
                            scope.disablePaging = false;
                        })
                    });
                } else {
                    if (scope.contactsAtRisk) {
                        queryParams = {
                            limit: scope.main.take,
                            skip: (scope.main.page - 1) * scope.main.take,
                            activityType: "SUBSCRIBE_CANCEL"
                        }
                    }
                    if (scope.newLeads) {
                        queryParams = {
                            limit: scope.main.take,
                            skip: (scope.main.page - 1) * scope.main.take,
                            activityType: "CONTACT_CREATED,ACCOUNT_CREATED"
                        }
                    }
                    ContactService.getAllContactActivitiesWithLimit(queryParams, function(data) {
                        var activites = data.results;
                        for (var i = 0; i < activites.length; i++) {
                            var contact = _.where(scope.contacts, {
                                _id: activites[i].contactId
                            });
                            activites[i]['contact'] = contact[0];
                            activites[i]['activityType'] = activites[i]['activityType'];
                        };
                        scope.total = data.total;
                        scope.activities = activites;
                        scope.disablePaging = false;
                    });
                }
            }
            if (scope.singleContact)
                scope.loadPage();
            else {
                if (scope.$parent.contacts) {
                    scope.contacts = scope.$parent.contacts;
                    ContactService.getAllContactUnreadActivities(function(data) {
                        scope.unread = data.total;
                    });
                    scope.loadPage();
                } else {
                    ContactService.getContacts(function(contacts) {
                        scope.$parent.contacts = contacts;
                        scope.contacts = contacts;
                        ContactService.getAllContactUnreadActivities(function(data) {
                            scope.unread = data.total;
                        });
                        scope.loadPage();
                    });
                }
            }

            scope.nextPage = function() {
                scope.disablePaging = true;
                scope.main.page++;
                if (!scope.singleContact)
                    scope.loadPage();

            };

            scope.previousPage = function() {
                scope.disablePaging = true;
                scope.main.page--;
                if (!scope.singleContact)
                    scope.loadPage();
            };
            scope.nextPageDisabled = function() {
                return scope.main.page === scope.pageCount() ? true : false;
            };
            scope.prevPageDisabled = function() {
                return scope.main.page <= 1 ? true : false;
            };
            scope.pageCount = function() {
                return Math.ceil(scope.total / scope.numPerPage);
            };
            /*
           * @getActivityName
           * - get activity actual name
           */
            scope.getActivityName = function(activity)
            {
                var activity_hash = _.findWhere(contactConstant.contact_activity_types.dp, {
                    data: activity
                });
                if(activity_hash)
                    return activity_hash.label;
                else
                    activity;
                }
            }
    };

}]);

'use strict';

angular.module('angular-parallax', [
]).directive('parallax', ['$window', function($window) {
  return {
    restrict: 'A',
    scope: {
      parallaxRatio: '@',
      parallaxVerticalOffset: '@',
      parallaxHorizontalOffset: '@',
    },
    link: function($scope, elem, $attrs) {
      var setPosition = function () {
        // horizontal positioning
        elem.css('left', $scope.parallaxHorizontalOffset + "px");

        var calcValY = $window.pageYOffset * ($scope.parallaxRatio ? $scope.parallaxRatio : 1.1 );
        if (calcValY <= $window.innerHeight) {
          var topVal = (calcValY < $scope.parallaxVerticalOffset ? $scope.parallaxVerticalOffset : calcValY);
          elem.css('top', topVal + "px");
        }
      };

      setPosition();

      angular.element($window).bind("scroll", setPosition);
      angular.element($window).bind("touchmove", setPosition);
    }  // link function
  };
}]).directive('parallaxBackground', ['$window', function($window) {
  return {
    restrict: 'A',
    transclude: true,
    template: '<div ng-transclude></div>',
    scope: {
      parallaxRatio: '@',
      parallaxVerticalOffset: '@',
      parallaxXPosition: '@'
    },
    link: function($scope, elem, attrs) {
      var setPosition = function () {
         // Fix for smaller resolutions
        var calcValY = 0;
        var calcValX = "50%";
        if($scope.parallaxXPosition)
        {
          if($scope.parallaxXPosition == 'left')
          {
            calcValX = "0%";
          }
          if($scope.parallaxXPosition == 'center')
          {
            calcValX = "50%";
          }
          if($scope.parallaxXPosition == 'right')
          {
            calcValX = "100%";
          }
        }
        if(elem.hasClass("parallax")){
          var win_width = $(window).width();
          var iOS = ( navigator.userAgent.match(/(iPad|iPhone|iPod)/g) ? true : false );

          if(win_width < 750 || iOS)
            $scope.parallaxRatio = 0.02;
          var yoffset = 0;
          if ($window.pageYOffset == 0){
            yoffset = 10;
          }
          var calcValY = 0;
          if(angular.element(".sortable-page-content").length > 0){
                calcValY = (elem.offset().top - $scope.offsetTop - $window.pageYOffset) * ($scope.parallaxRatio ? $scope.parallaxRatio : 1.1) - ($scope.parallaxVerticalOffset || 0);
                elem.css('background-position', "50% " + calcValY + "px");
                elem.css('background-attachment', "fixed");
          }
          else{
                calcValY = (pos(elem[0]) - $window.pageYOffset) * ($scope.parallaxRatio ? $scope.parallaxRatio : 1.1 );
                calcValY = calcValY - yoffset;
                elem.css('background-position', calcValX + " " + calcValY + "px");
                elem.css('background-attachment', "fixed");
          }

        }
        else
        {
          elem.css('background-position', calcValX + " " + calcValY + "px");
          elem.css('background-attachment', "inherit");
        }
      };

      var pos = function(obj){
        var curLeft  = 0;
        var curTop = 0;
        if (obj.offsetParent){
            do {
                curLeft += obj.offsetLeft;
                curTop += obj.offsetTop;
            }while(obj = obj.offsetParent);
        }
        return curTop;
    };

      // set our initial position - fixes webkit background render bug
      $(document).ready(function() {
        setTimeout(function() {
            setPosition();
        }, 500)
        var unbindWatcher = $scope.$watch(function() {
                return angular.element(".sortable-page-content").length
            }, function(newValue, oldValue) {
            if (newValue && newValue > 0) {
                var _top = angular.element("ssb-topbar").offset().top;
                var _height = angular.element("ssb-topbar").height();
                var _winHeight = angular.element(window).height();
                var _heightDiff = _height + _top;
                $scope.offsetTop = _heightDiff;
                 angular.element(".ssb-site-builder-container").scroll(function() {
                    setPosition();
                });
                setTimeout(function() {
                    setPosition();
                }, 3000)
                unbindWatcher();
            }
        });
      })

      angular.element($window).bind("scroll", setPosition);
      angular.element($window).bind("touchmove", setPosition);

    }  // link function
  };
}]);

app.directive("billingInvoice", [function () {
  return {
    restrict: 'E',
    templateUrl: '/admin/assets/views/partials/billingInvoice.html',
    scope: {
      upcomingInvoice: '='
    },
    link: function(scope, element, attrs) {
      if(scope.upcomingInvoice && scope.upcomingInvoice.lines && scope.upcomingInvoice.lines.data.length)
      {
      var _date = scope.upcomingInvoice.period_start;
      var interval = scope.upcomingInvoice.lines.data[0].plan.interval;

      if (_date.toString().length === 10) {
        _date = _date * 1000;
      }
      var formattedDate = moment(_date);

          if(interval == 'week')
          {
            formattedDate = formattedDate.add(7, 'days');
          }
          else if(interval == 'month')
          {
            formattedDate = formattedDate.add(1, 'months');
          }
          else if(interval == 'year')
          {
            formattedDate = formattedDate.add(1, 'years');
          }
          else
          {
            //formattedDate = formattedDate.add(options.addNum, options.addType);
          console.log("Formatted date: ")
          }
          console.log("Formatted date: ")
          console.log(formattedDate);


        scope.paymentDueDate = formattedDate.format("MMMM Do, YYYY");
      }
    }
  }
}]);

app.directive("billingSubscription", ['PaymentService', function (PaymentService) {
  return {
    restrict: 'E',
    templateUrl: '/admin/assets/views/partials/billingSubscription.html',
    // scope: {
    //   plan: '=',
    //   numplans: '=',
    //   switchSubscriptionPlan: "=",
    //   selectedPlan: "="
    // },
    link: function(scope, element, attrs) {

      scope.$watch('plan', function() {
        var plan = scope.plan;
        if (plan && plan.product_attributes.stripePlans.length) {
          var priceString = plan.product_attributes.stripePlans[0].amount.toString();
          var priceStringLength = priceString.length;
          scope.priceDollars = priceString.slice(0, priceStringLength - 2);
          scope.priceCents = priceString.slice(priceStringLength - 2, priceStringLength);
          setTimeout(function () {
            scope.$apply(function () {
                scope.billingSubscriptionUnavailable = false;
            });
          },0);
        } else {
          scope.billingSubscriptionUnavailable = true;
        }
      }, true);

      if (scope.account && scope.account.billing.plan !== 'NO_PLAN_ARGUMENT') {
        var selectedPlanWatcher = scope.$watch('selectedPlan', function() {
          if (scope.selectedPlan && scope.selectedPlan.product_attributes && scope.selectedPlan.product_attributes.stripePlans[0].id) {
            scope.plan = scope.selectedPlan;
            selectedPlanWatcher(); //unbind after set
          }
        });
      }

      if (attrs.showselectbtn) {
        scope.showSelectBtn = attrs.showselectbtn;
      }
    }
  }
}]);

app.directive("billingAddon", [ 'PaymentService', function(PaymentService){
    return {
        restrict: 'E',
        templateUrl: '/admin/assets/views/partials/billingAddon.html',
        link: function(scope, element, attrs) {
            if (attrs.showselectbtn) {
                scope.showSelectBtn = attrs.showselectbtn;
            }
            scope.priceDollars = ("" + (scope.addOn.on_sale ? scope.addOn.sale_price : scope.addOn.regular_price)).split(".")[0];
            scope.priceCents = ("" + (scope.addOn.on_sale ? scope.addOn.sale_price : scope.addOn.regular_price)).split(".")[1] || "00";

        }
    };
}

]);

app.directive("billingInvoiceTable", [function () {
  return {
    restrict: 'E',
    templateUrl: '/admin/assets/views/partials/billingInvoiceTable.html',
    //scope: {
    //  pagedInvoices: '=',
    //},
  }
}]);

app.directive("billingTrial", ['PaymentService', 'ToasterService', 'UserService', '$window',
  function (PaymentService, ToasterService, UserService, $window) {
  return {
    restrict: 'E',
    templateUrl: '/admin/assets/views/partials/billingTrial.html',
    // scope: {
    //   account:"@",
    //   selectedPlan:"=",
    //   planlist:"=",
    //   actionSavePlan:"&savePlanFn",
    //   switchSubscriptionPlan: "&switchSubscriptionPlanFn"
    // },
    link: function(scope, el, attrs) {

      // pay for Trial billing
      scope.submitPayment = function() {
          if (scope.subscriptionSelected) {
            var cardObj = scope.credit.card;
            cardObj.exp_month = cardObj.expiry.split('/')[0].trim();
            cardObj.exp_year = cardObj.expiry.split('/')[1].trim();

            scope.selectedPlan.paymentProcessing = true;

            PaymentService.getStripeCardToken(cardObj, function(token) {
              UserService.getAccount(function(account){
                  scope.account = account;
                  if (scope.account.billing && scope.account.billing.stripeCustomerId && token) {
                      UserService.postAccountBilling(scope.account.billing.stripeCustomerId, token, function(accBillingUpdate) {
                              //console.log('account.billing before update:\n', scope.account.billing);
                              scope.updateStripeIdFn(accBillingUpdate);
                              scope.account = accBillingUpdate;
                              console.log('About to call save plan... coupon:', scope.credit.coupon);
                              scope.savePlanFn(scope.selectedPlan.product_attributes.stripePlans[0].id, scope.credit.coupon);

                              // TODO: remove this window refresh HACK when we know what is the problem refreshing data on the billingCtrl.
                              // $window.location.reload(true);
                          },
                          function(err){
                              //ToasterService.clearAll();
                              ToasterService.show('error', 'The purchase was unsuccessful. Please check your card information.');
                              console.warn('no valid stripe token.');
                              scope.selectedPlan.paymentProcessing = false;
                          });
                      //scope.cards.data.forEach(function(value, index) {
                      //  PaymentService.deleteCustomerCard(value.customer, value.id, false, function(card) {});
                      //});
                  } else {
                      // TODO: this is what the skeuocard code was doing, not sure if it makes sense.
                      console.warn('no valid user, trying with stripe token:\n', token);
                      if (token) {
                          PaymentService.postStripeCustomer(token, function(stripeUser) {

                              // TODO: this makes no sense. we only got here if the user was bad
                              if (scope.currentUser) {
                                  scope.currentUser.stripeId = stripeUser.id;
                                  UserService.postAccountBilling(stripeUser.id, token, function(billing) {
                                      scope.updateStripeIdFn(billing);
                                  });
                              }

                          });
                      }
                      else {
                          //ToasterService.clearAll();
                          ToasterService.show('error', 'The purchase was unsuccessful. Please check your card information.');
                          console.warn('no valid stripe token.');
                          scope.selectedPlan.paymentProcessing = false;
                      }
                  }
              });
              // update the billing data


              //if (token) {
              //  scope.savePlanFn(scope.selectedPlan.product_attributes.stripePlans[0].id);
              //} else {
              //  ToasterService.show('error', 'Oops. The purchase was unsuccessful.');
              //}
            });
          }
      };

      // for the credit card directive
      scope.credit = {
        card: {},
        values: {},
        options: {
          debug: false,
          formatting: true
        },
        messages: {},
        coupon: ''
        //onChange: function() { console.log('changed card'); },
        //onClear: function() { console.log('cleared card'); },
      };
    }
  }
}]);

// uses angular-card, https://github.com/gavruk/angular-card
// TODO: convert this to a general-use directive, not tied to billing.
app.directive('billingCreditCard', ['$timeout', function($timeout) {
  return {
    restrict: 'E',
    templateUrl: '/admin/assets/views/partials/billingCC.html',

    // the required inputs:
    scope: {
      cardInfo: '=',
      cardValues: '=',
      cardOptions: '=',
      cardMessages: '=',
      coupon: '=',
      plan: '='
      //clear: '&',
    },

    link: function(scope, el, attrs) {
      scope.$watch('plan', function(value) {
        if (value && value._id != null) {
          // $(el[0]).find('input:last').focus();
          $timeout(function() {
            $(el[0]).find('input:first').focus();
          }, 0);
        }
      });
    }
  };
}]);

angular.module('ui.bootstrap.carousel', ['ui.bootstrap.transition'])
    .controller('CarouselController', ['$scope', '$timeout', '$transition', '$q', function        ($scope, $timeout, $transition, $q) {
}]).directive('carousel', [function() {
    return {
    	
    }
}]);
'use strict';
app.directive('maxlength', function () {
    return {
        restrict: 'A',
        link: function ($scope, $element, $attributes) {

            var limit = $attributes.maxlength;
            $element.bind('keyup', function (event) {
                var element = $element.closest(".form-group");

                element.toggleClass('has-warning', limit - $element.val().length <= 10);
                element.toggleClass('has-error', $element.val().length >= limit);
            });

            $element.bind('keypress', function (event) {
                // Once the limit has been met or exceeded, prevent all keypresses from working
                if ($element.val().length >= limit) {
                    // Except backspace
                    if (event.keyCode != 8) {
                        event.preventDefault();
                    }
                }
            });
        }
    };
});

(function () {
    'use strict';
    app.directive('clipChat', ClipChat);

    function ClipChat() {
        var chatTemplate = '<div>' + '<ol class="discussion">' + '<li class="messages-date" ng-repeat-start="message in newChatArray()" ng-if="displayDate($index) || $index == 0">{{message.date | amDateFormat:\'dddd, MMM D, h:mm a\'}}</li>' + '<li ng-class="{\'self\' : message.idUser == idSelf, \'other\' : message.idUser !== idSelf, \'nextSame\': newChatArray()[$index+1].idUser == message.idUser && !nextDate($index)}" ng-repeat-end>' + '<div class="message">' + '<div class="message-name" ng-if="newChatArray()[$index-1].idUser !== message.idUser || displayDate($index)">{{  message.user }}</div>' + '<div class="message-text">{{ message.content }}</div>' + '<div class="message-avatar"><img ng-src="{{ message.avatar }}" alt=""></div>' + '</div>' + '</li>' + '</ol>';
        var directive = {
            restrict: 'EA',
            template: chatTemplate,
            replace: true,
            scope: {
                messages: "=",
                idSelf: "=",
                idOther: "="
            },
            link: function ($scope, $element, $attrs) {
                $scope.newChatArray = function () {
                    var filtered = [];
                    for (var i = 0; i < $scope.messages.length; i++) {
                        var item = $scope.messages[i];
                        if ((item.idUser == $scope.idSelf || item.idOther == $scope.idSelf) && (item.idUser == $scope.idOther || item.idOther == $scope.idOther)) {
                            filtered.push(item);
                        }
                    }

                    return filtered;
                };

                $scope.displayDate = function (i) {
                    var prevDate, nextDate, diffMs, diffMins;
                    var messages = $scope.newChatArray();
                    if (i === 0) {


                        if (messages.length > 1) {
                            prevDate = new Date(messages[i].date);
                            nextDate = new Date(messages[i + 1].date);
                            diffMs = (nextDate - prevDate);
                            diffMins = Math.round(((diffMs % 86400000) % 3600000) / 60000);
                        } else {
                            return true
                        }
                    } else {
                        prevDate = new Date(messages[i - 1].date);
                        nextDate = new Date(messages[i].date);
                        diffMs = (nextDate - prevDate);
                        diffMins = Math.round(((diffMs % 86400000) % 3600000) / 60000);

                    }
                    if (diffMins > 1) {
                        return true;
                    } else {
                        return false;
                    }
                };
                $scope.nextDate = function (i) {
                    var prevDate, nextDate, diffMs, diffMins;
                    var messages = $scope.newChatArray();
                    if (i < messages.length - 1) {

                        prevDate = new Date(messages[i].date);
                        nextDate = new Date(messages[i + 1].date);
                        diffMs = (nextDate - prevDate);
                        diffMins = Math.round(((diffMs % 86400000) % 3600000) / 60000);

                    }
                    if (diffMins > 1) {
                        return true;
                    } else {
                        return false;
                    }
                };

            }
        };

        return directive;
    }
    app.directive('chatSubmit', SubmitChat);

    function SubmitChat() {
        var submitTemplate = '<form ng-submit="submitChat()">' + '<div class="message-bar">' + '<div class="message-inner">' + '<a href="#" class="link icon-only"><i class="fa fa-camera"></i></a>' + '<div class="message-area"><input placeholder="Message" ng-model="ngModel" /></div>' + '<a translate="offsidebar.chat.SEND" href="#" class="link ng-scope" ng-click="submitChat()">Send</a>' + '</div>' + '</div>' + '</form>' + '</div>';
        var directive = {
            restrict: 'EA',
            template: submitTemplate,
            replace: true,
            scope: {
                submitFunction: "=",
                ngModel: "="
            },
            link: function ($scope, $element, $attrs) {

                $scope.submitChat = function () {
                    $scope.submitFunction();


                    if (typeof $attrs.scrollElement !== "undefined") {
                        var scrlEl = angular.element($attrs.scrollElement);
                        var lastElement = scrlEl.find('.discussion > li:last');
                        if (lastElement.length)
                            scrlEl.scrollToElementAnimated(lastElement);
                    }

                };
            }
        };

        return directive;
    }


})();

'use strict';
/** 
  * Password-check directive.
*/
app.directive('compareTo', function () {
    return {
        require: "ngModel",
        scope: {
            otherModelValue: "=compareTo"
        },
        link: function (scope, element, attributes, ngModel) {

            ngModel.$validators.compareTo = function (modelValue) {
                return modelValue == scope.otherModelValue;
            };

            scope.$watch("otherModelValue", function () {
                ngModel.$validate();
            });
        }
    };
});
'use strict';
/*global app, moment, angular, window*/
/*jslint unparam:true*/
app.directive('blogTeaserComponent', ['WebsiteService', '$filter', function (WebsiteService, $filter) {
  return {
    scope: {
      component: '=',
      ssbEditor: '='
    },
    templateUrl: '/components/component-wrap.html',
    link: function (scope, element, attrs) {
      scope.isEditing = true;
    },
    controller: function ($scope, WebsiteService, $compile) {
      WebsiteService.getPosts(function (posts) {
        $scope.teaserposts = posts;
      });

      $scope.sortBlogFn = function (component) {
        return function (blogpost) {
          if (component.postorder) {
            if (component.postorder == 1 || component.postorder == 2) {
              return Date.parse($filter('date')(blogpost.modified.date, "MM/dd/yyyy HH:mm:ss"));
            }
            if (component.postorder == 3 || component.postorder == 4) {
              return Date.parse($filter('date')(blogpost.created.date, "MM/dd/yyyy HH:mm:ss"));
            }
            if (component.postorder == 5 || component.postorder == 6) {
              return Date.parse($filter('date')(blogpost.publish_date || blogpost.created.date, "MM/dd/yyyy"));
            }
          } else {
            return Date.parse($filter('date')(blogpost.publish_date || blogpost.created.date, "MM/dd/yyyy"));
          }
        };
      };

      $scope.customSortOrder = function (component) {
        if (component.postorder == 1 || component.postorder == 3 || component.postorder == 5) {
          return false;
        }
        if (component.postorder == 2 || component.postorder == 4 || component.postorder == 6) {
          return true;
        }
        return true;
      };
    }
  };
}]);

'use strict';
/*global app, moment, angular, window*/
/*jslint unparam:true*/
app.directive('blogComponent', ['$filter', '$timeout', 'WebsiteService', 'toaster', 'SweetAlert', function ($filter, $timeout, WebsiteService, toaster, SweetAlert) {
  return {
    scope: {
      component: '=',
      media: '&',
      control: '=',
      ssbEditor: '='
    },
    templateUrl: '/components/component-wrap.html',
    link: function (scope, element, attrs) {
        scope.isEditing = true;
        scope.changeBlogImage = function (blog, index) {
            scope.media({
                blog: blog,
                index: index
            });
        };
        scope.deletedPosts = [];
        if(!scope.ssbEditor)
          scope.component.spacing = scope.$parent.defaultSpacings;

        scope.control.saveBlogData = function () {
            _.each(scope.blog.blogposts, function (value, index) {
                var matching_post = _.find(scope.originalBlogPosts, function (item) {
                    return item._id === value._id
                })

                if (!angular.equals(matching_post, value)) {
                    WebsiteService.updatePost(scope.$parent.page._id, value._id, value, function (data) {});
                }
            });

            if (scope.deletedPosts.length) {
                WebsiteService.bulkDeletePosts(scope.$parent.page._id, scope.deletedPosts, function (data) {});
                scope.deletedPosts = [];
            }
        };
    },
    controller: function ($scope, WebsiteService, $compile, $filter, $timeout) {
      $scope.blog = {};
      $scope.showCloud = false;
      WebsiteService.getPosts(function (posts) {
        $scope.blog.blogposts = posts;
        $scope.originalBlogPosts = angular.copy($scope.blog.blogposts);
        $scope.blog.postTags = [];
        $scope.blog.categories = [];

        _.each(posts, function (post) {
          //get post tags for sidebar
          if (post.post_tags) {
            _.each(post.post_tags, function (tag) {
              if ($scope.blog.postTags.indexOf(tag) <= -1) {
                $scope.blog.postTags.push(tag);
              }
            });
          }

          //get post cateogry for sidebar
          if (post.post_category) {
            if ($scope.blog.categories.indexOf(post.post_category) <= -1) {
              $scope.blog.categories.push(post.post_category);
            }
          }

        });

        $scope.activateTagCloud($scope.blog.postTags);

        //if tagname is present, filter the cached posts with the tagname
        // if ($route.current.params.tagname != null) {
        //   var filterPosts = [];
        //   that.currentTag = decodeURIComponent($route.current.params.tagname);
        //   for (var i = 0; i < data.length; i++) {
        //     if (data[i].post_tags) {
        //       var tags = data[i].post_tags;
        //       for (var i2 = 0; i2 < tags.length; i2++) {
        //         if (tags[i2] === $route.current.params.tagname) {
        //           filterPosts.push(data[i]);
        //         }
        //       };
        //     }
        //   };
        //   that.blogposts = filterPosts;
        //   return;
        // }

        //if authorname is present, filter the cached posts with the authorname
        // if ($route.current.params.authorname != null) {
        //   var filterPosts = [];
        //   that.currentAuthor = $route.current.params.authorname;
        //   for (var i = 0; i < data.length; i++) {
        //     if (typeof data[i].post_author !== "undefined") {
        //       if (data[i].post_author === $route.current.params.authorname) {
        //         filterPosts.push(data[i]);
        //       }
        //     }
        //   };
        //   that.blogposts = filterPosts;
        //   return;
        // }

        //if catname is present, filter the cached posts with the catname
        // if ($route.current.params.catname != null) {
        //   var filterPosts = [];
        //   that.currentCat = $route.current.params.catname;
        //   for (var i = 0; i < data.length; i++) {
        //     if (data[i].post_category) {
        //       if (data[i].post_category === $route.current.params.catname) {
        //         filterPosts.push(data[i]);
        //       }
        //     }
        //   };
        //   that.blogposts = filterPosts;
        //   return;
        // }

        // if ($route.current.params.postname != null) {
        //   var found = $filter('getByProperty')('post_url', $route.current.params.postname, data);
        //   if (found) {
        //     that.post = found;
        //     that.blogPageUrl = $location.$$absUrl;
        //     if ($scope.parentScope) {
        //       $scope.parentScope.loadPost && $scope.parentScope.loadPost(found);
        //       $scope.copyPostMode();
        //     }
        //   }
        //   return;
        // }
      });

      $scope.activateTagCloud = function (tags, update) {
        var _tagCloud = [];
        _.each(tags, function (tag) {
          var default_size = 2;
          var count = _.countBy(_.flatten(tags), function (num) {
            return num === tag;
          })["true"];
          if (count) {
            default_size += count;
          }
          _tagCloud.push({
            text: tag,
            weight: default_size, //Math.floor((Math.random() * newValue.length) + 1),
            link: '/tag/' + tag
          });
        });
        $scope.rendered = false;
        $scope.tagCloud = _tagCloud;
        $timeout(function () {
          $(".jqcloud").jQCloud($scope.tagCloud, {
            autoResize: true,
            width: 230,
            height: 300,
            afterCloudRender: function () {
              if (!$scope.rendered) {
                $scope.rendered = true;
                angular.element('.jqcloud').css({
                  'width': '100%'
                });
                angular.element('.jqcloud').jQCloud('update', $scope.tagCloud);
              }
            }
          });
        }, 1000);
        if(update)
          angular.element('.jqcloud').jQCloud('update', $scope.tagCloud);
      };

      /********** BLOG PAGE PAGINATION RELATED **********/
      $scope.curPage = 0;
      $scope.pageSize = 10;
      $scope.numberOfPages = function () {
        if ($scope.blog.blogposts) {
          return Math.ceil($scope.blog.blogposts.length / $scope.pageSize);
        }

        return 0;
      };

      $scope.sortBlogFn = function (component) {
        return function (blogpost) {
          if (component.postorder) {
            if (component.postorder == 1 || component.postorder == 2) {
              return Date.parse($filter('date')(blogpost.modified.date, "MM/dd/yyyy HH:mm:ss"));
            }
            if (component.postorder == 3 || component.postorder == 4) {
              return Date.parse($filter('date')(blogpost.created.date, "MM/dd/yyyy HH:mm:ss"));
            }
            if (component.postorder == 5 || component.postorder == 6) {
              return Date.parse($filter('date')(blogpost.publish_date || blogpost.created.date, "MM/dd/yyyy"));
            }
          } else {
            return Date.parse($filter('date')(blogpost.publish_date || blogpost.created.date, "MM/dd/yyyy"));
          }
        };
      };

      $scope.customSortOrder = function (component) {
        if (component.postorder == 1 || component.postorder == 3 || component.postorder == 5) {
          return false;
        }
        if (component.postorder == 2 || component.postorder == 4 || component.postorder == 6) {
          return true;
        }

        return true;
      };

      $scope.$watch('component.version', function (newValue, oldValue) {
        if(newValue && oldValue && newValue != oldValue){
          $timeout(function () {
            if(angular.element(".jqcloud").length)
              $scope.activateTagCloud($scope.blog.postTags);
          },1000)
        }
      })

      $scope.deleteBlogPost = function (postId, blogpost) {
        SweetAlert.swal({
        title: "Are you sure?",
        text: "Do you want to delete this post",
        type: "warning",
        showCancelButton: true,
        confirmButtonColor: "#DD6B55",
        confirmButtonText: "Yes, delete post!",
        cancelButtonText: "No, do not delete post!",
        closeOnConfirm: false,
        closeOnCancel: true
      }, function (isConfirm) {
        if (isConfirm) {
          //WebsiteService.deletePost($scope.$parent.page._id, postId, function (data) {
            var index = $scope.blog.blogposts.indexOf(blogpost);
            $scope.blog.blogposts.splice(index, 1);
            toaster.pop('success', 'Post deleted successfully');
            SweetAlert.swal("Saved!", "Post deleted.", "success");
            $scope.deletedPosts.push(postId);
            $scope.$parent.setDirty(true); 
            //Refresh tags
            $scope.blog.postTags = [];
            _.each($scope.blog.blogposts, function (post) {
              if (post.post_tags) {
                _.each(post.post_tags, function (tag) {
                  if ($scope.blog.postTags.indexOf(tag) <= -1) {
                    $scope.blog.postTags.push(tag);
                  }
                });
              }
            });
            $scope.activateTagCloud($scope.blog.postTags, true);
        }
      });
      console.log('delete post');

      };
    }
  };
}]);

'use strict';
/*global app, moment, angular, window*/
/*jslint unparam:true*/
app.directive('comingSoonComponent', function () {
  return {
    scope: {
      component: '=',
      ssbEditor: '='
    },
    templateUrl: '/components/component-wrap.html',
    link: function (scope, element, attrs) {
      scope.isEditing = true;
    }
  };
});
'use strict';
/*global app, moment, angular, window, CKEDITOR, L*/
/*jslint unparam:true*/
app.directive('contactUsComponent', ['AccountService', 'GeocodeService', '$timeout', '$window', function (AccountService, GeocodeService, $timeout, $window) {
  return {
    scope: {
      component: '=',
      control: '=?',
      ssbEditor: '='
    },
    templateUrl: '/components/component-wrap.html',
    link: function (scope, element, attrs) {
      scope.isEditing = true;
      if (!scope.component.map) {
        scope.component.map = {};
        if (!scope.component.map.zoom) {
          scope.component.map.zoom = 10;
        }
      }
      if(!scope.component.custom)
      {
        scope.component.custom = {
          hours: true, address: true
        };
      }
      if(!scope.component.boxProperties)
      {
        scope.component.boxProperties = {};
      }

      // Set bg image show always false for contact component

      if(!angular.isDefined(scope.component.bg))
        scope.component.bg = {};
      if(!angular.isDefined(scope.component.bg.img))
        scope.component.bg.img = {};
      if(!angular.isDefined(scope.component.bg.img.show))
        scope.component.bg.img.show = false;

      scope.component.bg.img.show = false;

      function hexToRgb(hex, opacity) {
        var c;
        opacity = angular.isDefined(opacity) ? opacity : 1;
        c = hex.substring(1).split('');
        if(c.length== 3){
            c= [c[0], c[0], c[1], c[1], c[2], c[2]];
        }
        c= '0x'+c.join('');
        return 'rgba('+[(c>>16)&255, (c>>8)&255, c&255].join(',')+','+ opacity +')';
      };
      scope.$watch('component.boxColor', function (newValue, oldValue) {
        if (newValue && scope.component.boxColor) {
          scope.boxColor = hexToRgb(scope.component.boxColor, scope.component.boxOpacity);
        }
        else{
          scope.boxColor = null;
        }
      });
      scope.$watch('component.boxOpacity', function (newValue, oldValue) {
        if (angular.isDefined(newValue) && scope.component.boxColor) {
          scope.boxColor = hexToRgb(scope.component.boxColor, scope.component.boxOpacity);
        }
      });

      scope.setBusinessDetails = function(is_address, fn)
      {
        if(is_address){
          if (scope.account.business.addresses && scope.account.business.addresses.length > -1) {
           angular.copy(scope.account.business.addresses[0], scope.component.location);
          }
        }
        else if (scope.account.business.hours) {
          angular.copy(scope.account.business.hours, scope.component.hours);
          var _splitHours = scope.account.business.splitHours;
          scope.component.splitHours = _splitHours;
        }
        fn();
      }

      scope.reloadMap = function()
      {
         google.maps.event.trigger(scope.map, 'resize');
         scope.map.setCenter(new google.maps.LatLng(scope.component.location.lat, scope.component.location.lon));
      }

      scope.updateContactUsAddress = function () {
        setTimeout(function () {
          scope.$apply(function () {
               scope.contactAddress = GeocodeService.stringifyAddress(scope.component.location, true);
          });
          if (scope.component.location.lat && scope.component.location.lon) {
            scope.reloadMap();
          } else {
              GeocodeService.validateAddress(scope.component.location, null, function (data, results) {
                if (data && results.length === 1) {
                  scope.component.location.lat = results[0].geometry.location.lat();
                  scope.component.location.lon = results[0].geometry.location.lng();
                  scope.reloadMap();
                }
                else{
                  GeocodeService.getGeoSearchAddress(scope.contactAddress, function (data) {
                    if (data.lat && data.lon) {
                      scope.component.location.lat = data.lat;
                      scope.component.location.lon = data.lon;
                      scope.reloadMap();
                    }
                  })
                }
              });
            }
        }, 500);
      };
      scope.$on('mapInitialized', function(event, map) {
        scope.map = map;
        google.maps.event.trigger(scope.map, 'resize');
        scope.map.setCenter(new google.maps.LatLng(51, 0));
      });

        // if (!scope.control) {
        //     scope.control = {};
        // }

        scope.control.refreshMap = function () {
          if ((!scope.component.location.address && !scope.component.location.address2 && !scope.component.location.city && !scope.component.location.state && !scope.component.location.zip) || !scope.component.custom.address) {
            scope.setBusinessDetails(true, function () {
                scope.updateContactUsAddress();
            });
          } else {
            scope.updateContactUsAddress();
          }
        };

        scope.control.refreshHours = function () {
          if (!scope.component.custom.hours)
            scope.setBusinessDetails(false, function () {
              console.log("hours refreshed");
            });
        };


        scope.$parent.$watchGroup(['ckeditorLoaded', 'vm.uiState.loaded'], function (newValue, oldValue) {
            if (newValue[0] || newValue[1] && scope.component.visibility) {
                AccountService.getAccount(function (account) {

                    scope.account = account;

                    if (!scope.component.custom.hours) {
                        scope.setBusinessDetails(false, function () {
                            console.log("hours refreshed");
                        });
                    }

                    if ((!scope.component.location.address &&
                        !scope.component.location.address2 &&
                        !scope.component.location.city &&
                        !scope.component.location.state &&
                        !scope.component.location.zip) ||
                        !scope.component.custom.address) {

                        scope.setBusinessDetails(true, function () {
                            $timeout(function () {
                                scope.updateContactUsAddress();
                            }, 500);
                        });

                    } else {

                        $timeout(function () {
                            scope.updateContactUsAddress();
                        }, 500);
                    }

                });
            }
        });

        scope.$on("angular-resizable.resizeEnd", function (event, args) {
            var calculated_size = args;
            if (calculated_size.width === false) {
                scope.component.boxProperties.height = calculated_size.height;
            } else if (calculated_size.height === false) {
                scope.component.boxProperties.width = calculated_size.width;
            }
        });

        scope.calcMaxWidth = function(element){
            var el = angular.element("."+element);
            if(el.length){
                var w = el.width();
                // - 100 margin-left
                // -50 margin right
                return (w - 100 - 50) + 'px';
            }
        }

        angular.element($window).bind('resize', function () {
            if(scope.map){
                $timeout(function () {
                    google.maps.event.trigger(scope.map, 'resize');
                }, 500);
            }
        });

    }

  };

}]);

'use strict';
/*global app, moment, angular, window*/
/*jslint unparam:true*/
app.directive('emailComponent', function () {
  return {
    scope: {
      component: '=',
      ssbEditor: '='
    },
    templateUrl: '/components/component-wrap.html',
    link: function (scope, element, attrs) {
      scope.isEditing = true;
    }
  };
});
'use strict';
/*global app, moment, angular, window*/
/*jslint unparam:true*/
app.directive('featureBlockComponent', function () {
  return {
    scope: {
      component: '=',
      ssbEditor: '='
    },
    templateUrl: '/components/component-wrap.html',
    link: function (scope, element, attrs) {
      scope.isEditing = true;
    }
  };
});
'use strict';
/*global app, moment, angular, window*/
/*jslint unparam:true*/
app.directive('featureListComponent',["$window", "$timeout", function ($window, $timeout) {
  return {
    scope: {
      component: '=',
      ssbEditor: '='
    },
    templateUrl: '/components/component-wrap.html',
    link: function (scope, element, attrs, ctrl) {

        scope.isEditing = true;
        scope.addFeatureList = function (index) {
            if (!index) {
                index = 0;
            }
            var newFeature = {
            "top": "<div style='text-align:center'><span class=\"fa fa-arrow-right\" style=\"color:#ffffff;font-size:96px;\"></span></div>",
            "content": "<div style=\"text-align: center;\"><br><span style=\"font-size:24px;\">Feature Title</span></div><div style=\"text-align: center;\"><br>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Nisi ab, placeat. Officia qui molestiae incidunt est adipisci.</div><div style=\"text-align: center;\"><br><a class=\"btn ssb-theme-btn\" data-cke-saved-href=\"http://\" href=\"http://\">Learn More</a></div>"
            };
            scope.component.features.splice(index + 1, 0, newFeature);
        };

        scope.deleteFeatureList = function (index) {
            scope.component.features.splice(index, 1);
        };

        scope.featureClass = function(){
            var parent_id = scope.component.anchor || scope.component._id;
            var element = angular.element("#"+parent_id + " div.features-wrap")
            if(element.width() < 768){
                return "feature-xs-width";
            }
            else if(element.width() < 992){
                return "feature-sm-width";
            }
            else{
                return "";
            }
        }
    }
  };
}]);

'use strict';
/*global app, moment, angular, window*/
/*jslint unparam:true*/
app.directive('footerComponent', ['WebsiteService', function (WebsiteService) {
  return {
    scope: {
      component: '=',
      ssbEditor: '='
    },
    templateUrl: '/components/component-wrap.html',
    link: function (scope, element, attrs, ctrl) {
      scope.isEditing = true;
      if(!scope.ssbEditor)
        scope.component.spacing = scope.$parent.defaultSpacings;
      scope.copyright = {
        year: new Date().getFullYear()
      }
      scope.copyrightYear = new Date().getFullYear();
      WebsiteService.getWebsite(function (website) {
        scope.website = website;
      });
      // Check for legacy pages
      if(!element.parents(".ssb-section-layout").length){
        element.addClass("legacy-footer");
      }

    }
  };
}]);

'use strict';

/*global app, moment, angular, window, CKEDITOR*/
/*jslint unparam:true*/
app.directive('imageGalleryComponent', ['$timeout', function ($timeout) {
  return {
    scope: {
        component: '=',
        media: '&',
        ssbEditor: '='
    },
    templateUrl: '/components/component-wrap.html',
    link: function (scope, element, attrs, ctrl) {
        scope.isEditing = true;
        scope.$parent.$watch('vm.uiState.loaded', function (newValue, oldValue) {
            if (newValue) {
                scope.dataLoaded = true;
            }
        });
        /*
        * @addImageFromMedia
        * -
        */

        scope.addImageFromMedia = function (componentId, index, update) {
            scope.media({
                componentId: componentId,
                index: index,
                update: update,
                fields: {
                    title: '<span style="font-size: 30px;">Service Title Here</span>'
                }
            });
        };

        /*
        * @deleteImageFromGallery
        * -
        */

        scope.deleteImageFromGallery = function (index) {
            scope.$broadcast('$refreshSlickSlider', index);
            var images = angular.copy(scope.component.images);
            images.splice(index, 1);
            scope.component.images = images;
        };

        scope.touchMove = false;
        scope.draggable = false;
        scope.autoplay = false;
    }
  };
}]);

'use strict';
/*global app, moment, angular, window*/
/*jslint unparam:true*/
app.directive('imageTextComponent', function () {
  return {
    scope: {
      component: '=',
      ssbEditor: '='
    },
    templateUrl: '/components/component-wrap.html',
    link: function (scope, element, attrs) {
      scope.isEditing = true;
    }
  };
});

'use strict';
/*global app, moment, angular, window*/
/*jslint unparam:true*/
app.directive('mastheadComponent',['$window', '$timeout', 'SimpleSiteBuilderService', function ($window, $timeout, SimpleSiteBuilderService) {
    return {
        scope: {
            component: '=',
            ssbEditor: '='
        },
        templateUrl: '/components/component-wrap.html',

        link: function (scope, element, attrs) {

            scope.addUndernavImages = function() {
                if(scope.component.bg && scope.component.bg.img && scope.component.bg.img.url && scope.component.bg.img.show && scope.component.bg.img.undernav) {
                    scope.addUndernavClasses = true;
                } else {
                    scope.addUndernavClasses = false;
                }
            }

            angular.element('body').on("click", ".navbar-toggle", function (e) {
                scope.setUnderbnavMargin();
            });

            angular.element($window).bind('resize', function () {
                console.log("resize");
                scope.setUnderbnavMargin();
            });

            scope.setUnderbnavMargin = function () {

                scope.allowUndernav = false;
                scope.addBgImage = true;

                SimpleSiteBuilderService.addUnderNavSetting(scope.component._id, function (data) {
                  scope.allowUndernav = data.allowUndernav;
                  scope.navComponent = data.navComponent;
                });

                scope.addUndernavImages();

                $timeout(function () {

                    var mastheadElement = angular.element(".component_wrap_"+scope.component._id+".undernav200");
                    var mastheadUnderNavElement = angular.element(".masthead_"+scope.component._id+".mastHeadUndernav");

                    if (scope.addUndernavClasses && scope.allowUndernav) {

                        var navHeight = angular.element(".undernav").height();
                        var margin =  navHeight;
                        var impmargin = "margin-top: -"+ margin + 'px !important';

                        if (mastheadElement) {
                            mastheadElement.attr('style',impmargin);
                            //mastheadElement.addClass("masthead-undernav");
                        }

                        var addNavBg = true;

                        angular.element(".undernav").addClass("nav-undernav");

                        if (scope.navComponent) {
                            if (scope.navComponent.bg && scope.navComponent.bg.img && !scope.navComponent.bg.img.show && scope.navComponent.bg.color){
                                addNavBg = false;
                            }
                        }

                        if (addNavBg) {
                            angular.element(".nav-undernav .bg").addClass("bg-nav-undernav");
                        } else {
                            angular.element(".nav-undernav .bg").removeClass("bg-nav-undernav");
                            angular.element(".undernav").closest('li.fragment').addClass("li-nav-undernav");
                        }

                        if (mastheadUnderNavElement) {
                            mastheadUnderNavElement.css("height", margin);
                        }

                        if (angular.element(".masthead-actions")) {
                            angular.element(".masthead-actions").addClass("hover-action");
                        }


                    } else {

                        if (mastheadElement) {
                            mastheadElement.attr('style',"margin-top:0px");
                        }
                        if (angular.element(".masthead-actions")) {
                            angular.element(".masthead-actions").removeClass("hover-action");
                        }

                        angular.element(".nav-undernav .bg").removeClass("bg-nav-undernav");
                        angular.element(".undernav").removeClass("nav-undernav");

                        //mastheadElement.removeClass("masthead-undernav");
                        angular.element(".undernav").closest('li.fragment').removeClass("li-nav-undernav");
                    }

                    $(window).trigger('scroll');

                }, 2000);
            };

            scope.$watch('component.bg.img', function (newValue, oldValue) {
                if (angular.isDefined(newValue)){
                console.log("Watch performed");
                scope.setUnderbnavMargin();
                }
            }, true);

            scope.isEditing = true;

        }
  };

}]);

'use strict';
/*global app, moment, angular, window*/
/*jslint unparam:true*/
app.directive('meetTeamComponent',["$window", function ($window) {
  return {
    scope: {
      component: '=',
      media: '&',
      ssbEditor: '='
    },
    templateUrl: '/components/component-wrap.html',
    link: function (scope, element, attrs, ctrl) {
        scope.isEditing = true;

        scope.addImageFromMedia = function (componentId, index, update) {
            scope.media({
            componentId: componentId,
            index: index,
            update: update
            });
        };

      /*
       * @deleteTeamMember
       * -
       */

        scope.deleteTeamMember = function (index) {
            console.log('index', index);
            scope.component.teamMembers.splice(index, 1);
        };

        scope.addTeamMember = function (index) {
            if (!index) {
              index = 0;
            }
            var newTeam = {
              "name": "<p>First Last</p>",
              "position": "<p>Position of Person</p>",
              "profilepic": "https://s3-us-west-2.amazonaws.com/indigenous-admin/default-user.png",
              "bio": "<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Explicabo laboriosam, officiis vero eius ipsam aspernatur, quidem consequuntur veritatis aut laborum corporis impedit, quam saepe alias quis tempora non. Et, suscipit.</p>",
              "networks": [{
                "name": "linkedin",
                "url": "http://www.linkedin.com",
                "icon": "linkedin"
              }]
            };
            scope.component.teamMembers.splice(index + 1, 0, newTeam);
        };

        scope.teamClass = function(){
            var parent_id = scope.component.anchor || scope.component._id;
            var element = angular.element("#"+parent_id + " div.team-member-wrap")
            if(element.width() < 768){
                return "team-xs-width";
            }
            else if(element.width() < 992){
                return "team-sm-width";
            }
            else{
                return "";
            }
        }

    }
  };
}]);

'use strict';
/*global app, moment, angular, window*/
/*jslint unparam:true*/
app.directive('navigationComponent', ['WebsiteService', 'AccountService', '$timeout', function (WebsiteService, AccountService, $timeout) {
  return {
    scope: {
      component: '=',
      version: '=',
      ssbEditor: '=',
      website: '=?',
      control: '='
    },
    templateUrl: '/components/component-wrap.html',
    link: function (scope, element, attrs) {
        scope.isEditing = true;
        if(!scope.ssbEditor){
            if(!angular.isDefined(scope.component.shownavbox))
                scope.component.shownavbox = true;
            scope.control.refreshWebsiteLinks = function (lnklist) {
                scope.website.linkLists = lnklist;
            };
        }
        scope.$watch('component.logo', function (newValue, oldValue) {
            $timeout(function () {
                $(window).trigger('resize');
            }, 0);
        });

    },
    controller: function ($scope, WebsiteService, AccountService, $compile) {
      $scope.isSinglePost = $scope.$parent.isSinglePost;
      if (!$scope.website) {
        if ($scope.$parent.website) {
          $scope.website = $scope.$parent.website;
        } else {
          WebsiteService.getWebsite(function (website) {
            $scope.website = website;
          });

          AccountService.getAccount(function (account) {
            $scope.account = account;
          });
        }
      }
      $scope.currentpage = $scope.$parent.page;

      $scope.$parent.$watch('vm.state.page', function(page) {
        if(page)
          $scope.currentpage = page;
      }, true);
    }
  };
}]);

'use strict';
/*global app, moment, angular, window*/
/*jslint unparam:true*/
app.directive('pricingTablesComponent', function () {
  return {
    scope: {
      component: '=',
      ssbEditor: '='
    },
    templateUrl: '/components/component-wrap.html',
    link: function (scope, element, attrs, ctrl) {
      scope.isEditing = true;
      scope.addPricingTableFeature = function (componentId, index) {
        console.log('add feature');
      };
      scope.deletePricingTableFeature = function (componentId, index) {
        console.log('delete feature');
      };
      scope.addPricingTable = function (componentId, index) {
        console.log('add table');
      };
      scope.deletePricingTable = function (componentId, index) {
        console.log('delete table');
      };
    }
  };
});

'use strict';
/*global app, moment*/
app.directive('productsComponent', ['ProductService', '$location', '$timeout', 'AccountService', function (ProductService, $location, $timeout, AccountService) {
  return {
    scope: {
      component: '=',
      ssbEditor: '='
    },
    templateUrl: '/components/component-wrap.html',
    link: function (scope) {
      //show editing in admin
      scope.isEditing = true;
      //assign and hold the checkout modal state
      scope.checkoutModalState = 1;
      //assign and hold the currentProductPage for pagination
      scope.currentProductPage = 1;

      /*
       * @filterTags
       * - if component has tags filter them or return the _product
       */

      function filterTags(_product) {
        var _tags = scope.component.productTags;
        if (_tags && _tags.length > 0) {
          if (_product.tags) {
            if (_.intersection(_tags, _product.tags).length > 0) {
              return true;
            }
          }
        } else {
          return true;
        }
      }

      /*
       * @checkOnSale
       * - check if today is inbetween sales dates
       */

      function checkOnSale(_product) {
        if (_product.on_sale) {
          if (_product.sale_date_from && _product.sale_date_to) {
            var date = new Date();
            var startDate = new Date(_product.sale_date_from);
            var endDate = new Date(_product.sale_date_to);
            if (startDate <= date && date <= endDate) {
              return true; //false in this case
            }
            return false;
          }
          return true;
        }
      }

      /*
       * @filterProducts
       * - filter the products and assign them to the scope
       */

      function filterProducts(data, fn) {
        var _filteredProducts = [];
        _.each(data, function (product) {
          if (filterTags(product)) {
            if (checkOnSale(product)) {
              product.onSaleToday = true;
            }
            _filteredProducts.push(product);
          }
        });
        var activeProducts =_.filter(_filteredProducts, function(product){ return product.type !== 'DONATION'})
        scope.products = activeProducts;
        if (fn) {
          fn();
        }
      }

      /*
       * @watch:numtodisplay
       * - watch for the display number to change in the component settings
       */

      scope.$watch('component.numtodisplay', function (newValue, oldValue) {
        if (newValue !== oldValue) {
          scope.component.numtodisplay = parseInt(newValue) > 0 ? parseInt(newValue) : 0;
          filterProducts(scope.originalProducts, function () {
            scope.pageChanged(1);
          });
        }
      });

      /*
       * @watch:productTags
       * - watch for product tags to change in component settings and filter products
       */

      scope.$watch('component.productTags', function (newValue, oldValue) {
        if (newValue !== oldValue) {
          scope.component.productTags = newValue;
          filterProducts(scope.originalProducts, function () {
            scope.pageChanged(1);
          });
        }
      });

      /*
       * @getAllProducts
       * - get products for products and pricing table components
       */

      ProductService.getActiveProducts(function (data) {
        scope.originalProducts = angular.copy(data);
        filterProducts(data, function () {
          scope.pageChanged(1);
        });
      });

      AccountService.getAccount(function(account) {
        scope.account = account;
        scope.paypalInfo = null;
        scope.stripeInfo = null;
        scope.account.credentials.forEach(function(cred, index) {
            if (cred.type == 'stripe') {
                scope.stripeInfo = cred;
            }
        });
        scope.paypalInfo = scope.account.commerceSettings.paypal;
      });

      /*
       * @pageChanged
       * - when a page is changes splice the array to show offset products
       */

      scope.pageChanged = function (pageNo) {
        scope.currentProductPage = pageNo;
        if (scope.products) {
          var begin = ((scope.currentProductPage - 1) * scope.component.numtodisplay);
          var numDisplay = scope.component.numtodisplay;
          //check if set to 0 and change to all products
          if (numDisplay === 0) {
            numDisplay = scope.products.length;
          }
          var end = begin + numDisplay;
          scope.filteredProducts = scope.products.slice(begin, end);
          $timeout(function () {
            $(window).trigger('resize');
            console.log("Products loaded");
          }, 0);
        }
      };

      scope.addProducts = function()
      {
        $location.path('/commerce/products');
      }
    }
  };
}]);

'use strict';
/*global app, moment, angular, window*/
/*jslint unparam:true*/
app.directive('simpleFormComponent',["formValidations", function (formValidations) {
  return {
    scope: {
      component: '=',
      ssbEditor: '='
    },
    templateUrl: '/components/component-wrap.html',
    link: function (scope, element, attrs) {

      scope.isEditing = true;
      scope.nthRow = 'nth-row';
      scope.formValidations = formValidations;
      if(!angular.isDefined(scope.component.tags)){
        scope.component.tags = [];
        if(scope.component.contact_type)
          scope.component.tags.push(scope.component.contact_type);
      }
      var nameExists = _.find(scope.component.fields, function (_field) {
        return _field.name === 'extension';
      });
      if(!nameExists)
      {
        scope.component.fields.push({"display" : "Phone Extension", "value" : false,"name" : "extension"})
      }

      scope.fieldClass = function(field){
        var classString = 'col-sm-12';

        if(scope.component.formSettings && scope.component.formSettings.fieldsPerRow > 0){
          classString = "col-sm-" + Math.floor(12/scope.component.formSettings.fieldsPerRow);
          if(scope.component.formSettings.spacing && scope.component.formSettings.spacing.pr)
            scope.nthRow = 'nth-row' + scope.component.formSettings.fieldsPerRow;
        }
        return classString;
      };

      scope.fieldShow = function (name) {
        var field = _.find(scope.component.fields, function (_field) {
          return _field.name === name;
        });

        if(field) {
          if (field.value) {
            return true;
          }
        }
      };

      scope.fieldStyle = function(field){
        var styleString = ' ';
        if (field && field.spacing) {
            if (field.spacing.mb) {
                styleString += 'margin-bottom: ' + field.spacing.mb + 'px;';
            }
        }
        return styleString;
      };

      scope.inputStyle = function(field){
        var styleString = ' ';
        if (field && field.align) {
            styleString += 'text-align: ' + field.align + ";";
        }
        if (field && field.inputTextSize) {
            styleString += 'font-size: ' + field.inputTextSize  + 'px !important;';
        }
        if (field && field.inputFontFamily) {
            styleString += 'font-family: ' + field.inputFontFamily + ";";
        }
        if (field && field.inputBgColor) {
            styleString += 'background-color: ' + field.inputBgColor + "!important;";
        }
        if (field && field.inputBorderColor) {
            styleString += 'border-color: ' + field.inputBorderColor + ";";
        }
        if (field && field.inputTextColor) {
            styleString += 'color: ' + field.inputTextColor + ";";
        }
        return styleString;
      };

      scope.buttonStyle = function(btn){
        var styleString = '';
        if (btn && btn.align) {
            if(btn.align === 'left' || btn.align === 'right')
              styleString += 'float: ' + btn.align + ";";

            if(btn.align === 'center'){
              styleString += 'margin: 0 auto;';
            }
        }
        return styleString;
      };

      scope.formStyle = function(form){
        var styleString = '';
        if(form){
            if (form.formFontFamily) {
                styleString += 'font-family: ' + form.formFontFamily + ";";
            }
            if (form.formTextColor) {
                styleString += 'color: ' + form.formTextColor + ";";
            }
        }
        return styleString;
      };
    }
  };
}]);

'use strict';
/*global app, moment, angular, window*/
/*jslint unparam:true*/
app.directive('singlePostComponent', ['$location', "WebsiteService", "$timeout", function ($location, WebsiteService, $timeout) {
  return {
    scope: {
      component: '=',
      control: '=',
      ssbEditor: '='
    },
    templateUrl: '/components/component-wrap.html',
    link: function (scope, element, attrs) {
      if(!scope.ssbEditor)
        scope.component.spacing = scope.$parent.defaultSpacings;
      scope.isEditing = true;
      scope.blog = {};
      scope.datePicker = {};
      /*
       * @dateOptions
       * -
       */

      scope.dateOptions = {
        formatYear: 'yy',
        startingDay: 1
      };

      /*
       * @open
       * -
       */

      scope.open = function ($event) {
        $event.preventDefault();
        $event.stopPropagation();
        scope.datePicker.isOpen = true;
      };

      /*
       * @endOpen
       * -
       */

      scope.endOpen = function ($event) {
        $event.preventDefault();
        $event.stopPropagation();
        scope.startOpened = false;
        scope.endOpened = !scope.endOpened;
      };

      /*
       * @startOpen
       * -
       */

      scope.startOpen = function ($event) {
        $event.preventDefault();
        $event.stopPropagation();
        scope.endOpened = false;
        scope.startOpened = !scope.startOpened;
      };
      if (scope.$parent.blog) {
        scope.blog.post = scope.$parent.blog.post;
      };
      scope.control.getSinglePost = function () {
        return scope.blog.post;
      };
      scope.control.setSinglePost = function () {
        return scope.blog.post = scope.$parent.blog.post;;
      };
      scope.getEncodedUrl = function(url){
        return encodeURI(url);
      }
      scope.getPlainTitle=function(title){
        var returnValue = title;
        if(title){
          var element = angular.element(".plain-post-title");
          if(element && element.length){
            returnValue = element.text().trim();
          }
        }
        return returnValue;
      }
    }
  };
}]);

'use strict';
/*global app, moment, angular, window*/
/*jslint unparam:true*/
app.directive('socialLinkComponent', ["$modal", "$timeout", function ($modal, $timeout) {
  return {
    scope: {
      component: '=',
      ssbEditor: '='
    },
    templateUrl: '/components/component-wrap.html',
    link: function (scope, element, attrs, ctrl) {

      scope.isEditing = true;
      scope.sortableConfig = {
        animation: 150,
        onSort: function (evt) {

        },
        onStart: function (evt) {
            console.log('onStart')
        },
        onEnd: function (evt) {
            console.log('end')
        }
      };


      $timeout(function() {
        scope.loadSocialLinks = true;
      },500);
    }
  };
}]);

'use strict';
/*global app, moment, angular, window*/
/*jslint unparam:true*/
app.directive('testimonialsComponent', ['$timeout', function ($timeout) {
  return {
    scope: {
      component: '=',
      control: '=',
      ssbEditor: '='
    },
    templateUrl: '/components/component-wrap.html',
    link: function (scope, element, attrs) {
        scope.touchMove = false;
        scope.draggable = false;
        scope.autoplay = false;
        scope.isEditing = true;

        if(!scope.component.slider) {
            scope.component.slider = {
                speed: 300, autoPlay: true, autoPlayInterval: 5000
            };
        }

        scope.autoplay = false;
        scope.accessibility = false;

        scope.$parent.$watchGroup(['ckeditorLoaded', 'vm.uiState.loaded'], function (newValue, oldValue) {
            if (newValue[0] || newValue[1]) {
                scope.dataLoaded = true;
            }
        });

        scope.newTestimonial = scope.component.newSlide ? angular.copy(scope.component.newSlide) : {
            "img": "<img src='https://s3-us-west-2.amazonaws.com/indigenous-admin/default-user.png'/>",
            "name": "First Last",
            "site": "www.examplesite.com",
            "text": "This is the testimonial."
        };

        function addRemoveTestimonials(index, add){
            scope.$broadcast('$refreshSlickSlider', index + 1);
            var testimonials = angular.copy(scope.component.testimonials);
            if(add){
                testimonials.splice(index + 1, 0, angular.copy(scope.newTestimonial));
            } else {
                testimonials.splice(index, 1);
            }
            scope.component.testimonials = testimonials;

        };

        scope.deleteTestimonial = function (index) {
            console.log(index);
            addRemoveTestimonials(index, false);
        };
        scope.addTestimonial = function (index) {
            console.log(index);
            addRemoveTestimonials(index, true);
        };

        scope.control.refreshSlider = function () {
            scope.dataLoaded = false;
            $timeout(function () {
                scope.dataLoaded = true;
            });
        };

    }
  };
}]);

'use strict';
/*global app, moment, angular, window*/
/*jslint unparam:true*/
app.directive('textOnlyComponent', function () {
  return {
    scope: {
      component: '=',
      ssbEditor: '='
    },
    templateUrl: '/components/component-wrap.html',
    link: function (scope, element, attrs) {
      scope.isEditing = true;
    }
  };
});

'use strict';
/*global app, moment, angular, window*/
/*jslint unparam:true*/
app.directive('thumbnailSliderComponent', ['$window', '$timeout', '$rootScope', function ($window, $timeout, $rootScope) {
  return {
    scope: {
      component: '=',
      media: '&',
      control: '=',
      ssbEditor: '='
    },
    templateUrl: '/components/component-wrap.html',
    link: function (scope, element, attrs) {
      scope.isEditing = true;
      scope.imagesPerPage = 4;
      scope.slider = [];
      var w = angular.element($window);
      var check_if_mobile = mobilecheck();
      function mobilecheck() {
        var check = false;
        (function (a, b) {
          if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) check = true
        })(navigator.userAgent || navigator.vendor || window.opera);
        return check;
      };

      var winWidth = w.width();

      scope.bindThumbnailSlider = function (width, is_mobile) {
        scope.showSlider = false;
        var thumbnail = scope.component.thumbnailCollection;
        var number_of_arr = 4;
        if(scope.component.layoutModifiers && scope.component.layoutModifiers.columns){
            number_of_arr = scope.component.layoutModifiers.columns
        }
        if (width < 768 || is_mobile) {
          number_of_arr = 1;
        }
        scope.imagesPerPage = number_of_arr;
        scope.slider = partition(thumbnail, number_of_arr);
        if (scope.slider.length > 1) {
          scope.displayThumbnailPaging = true;
        } else {
          scope.displayThumbnailPaging = false;
        }
        $timeout(function () {
          scope.showSlider = true;
        }, 0);

      };

      scope.deleteImageFromThumbnail = function (index, parentIndex) {
        var imageIndex = parentIndex > 0 ? (parentIndex * scope.imagesPerPage + index) : index;
        scope.component.thumbnailCollection.splice(imageIndex, 1);
        scope.bindThumbnailSlider(winWidth, check_if_mobile);
      };


      scope.bindThumbnailSlider(winWidth, check_if_mobile);

      function partition(arr, size) {
        var newArr = [];
        var isArray = angular.isArray(arr[0]);
        if (isArray) {
          return arr;
        }
        for (var i = 0; i < arr.length; i += size) {
          newArr.push(arr.slice(i, i + size));
        }
        return newArr;
      }

      scope.$on('refreshThumbnailSlider', function (event, args) {
        scope.bindThumbnailSlider(winWidth, check_if_mobile);
      });

      scope.control.refreshSlider = function () {
        scope.bindThumbnailSlider(winWidth, check_if_mobile);
      };

        angular.element($window).bind('resize', function () {
            scope.bindThumbnailSlider(w.width());
        });

      /*
       * @addImageFromMedia
       * -
       */

      scope.addImageFromMedia = function (componentId, index, update, parentIndex) {
        var imageIndex = parentIndex > 0 ? (parentIndex * scope.imagesPerPage + index) : index;
        scope.media({
          componentId: componentId,
          index: imageIndex,
          update: update
        });
      };

    }
  };
}]);

'use strict';
/*global app, moment, angular, window*/
/*jslint unparam:true*/
app.directive('topBarComponent', function () {
  return {
    scope: {
      component: '=',
      ssbEditor: '='
    },
    templateUrl: '/components/component-wrap.html',
    link: function (scope, element, attrs, ctrl) {
      scope.isEditing = true;
      scope.sortableConfig = {
        animation: 150,
        onSort: function (evt) {

        },
        onStart: function (evt) {
          if(scope.$parent.vm)
            scope.$parent.vm.uiState.sortableListPageContentConfig.disabled = true;
        },
        onEnd: function (evt) {

        }
      };
    }
  };
});

'use strict';
/*global app, moment, angular, window*/
/*jslint unparam:true*/
app.directive('videoComponent', ['$sce', function ($sce) {
  return {
    scope: {
      component: '=',
      ssbEditor: '='
    },
    templateUrl: '/components/component-wrap.html',
    link: function (scope, element, attrs, ctrl) {
      scope.isEditing = true;
      scope.flvVideoUrl = function (iframeUrl, url, autoPlay, controls, branding) {
        var parsedUrl = urlParser.parse(url);
        var retUrl = "";
        if (parsedUrl) {
          retUrl = iframeUrl + parsedUrl.id + '?showinfo=0&rel=0&hd=1';
          if(autoPlay)
            retUrl = retUrl + '&autoplay=1';
          if(!controls)
            retUrl = retUrl + '&controls=0';
          if(!branding)
            retUrl = retUrl + '&modestbranding=1';
        } else {
          retUrl = iframeUrl;
        }
        return $sce.trustAsResourceUrl(retUrl);
      };
      scope.trustSrc = function (src) {
        return $sce.trustAsResourceUrl(src);
      };
      scope.config = {       
        autoHide: true,
        autoPlay: false,
        autoHideTime: 1500,
        responsive: true,
        stretch: 'fit',
        theme: {
          url: "../../js/libs/videogular-themes-default/videogular.css",
          playIcon: "&#xe000;",
          pauseIcon: "&#xe001;",
          volumeLevel3Icon: "&#xe002;",
          volumeLevel2Icon: "&#xe003;",
          volumeLevel1Icon: "&#xe004;",
          volumeLevel0Icon: "&#xe005;",
          muteIcon: "&#xe006;",
          enterFullScreenIcon: "&#xe007;",
          exitFullScreenIcon: "&#xe008;"
        }
      };
    }
  };
}]);

app.directive("confirmClick", function ($state) {
        return {
            restrict: "A",
            scope: {
                confirmClickConfirm: "&",
                confirmClickCancel: "&",
                confirmClickHref: '@',
                confirmClickBtnOkLabel: '='
            },
            link: function (scope, element) {
                var href= '#/';

                if (scope.confirmClickHref !== undefined) {
                    if (scope.confirmClickHref == "#")
                        href = scope.confirmClickHref;
                    else
                        href += scope.confirmClickHref;
                } else {
                    href += $state.current.name;
                }

                $(element).confirmation({
                  placement: 'top',
                  btnOkLabel: scope.confirmClickBtnOkLabel,
                    onConfirm: function() {
                        scope.confirmClickConfirm && scope.confirmClickConfirm();
                    },
                    onCancel: function() {
                        scope.confirmClickCancel && scope.confirmClickCancel();
                    },
                    href: href
                }).off("show");
            }
        };
    });
app.directive('stCustomPagination', ['stConfig', function (stConfig) {
    return {
      restrict: 'EA',
      require: '^stTable',
      scope: {
        stItemsByPage: '=?',
        stDisplayedPages: '=?',
        stPageChange: '&'
      },
      templateUrl: function (element, attrs) {
        if (attrs.stTemplate) {
          return attrs.stTemplate;
        }
        return stConfig.pagination.template;
      },
      link: function (scope, element, attrs, ctrl) {

        scope.stItemsByPage = scope.stItemsByPage ? +(scope.stItemsByPage) : stConfig.pagination.itemsByPage;
        scope.stDisplayedPages = scope.stDisplayedPages ? +(scope.stDisplayedPages) : stConfig.pagination.displayedPages;

        scope.currentPage = 1;
        scope.pages = [];

        function redraw () {
          var paginationState = ctrl.tableState().pagination;
          var start = 1;
          var end;
          var i;
          var prevPage = scope.currentPage;
          scope.totalItemCount = paginationState.totalItemCount;
          scope.currentPage = Math.floor(paginationState.start / paginationState.number) + 1;

          start = Math.max(start, scope.currentPage - Math.abs(Math.floor(scope.stDisplayedPages / 2)));
          end = start + scope.stDisplayedPages;

          if (end > paginationState.numberOfPages) {
            end = paginationState.numberOfPages + 1;
            start = Math.max(1, end - scope.stDisplayedPages);
          }

          scope.pages = [];
          scope.numPages = paginationState.numberOfPages;

          for (i = start; i < end; i++) {
            scope.pages.push(i);
          }

          if (prevPage !== scope.currentPage) {
            scope.stPageChange({newPage: scope.currentPage});
          }
        }

        //table state --> view
        scope.$watch(function () {
          return ctrl.tableState().pagination;
        }, redraw, true);

        //scope --> table state  (--> view)
        scope.$watch('stItemsByPage', function (newValue, oldValue) {
          if (newValue !== oldValue) {
            scope.selectPage(1);
          }
        });

        scope.$watch('stDisplayedPages', redraw);

        //view -> table state
        scope.selectPage = function (page) {
          if (page > 0 && page <= scope.numPages) {
            ctrl.slice((page - 1) * scope.stItemsByPage, scope.stItemsByPage);
            $("html, body").animate({
              scrollTop: 0
            }, 600);
          }
        };

        if (!ctrl.tableState().pagination.number) {
          ctrl.slice(0, scope.stItemsByPage);
        }
      }
    };
  }]);
'use strict';
/** 
  * A directive used for "close buttons" (eg: alert box).
  * It hides its parent node that has the class with the name of its value.
*/
app.directive('ctDismiss', function () {
    return {
        restrict: 'A',
        link: function (scope, elem, attrs) {
            elem.on('click', function (e) {
                elem.parent('.' + attrs.ctDismiss).hide();
                e.preventDefault();
            });

        }
    };
});
// 'use strict'; <--- DO NOT USE! CKEDITOR FAILS (https://github.com/WebSpellChecker/ckeditor-plugin-scayt/issues/65)
/*global app, moment, angular, window, CKEDITOR*/
/*jslint unparam:true*/
app.directive("elem", function($rootScope, $timeout, $compile, SimpleSiteBuilderService, $window) {
  return {
    require: '?ngModel',
    replace: true,
    transclude: true,
    scope: {
      title: '@ngModel',
      className: '@className'
    },
    template: function(element, attrs) {

        var pageTemplate =
                    '<div ' +
                        'data-edit ' +
                        'class="edit-wrap ssb-edit-wrap ssb-element"> ' +
                        '<span class="editable-title">{{title | formatText}}</span>' +
                        '<div ' +
                            'ng-class="{{vm.elementClass()}}" ' +
                            'ng-attr-style="{{vm.elementStyle()}}" ' +
                            'class="editable element-wrap ssb-text-settings {{className}}" ' +
                            'is-edit="true" ' +
                            'ng-bind-html="ngModel | unsafe">' +
                        '</div>' +
                    '</div>';

        var blogTemplate =
                    '<div ' +
                        'class="editable {{className}}" ' +
                        'ng-bind-html="ngModel | unsafe">' +
                    '</div>';

        if (attrs.ssbBlogEditor) {
            return blogTemplate
        }

        if (attrs.ssbEmailEditor) {
            //TODO: jaideep
        }

        return pageTemplate;

    },
    link: function(scope, element, attrs, ngModel) {

        scope.update = function(e) {
            $timeout(function() {
                scope.$apply(function() {
                    ngModel.$setViewValue(e.editor.getData());
                });
            }, 0);
        };

        scope.setContent = function(e) {
            $timeout(function() {
                scope.$apply(function() {
                    e.editor.setData(ngModel.$viewValue);
                });
            }, 0);
        };

        scope.updateFroalaContent = _.debounce(function(editor) {
            $timeout(function() {

                var html = editor.html.get().replace(/\u2028|\u2029/g, '');
                               
                ngModel.$setViewValue(html);
                scope.compileEditorElements(editor);
            });
        }, 500)

        scope.compileEditorElements = function(editor, initial) {

            SimpleSiteBuilderService.compileEditorElements(editor, initial, componentId, editor.id, scope);

        };

        function destroyShared(editor){
            editor.shared.count = 1;
            // Deleting shared instances
            if(editor.shared){
                editor.shared.count = 1;
                delete editor.shared.$tb;
                delete editor.shared.popup_buttons;
                delete editor.shared.popups;
                delete editor.shared.$image_resizer;
                delete editor.shared.$img_overlay;
                delete editor.shared.$line_breaker;
                delete editor.shared.exit_flag;
                delete editor.shared.vid_exit_flag;
            }
        }

        $rootScope.$on('$destroyFroalaInstances', function (event) {
            var elem = angular.element(element[0].querySelector('.editable'))[0];
            //$(elem).froalaEditor($.FroalaEditor.build());
            if($(elem).data('froala.editor')){
                var editor = $(elem).data('froala.editor');
                destroyShared(editor);
            }
        });


        var elem = angular.element(element[0].querySelector('.editable'))[0];
        var componentId = $(elem).closest('[component]').attr('id');

        if (attrs.ssbBlogEditor) {
            elem = element[0];
        }

        if (scope.$parent.ssbEditor || angular.element(elem).scope().pvm || (scope.$parent.vm && scope.$parent.vm.ssbEditor)) {
            $(function() {
                var blogPostEditor = attrs.ssbBlogEditor;
                var froalaConfig = $.FroalaEditor.build(
                    (function() {
                        if (attrs.ssbBlogEditor) {
                            return 'ssbBlogEditor';
                        } else if (attrs.ssbEmailEditor) {
                            return 'ssbEmailEditor'
                        } else {
                            return
                        }
                    })()
                );
                // Case when editing blog post content
                if(blogPostEditor){
                    froalaConfig.enter = $.FroalaEditor.ENTER_P;
                }

                $timeout(function() {

                    $(elem).on('froalaEditor.initialized', function(e, editor) {
                    if(blogPostEditor){
                        destroyShared(editor);
                    }
                    //topbar positioning
                    $('.fr-toolbar.fr-inline.fr-desktop:first').addClass('ssb-froala-first-editor');

                    //set initial text
                    if (ngModel.$viewValue) {
                        var html = ngModel.$viewValue.replace("<span>", "<span style=''>").replace(/\u2028|\u2029/g, '');
                        ngModel.$setViewValue(html);
                        editor.html.set(html);
                    }

                    //compile special elements
                    scope.compileEditorElements(editor, true);

                }).froalaEditor(froalaConfig)

                    .on('froalaEditor.contentChanged', function(e, editor) {
                        scope.updateFroalaContent(editor);
                        // $(elem).froalaEditor('html.cleanEmptyTags');
                    }).on('froalaEditor.click', function(e, editor, clickEvent) {

                    }).on('froalaEditor.keydown', function(e, editor, keydown) {
                        scope.updateFroalaContent(editor);
                    }).on('froalaEditor.image.resizeEnd', function(e, editor, $img) {
                        scope.updateFroalaContent(editor);
                    }).on('froalaEditor.toolbar.show', function(e, editor) {

                        console.log('toolbar show')

                        //close sidebar
                        $rootScope.app.layout.isSidebarClosed = true;

                        //hide any currently shown toolbar
                        $('.fr-toolbar').removeClass('ssb-froala-active-editor');

                        //move toolbar to highest z-index
                        editor.$tb.addClass('ssb-froala-active-editor');

                        //editor.selection.save();
                        scope.$emit('focusEditor', { editor: editor });

                    }).on('froalaEditor.toolbar.hide', function(e, editor) {

                        console.log('toolbar hide');
                        // hide any image overlay if toolbar is hidden
                        if(editor.shared && editor.shared.$img_overlay)
                            editor.shared.$img_overlay.hide();

                        if (editor.popups.areVisible()) {
                            //hide any currently shown toolbar

                            $('.fr-toolbar').removeClass('ssb-froala-active-editor');
                        }

                        // $('.ssb-site-builder .ssb-edit-control').removeClass('hide-edit-control');

                    }).on('froalaEditor.commands.after', function (e, editor, cmd, param1, param2) {

                        if (editor.popups.areVisible()) {
                            //hide any currently shown toolbar
                            $('.fr-toolbar').removeClass('ssb-froala-active-editor');
                        }

                        if (cmd === 'undo') {
                            scope.compileEditorElements(editor, true);
                        }
                        

                        if(cmd === 'imageStyle' || cmd === 'imageDisplay' || cmd === 'linkInsert' || cmd === 'imageAlign' || cmd === 'imageSetSize' || cmd === 'linkRemove'){
                            scope.updateFroalaContent(editor);
                        }

                    }).on('froalaEditor.focus', function (e, editor) {
                       editor.selection.save();
                    })
                    .on('froalaEditor.paste.before', function (e, editor) {
                        editor.selection.restore();
                    })
                    .on('froalaEditor.blur', function (e, editor) {
                        //hide any currently shown toolbar
                        $('.fr-toolbar').removeClass('ssb-froala-active-editor');
                        editor.selection.save();
                        scope.$emit('activeEditor', { editor: editor, editorImage: editor.image.get() });

                    })
                    .on('froalaEditor.popups.hide.image.insert', function(e, editor) {
                        console.log('froalaEditor.popups.hide.image.insert');
                    }).on('froalaEditor.popups.hide.image.edit', function(e, editor) {
                        console.log('froalaEditor.popups.hide.image.edit');
                    }).on('froalaEditor.popups.show.image.edit', function(e, editor) {
                        editor.selection.save();
                        scope.$emit('activeEditor', { editor: editor, editorImage: editor.image.get() });
                    })
                    .on('froalaEditor.bgColorChange', function(e, editor, val) {
                        if(editor.opts.isButton){
                            var btnElement = editor.opts.button.scope().vm.elementData;
                            if(btnElement.title === 'Button'){
                                if(!btnElement.bg){
                                    btnElement.bg = {};
                                }
                                editor.opts.button.scope().vm.elementData.bg.color = val;
                            }
                            
                        }
                    })
                    .on('froalaEditor.txtColorChange', function(e, editor, val) {
                        if(editor.opts.isButton){
                            var btnElement = editor.opts.button.scope().vm.elementData;
                            if(btnElement.title === 'Button'){
                                editor.opts.button.scope().vm.elementData.txtcolor = val;
                            }
                        }
                    })
                    $(elem).froalaEditor('events.on', 'keydown', function (e) {

                        // if enter key is pressed inside of button
                        if (e.which === 13 && $($window.getSelection().focusNode).parents('.ssb-theme-btn').length) {
                            // prevent it if cursor is in the middle of the button
                            if ($window.getSelection().focusOffset !== 0 && $window.getSelection().focusOffset !== $window.getSelection().focusNode.length) {
                                e.preventDefault();
                                return false
                            }
                        }

                    }, true);

              }, 2000);
            });
      } else {
        CKEDITOR.inline(elem, {
          on: {
            instanceReady: function(ev) {
              var editor = ev.editor;
              editor.setReadOnly(false);
              editor.setData(ngModel.$viewValue);
              editor.on('change', function(e) {
                scope.update(e);
              });
              editor.on('key', function(e) {
                scope.update(e);
              });
              editor.on('customUpdate', function(e) {
                scope.setContent(e);
              });
            }
          },
          sharedSpaces: {
            top: 'editor-toolbar'
          }
        });
      }

    }
  }
});

'use strict';
/** 
  * Prevent default action on empty links.
*/
app.directive('a', function () {
    return {
        restrict: 'E',
        link: function (scope, elem, attrs) {
            if (attrs.ngClick || attrs.href === '' || attrs.href === '#') {
                elem.on('click', function (e) {
                    e.preventDefault();
                });
            }
        }
    };
});
'use strict';
/**
 * Any element that gets a 404 image get replaced
 */
app.directive('errSrc', function () {
  return {
    scope: {
      errSrc: '@',
      errContact: '='
    },
    link: function (scope, element, attrs) {

      var colors = ["turquoise", "emerland", "peterriver", "amethyst", "wetasphalt", "greensea", "nephritis", "belizehole", "wisteria", "midnightblue", "sunflower", "carrot", "alizarin", "clouds", "concrete", "orange", "pumpkin", "pomegranate", "silver", "asbestos"];

      scope.$watch(function () {
        return attrs['ngSrc'];
      }, function (value) {
        if (!value && scope.errContact) {
          element.hide();
          var contentTr = angular.element('<div class="animated bounce two-letter-label ' + _.sample(colors) + '">' + scope.getContactLetters() + '</div>');
          contentTr.insertAfter(element);
        } 
        else if(!value)
        {
           element.attr('src', scope.errSrc);
        }
      });

      element.bind('error', function () {
        if (scope.errSrc.length > 0) {
          element.attr('src', scope.errSrc);
        } else {
          element.hide();
          var contentTr = angular.element('<div class="animated bounce two-letter-label ' + _.sample(colors) + '">' + scope.getContactLetters() + '</div>');
          contentTr.insertAfter(element);
        }
      });

      var icons = ['beer', 'diamond', 'fighter-jet', 'gamepad', 'flag-checkered', 'key', 'leaf', 'motorcycle', 'ship', 'space-shuttle'];

      scope.getContactLetters = function () {
        var letters = '';
        var contact = scope.errContact;
        //get first letter of email
        if (scope.errContact && scope.errContact.details && scope.errContact.details.length > 0
            && scope.errContact.details[0].emails && scope.errContact.details[0].emails.length > 0
            && scope.errContact.details[0].emails[0].email) {
          letters = scope.errContact.details[0].emails[0].email.charAt(0);
        }
        //get initials
        if (scope.errContact && scope.errContact.first) {
          letters = scope.errContact.first.charAt(0);
        }
        if (scope.errContact && scope.errContact.last) {
          letters = letters + ' ' + scope.errContact.last.charAt(0);
        }

        if (letters.length <= 0) {
          letters = '<span class="fa fa-' + _.sample(icons) + '"></span>';
        }
        return letters;
      }
    }
  }
});

'use strict';
app.directive('stExport', ['$http', '$timeout', 'OrderService', function($http, $timeout, OrderService){
  return {
    require:'^stTable',
    link:function(scope, element, attr,ctrl){
		element.bind('click',function(){
		    //OrderService.exportToCSV();
		    JSONToCSVConvertor(ctrl.getFilteredCollection(), "", true);
		})
	    function JSONToCSVConvertor(JSONData, ReportTitle, ShowLabel) {
		    //If JSONData is not an object then JSON.parse will parse the JSON string in an Object
		    var arrData = !angular.isObject(JSONData) ? JSON.parse(JSONData) : JSONData;
		    
		    var CSV = '';    
		    //Set Report title in first row or line
		    if(ReportTitle.length)
		    	CSV += ReportTitle + '\r\n\n';
		    var showColumns = ["customer","order_id","completed_at","updated_at","created_at","status","total","total_discount","tax_rate","total_tax","subtotal","shipping_tax","cart_tax","currency","line_sku","line_items","line_quantity","total_line_items_quantity","notes"];

		    //This condition will generate the Label/Header
		    if (ShowLabel) {
		        var row = "";		        
		        //This loop will extract the label from 1st index of on array
		        _.each(arrData[0], function (value, index) {
		        	if(showColumns.indexOf(index) !== -1)
		            //Now convert each value to string and comma-seprated
		            	row += index + ',';
		        });
		        row = row.slice(0, -1);		        
		        //append Label row with line break
		        CSV += row + '\r\n';
		    }		    
		    //1st loop is to extract each row
		    _.each(arrData, function (value, i) {
		        var row = "";
		        _.each(value, function (val, index) {
		        	if(showColumns.indexOf(index) !== -1){
		        		if(index == "line_items"){
		        			var li_name = "";
							var li_sku = "";
							var li_qty = "";
							row += '"';

		        			for (var li in val) {
								li_name = val[li].name;
								li_sku = val[li].product ? val[li].product.sku : val[li].sku;
								li_qty = val[li].quantity;

								if (li_qty) {
									row += li_qty + ' ea. ';
								}

								row += li_name;

								if (li_sku && (li_sku != 'null')) {
									row += ' (' + li_sku + ')';
								}

								if (val.length - 1 != li) {
									row += '\r';
								}
							}
							row += '",';
		        		}
		        		else if(index == "customer"){
		        			row += '"' + (val ? val._full : '') + '",';			
		        		}
		        		else if(index == "notes"){
		        			var notes = "";  
		        			for (var nt in val) {
		        				if(val.length - 1 == nt){
		        					notes +=  val[nt].note;
		        				}
		        				else
		        					notes +=  val[nt].note + '\r\n';
		        			}
		        			row += '"' + notes + '",';			
		        		}
		        		else
		        			row += '"' + val + '",';
		        	} 	
		        });
		        row.slice(0, row.length - 1);		        
		        //add a line break after each row
		        CSV += row + '\r\n';
		    });
		    if (CSV == '') {        
		        alert("Invalid data");
		        return;
		    } 
		    //Generate a file name
		    var fileName = "Orders";
		    //this will remove the blank-spaces from the title and replace it with an underscore
		    fileName += ReportTitle.replace(/ /g,"_");   
		    
		    var charset = scope.charset || "utf-8";
			var blob = new Blob([CSV], {
				type: "text/csv;charset="+ charset + ";"
			});
			if (window.navigator.msSaveOrOpenBlob) 
	        	window.navigator.msSaveBlob(blob, fileName + ".csv");
	        else{
	        	//Initialize file format you want csv or xls
			    var uri = 'data:text/csv;charset=utf-8,' + escape(CSV);			    
			    var link = document.createElement("a");    
			    link.href = uri;
			    
			    //set the visibility hidden so it will not effect on your web-layout
			    $(link).css("visibility", 'hidden');
			    link.download = fileName + ".csv";
			    
			    //this part will append the anchor tag and remove it after automatic click
			    document.body.appendChild(link);
			    link.click();
			    document.body.removeChild(link);
	        }
		}
    }
  }  
}]);
'use strict';
app.directive('fileChange', ['$parse', function ($parse) {

  return {
    require: 'ngModel',
    restrict: 'A',
    link: function ($scope, element, attrs, ngModel) {

      // Get the function provided in the file-change attribute.
      // Note the attribute has become an angular expression,
      // which is what we are parsing. The provided handler is 
      // wrapped up in an outer function (attrHandler) - we'll 
      // call the provided event handler inside the handler()
      // function below.
      var attrHandler = $parse(attrs['fileChange']);

      // This is a wrapper handler which will be attached to the
      // HTML change event.
      var handler = function (e) {

        $scope.$apply(function () {

          // Execute the provided handler in the directive's scope.
          // The files variable will be available for consumption
          // by the event handler.
          attrHandler($scope, {
            $event: e,
            files: e.target.files
          });
        });
      };

      // Attach the handler to the HTML change event 
      element[0].addEventListener('change', handler, false);
    }
  };
}]);

'use strict';


app


    // Angular File Upload module does not include this directive
    // Only for example


    /**
    * The ng-thumb directive
    * @author: nerv
    * @version: 0.1.2, 2014-01-09
    */
    .directive('ngThumb', ['$window', function($window) {
        var helper = {
            support: !!($window.FileReader && $window.CanvasRenderingContext2D),
            isFile: function(item) {
                return angular.isObject(item) && item instanceof $window.File;
            },
            isImage: function(file) {
                var type =  '|' + file.type.slice(file.type.lastIndexOf('/') + 1) + '|';
                return '|jpg|png|jpeg|bmp|gif|'.indexOf(type) !== -1;
            }
        };

        return {
            restrict: 'A',
            template: '<canvas/>',
            link: function(scope, element, attributes) {
                if (!helper.support) return;

                var params = scope.$eval(attributes.ngThumb);

                if (!helper.isFile(params.file)) return;
                if (!helper.isImage(params.file)) return;

                var canvas = element.find('canvas');
                var reader = new FileReader();

                reader.onload = onLoadFile;
                reader.readAsDataURL(params.file);

                function onLoadFile(event) {
                    var img = new Image();
                    img.onload = onLoadImage;
                    img.src = event.target.result;
                }

                function onLoadImage() {
                    var width = params.width || this.width / this.height * params.height;
                    var height = params.height || this.height / this.width * params.width;
                    canvas.attr({ width: width, height: height });
                    canvas[0].getContext('2d').drawImage(this, 0, 0, width, height);
                }
            }
        };
    }]);

'use strict';
/**
 * Make element 100% height of browser window.
 */
 
app.directive('ctFullheight', ['$window', '$rootScope', '$timeout', 'APP_MEDIAQUERY',
function ($window, $rootScope, $timeout, mq) {
    return {
        restrict: "AE",
        scope: {
            ctFullheightIf: '&'
        },
        link: function (scope, elem, attrs) {
            var $win = $($window);
            var $document = $(document);
            var exclusionItems;
            var exclusionHeight;
            var setHeight = true;
            var page;

            scope.initializeWindowSize = function () {
                $timeout(function () {
                    exclusionHeight = 0;
                    if (attrs.ctFullheightIf) {
                        scope.$watch(scope.ctFullheightIf, function (newVal, oldVal) {
                            if (newVal && !oldVal) {
                                setHeight = true;
                            } else if (!newVal) {
                                $(elem).css('height', 'auto');
                                setHeight = false;
                            }
                        });
                    }

                    if (attrs.ctFullheightExclusion) {
                        var exclusionItems = attrs.ctFullheightExclusion.split(',');
                        angular.forEach(exclusionItems, function (_element) {
                            exclusionHeight = exclusionHeight + $(_element).outerHeight(true);
                        });
                    }

                    if (attrs.ctFullheightNum) {
                        exclusionHeight = exclusionHeight + parseInt(attrs.ctFullheightNum);
                    }


                    page = $(attrs.ctFullheight);

                    if (attrs.ctFullheight == 'window' || !attrs.ctFullheight) {
                        page = $win;
                    }

                    if (attrs.ctFullheight == 'document') {
                        page = $document;
                    }

                    scope.$watch(function () {
                        scope.__height = page.height();
                    });
                    if (setHeight) {
                        $(elem).css('height', 'auto');
                        if (page.innerHeight() < $win.innerHeight()) {
                            page = $win;
                        }
                        $(elem).css('height', page.innerHeight() - exclusionHeight);
                        if(attrs.dataCtOverflow)
                            $(elem).css('overflow', 'auto');
                    }
                }, 300);
            };

            scope.initializeWindowSize();
            scope.$watch('__height', function (newHeight, oldHeight) {
                scope.initializeWindowSize();
            });
            $win.on('resize', function () {
                scope.initializeWindowSize();
            });

        }
    };
}]);

app.directive('includeReplace', function () {
    return {
        require: 'ngInclude',
        restrict: 'A', /* optional */
        link: function (scope, el, attrs) {
            //el.replaceWith(el.children());
        }
    };
});
app.directive('indDraggable', ['$document', function($document) {
  return {
    link: function(scope, element, attr) {

      var startX = element.position().left || 0;
      var startY = element.position().top || 0;
      var x = startX;
      var y = startY;

      element.css({
       position: 'fixed',
       // border: '1px solid red',
       // backgroundColor: 'lightgrey',
       // cursor: 'pointer'
      });

      // Added handle to drag element
      var container = element.find(".draggable-handle");
      if(container.length === 0)
        container = element;

      container.on('mousedown', function(event) {

        // Prevent default dragging for input elements
        if (event.target.nodeName !== 'INPUT' &&
            event.target.nodeName !== 'TEXTAREA' &&
            event.target.nodeName !== 'SELECT') {

            startX = event.pageX - x;
            startY = event.pageY - y;
            $document.on('mousemove', mousemove);
            $document.on('mouseup', mouseup);

        }

        //allow dragging a draggable item within a draggable panel... ah!
        //TODO: not working
        // if ($(event.target).parents('.ssb-page-section-settings-item').children('.ti-move').length < 1) {

        //     event.preventDefault();

        // }

        
      });

      function mousemove(event) {
        y = event.pageY - startY;
        x = event.pageX - startX;
        element.css({
          top: y + 'px',
          left:  x + 'px'
        });

        if (y > 3 || x > 3) {
            event.stopPropagation();
        }

      }

      function mouseup() {
        $document.off('mousemove', mousemove);
        $document.off('mouseup', mouseup);
      }
    }
  };
}]);

app.directive('indSlider',function($timeout){
 return {
   restrict: 'A',
   link: function(scope,element,attrs) {
     $timeout(function() {
         $(element).slick(scope.$eval(attrs.indSlider));
     }, 1000);


    scope.$on('$refreshSlickSlider', function (event, index) {
        if($(element).hasClass('slick-initialized')){
            $(element).slick("unslick");
            $timeout(function () {
                scope.$apply(function () {
                   $(element).slick(scope.$eval(attrs.indSlider));
                    if(index)
                        $(element).slick("slickGoTo", index);
                })
            }, 100);
        }

    });

   }
 }
});

app.directive('indiDatepicker',function($compile,$timeout){
    return {
        replace:true,
        restrict: "E",
        scope: {
            ngModel: '=',
            popup: '@',
            readOnly: '@'
        },
        template:
            '<div class="input-group">'     +
                    '<input type="text" readonly="{{readOnly}}" class="form-control" datepicker-popup="{{popup}}" ng-model="ngModel" is-open="datePicker.isOpen" min-date="minDate" close-text="Close" />' +
                    '<span class="input-group-btn">' +
                        '<button type="button" class="btn btn-default" ng-click="open($event)">' +
                            '<i class="glyphicon glyphicon-calendar"></i>' +
                        '</button>' +
                    '</span>' +
            '</div>',

        link: function(scope, element, attrs){
            scope.datePicker = {};
            scope.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };

          /*
           * @open
           * -
           */

          scope.open = function ($event) {
            $event.preventDefault();
            $event.stopPropagation();
            scope.datePicker.isOpen = true;
          };

          /*
           * @endOpen
           * -
           */

          scope.endOpen = function ($event) {
            $event.preventDefault();
            $event.stopPropagation();
            scope.startOpened = false;
            scope.endOpened = !scope.endOpened;
          };

          /*
           * @startOpen
           * -
           */

          scope.startOpen = function ($event) {
            $event.preventDefault();
            $event.stopPropagation();
            scope.endOpened = false;
            scope.startOpened = !scope.startOpened;
          };
        }
    };
})

// -------------------------------------------------- //
// -------------------------------------------------- //

// I lazily load the images, when they come into view.
app.directive("imgLazyLoad", function( $window, $document ) {
	// I manage all the images that are currently being
	// monitored on the page for lazy loading.
	var lazyLoader = (function() {
		// list of images that lazy-loading and have yet to be rendered
		var images = [];

		// render timer for lazy loading images so that DOM-querying (for offsets) is chunked in groups
		var renderTimer = null;
		var renderDelay = 2000;
		
		// cache the document document height so that we can respond to changes in the height due to dynamic content
		var doc = $document;
		var documentHeight = doc.height();
		
		// determine if window dimension events (ie. resize, scroll) are currenlty being monitored for changes
		var isWatchingWindow = false;

		// ---
		// PUBLIC METHODS.
		// ---

		// I start monitoring the given image for visibility
		// and then render it when necessary.
		function addImage( image ) {
			images.push( image );
			if ( ! renderTimer ) startRenderTimer();
			if ( ! isWatchingWindow ) startWatchingWindow();
		}

		// I remove the given image from the render queue.
		function removeImage( image ) {
			// Remove the given image from the render queue.
			for ( var i = 0 ; i < images.length ; i++ ) {
				if ( images[ i ] === image ) {
					images.splice( i, 1 );
					break;
				}
			}

			// If removing the given image has cleared the render queue, we can stop monitoring window and image queue
			if ( ! images.length ) {
				clearRenderTimer();
				stopWatchingWindow();
			}
		}
		// I check the lazy-load images that have yet to be rendered.
		function checkImages() {
			// Log here so we can see how often this gets called during page activity.
			console.log( "Checking for visible images..." );
			var container = $("#assets");
			var visible = [];
			var hidden = [];

			// Determine the window dimensions.
			var containerHeight = container.height();
			var scrollTop = container.scrollTop();

			// Calculate the viewport offsets.
			var topFoldOffset = scrollTop;
			var bottomFoldOffset = ( topFoldOffset + containerHeight );

			// Query the DOM for layout and seperate the
			// images into two different categories: those
			// that are now in the viewport and those that
			// still remain hidden.
			for ( var i = 0 ; i < images.length ; i++ ) {
				var image = images[ i ];
				if ( image.isVisible( topFoldOffset, bottomFoldOffset ) ) {
					visible.push( image );
					console.log("Image loaded")
				} else {
					hidden.push( image );
				}
			}

			// Update the DOM with new image source values.
			for ( var i = 0 ; i < visible.length ; i++ ) {
				visible[ i ].render();
			}

			// Keep the still-hidden images as the new image queue to be monitored.
			images = hidden;

			// Clear the render timer so that it can be set again in response to window changes.
			clearRenderTimer();

			// If we've rendered all the images, then stop monitoring the window for changes.
			if ( ! images.length ) {
				stopWatchingWindow();
			}
		}

		// I clear the render timer so that we can easily
		// check to see if the timer is running.
		function clearRenderTimer() {
			clearTimeout( renderTimer );
			renderTimer = null;
		}

		// I start the render time, allowing more images to
		// be added to the images queue before the render
		// action is executed.
		function startRenderTimer() {
			renderTimer = setTimeout( checkImages, renderDelay );
		}

		// I start watching the window for changes in dimension.
		function startWatchingWindow() {
			isWatchingWindow = true;
			var container = $("#assets");
			// Listen for window changes.
			container.on( "resize.imgLazyLoad", windowChanged );
			container.on( "scroll.imgLazyLoad", windowChanged );
			//startRenderTimer();
		}

		// I stop watching the window for changes in dimension.
		function stopWatchingWindow() {
			isWatchingWindow = false;
			var container = $("#assets");
			// Stop watching for window changes.
			container.off( "resize.imgLazyLoad" );
			container.off( "scroll.imgLazyLoad" );

			// Stop watching for document changes.
			//clearInterval( documentTimer );
		}

		// I start the render time if the window changes.
		function windowChanged() {
			if ( ! renderTimer ) startRenderTimer();
		}

		// Return the public API.
		return({
			addImage: addImage,
			removeImage: removeImage
		});

	})();

	// ------------------------------------------ //
	// ------------------------------------------ //

	// representation of a single lazy-load image
	function LazyImage( element ) {
		// I am the interpolated LAZY SRC attribute of the image as reported by AngularJS.
		var source = null;

		// I determine if the image has already been rendered (ie, that it has been exposed to the
		// viewport and the source had been loaded).
		var isRendered = false;

		// cached height of the element (we assume that the image doesn't change height over time)
		var height = 150;

		var defaultDimentions = "150px";

		function addRemoveAttributes(add){
			if(add){
				element.attr("height", defaultDimentions);
				element.attr("width", defaultDimentions);
			}
			else{
				element.removeAttr("height");
		        element.removeAttr("width");
			}
		}
		// I determine if the element is above the given fold of the page.
		function isVisible( topFoldOffset, bottomFoldOffset ) {
			addRemoveAttributes(true);
			// If the element is not visible because it is hidden, don't bother testing it.
			if ( ! element.is(":visible") ) {
				addRemoveAttributes(false);
				return( false )};

			// If the height has not yet been calculated, the cache it for the duration of the page.
			if ( height === null ) {
				height = element.height() || 150;
			}

			// Update the dimensions of the element.
			var elemTop = element.offset().top;
			var parentTop = $('#assets').offset().top;
			
			var top = elemTop - parentTop;
			var bottom = ( top + height );
			addRemoveAttributes(false);

			// Return true if the element is:
			// 1. The top offset is in view.
			// 2. The bottom offset is in view.
			// 3. The element is overlapping the viewport.
			return(
					(
						( top <= bottomFoldOffset ) &&
						( top >= topFoldOffset )
					)
				||
					(
						( bottom <= bottomFoldOffset ) &&
						( bottom >= topFoldOffset )
					)
				||
					(
						( top <= topFoldOffset ) &&
						( bottom >= bottomFoldOffset )
					)
				|| (
						( top <= bottomFoldOffset ) &&
						( bottom <= bottomFoldOffset ) &&
						( top <= bottomFoldOffset || top <= topFoldOffset )
					)		
			);
		}

		// move cached source into the live source
		function render() {
			isRendered = true;
			renderSource();
		}

		// set the interpolated source value reported by the directive / AngularJS
		function setSource( newSource ) {
			source = newSource;
			if ( isRendered ) renderSource();
		}

		// ---
		// PRIVATE METHODS.
		// ---

		// load the lazy source value into the actual source value of the image element.
		function renderSource() {
			element.attr('src', source);
		}

		// Return the public API
		return({
			isVisible: isVisible,
			render: render,
			setSource: setSource
		});

	}

	// ------------------------------------------ //
	// ------------------------------------------ //

	// bind the UI events to the scope.
	function link( $scope, element, attributes ) {
		var lazyImage = new LazyImage( element );

		// Start watching the image for changes in its visibility.
		lazyLoader.addImage( lazyImage );

		// Since the lazy-src will likely need some sort of string interpolation, we don't want to
		attributes.$observe(
			"imgLazyLoad",
			function( newSource ) {
				lazyImage.setSource( newSource );
			}
		);

		// When the scope is destroyed, we need to remove the image from the render queue.
		$scope.$on(
			"$destroy",
			function() {
				lazyLoader.removeImage( lazyImage );
			}
		);
	}

	// Return the directive configuration.
	return({
		link: link,
		restrict: "A",
		scope:{
			container: '@container'
		}
	});
});
'use strict';
/**
 * Media Modal Directive
 */
app.directive('mediaModal', ['$http', '$timeout', 'FileUploader', 'AssetsService', 'ToasterService', function($http, $timeout, FileUploader, AssetsService, ToasterService) {
    return {
        require: [],
        restrict: 'C',
        transclude: false,
        replace: false,
        scope: {
            insertMediaType: "=",
            onInsertMediacb: "=",
            downloadData: "=",
            user: '=user'
        },
        controller: function($scope, AssetsService, $compile) {
            var uploader, footerElement, headerElement, contentElement, mediaElement, mediaModalElement;

            function resizeModal() {
                if(contentElement)
                {
                    contentElement.css('height', $(window).height() - 30 + 'px');
                    mediaElement.css('height', $(window).height() - 30 + 'px');
                    $scope.bodyHeight = $(window).height() - 210 + 'px';

                    var filterType = $('.filter-type');
                    $timeout(function() {
                        filterType.removeClass('filter-type');
                    }, 0);
                    $timeout(function() {
                        filterType.addClass('filter-type');
                    }, 0);
                }

            }
            uploader = $scope.uploader = new FileUploader({
                url: '/api/1.0/assets/',
                removeAfterUpload: true,
                filters: [{
                    name: "SizeLimit",
                    fn: function(item) {
                        switch (item.type.substring(0, item.type.indexOf('/'))) {
                            case "video":
                                if (500 * 1024 * 1024 + 1 > parseInt(item.size)) {
                                    return true;
                                } else {
                                    ToasterService.show('error', 'The maximum video file size 500MB. Unable to Upload.');
                                }
                                break;
                            case "image":
                            case "audio":
                                //size in bytes
                                if (50 * 1024 * 1024 > parseInt(item.size)) {
                                    return true;
                                } else {
                                    ToasterService.show('error', 'The maximum audio file size 50MB. Unable to Upload.');
                                }
                                break;
                            case "document":
                            default:
                                //size in bytes
                                if (10 * 1024 * 1024 > parseInt(item.size)) {
                                    return true;
                                } else {
                                    ToasterService.show('error', 'The maximum file size 10MB. Unable to Upload.');
                                }
                        }
                        return false;
                    }
                }]
            });
            uploader.filters.push({
                name: 'customFilter',
                fn: function(item /*{File|FileLikeObject}*/ , options) {
                    return this.queue.length < 10;
                }
            });
            uploader.onSuccessItem = function(fileItem, response, status, headers) {
                $scope.uploadComplete = false;
                response.files[0].filename = fileItem.file.name;
                response.files[0].mimeType = fileItem.file.type;
                $scope.originalAssets.push(response.files[0]);
                $scope.assets.push(response.files[0]);
                response.files[0].checked = true;
                $scope.m.singleSelect(response.files[0]);
            };

            uploader.onErrorItem = function(item, response, status, headers) {
                $scope.uploadComplete = false;
                ToasterService.show('error', 'Connection timed out');
            };

            $http.get('/admin/assets/views/partials/mediamodal.html').success(function(data) {
                $compile(data)($scope).appendTo($('#model_container'));

                mediaModalElement = $('#media-manager-modal', '#model_container');
                footerElement = $('.modal-footer', mediaModalElement);
                headerElement = $('.modal-header', mediaModalElement);
                contentElement = $('.modal-content', mediaModalElement);
                mediaElement = $('.media', mediaModalElement);

                contentElement.css('visibility', 'hidden');
                mediaModalElement.on('shown.bs.modal', function(e) {
                    console.log('$scope.$parent.showInsert ', $scope.$parent.showInsert);
                    if (e.relatedTarget) {
                        $scope.showInsert = $(e.relatedTarget).attr("media-modal-show-insert");
                        $scope.blogImage = $(e.relatedTarget).attr("blog-post-image");
                        $(window).trigger("resize")
                        contentElement.css('visibility', 'visible')
                    } else if ($scope.$parent.showInsert) {
                        $scope.showInsert = true;
                        $(window).trigger("resize")
                        contentElement.css('visibility', 'visible');
                    }

                });

            });
            $(window).resize(function() {
                resizeModal();
            });


            $scope.lastSelect = null;
            $scope.isSingleSelect = true;
            $scope.showType = "all";
            $scope.editingImage = false;
            $scope.selectModel = {
                select_all: false
            };
            $scope.batch = [];
            $scope.m = $scope.m || {};
            $scope.isMobile = false;
            $scope.checkMobile = function() {
                var check = false;
                (function(a, b) {
                    if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) check = true
                })(navigator.userAgent || navigator.vendor || window.opera);
                $scope.isMobile = check;
                return check;
            }
            $scope.checkMobile();
            //http://en.wikipedia.org/wiki/Internet_media_type
            $scope.typeMimes = {
                image: ['image/png', 'image/jpeg', 'image/gif'],
                video: ['video/mpeg', 'video/mp4', 'video/webm', 'video/x-flv', 'video/x-ms-wmv'],
                audio: ['audio/mpeg'],
                document: ['application/octet-stream', 'application/pdf']
            };

            $scope.m.selectTriggerFn = function(status) {
                $scope.selectModel.select_all = status;
                $scope.m.selectAll();
                $scope.singleSelected = false;
            };

            $scope.m.selectAll = function(showType, filterOnly) {
                filterOnly = filterOnly || false;

                if (showType) {
                    $scope.showType = showType;
                }
                $scope.batch = [];
                $scope.assets = [];
                $scope.mimeList = [];

                if ($scope.showType !== 'all') {
                    $scope.mimeList = $scope.typeMimes[$scope.showType];
                }

                $scope.originalAssets.forEach(function(value, index) {
                    if (!filterOnly) {
                        value.checked = $scope.selectModel.select_all;
                    }

                    if ($scope.showType === 'all') {
                        $scope.assets.push(value);
                        if (value.checked) {
                            $scope.batch.push(value);
                        }
                    } else {
                        if ($scope.mimeList.indexOf(value.mimeType) > -1) {
                            $scope.assets.push(value);
                            if (value.checked) {
                                $scope.batch.push(value);
                            }
                        }
                    }
                });
                $scope.lastSelect = null;
                $scope.m.selectAllStatus();
            };

            $scope.m.singleSelect = function(asset) {
                $scope.singleSelected = asset.checked;
                $timeout(function() {
                    if (!$scope.isSingleSelect) {
                        //$scope.batch.push(asset);
                        var hasAsset = false;
                        $scope.batch.forEach(function(v, i) {
                            if (asset._id === v._id) {
                                $scope.batch.splice(i, 1);
                                hasAsset = true;
                            }
                        });
                        if (!hasAsset) {
                            $scope.batch.push(asset)
                        }

                        $scope.m.selectAllStatus();
                    } else if ($scope.isSingleSelect) {
                        $scope.batch.forEach(function(v) {
                            if (asset._id !== v._id) {
                                v.checked = false;
                            }
                        });

                        $scope.batch = [];
                        if($scope.singleSelected)
                            $scope.batch.push(asset);
                        $scope.m.selectAllStatus();
                    }
                }, 0)
            };

            $scope.m.toggleShiftKey = function(event) {
                $scope.isSingleSelect = !$scope.isSingleSelect;
            };

            $scope.m.selectAllStatus = function() {
                var allTrue = false;
                if ($scope.assets.length > 0) {
                    allTrue = true;
                    $scope.assets.forEach(function(v, i) {
                        if (v.checked !== true) {
                            allTrue = false;
                        }
                    });
                }
                $scope.selectModel.select_all = allTrue;
            };

            $scope.m.deleteAsset = function(asset) {
                if (asset) {
                    $scope.batch.push(asset);
                }
                AssetsService.deleteAssets($scope.batch, function(resp, status) {
                    if (status === 200) {
                        $scope.originalAssets.forEach(function(v, i) {
                            if (v._id === $scope.batch[0]['_id']) {
                                $scope.originalAssets.splice(i, 1);
                            }
                        });
                        $scope.assets.forEach(function(v, i) {
                            if (v._id === $scope.batch[0]['_id']) {
                                $scope.assets.splice(i, 1);
                            }
                        });
                        $scope.batch.forEach(function(v, i) {
                            if (v._id === $scope.batch[0]['_id']) {
                                $scope.batch.splice(i, 1);
                            }
                        });
                        ToasterService.show('success', 'Image(s) deleted');
                    }
                    $scope.selectModel.select_all = false;
                });
            };

            $scope.m.editImage = function(asset) {
                $scope.editingImage = true;
                $scope.singleAsset = asset;

                var targetImage = $('#targetEditImage');
            };

            $scope.m.goback = function() {
                $scope.editingImage = false;
            };

            $scope.m.onInsertMedia = function() {
                console.log('$scope ', $scope.onInsertMediacb);
                if ($scope.batch.length > 0) {
                    if ($scope.onInsertMediacb) {
                        $scope.onInsertMediacb && $scope.onInsertMediacb($scope.batch[$scope.batch.length - 1], $scope.type || $scope.insertMediaType);
                        $scope.type = null;
                    } else {
                        $scope.$parent.insertMedia($scope.batch[$scope.batch.length - 1], $scope.blogImage);
                    }
                }
                $scope.m.selectTriggerFn(false);
                $scope.singleSelected = false;
                $("#media-manager-modal").modal('hide');
            };
        },

        link: function(scope, element) {
            scope.assets = [];
            AssetsService.getAssetsByAccount(function(data) {
                if (data instanceof Array) {
                    scope.originalAssets = data.slice(0);
                    scope.assets = data.slice(0);
                    if (scope.insertMediaType) {
                        scope.m.selectAll(scope.insertMediaType, true);
                    }
                }
            });
            element.attr("data-toggle", "modal");
            element.attr("data-target", "#media-manager-modal");
            $(document).on("add_image", function(event) {
                $("#media-manager-modal").modal('show');
                scope.type = "image_gallery_add_image";
            })
            $(document).on("delete_image", function(event, index) {
                scope.type = "image_gallery_delete_image";
                scope.onInsertMediacb && scope.onInsertMediacb(index, scope.type);
            })
        }
    };
}]).directive('captureShift', function() {
    return {
        restrict: 'A',
        scope: {
            onPresskey: "="
        },
        link: function(scope, elem, attrs) {
            function onShift(e) {
                if (e.shiftKey) {
                    scope.onPresskey();
                    elem[0].onkeydown = null;
                    elem[0].onkeyup = offShift;
                }
            }

            function offShift(e) {
                if (e.keyIdentifier === 'Shift') {
                    scope.onPresskey();
                    elem[0].onkeyup = null;
                    elem[0].onkeydown = onShift;
                }
            }
            elem[0].onkeydown = onShift;
        }
    }
});

'use strict';
/** 
  * Returns the id of the selected e-mail. 
*/
app.directive('messageItem', ['$location', function ($location) {
    return {
        restrict: 'EA',
        link: function (scope, elem, attrs) {
            elem.on("click tap", function (e) {
                var id = attrs.messageItem;
            });
        }
    };
}]);

angular.module('ui.bootstrap.modal', ['ui.bootstrap.transition'])

/**
 * A helper, internal data structure that acts as a map but also allows getting / removing
 * elements in the LIFO order
 */
  .factory('$$stackedMap', function () {
    return {
      createNew: function () {
        var stack = [];

        return {
          add: function (key, value) {
            stack.push({
              key: key,
              value: value
            });
          },
          get: function (key) {
            for (var i = 0; i < stack.length; i++) {
              if (key == stack[i].key) {
                return stack[i];
              }
            }
          },
          keys: function() {
            var keys = [];
            for (var i = 0; i < stack.length; i++) {
              keys.push(stack[i].key);
            }
            return keys;
          },
          top: function () {
            return stack[stack.length - 1];
          },
          remove: function (key) {
            var idx = -1;
            for (var i = 0; i < stack.length; i++) {
              if (key == stack[i].key) {
                idx = i;
                break;
              }
            }
            return stack.splice(idx, 1)[0];
          },
          removeTop: function () {
            return stack.splice(stack.length - 1, 1)[0];
          },
          length: function () {
            return stack.length;
          }
        };
      }
    };
  })

/**
 * A helper directive for the $modal service. It creates a backdrop element.
 */
  .directive('modalBackdrop', ['$timeout', function ($timeout) {
    return {
      restrict: 'EA',
      replace: true,
      templateUrl: '/admin/assets/views/modal/backdrop.html',
      link: function (scope, element, attrs) {
        scope.backdropClass = attrs.backdropClass || '';

        scope.animate = false;

        //trigger CSS transitions
        $timeout(function () {
          scope.animate = true;
        });
      }
    };
  }])

  .directive('modalWindow', ['$modalStack', '$timeout', function ($modalStack, $timeout) {
    return {
      restrict: 'EA',
      scope: {
        index: '@',
        animate: '='
      },
      replace: true,
      transclude: true,
      templateUrl: function(tElement, tAttrs) {
        return tAttrs.templateUrl || '/admin/assets/views/modal/window.html';
      },
      link: function (scope, element, attrs) {
        element.addClass(attrs.windowClass || '');
        scope.size = attrs.size;

        $timeout(function () {
          // trigger CSS transitions
          scope.animate = true;

          /**
           * Auto-focusing of a freshly-opened modal element causes any child elements
           * with the autofocus attribute to lose focus. This is an issue on touch
           * based devices which will show and then hide the onscreen keyboard.
           * Attempts to refocus the autofocus element via JavaScript will not reopen
           * the onscreen keyboard. Fixed by updated the focusing logic to only autofocus
           * the modal element if the modal does not contain an autofocus element.
           */
          if (!element[0].querySelectorAll('[autofocus]').length) {
            element[0].focus();
          }
        });

        scope.close = function (evt) {
          var modal = $modalStack.getTop();
          if (modal && modal.value.backdrop && modal.value.backdrop != 'static' && (evt.target === evt.currentTarget)) {
            evt.preventDefault();
            evt.stopPropagation();
            $modalStack.dismiss(modal.key, 'backdrop click');
          }
        };
      }
    };
  }])

  .directive('modalTransclude', function () {
    return {
      link: function($scope, $element, $attrs, controller, $transclude) {
        $transclude($scope.$parent, function(clone) {
          $element.empty();
          $element.append(clone);
        });
      }
    };
  })

  .factory('$modalStack', ['$transition', '$timeout', '$document', '$compile', '$rootScope', '$$stackedMap',
    function ($transition, $timeout, $document, $compile, $rootScope, $$stackedMap) {

      var OPENED_MODAL_CLASS = 'modal-open';

      var backdropDomEl, backdropScope;
      var openedWindows = $$stackedMap.createNew();
      var tababbleSelector = 'a[href], area[href], input:not([disabled]), button:not([disabled]),select:not([disabled]), textarea:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]';
      var $modalStack = {};

      function backdropIndex() {
        var topBackdropIndex = -1;
        var opened = openedWindows.keys();
        for (var i = 0; i < opened.length; i++) {
          if (openedWindows.get(opened[i]).value.backdrop) {
            topBackdropIndex = i;
          }
        }
        return topBackdropIndex;
      }

      $rootScope.$watch(backdropIndex, function(newBackdropIndex){
        if (backdropScope) {
          backdropScope.index = newBackdropIndex;
        }
      });

      function removeModalWindow(modalInstance) {

        var body = $document.find('body').eq(0);
        var modalWindow = openedWindows.get(modalInstance).value;

        //clean up the stack
        openedWindows.remove(modalInstance);

        //remove window DOM element
        removeAfterAnimate(modalWindow.modalDomEl, modalWindow.modalScope, 300, function() {
          modalWindow.modalScope.$destroy();
          body.toggleClass(OPENED_MODAL_CLASS, openedWindows.length() > 0);
          checkRemoveBackdrop();
        });
        modalWindow.trapFocusDomEl.remove();
      }

      function checkRemoveBackdrop() {
          //remove backdrop if no longer needed
          if (backdropDomEl && backdropIndex() == -1) {
            var backdropScopeRef = backdropScope;
            removeAfterAnimate(backdropDomEl, backdropScope, 150, function () {
              backdropScopeRef.$destroy();
              backdropScopeRef = null;
            });
            backdropDomEl = undefined;
            backdropScope = undefined;
            document.removeEventListener('focus', focusModal, true);
          }
      }

      function removeAfterAnimate(domEl, scope, emulateTime, done) {
        // Closing animation
        scope.animate = false;

        var transitionEndEventName = $transition.transitionEndEventName;
        if (transitionEndEventName) {
          // transition out
          var timeout = $timeout(afterAnimating, emulateTime);

          domEl.bind(transitionEndEventName, function () {
            $timeout.cancel(timeout);
            afterAnimating();
            scope.$apply();
          });
        } else {
          // Ensure this call is async
          $timeout(afterAnimating);
        }

        function afterAnimating() {
          if (afterAnimating.done) {
            return;
          }
          afterAnimating.done = true;

          domEl.remove();
          if (done) {
            done();
          }
        }
      }

      function firstFocusable(domEl) {
        var list = domEl.querySelectorAll(tababbleSelector);
        return list[0];
      }

      function lastFocusable(domEl) {
        var list = domEl.querySelectorAll(tababbleSelector);
        return list[list.length - 1];
      }

      $document.bind('keydown', function (evt) {
        var modal;

        if (evt.which === 27) {
          modal = openedWindows.top();
          if (modal && modal.value.keyboard) {
            evt.preventDefault();
            $rootScope.$apply(function () {
              $modalStack.dismiss(modal.key, 'escape key press');
            });
          }
        }
      });

      function focusModal(evt) {
        var modalDomEl, focusEl;
        var inside = true;
        var modal = openedWindows.top();
        if (modal) {
          modalDomEl = modal.value.modalDomEl;
          inside = modalDomEl[0].contains(evt.target);
        }
        if(!inside){
          var trapFocusDomEl = modal.value.trapFocusDomEl;
          //explicitOriginalTarget for FF support
          var relatedTarget = evt.relatedTarget || evt.explicitOriginalTarget;
          var fromAddressBar = relatedTarget === null;
          if(trapFocusDomEl[0] === evt.target || fromAddressBar){
            focusEl = firstFocusable(modalDomEl[0]);
          } else {
            focusEl = lastFocusable(modalDomEl[0]);
          }
          if (focusEl) {
            focusEl.focus();
          } else {
            modalDomEl[0].focus();
          }
        }
      }

      $modalStack.open = function (modalInstance, modal) {

        var modalOpener = $document[0].activeElement;

        openedWindows.add(modalInstance, {
          deferred: modal.deferred,
          modalScope: modal.scope,
          backdrop: modal.backdrop,
          keyboard: modal.keyboard
        });

        var body = $document.find('body').eq(0),
            currBackdropIndex = backdropIndex();

        if (currBackdropIndex >= 0 && !backdropDomEl) {
          backdropScope = $rootScope.$new(true);
          backdropScope.index = currBackdropIndex;
          var angularBackgroundDomEl = angular.element('<div modal-backdrop></div>');
          angularBackgroundDomEl.attr('backdrop-class', modal.backdropClass);
          backdropDomEl = $compile(angularBackgroundDomEl)(backdropScope);
          body.append(backdropDomEl);
          document.addEventListener('focus', focusModal, true);
        }

        var angularDomEl = angular.element('<div modal-window></div>');
        angularDomEl.attr({
          'template-url': modal.windowTemplateUrl,
          'window-class': modal.windowClass,
          'size': modal.size,
          'index': openedWindows.length() - 1,
          'animate': 'animate'
        }).html(modal.content);

        var modalDomEl = $compile(angularDomEl)(modal.scope);
        openedWindows.top().value.modalDomEl = modalDomEl;
        openedWindows.top().value.modalOpener = modalOpener;
        body.append(modalDomEl);

        // &nbsp; for FF and Safari
        var trapFocusDomEl = angular.element('<a class="sr-only sr-only-focusable" href>&nbsp;</a>');
        openedWindows.top().value.trapFocusDomEl = trapFocusDomEl;
        body.append(trapFocusDomEl);

        body.addClass(OPENED_MODAL_CLASS);
      };

      $modalStack.close = function (modalInstance, result) {
        var modalWindow = openedWindows.get(modalInstance);
        if (modalWindow) {
          modalWindow.value.deferred.resolve(result);
          removeModalWindow(modalInstance);
          modalWindow.value.modalOpener.focus();
        }
      };

      $modalStack.dismiss = function (modalInstance, reason) {
        var modalWindow = openedWindows.get(modalInstance);
        if (modalWindow) {
          modalWindow.value.deferred.reject(reason);
          removeModalWindow(modalInstance);
          modalWindow.value.modalOpener.focus();
        }
      };

      $modalStack.dismissAll = function (reason) {
        var topModal = this.getTop();
        while (topModal) {
          this.dismiss(topModal.key, reason);
          topModal = this.getTop();
        }
      };

      $modalStack.getTop = function () {
        return openedWindows.top();
      };

      return $modalStack;
    }])

  .provider('$modal', function () {

    var $modalProvider = {
      options: {
        backdrop: true, //can be also false or 'static'
        keyboard: true
      },
      $get: ['$injector', '$rootScope', '$q', '$http', '$templateCache', '$controller', '$modalStack',
        function ($injector, $rootScope, $q, $http, $templateCache, $controller, $modalStack) {

          var $modal = {};

          function getTemplatePromise(options) {
            return options.template ? $q.when(options.template) :
              $http.get(angular.isFunction(options.templateUrl) ? (options.templateUrl)() : options.templateUrl,
                {cache: $templateCache}).then(function (result) {
                  return result.data;
              });
          }

          function getResolvePromises(resolves) {
            var promisesArr = [];
            angular.forEach(resolves, function (value) {
              if (angular.isFunction(value) || angular.isArray(value)) {
                promisesArr.push($q.when($injector.invoke(value)));
              }
            });
            return promisesArr;
          }

          $modal.open = function (modalOptions) {

            var modalResultDeferred = $q.defer();
            var modalOpenedDeferred = $q.defer();

            //prepare an instance of a modal to be injected into controllers and returned to a caller
            var modalInstance = {
              result: modalResultDeferred.promise,
              opened: modalOpenedDeferred.promise,
              close: function (result) {
                $modalStack.close(modalInstance, result);
              },
              dismiss: function (reason) {
                $modalStack.dismiss(modalInstance, reason);
              }
            };

            //merge and clean up options
            modalOptions = angular.extend({}, $modalProvider.options, modalOptions);
            modalOptions.resolve = modalOptions.resolve || {};

            //verify options
            if (!modalOptions.template && !modalOptions.templateUrl) {
              throw new Error('One of template or templateUrl options is required.');
            }

            var templateAndResolvePromise =
              $q.all([getTemplatePromise(modalOptions)].concat(getResolvePromises(modalOptions.resolve)));


            templateAndResolvePromise.then(function resolveSuccess(tplAndVars) {

              var modalScope = (modalOptions.scope || $rootScope).$new();
              modalScope.$close = modalInstance.close;
              modalScope.$dismiss = modalInstance.dismiss;

              var ctrlInstance, ctrlLocals = {};
              var resolveIter = 1;

              //controllers
              if (modalOptions.controller) {
                ctrlLocals.$scope = modalScope;
                ctrlLocals.$modalInstance = modalInstance;
                angular.forEach(modalOptions.resolve, function (value, key) {
                  ctrlLocals[key] = tplAndVars[resolveIter++];
                });

                ctrlInstance = $controller(modalOptions.controller, ctrlLocals);
                if (modalOptions.controllerAs) {
                  modalScope[modalOptions.controllerAs] = ctrlInstance;
                }
              }

              $modalStack.open(modalInstance, {
                scope: modalScope,
                deferred: modalResultDeferred,
                content: tplAndVars[0],
                backdrop: modalOptions.backdrop,
                keyboard: modalOptions.keyboard,
                backdropClass: modalOptions.backdropClass,
                windowClass: modalOptions.windowClass,
                windowTemplateUrl: modalOptions.windowTemplateUrl,
                size: modalOptions.size
              });

            }, function resolveError(reason) {
              modalResultDeferred.reject(reason);
            });

            templateAndResolvePromise.then(function () {
              modalOpenedDeferred.resolve(true);
            }, function () {
              modalOpenedDeferred.reject(false);
            });

            return modalInstance;
          };

          return $modal;
        }]
    };

    return $modalProvider;
  });
'use strict';
/*global app, moment, angular*/
/*jslint unparam:true*/
app.directive('indigNavprompt', function ($rootScope, $location, $state, SweetAlert, $urlRouter) {
  return {
    restrict: 'C',
    scope:{
      checkIfDirty: '&',
      resetDirty: '&',
      myState: '@myState',
      savePage: '&',
      savePageCheck: "="
    },
    link: function (scope, elem, attrs) {
      $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {
        if(scope.myState && $state.$current.name === scope.myState && scope.checkIfDirty && scope.checkIfDirty()) {
          event.preventDefault();
          SweetAlert.swal({
              title: "Are you sure?",
              text: "You have unsaved data. Do you want to save it before navigating to a new page?",
              type: "warning",
              showCancelButton: true,
              confirmButtonColor: "#DD6B55",
              confirmButtonText: "Yes",
              cancelButtonText: "No",
              showNoActionButton: true,
              noActionButtonText: 'Cancel',
              closeOnConfirm: true,
              closeOnCancel: true,
              }, function (isConfirm) {
                if (isConfirm) {
                  if(scope.savePage)
                  {
                    scope.savePage();
                    scope.$watch(function() { return scope.savePageCheck }, function(newValue) {
                      if (newValue) {
                         $state.go(toState, toParams, {notify: false})
                        .then(function() {
                            $rootScope.$broadcast('$stateChangeSuccess', toState, toParams, fromState, fromParams);
                         })
                      }
                    }, true);
                  }
                  $rootScope.$broadcast('$stateChangeSuccess', toState, toParams, fromState, fromParams);
                }
                else if(!angular.isDefined(isConfirm)){
                    $rootScope.$broadcast('$stateChangeSuccess', toState, toParams, fromState, fromParams);
                }
                else{
                  scope.resetDirty && scope.resetDirty();
                  SweetAlert.swal("Not Saved!", "Unsaved data was discarded.", "success");
                    $state.go(toState, toParams, {notify: false})
                    .then(function() {
                        $rootScope.$broadcast('$stateChangeSuccess', toState, toParams, fromState, fromParams);
                     })
                }
          });
        }
      });
    }
  };
});

'use strict';
/**
  * Password-check directive.
*/
app.directive('numbersOnly', function () {
    return {
        require: 'ngModel',
     link: function(scope, element, attrs, modelCtrl) {
       modelCtrl.$parsers.push(function (inputValue) {
           // this next if is necessary for when using ng-required on your input.
           // In such cases, when a letter is typed first, this parser will be called
           // again, and the 2nd time, the value will be undefined
           if (inputValue == undefined) return ''
           var transformedInput = inputValue.replace(/[^0-9\.]/g, '');
           if (transformedInput!=inputValue) {
              modelCtrl.$setViewValue(transformedInput);
              modelCtrl.$render();
           }

           return transformedInput;
       });
     }
    };
});
'use strict';
/** 
  * It's like click, but when you don't click on your element. 
*/
app.directive('offClick', ['$document', '$timeout', function ($document, $timeout) {

    function targetInFilter(target, filter) {
        if (!target || !filter) return false;
        var elms = angular.element(document.querySelectorAll(filter));
        var elmsLen = elms.length;
        for (var i = 0; i < elmsLen; ++i)
            if (elms[i].contains(target)) return true;
        return false;
    }

    return {
        restrict: 'A',
        scope: {
            offClick: '&',
            offClickIf: '&'
        },
        link: function (scope, elm, attr) {

            if (attr.offClickIf) {
                scope.$watch(scope.offClickIf, function (newVal, oldVal) {
                    if (newVal && !oldVal) {
                        $timeout(function () {
                            $document.on('click', handler);
                        });
                    } else if (!newVal) {
                        $document.off('click', handler);
                    }
                }
                );
            } else {
                $document.on('click', handler);
            }

            scope.$on('$destroy', function () {
                $document.off('click', handler);
            });

            function handler(event) {
                // This filters out artificial click events. Example: If you hit enter on a form to submit it, an
                // artificial click event gets triggered on the form's submit button.
                if (event.pageX == 0 && event.pageY == 0) return;

                var target = event.target || event.srcElement;
                if (!(elm[0].contains(target) || targetInFilter(target, attr.offClickFilter))) {
                    scope.$apply(scope.offClick());
                }
            }
        }
    };
}]);

'use strict';
/** 
  * Add several features to panels.  
*/
app.directive('ctPaneltool', function () {
    var templates = {
        /* jshint multistr: true */
        collapse: "<a href='#' class='btn btn-transparent btn-sm' panel-collapse='' tooltip-placement='top' ng-attr-tooltip='{{{{panelId}} ? \"Expand\" : \"Collapse\"}}' ng-click='{{panelId}} = !{{panelId}}' ng-init='{{panelId}}=false'>" + "<i ng-if='{{panelId}}' class='ti-angle-down'></i>" + "<i ng-if='!{{panelId}}' class='ti-angle-up'></i>" + "</a>",
        dismiss: "<a href='#' class='btn btn-transparent btn-sm' panel-dismiss='' tooltip-placement='top' tooltip='Close' ng-click='{{dismissFn}}'>" + "<i class='ti-close'></i>" + "</a>",
        refresh: "<a href='#' class='btn btn-transparent btn-sm' panel-refresh='' tooltip-placement='top' tooltip='Refresh' data-spinner='{{spinner}}'>" + "<i class='ti-reload'></i>" + "</a>"
    };

    return {
        restrict: 'E',
        template: function (elem, attrs) {
            var temp = '';
            if (attrs.toolCollapse)
                temp += templates.collapse.replace(/{{panelId}}/g, (elem.parent().parent().attr('id')));
            if (attrs.toolDismiss)
                temp += templates.dismiss.replace(/{{dismissFn}}/g, attrs.toolDismiss);
            if (attrs.toolRefresh)
                temp += templates.refresh.replace(/{{spinner}}/g, attrs.toolRefresh);
            return temp;
        }
    };
});
app.directive('panelDismiss', function () {
    'use strict';
    return {
        restrict: 'A',
        controller: ["$scope", "$element", function ($scope, $element) {
            var removeEvent = 'panel-remove', removedEvent = 'panel-removed';

            $element.on('click', function () {

                var parent = $(this).closest('.panel');

                destroyPanel();

                function destroyPanel() {
                    var col = parent.parent();
                    parent.fadeOut(300, function () {
                        $(this).remove();
                        if (col.is('[class*="col-"]') && col.children('*').length === 0) {
                            col.remove();
                        }
                    });
                }

            });
        }]
    };
})

.directive('panelRefresh', function () {
    'use strict';

    return {
        restrict: 'A',
        controller: ["$scope", "$element", function ($scope, $element) {

            var refreshEvent = 'panel-refresh', csspinnerClass = 'csspinner', defaultSpinner = 'load1';

            // method to clear the spinner when done
            function removeSpinner() {
                this.removeClass(csspinnerClass);
            }

            // catch clicks to toggle panel refresh
            $element.on('click', function () {
                var $this = $(this), panel = $this.parents('.panel').eq(0), spinner = $this.data('spinner') || defaultSpinner;

                // start showing the spinner
                panel.addClass(csspinnerClass + ' ' + spinner);

                // attach as public method
                panel.removeSpinner = removeSpinner;

                // Trigger the event and send the panel object
                $this.trigger(refreshEvent, [panel]);

            });

        }]
    };
});

(function ($, window, document) {
    'use strict';

    $(document).on('panel-refresh', '.panel', function (e, panel) {

        // perform any action when a .panel triggers a the refresh event
        setTimeout(function () {
            // when the action is done, just remove the spinner class
            panel.removeSpinner();
        }, 3000);

    });

}(jQuery, window, document));
app.directive('perfectScrollbar', ['$parse', '$window',
function ($parse, $window) {
	var psOptions = ['wheelSpeed', 'wheelPropagation', 'minScrollbarLength', 'useBothWheelAxes', 'useKeyboard', 'suppressScrollX', 'suppressScrollY', 'scrollXMarginOffset', 'scrollYMarginOffset', 'includePadding'//, 'onScroll', 'scrollDown'
	];

	return {
		restrict: 'EA',
		transclude: true,
		template: '<div><div ng-transclude></div></div>',
		replace: true,
		link: function($scope, $elem, $attr) {
			var jqWindow = angular.element($window);
			var options = {};
			if(!$scope.$root.app.isMobile) {
				for(var i = 0, l = psOptions.length; i < l; i++) {
					var opt = psOptions[i];
					if($attr[opt] !== undefined) {
						options[opt] = $parse($attr[opt])();
					}
				}

				$scope.$evalAsync(function() {
					$elem.perfectScrollbar(options);
					var onScrollHandler = $parse($attr.onScroll);
					$elem.scroll(function() {
						var scrollTop = $elem.scrollTop();
						var scrollHeight = $elem.prop('scrollHeight') - $elem.height();
						$scope.$apply(function() {
							onScrollHandler($scope, {
								scrollTop: scrollTop,
								scrollHeight: scrollHeight
							});
						});
					});
				});

				function update(event) {
					$scope.$evalAsync(function() {
						if($attr.scrollDown == 'true' && event != 'mouseenter') {
							setTimeout(function() {
								$($elem).scrollTop($($elem).prop("scrollHeight"));
							}, 100);
						}
						$elem.perfectScrollbar('update');
					});
				}

				// This is necessary when you don't watch anything with the scrollbar
				$elem.bind('mousemove', update);

				// Possible future improvement - check the type here and use the appropriate watch for non-arrays
				if($attr.refreshOnChange) {
					$scope.$watchCollection($attr.refreshOnChange, function() {
						update();
					});
				}

				// this is from a pull request - I am not totally sure what the original issue is but seems harmless
				if($attr.refreshOnResize) {
					jqWindow.on('resize', update);
				}

				$elem.bind('$destroy', function() {
					jqWindow.off('resize', update);
					$elem.perfectScrollbar('destroy');
				});
			}
		}
	};
}]);

'use strict';
/** 
  * Create a custom CSS3 Select Elements.
  * You must use it as a class.
  * Combined with the class .cs-skin-slide it creates a slide <select>   
*/
app.factory('SelectFx', ["$http", function ($http) {
    function hasParent(e, p) {
        if (!e)
            return false;
        var el = e.target || e.srcElement || e || false;
        while (el && el != p) {
            el = el.parentNode || false;
        }
        return (el !== false);
    };

    /**
	 * extend obj function
	 */
    function extend(a, b) {
        for (var key in b) {
            if (b.hasOwnProperty(key)) {
                a[key] = b[key];
            }
        }
        return a;
    }

    /**
	 * SelectFx function
	 */
    function SelectFx(el, options) {
        this.el = el[0];
        this.options = extend({}, this.options);
        extend(this.options, options);
        this._init();
    }
    function classReg(className) {
        return new RegExp("(^|\\s+)" + className + "(\\s+|$)");
    }

    // classList support for class management
    // altho to be fair, the api sucks because it won't accept multiple classes at once
    var hasClass, addClass, removeClass;

    if ('classList' in document.documentElement) {
        hasClass = function (elem, c) {
            return elem.classList.contains(c);
        };
        addClass = function (elem, c) {
            elem.classList.add(c);
        };
        removeClass = function (elem, c) {
            elem.classList.remove(c);
        };
    }
    else {
        hasClass = function (elem, c) {
            return classReg(c).test(elem.className);
        };
        addClass = function (elem, c) {
            if (!hasClass(elem, c)) {
                elem.className = elem.className + ' ' + c;
            }
        };
        removeClass = function (elem, c) {
            elem.className = elem.className.replace(classReg(c), ' ');
        };
    }

    function toggleClass(elem, c) {
        var fn = hasClass(elem, c) ? removeClass : addClass;
        fn(elem, c);
    }

    var classie = {
        // full names
        hasClass: hasClass,
        addClass: addClass,
        removeClass: removeClass,
        toggleClass: toggleClass,
        // short names
        has: hasClass,
        add: addClass,
        remove: removeClass,
        toggle: toggleClass
    };

    // transport
    if (typeof define === 'function' && define.amd) {
        // AMD
        define(classie);
    } else {
        // browser global
        window.classie = classie;
    }

    /**
	 * SelectFx options
	 */
    SelectFx.prototype.options = {
        // if true all the links will open in a new tab.
        // if we want to be redirected when we click an option, we need to define a data-link attr on the option of the native select element
        newTab: true,
        // when opening the select element, the default placeholder (if any) is shown
        stickyPlaceholder: true,
        // callback when changing the value
        onChange: function (val) {
            return false;
        }
    };

    /**
	 * init function
	 * initialize and cache some vars
	 */
    SelectFx.prototype._init = function () {

        var selectDisabled = false;
        if (this.el.hasAttribute("disabled")) {
            this.el.className = this.el.className + " disabled";
            selectDisabled = true;
        };

        // check if we are using a placeholder for the native select box
        // we assume the placeholder is disabled and selected by default
        var selectedOpt = this.el.querySelector('option[selected]');
        this.hasDefaultPlaceholder = selectedOpt && selectedOpt.disabled;

        // get selected option (either the first option with attr selected or just the first option)
        this.selectedOpt = selectedOpt || this.el.querySelector('option');

        // create structure
        this._createSelectEl();

        // all options
        this.selOpts = [].slice.call(this.selEl.querySelectorAll('li[data-option]'));

        // total options
        this.selOptsCount = this.selOpts.length;

        // current index
        this.current = this.selOpts.indexOf(this.selEl.querySelector('li.cs-selected')) || -1;

        // placeholder elem
        this.selPlaceholder = this.selEl.querySelector('span.cs-placeholder');
        if (!selectDisabled) {
            // init events
            this._initEvents();
        }

    };
    /**
	 * creates the structure for the select element
	 */
    SelectFx.prototype._createSelectEl = function () {
        var self = this, options = '', createOptionHTML = function (el) {
            var optclass = '', classes = '', link = '';

            if (el.selectedOpt && !this.foundSelected && !this.hasDefaultPlaceholder) {
                classes += 'cs-selected ';
                this.foundSelected = true;
            }
            // extra classes
            if (el.getAttribute('data-class')) {
                classes += el.getAttribute('data-class');
            }
            // link options
            if (el.getAttribute('data-link')) {
                link = 'data-link=' + el.getAttribute('data-link');
            }

            if (classes !== '') {
                optclass = 'class="' + classes + '" ';
            }

            return '<li ' + optclass + link + ' data-option data-value="' + el.value + '"><span>' + el.textContent + '</span></li>';
        };

        [].slice.call(this.el.children).forEach(function (el) {
            if (el.disabled) {
                return;
            }

            var tag = el.tagName.toLowerCase();

            if (tag === 'option') {
                options += createOptionHTML(el);
            } else if (tag === 'optgroup') {
                options += '<li class="cs-optgroup"><span>' + el.label + '</span><ul>';
                [].slice.call(el.children).forEach(function (opt) {
                    options += createOptionHTML(opt);
                })
                options += '</ul></li>';
            }
        });

        var opts_el = '<div class="cs-options"><ul>' + options + '</ul></div>';
        this.selEl = document.createElement('div');
        this.selEl.className = this.el.className;
        this.selEl.tabIndex = this.el.tabIndex;
        this.selEl.innerHTML = '<span class="cs-placeholder">' + this.selectedOpt.textContent + '</span>' + opts_el;
        this.el.parentNode.appendChild(this.selEl);
        this.selEl.appendChild(this.el);
    };
    /**
	 * initialize the events
	 */
    SelectFx.prototype._initEvents = function () {
        var self = this;

        // open/close select
        this.selPlaceholder.addEventListener('click', function () {
            self._toggleSelect();
        });

        // clicking the options
        this.selOpts.forEach(function (opt, idx) {
            opt.addEventListener('click', function () {
                self.current = idx;
                self._changeOption();
                // close select elem
                self._toggleSelect();
            });
        });

        // close the select element if the target itÂ´s not the select element or one of its descendants..
        document.addEventListener('click', function (ev) {
            var target = ev.target;
            if (self._isOpen() && target !== self.selEl && !hasParent(target, self.selEl)) {
                self._toggleSelect();
            }
        });

        // keyboard navigation events
        this.selEl.addEventListener('keydown', function (ev) {
            var keyCode = ev.keyCode || ev.which;

            switch (keyCode) {
                // up key
                case 38:
                    ev.preventDefault();
                    self._navigateOpts('prev');
                    break;
                    // down key
                case 40:
                    ev.preventDefault();
                    self._navigateOpts('next');
                    break;
                    // space key
                case 32:
                    ev.preventDefault();
                    if (self._isOpen() && typeof self.preSelCurrent != 'undefined' && self.preSelCurrent !== -1) {
                        self._changeOption();
                    }
                    self._toggleSelect();
                    break;
                    // enter key
                case 13:
                    ev.preventDefault();
                    if (self._isOpen() && typeof self.preSelCurrent != 'undefined' && self.preSelCurrent !== -1) {
                        self._changeOption();
                        self._toggleSelect();
                    }
                    break;
                    // esc key
                case 27:
                    ev.preventDefault();
                    if (self._isOpen()) {
                        self._toggleSelect();
                    }
                    break;
            }
        });
    };
    /**
	 * navigate with up/dpwn keys
	 */
    SelectFx.prototype._navigateOpts = function (dir) {
        if (!this._isOpen()) {
            this._toggleSelect();
        }

        var tmpcurrent = typeof this.preSelCurrent != 'undefined' && this.preSelCurrent !== -1 ? this.preSelCurrent : this.current;

        if (dir === 'prev' && tmpcurrent > 0 || dir === 'next' && tmpcurrent < this.selOptsCount - 1) {
            // save pre selected current - if we click on option, or press enter, or press space this is going to be the index of the current option
            this.preSelCurrent = dir === 'next' ? tmpcurrent + 1 : tmpcurrent - 1;
            // remove focus class if any..
            this._removeFocus();
            // add class focus - track which option we are navigating
            classie.add(this.selOpts[this.preSelCurrent], 'cs-focus');
        }
    };
    /**
	 * open/close select
	 * when opened show the default placeholder if any
	 */
    SelectFx.prototype._toggleSelect = function () {
        // remove focus class if any..
        this._removeFocus();

        if (this._isOpen()) {
            if (this.current !== -1) {
                // update placeholder text
                this.selPlaceholder.textContent = this.selOpts[this.current].textContent;
            }
            classie.remove(this.selEl, 'cs-active');
        } else {
            if (this.hasDefaultPlaceholder && this.options.stickyPlaceholder) {
                // everytime we open we wanna see the default placeholder text
                this.selPlaceholder.textContent = this.selectedOpt.textContent;
            }
            classie.add(this.selEl, 'cs-active');
        }
    };
    /**
	 * change option - the new value is set
	 */
    SelectFx.prototype._changeOption = function () {

        // if pre selected current (if we navigate with the keyboard)...
        if (typeof this.preSelCurrent != 'undefined' && this.preSelCurrent !== -1) {
            this.current = this.preSelCurrent;
            this.preSelCurrent = -1;
        }

        // current option
        var opt = this.selOpts[this.current];


        // update current selected value
        this.selPlaceholder.textContent = opt.textContent;

        // change native select elementÂ´s value
        this.el.value = opt.getAttribute('data-value');
        var event = new Event('change');
        this.el.dispatchEvent(event);

        // remove class cs-selected from old selected option and add it to current selected option
        var oldOpt = this.selEl.querySelector('li.cs-selected');
        if (oldOpt) {
            classie.remove(oldOpt, 'cs-selected');
        }
        classie.add(opt, 'cs-selected');

        // if thereÂ´s a link defined
        if (opt.getAttribute('data-link')) {
            // open in new tab?
            if (this.options.newTab) {
                window.open(opt.getAttribute('data-link'), '_blank');
            } else {
                window.location = opt.getAttribute('data-link');
            }
        }

        // callback
        this.options.onChange(this.el.value);
    };
    /**
	 * returns true if select element is opened
	 */
    SelectFx.prototype._isOpen = function (opt) {
        return classie.has(this.selEl, 'cs-active');
    };
    /**
	 * removes the focus class from the option
	 */
    SelectFx.prototype._removeFocus = function (opt) {
        var focusEl = this.selEl.querySelector('li.cs-focus')
        if (focusEl) {
            classie.remove(focusEl, 'cs-focus');
        }
    };

    return SelectFx;
}]);

app.directive('csSelect', ["SelectFx", function (SelectFx) {
    return {
        restrict: 'AC',
        link: function ($scope, $element, $attributes) {



            new SelectFx($element);



        }
    };
}]);

'use strict';
/** 
 * Returns the id of the selected e-mail. 
 */
app.directive('showSettings', ['$timeout', function ($timeout) {
  return {
    restrict: 'C',
    link: function (scope, elem, attrs) {
      var promise;
      elem.on('mouseenter', function () {
        promise = $timeout(function () {
          // elem.find('.componentActions').addClass('display-settings');
          // elem.find('.add-component').addClass('display-settings');
        }, 500);
      });
      elem.on('mouseleave', function () {
        $timeout.cancel(promise);
        // elem.find('.componentActions').removeClass('display-settings');
        // elem.find('.add-component').removeClass('display-settings');
      });
    }
  };
}]);

'use strict';
/**
  * A set of directives for left and right sidebar.
*/
app.directive('sidebar', ['$document', '$rootScope', '$timeout',
function ($document, $rootScope, $timeout) {
    return {
        replace: false,
        restrict: "C",
        link: function (scope, elem, attrs) {
            var shouldCloseOnOuterClicks = true;

            if (attrs.closeOnOuterClicks == 'false' || attrs.closeOnOuterClicks == '0') {
                shouldCloseOnOuterClicks = false;
            }

            var isAncestorOrSelf = function (element, target) {
                var parent = element;

                while (parent.length > 0) {
                    if (parent[0] === target[0]) {
                        parent = null;
                        return true;
                    }
                    parent = parent.parent();
                }

                parent = null;
                return false;
            };

            var closeOnOuterClicks = function (e) {

                if (!isAncestorOrSelf(angular.element(e.target), elem)) {
                    $rootScope.toggle(attrs.id, 'off');
                    e.preventDefault();
                    return false;
                }
            };

            var clearCb1 = angular.noop();

            if (shouldCloseOnOuterClicks) {
                clearCb1 = $rootScope.$on('clip-two.toggled', function (e, id, active) {

                    if (id == attrs.id) {

                        if (active) {
                            $timeout(function () {
                                $document.on('click tap', closeOnOuterClicks);
                            }, 300);
                        } else {
                            $document.off('click tap', closeOnOuterClicks);
                        }
                    }
                });
            }

            scope.$on('$destroy', function () {
                clearCb1();
                $document.off('click tap', closeOnOuterClicks);
            });

        }
    };
}]).directive('searchForm', function () {
    return {
        restrict: 'AC',
        link: function (scope, elem, attrs) {
            var wrap = $('.app-aside');
            var searchForm = elem.children('form');
            var formWrap = elem.parent();

            $(".s-open").on('click', function (e) {
                searchForm.prependTo(wrap);
                e.preventDefault();
                $(document).on("mousedown touchstart", closeForm);
            });
            $(".s-remove").on('click', function (e) {
                searchForm.appendTo(elem);
                e.preventDefault();
            });
            var closeForm = function (e) {
                if (!searchForm.is(e.target) && searchForm.has(e.target).length === 0) {
                    $(".s-remove").trigger('click');
                    $(document).off("mousedown touchstart", closeForm);
                }
            };
        }
    };
    function isSidebarClosed() {
        return $('.app-sidebar-closed').length;
    }

    function isSidebarFixed() {
        return $('.app-sidebar-fixed').length;
    }

}).directive('appAside', ['$window', '$rootScope', '$timeout', 'APP_MEDIAQUERY', 'DashboardService',
function ($window, $rootScope, $timeout, mq, DashboardService) {
    var $html = $('html'), $win = $($window), _this, wrap = $('.app-aside');
    return {
        restrict: 'AC',

        controller: ['$scope', function($scope) {

            $scope.showDashboardNotificationIcon = false;

            $scope.$watch(function() { return DashboardService.updatedWorkstreams }, function() {

                /*
                 * If there is new workstream data from server and we're not on the dashboard,
                 * Then we want to display the nav notification icon
                 */
                if (DashboardService.updatedWorkstreams && DashboardService.awayFromDashboard) {
                    $scope.showDashboardNotificationIcon = true;
                }

            }, true);

            $scope.userHasNavigated = function(urlPath) {
                if (urlPath === '#/dashboard' || urlPath === '#/dohy') {
                    DashboardService.setAwayFromDashboard(false);
                    $scope.showDashboardNotificationIcon = false;
                } else {
                    DashboardService.setAwayFromDashboard(true);
                }
            }

        }],

        link: function (scope, elem, attrs, controllers) {
            var eventObject = isTouch() ? 'click' : 'mouseenter';
            var ul = "";
            var menuTitle;
            elem.on('click', 'a', function (e) {

                _this = $(this);
                if (isSidebarClosed() && !isMobile() && !_this.closest("ul").hasClass("sub-menu"))
                    return;

                _this.closest("ul").find(".open").not(".active").children("ul").not(_this.next()).slideUp(200).parent('.open').removeClass("open");
                if (_this.next().is('ul') && _this.parent().toggleClass('open')) {

                    _this.next().slideToggle(200, function () {
                        $win.trigger("resize");

                    });
                    e.stopPropagation();
                    e.preventDefault();
                } else {
                    $rootScope.toggle('sidebar', 'off');

                }
            });
            elem.on(eventObject, 'a', function (e) {
                if (!isSidebarClosed() || isMobile())
                    return;
                _this = $(this);

                if (!_this.parent().hasClass('hover') && !_this.closest("ul").hasClass("sub-menu")) {
                    wrapLeave();
                    _this.parent().addClass('hover');
                    menuTitle = _this.find(".item-inner").clone();
                    if (_this.parent().hasClass('active')) {
                        menuTitle.addClass("active");
                    }
                    var offset = $("#sidebar").position().top;
                    var itemTop = isSidebarFixed() ? _this.parent().position().top + offset : (_this.parent().position().top);
                    menuTitle.css({
                        position: isSidebarFixed() ? 'fixed' : 'absolute',
                        height: _this.outerHeight(),
                        top: itemTop
                    }).appendTo(wrap);
                    if (_this.next().is('ul')) {
                        ul = _this.next().clone(true);

                        ul.appendTo(wrap).css({
                            top: menuTitle.position().top + _this.outerHeight(),
                            position: isSidebarFixed() ? 'fixed' : 'absolute',
                        });
                        if (_this.parent().position().top + _this.outerHeight() + offset + ul.height() > $win.height() && isSidebarFixed()) {
                            ul.css('bottom', 0);
                        } else {
                            ul.css('bottom', 'auto');
                        }

                        wrap.children().first().scroll(function () {
                            if (isSidebarFixed())
                                wrapLeave();
                        });

                        $timeout(function () {

                            if (!wrap.is(':empty')) {
                                $(document).on('click tap', wrapLeave);
                            }
                        }, 300);

                    } else {
                        ul = "";
                        return;
                    }

                }
            });
            wrap.on('mouseleave', function (e) {
                $(document).off('click tap', wrapLeave);
                $('.hover', wrap).removeClass('hover');
                $('> .item-inner', wrap).remove();
                $('> ul', wrap).remove();

            });


            $rootScope
                .$on('$locationChangeSuccess',
                    function () {
                        var newPath;
                        newPath = $window.location.hash;

                        scope.userHasNavigated(newPath);

                        angular.forEach(elem.find('.main-navigation-menu a'), function (domLink) {
                            var link = angular.element(domLink);
                            var menu;
                            if (domLink.hash === newPath && (!isSidebarClosed() || isMobile())) {

                                if (link.closest("ul").hasClass("sub-menu")) {
                                    menu = link.closest("ul");
                                    var activeMenu = menu;
                                    menu.slideDown(200).parent().siblings().children('.sub-menu').slideUp(200, function () {
                                        $(this).parent().removeClass("open");
                                    });
                                } else {
                                    $('.sub-menu').slideUp(200, function () {
                                        $(this).parent().removeClass("open");
                                    });
                                }

                            }
                            activeMenu = null;
                            menu = null;
                        });
                    });

        }
    };
    function wrapLeave() {
        wrap.trigger('mouseleave');
    }
    function isTouch() {
        return $html.hasClass('touch');
    }

    function isMobile() {
        return $win.width() < mq.desktop;
    }

    function isSidebarClosed() {
        return $('.app-sidebar-closed').length;
    }

    function isSidebarFixed() {
        return $('.app-sidebar-fixed').length;
    }

}]);

'use strict';

app.directive('indigewebSkeuocard',['PaymentService', 'UserService', 'ToasterService', 'formValidations', '$timeout', function(PaymentService, UserService, ToasterService, formValidations, $timeout) {
        return {
            require: [],
            restrict: 'C',
            transclude: false,
            scope: {
                user: '=user',
                updateFn: '=update',
                autoClose: '=autoClose',
                wrapper: '=wrapperDiv'
            },
            templateUrl: '/admin/assets/views/partials/_skeuocard.html',
            link: function(scope, element, attrs, controllers) {

                UserService.getAccount(function(account){
                    scope.account = account;
                });
                scope.$watch('account', function(newValue, oldValue){
                    var renderedcardFlag=0;
                    if (newValue && newValue.billing.stripeCustomerId) {
                        console.log('about to call getCustomerCards', scope.account);
                        PaymentService.getCustomerCards(newValue.billing.stripeCustomerId, function(cards) {
                            scope.cards = cards;
                            if (scope.cards.data.length) {
                                scope.defaultCardValue = "XXXX-XXXX-XXXX-" + scope.cards.data[0].last4;
                                scope.defaultExpiry = scope.cards.data[0].exp_month + '/' + (scope.cards.data[0].exp_year - 2000);
                                element.find('form').card({
                                    container: '.' + scope.wrapper,
                                    values: {
                                        number: "4XXXXXXXXXXX" + scope.cards.data[0].last4,
                                        expiry: scope.cards.data[0].exp_month + '/' + scope.cards.data[0].exp_year
                                    }
                                });
                            } else {
                                if(renderedcardFlag != 0)
                                {
                                    element.find('form').card({
                                        container: '.' + scope.wrapper
                                    });
                                }
                            }
                        }, function(data) {
                            /*element.find('form').card({
                             container: '.' + scope.wrapper
                             });*/

                        });
                    } else {
                        if(renderedcardFlag == 0)
                        {
                            element.find('form').card({
                                container: '.' + scope.wrapper
                            });
                        }
                    }
                });


                scope.checkCardNumber = function() {
                    var card_number = $('#number').val();
                    console.log('checking to see if the card numer exists ', card_number);
                    if (!card_number) {
                        $("#card_number .error").html("Card Number Required");
                        $("#card_number").addClass('has-error');
                        $("#card_number .glyphicon").addClass('glyphicon-remove');
                    } else if (card_number.length < 16) {
                      $("#card_number .error").html("Card Number Invalid");
                      $("#card_number").addClass('has-error');
                      $("#card_number .glyphicon").addClass('glyphicon-remove');
                    } else if (card_number.length >= 16) {
                        $("#card_number .error").html("");
                        $("#card_number").removeClass('has-error').addClass('has-success');
                        $("#card_number .glyphicon").removeClass('glyphicon-remove').addClass('glyphicon-ok');
                    }
                    scope.cardValidated = true;
                };

                scope.checkCardName = function() {
                     var name = $('#card_name #name').val();
                     if (!name) {
                         $("#card_name .error").html("Card Name Required");
                         $("#card_name").addClass('has-error');
                         $("#card_name .glyphicon").addClass('glyphicon-remove');
                         scope.cardNameValidated = false;
                     } else {
                         $("#card_name .error").html("");
                         $("#card_name").removeClass('has-error').addClass('has-success');
                         $("#card_name .glyphicon").removeClass('glyphicon-remove').addClass('glyphicon-ok');
                         scope.cardNameValidated = true;
                     }

                };

                scope.checkCardPostcode = function () {
                    var zipcode = $('#address_zip').val();
                    if (!zipcode) {
                        $("#card_postcode .error").html("Postcode Required");
                        $("#card_postcode").addClass('has-error');
                        $("#card_postcode .glyphicon").addClass('glyphicon-remove');
                        scope.cardPostcodeValidated = false;
                    } else {
                        if (formValidations.zip.test(zipcode)) {
                            $("#card_postcode .error").html("");
                            $("#card_postcode").removeClass('has-error').addClass('has-success');
                            $("#card_postcode .glyphicon").removeClass('glyphicon-remove').addClass('glyphicon-ok');
                            scope.cardPostcodeValidated = true;
                        } else {
                            $("#card_postcode .error").html("Invalid postcode");
                            $("#card_postcode").addClass('has-error');
                            $("#card_postcode .glyphicon").addClass('glyphicon-remove');
                            scope.cardPostcodeValidated = false;
                        }
                    }
                };

                scope.currentYear = new Date().getYear() - 100;
                scope.fullCurrentYear = new Date().getFullYear();
                scope.currentMonth = new Date().getMonth() + 1;

                scope.checkCardExpiry = function() {
                    var expiry = $('#expiry').val();
                    var card_expiry = expiry.split("/")
                    var exp_month = card_expiry[0].trim();
                    var exp_year;
                    if (card_expiry.length > 1)
                        exp_year = card_expiry[1].trim();

                    console.log('checking to see if the card expiry details exists ', card_expiry);
                    var valid = false;
                    if (!expiry || !exp_month || !exp_year) {
                        if (!expiry)
                            $("#card_expiry .error").html("Expiry Required");
                        else if (!exp_month)
                            $("#card_expiry .error").html("Expiry Month Required");
                        else if (!exp_year)
                            $("#card_expiry .error").html("Expiry Year Required");
                        $("#card_expiry").addClass('has-error');
                        $("#card_expiry .glyphicon").addClass('glyphicon-remove');
                    } else {
                        console.log('year ', parseInt(exp_year));
                        scope.yearLength = exp_year.length;
                        if(scope.yearLength == 2)
                        {
                            if (parseInt(exp_year) < parseInt(scope.currentYear)) {
                                $("#card_expiry .error").html("Card Year has Expired");
                                $("#card_expiry").addClass('has-error');
                                $("#card_expiry .glyphicon").addClass('glyphicon-remove');
                                return;
                            }

                        }
                        else if(scope.yearLength == 4)
                        {
                            if(parseInt(exp_year) < parseInt(scope.fullCurrentYear)){
                            $("#card_expiry .error").html("Card Year has Expired");
                                $("#card_expiry").addClass('has-error');
                                $("#card_expiry .glyphicon").addClass('glyphicon-remove');
                                return;
                            }
                        }
                         if (exp_month < scope.currentMonth && parseInt(exp_year) <= scope.currentYear) {
                            $("#card_expiry .error").html("Card Month has Expired");
                            $("#card_expiry").addClass('has-error');
                            $("#card_expiry .glyphicon").addClass('glyphicon-remove');
                        }
                        else if(exp_month > 12) {
                            $("#card_expiry .error").html("Card Month is invalid");
                            $("#card_expiry").addClass('has-error');
                            $("#card_expiry .glyphicon").addClass('glyphicon-remove');
                        }
                        else {
                            scope.expirationValidated = true;
                            $("#card_expiry .error").html("");
                            $("#card_expiry").removeClass('has-error').addClass('has-success');
                            $("#card_expiry .glyphicon").removeClass('glyphicon-remove').addClass('glyphicon-ok');
                        }
                    }
                };

                scope.checkCardCvv = function() {

                    var card_cvc = $('#cvc').val();
                    console.log('checking to see if the card cvc exists ', card_cvc);

                    if (!card_cvc) {
                        $("#card_cvc .error").html("CVC Required");
                        $("#card_cvc").addClass('has-error');
                        $("#card_cvc .glyphicon").addClass('glyphicon-remove');
                    } else {
                        scope.cvvValidated = true;
                        $("#card_cvc .error").html("");
                        $("#card_cvc").removeClass('has-error').addClass('has-success');
                        $("#card_cvc .glyphicon").removeClass('glyphicon-remove').addClass('glyphicon-ok');
                    }
                };

                // scope.checkCouponCode = function() {

                //   var couponCode = $('#coupon').val();
                //   console.log('checking to see if coupon code is valid ', couponCode);

                //   if (!couponCode) {
                //     $("#coupon_code .error").html("CVC Required");
                //     $("#coupon_code").addClass('has-error');
                //   } else {
                //     scope.cvvValidated = true;
                //     $("#coupon_code .error").html("");
                //     $("#coupon_code").removeClass('has-error').addClass('has-success');
                //   }
                // };

                scope.addCardFn = function() {
                    console.log('addCardFn >>>');
                    scope.cardValidated = scope.expirationValidated = scope.cvvValidated = scope.cardNameValidated = scope.cardPostcodeValidated = false;
                    scope.checkCardCvv();
                    scope.checkCardExpiry();
                    scope.checkCardName();
                    scope.checkCardNumber();
                    scope.checkCardPostcode();
                    if (scope.cardValidated && scope.expirationValidated && scope.cvvValidated && scope.cardNameValidated && scope.cardPostcodeValidated) {


                        var parent_div = $("." + scope.wrapper).next();
                        if (parent_div.length && parent_div.attr("wrapper-div")) {
                            var expiry = parent_div.find('#expiry').val().split("/")
                            var exp_month = expiry[0].trim();
                            var exp_year = "";
                            if (expiry.length > 1)
                                exp_year = expiry[1].trim();
                            parent_div.find('#expiry').val().split("/")[0].trim()
                            var cardInput = {
                                number: parent_div.find('#number').val(),
                                cvc: parent_div.find('#cvc').val(),
                                exp_month: exp_month,
                                exp_year: exp_year,
                                name : parent_div.find('#name').val(),
                                address_zip: parent_div.find('#address_zip').val()
                            };
                        } else {
                            var expiry = $('#expiry').val().split("/")
                            var exp_month = expiry[0].trim();
                            var exp_year = "";
                            if (expiry.length > 1)
                                exp_year = expiry[1].trim();
                            $('#expiry').val().split("/")[0].trim()
                            var cardInput = {
                                number: $('#number').val(),
                                cvc: $('#cvc').val(),
                                exp_month: exp_month,
                                exp_year: exp_year,
                                name : $('#card_name #name').val(),
                                address_zip: $('#address_zip').val()
                            };
                        }

                        PaymentService.getStripeCardToken(cardInput, function(token) {
                            if(scope.$parent.closeModal && token)
                                scope.$parent.closeModal();
                            if (scope.account && scope.account.billing.stripeCustomerId) {
                                UserService.postAccountBilling(scope.account.billing.stripeCustomerId, token, function(billing) {
                                    scope.updateFn(billing);
                                },
                                function(err){
                                    //ToasterService.clearAll();
                                    ToasterService.show('error', 'The purchase was unsuccessful. Please check your card information.');
                                    //Closing the previous opened
                                    scope.$parent.closeModal();
                                    $timeout(function() {
                                      scope.$parent.openModal('change-card-modal');
                                    }, 500);
                                });
                                scope.cards.data.forEach(function(value, index) {
                                    PaymentService.deleteCustomerCard(value.customer, value.id, false, function(card) {});
                                });

                            } else {
                                if (token !== undefined) {
                                    PaymentService.postStripeCustomer(token, function(stripeUser) {
                                        if (scope.account)
                                            scope.account.billing.stripeCustomerId = stripeUser.id;
                                        UserService.postAccountBilling(stripeUser.id, token, function(billing) {
                                            scope.updateFn(billing);
                                        });

                                    });
                                }
                            }
                        });
                    }
                };
            }
        }
}]);

app.directive('slickSlider', function() {
    return {
        restrict: 'A',
        scope: {
            objects: '=',
            config: '='
        },
        link: function(scope, element, attrs) {
            scope.$watch('objects', function(newValue, oldValue) {
                if ($(element).hasClass('slick-initialized')) {
                    $(element).slick('unslick');
                }
                $(element).slick(scope.config);
            }, true);
        }
    }
});

app.directive('stSortTable', function(){
   return {
            require: '^stTable',            
            link: function (scope, element, attr, ctrl) {
                scope.getSortOrder = function() {
                    return ctrl.tableState();   
                }
                scope.setSortOrder = function(order) {
                    ctrl.sortBy(order.predicate, order.reverse);                   
                } 
            }
        };
});
'use strict';

/**
 * to make the cards for Facebook posts on the social feed page.
 */
app.directive('facebookPost', function () {
    return {
        restrict: 'E',
        templateUrl: '/admin/assets/views/social-facebook-post.html',
        scope: {
            post: '=',
            actionLike: '&',
            actionComment: '&'
        }
    };
});

/**
 * to make the cards for Twitter tweets on the social feed page.
 */
app.directive('twitterFeed', function () {
    return {
        restrict: 'E',
        templateUrl: '/admin/assets/views/social-twitter-feed.html',
        scope: {
            post: '=',
            actionReply: '&',
            actionFavorite: '&',
            actionRetweet: '&',
            actionDirectMessage: '&',
            showDm: '='
        }
    };
});

/**
 * to make the cards for Facebook posts on the social feed page.
 */
app.directive('twitterFollower', function () {
    return {
        restrict: 'E',
        templateUrl: '/admin/assets/views/social-twitter-follower.html',
        scope: {
            post: '=',
            actionTweetAt: '&',
            actionFollowBack: '&',
            actionDirectMessage: '&',
            showDm: '='
        }
    };
});

/*global app, moment, angular, window, CKEDITOR*/
/*jslint unparam:true*/

app.directive('socialLinks', ['$modal', '$http', '$timeout', '$q', '$compile', '$filter', 'toaster', function ($modal, $http, $timeout, $q, $compile, $filter, toaster) {
  return {
    require: [],
    restrict: 'C',
    transclude: false,
    replace: false,
    scope: false,
    link: function (scope, element, attrs, ctrl) {
      scope.openModal = function (template, index, parentIndex) {
        scope.setEditingComponent(index, parentIndex);
        scope.modalInstance = $modal.open({
          templateUrl: template,
          scope: scope
        });
      };

      scope.setEditingComponent = function (index, parent_index) {
        var network = [];
        var editIndex = index;
        var nested = angular.isDefined(parent_index) && parent_index !== null ? true : false;
        if (nested)
          network = angular.isDefined(editIndex) && editIndex !== null ? scope.component.teamMembers[parent_index].networks[editIndex] : null;
        else
          network = scope.component.networks[editIndex];
        var update = angular.isDefined(editIndex) && editIndex !== null ? true : false;
        scope.setSelectedSocialLink(network, scope.component._id, update, nested, parent_index);
      }

      scope.closeModal = function () {
        $timeout(function () {
          console.log('scope.modalInstance ', scope.modalInstance);
          console.log('modal element', angular.element('.modal'));
          scope.modalInstance.close();
          scope.modalInstance.dismiss('cancel');
          //angular.element('.modal-backdrop').remove();
        });
      };

      /*
       * @saveSocialLink
       * -
       */

      scope.saveSocialLink = function (social, id, mode) {
        angular.element("#social-link-name .error").html("");
        angular.element("#social-link-name").removeClass('has-error');
        angular.element("#social-link-url .error").html("");
        angular.element("#social-link-url").removeClass('has-error');
        var old_value = _.findWhere(scope.networks, {
          name: scope.social.selectedLink
        });
        var selectedName;
        switch (mode) {
          case "add":
            if (social && social.name) {
              if (!social.url || social.url == "") {
                angular.element("#social-link-url .error").html("Link url can not be blank.");
                angular.element("#social-link-url").addClass('has-error');
                return;
              }

              if (social.url) {
                var urlRegex = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
                if (urlRegex.test(social.url) == false) {
                  angular.element("#social-link-url .error").html("Link url incorrect format");
                  angular.element("#social-link-url").addClass('has-error');
                  return;
                }
              }
              selectedName = _.findWhere(scope.networks, {
                name: social.name
              });
              if (selectedName) {
                angular.element("#social-link-name .error").html("Link icon already exists");
                angular.element("#social-link-name").addClass('has-error');
                return;
              }
              var selectedUrl = _.findWhere(scope.networks, {
                url: social.url
              });
              if (selectedUrl) {
                angular.element("#social-link-url .error").html("Link url already exists");
                angular.element("#social-link-url").addClass('has-error');
                return;
              }
            } else {
              angular.element("#social-link-url .error").html("Please enter link url.");
              angular.element("#social-link-url").addClass('has-error');
              angular.element("#social-link-name .error").html("Please select link icon.");
              angular.element("#social-link-name").addClass('has-error');
              return;
            }
            angular.element("#social-link-name .error").html("");
            angular.element("#social-link-name").removeClass('has-error');
            angular.element("#social-link-url .error").html("");
            angular.element("#social-link-url").removeClass('has-error');
            break;
          case "update":
            if (social && social.name && social.url) {
              var networks = angular.copy(scope.networks);

              selectedName = _.findWhere(networks, {
                name: old_value.name
              });
              selectedName.name = social.name;
              selectedName.url = social.url;
              selectedName.icon = social.icon;


              var existingName = _.where(networks, {
                name: social.name
              });
              var existingUrl = _.where(networks, {
                url: social.url
              });
              if (existingName.length > 1) {
                angular.element("#social-link-name .error").html("Link icon already exists");
                angular.element("#social-link-name").addClass('has-error');
                return;
              } else if (existingUrl.length > 1) {
                angular.element("#social-link-url .error").html("Link url already exists");
                angular.element("#social-link-url").addClass('has-error');
                return;
              }
            }
            break;
        }
        if (scope.meetTeamIndex !== null)
          scope.updateTeamNetworks(old_value, mode, social, scope.meetTeamIndex);
        else
          scope.updateSocialNetworks(old_value, mode, social);
        scope.social = {};
        scope.meetTeamIndex = null;
        scope.closeModal();
      };

      /*
       * @setSelectedLink
       * -
       */

      scope.setSelectedLink = function (social_link) {
        scope.social.name = social_link.name;
        scope.social.icon = social_link.icon;
        scope.social.url = social_link.url;
      };

      /*
       * @setSelectedSocialLink
       * -
       */

      scope.setSelectedSocialLink = function (link, id, update, nested, index) {
        if (!scope.social)
          scope.social = {};
        if (nested)
          scope.meetTeamIndex = index;
        else
          scope.meetTeamIndex = null;
        if (update) {
          scope.social.selectedLink = link.name;
          scope.social.name = link.name;
          scope.social.icon = link.icon;
          scope.social.url = link.url;
        } else {
          scope.social = {};
        }
        if(scope.social.selectedLink){
          scope.matchingLink = _.findWhere(scope.social_links, {
              name: scope.social.selectedLink
          });
        }
        angular.element("#social-link-name .error").html("");
        angular.element("#social-link-name").removeClass('has-error');
        angular.element("#social-link-url .error").html("");
        angular.element("#social-link-url").removeClass('has-error');
        //scope.$apply(function () {
        scope.networks = scope.getSocialNetworks(nested, index);
        //});
      };

      /*
       * @getSocialNetworks
       * -
       */

      scope.getSocialNetworks = function (nested, parent_index) {
        if (nested)
          return scope.component.teamMembers[parent_index].networks;
        else
          return scope.component.networks;
      };

      scope.updateSocialNetworks = function (old_value, mode, new_value) {
        var selectedName;
        switch (mode) {
          case "add":
            if (new_value && new_value.name && new_value.url) {
              scope.component.networks.push({
                name: new_value.name,
                url: new_value.url,
                icon: new_value.icon
              });
            }
            break;
          case "update":
            if (new_value && new_value.name && new_value.url) {
              selectedName = _.findWhere(scope.component.networks, {
                name: old_value.name
              });
              selectedName.name = new_value.name;
              selectedName.url = new_value.url;
              selectedName.icon = new_value.icon;
            }
            break;
          case "delete":
            //wait for modal animation for 500ms
            $timeout(function () {
              selectedName = _.findWhere(scope.component.networks, {
                name: old_value.name
              });
              scope.$apply(function () {
                if (selectedName) {
                  var index = scope.component.networks.indexOf(selectedName)
                  scope.component.networks.splice(index, 1);
                }
              });
            }, 500);
            break;
        }
      };

       /*
     * @updateTeamNetworks
     * -
     */

    scope.updateTeamNetworks = function (old_value, mode, new_value, parent_index) {
      var selectedName;
      switch (mode) {
        case "add":
          if (new_value && new_value.name && new_value.url) {
            if (!scope.component.teamMembers[parent_index].networks)
              scope.component.teamMembers[parent_index].networks = [];
            scope.component.teamMembers[parent_index].networks.push({
              name: new_value.name,
              url: new_value.url,
              icon: new_value.icon
            });
          }
          break;
        case "update":
          if (new_value && new_value.name && new_value.url) {
            selectedName = _.findWhere(scope.component.teamMembers[parent_index].networks, {
              name: old_value.name
            });
            selectedName.name = new_value.name;
            selectedName.url = new_value.url;
            selectedName.icon = new_value.icon;
          }
          break;
        case "delete":
          selectedName = _.findWhere(scope.component.teamMembers[parent_index].networks, {
            name: old_value.name
          });
          if (selectedName) {
            var index = scope.component.teamMembers[parent_index].networks.indexOf(selectedName)
            scope.component.teamMembers[parent_index].networks.splice(index, 1);
          }
          break;
      }
    };

      /*
       * @social_links
       * -
       */

      scope.social_links = [{
        name: "adn",
        icon: "adn",
        tooltip: "Adn",
        url: "http://www.adn.com"
      }, {
        name: "bitbucket",
        icon: "bitbucket",
        tooltip: "BitBucket",
        url: "https://bitbucket.org"
      }, {
        name: "dropbox",
        icon: "dropbox",
        tooltip: "Dropbox",
        url: "https://www.dropbox.com"
      }, {
        name: "facebook",
        icon: "facebook",
        tooltip: "Facebook",
        url: "https://www.facebook.com"
      }, {
        name: "flickr",
        icon: "flickr",
        tooltip: "Flickr",
        url: "https://www.flickr.com"
      }, {
        name: "foursquare",
        icon: "foursquare",
        tooltip: "Four Square",
        url: "https://foursquare.com"
      }, {
        name: "github",
        icon: "github",
        tooltip: "Github",
        url: "https://github.com"
      }, {
        name: "google-plus",
        icon: "google-plus",
        tooltip: "Google Plus",
        url: "https://www.gmail.com"
      }, {
        name: "instagram",
        icon: "instagram",
        tooltip: "Instagram",
        url: "https://instagram.com"
      }, {
        name: "linkedin",
        icon: "linkedin",
        tooltip: "Linkedin",
        url: "https://www.linkedin.com"
      }, {
        name: "microsoft",
        icon: "windows",
        tooltip: "Microsoft",
        url: "http://www.microsoft.com"
      }, {
        name: "openid",
        icon: "openid",
        tooltip: "Open Id",
        url: "http://openid.com"
      }, {
        name: "pinterest",
        icon: "pinterest",
        tooltip: "Pinterest",
        url: "https://www.pinterest.com"
      }, {
        name: "reddit",
        icon: "reddit",
        tooltip: "Reddit",
        url: "http://www.reddit.com"
      }, {
        name: "comment-o",
        icon: "comment-o",
        tooltip: "Snapchat",
        url: "https://www.snapchat.com"
      }, {
        name: "soundcloud",
        icon: "soundcloud",
        tooltip: "Sound Cloud",
        url: "https://soundcloud.com"
      }, {
        name: "tumblr",
        icon: "tumblr",
        tooltip: "Tumblr",
        url: "https://www.tumblr.com"
      }, {
        name: "twitter",
        icon: "twitter",
        tooltip: "Twitter",
        url: "https://twitter.com"
      }, {
        name: "vimeo",
        icon: "vimeo-square",
        tooltip: "Vimeo",
        url: "https://vimeo.com"
      }, {
        name: "vine",
        icon: "vine",
        tooltip: "Vine",
        url: "http://www.vinemarket.com"
      }, {
        name: "vk",
        icon: "vk",
        tooltip: "Vk",
        url: "http://vk.com"
      }, {
        name: "desktop",
        icon: "desktop",
        tooltip: "Website",
        url: "http://www.website.com"
      }, {
        name: "yahoo",
        icon: "yahoo",
        tooltip: "Yahoo",
        url: "https://yahoo.com"
      }, {
        name: "youtube",
        icon: "youtube",
        tooltip: "Youtube",
        url: "https://www.youtube.com"
      }, {
        name: "yelp",
        icon: "yelp",
        tooltip: "Yelp",
        url: "http://www.yelp.com"
      }];
    }
  };
}]);

'use strict';
app.directive('jqSparkline', [
function() {'use strict';
	return {
		restrict: 'A',
		require: 'ngModel',
		link: function(scope, elem, attrs, ngModel) {
			var opts = {};
			//TODO: Use $eval to get the object
			opts.type = attrs.type || 'line';
			opts.barColor = attrs.barColor || '#000000';
			opts.height = attrs.height || '35px';
			opts.width = attrs.width || '35px';
			opts.barWidth = attrs.barWidth || '5px';
			opts.barSpacing = attrs.barSpacing || '2px';
			opts.zeroAxis = attrs.zeroAxis || 'true';
			opts.resize = attrs.resize || false;
			opts.fillColor = attrs.fillColor || '#cdf';
			opts.lineWidth = attrs.lineWidth || 1;
			opts.lineColor = attrs.lineColor || '#00f';
			opts.spotColor = attrs.spotColor || '#f80';
			opts.spotRadius = attrs.spotRadius || 1.5;
			opts.minSpotColor = attrs.minSpotColor || '#f80';
			opts.maxSpotColor = attrs.maxSpotColor || '#f80';
			opts.highlightSpotColor = attrs.highlightSpotColor || '#5f5';
			opts.highlightLineColor = attrs.highlightLineColor || '#f22';
			
			

			scope.$watch(attrs.ngModel, function() {
				render();
			});
			scope.$watch(attrs.opts, function() {
				render();
			});
			var render = function() {
				var model;
				if(attrs.opts)
					angular.extend(opts, angular.fromJson(attrs.opts));

				// Trim trailing comma if we are a string
				angular.isString(ngModel.$viewValue) ? model = ngModel.$viewValue.replace(/(^,)|(,$)/g, "") : model = ngModel.$viewValue;
				var data;
				// Make sure we have an array of numbers
				angular.isArray(model) ? data = model : data = model.split(',');
				$(elem).sparkline(data, opts);
			};

			// function to initiate Sparkline
			var sparkResize;
			$(window).resize(function(e) {
				if (opts.resize) {
					clearTimeout(sparkResize);
					sparkResize = setTimeout(render, 500);
				}
			});
		}
	};
}]);

app.directive('stringToNumber', function() {
  return {
    require: 'ngModel',
    link: function(scope, element, attrs, ngModel) {
      ngModel.$parsers.push(function(value) {
        return '' + value;
      });
      ngModel.$formatters.push(function(value) {
        return parseFloat(value, 10);
      });
    }
  };
});

'use strict';
/** 
  * A simple but useful and efficient directive to toggle a class to an element.   
*/
app.factory('ToggleHelper', ['$rootScope',
function ($rootScope) {
    return {

        events: {
            toggle: "clip-two.toggle",
            toggleByClass: "clip-two.toggleByClass",
            togglerLinked: "clip-two.linked",
            toggleableToggled: "clip-two.toggled"
        },

        commands: {
            alternate: "toggle",
            activate: "on",
            deactivate: "off"
        },

        toggle: function (target, command) {
            if (command == null) {
                command = "toggle";
            }
            $rootScope.$emit(this.events.toggle, target, command);
        },

        toggleByClass: function (targetClass, command) {
            if (command == null) {
                command = "toggle";
            }
            $rootScope.$emit(this.events.toggleByClass, targetClass, command);
        },

        notifyToggleState: function (elem, attrs, toggleState) {
            $rootScope.$emit(this.events.toggleableToggled, attrs.id, toggleState, attrs.exclusionGroup);
        },

        toggleStateChanged: function (elem, attrs, toggleState) {
            this.updateElemClasses(elem, attrs, toggleState);
            this.notifyToggleState(elem, attrs, toggleState);
        },

        applyCommand: function (command, oldState) {
            switch (command) {
                case this.commands.activate:
                    return true;
                case this.commands.deactivate:
                    return false;
                case this.commands.alternate:
                    return !oldState;
            }
        },

        updateElemClasses: function (elem, attrs, active) {

            if (active) {
                if (attrs.activeClass) {
                    elem.addClass(attrs.activeClass);
                }
                if (attrs.inactiveClass) {
                    elem.removeClass(attrs.inactiveClass);
                }
                var parent = elem.parent();
                if (attrs.parentActiveClass) {
                    parent.addClass(attrs.parentActiveClass);
                }
                if (attrs.parentInactiveClass) {
                    parent.removeClass(attrs.parentInactiveClass);
                }
            } else {
                if (attrs.inactiveClass) {
                    elem.addClass(attrs.inactiveClass);
                }
                if (attrs.activeClass) {
                    elem.removeClass(attrs.activeClass);
                }
                var parent = elem.parent();
                if (attrs.parentInactiveClass) {
                    parent.addClass(attrs.parentInactiveClass);
                }
                if (attrs.parentActiveClass) {
                    parent.removeClass(attrs.parentActiveClass);
                }
            }
        }
    };
}]).run(["$rootScope", "ToggleHelper",
function ($rootScope, ToggleHelper) {

    $rootScope.toggle = function (target, command) {
        if (command == null) {
            command = "toggle";
        }
        ToggleHelper.toggle(target, command);
    };

    $rootScope.toggleByClass = function (targetClass, command) {
        if (command == null) {
            command = "toggle";
        }
        ToggleHelper.toggleByClass(targetClass, command);
    };
}]).directive('ctToggle', ["$rootScope", "ToggleHelper",
function ($rootScope, ToggleHelper) {
    return {
        restrict: "A",
        link: function (scope, elem, attrs) {
            var command = attrs.ctToggle || ToggleHelper.commands.alternate;
            var target = attrs.target;
            var targetClass = attrs.targetClass;
            var bubble = attrs.bubble === "true" || attrs.bubble === "1" || attrs.bubble === 1 || attrs.bubble === "" || attrs.bubble === "bubble";

            if ((!target) && attrs.href) {
                target = attrs.href.slice(1);
            }

            if (!(target || targetClass)) {
                throw "'target' or 'target-class' attribute required with 'ct-toggle'";
            }
            elem.on("click tap", function (e) {

                var angularElem = angular.element(e.target);
                if (!angularElem.hasClass("disabled")) {
                    if (target != null) {
                        ToggleHelper.toggle(target, command);
                    }
                    if (targetClass != null) {
                        ToggleHelper.toggleByClass(targetClass, command);
                    }
                    if (!bubble) {
                        e.preventDefault();
                        return false;
                    } else {
                        return true;
                    }
                }

            });
            var unbindUpdateElemClasses = $rootScope.$on(ToggleHelper.events.toggleableToggled, function (e, id, newState) {
                if (id === target) {
                    ToggleHelper.updateElemClasses(elem, attrs, newState);
                }
            });

            if (target != null) {
                $rootScope.$emit(ToggleHelper.events.togglerLinked, target);
            }

            scope.$on('$destroy', unbindUpdateElemClasses);
        }
    };
}]).directive('toggleable', ["$rootScope", "ToggleHelper",
function ($rootScope, ToggleHelper) {
    return {
        restrict: "A",
        link: function (scope, elem, attrs) {
            var toggleState = false;

            if (attrs["default"]) {
                switch (attrs["default"]) {
                    case "active":
                        toggleState = true;
                        break;
                    case "inactive":
                        toggleState = false;
                }
                ToggleHelper.toggleStateChanged(elem, attrs, toggleState);
            }

            var unbindToggle = $rootScope.$on(ToggleHelper.events.toggle, function (e, target, command) {
                var oldState;
                if (target === attrs.id) {
                    oldState = toggleState;
                    toggleState = ToggleHelper.applyCommand(command, oldState);
                    if (oldState !== toggleState) {
                        ToggleHelper.toggleStateChanged(elem, attrs, toggleState);
                    }
                }
            });

            var unbindToggleByClass = $rootScope.$on(ToggleHelper.events.toggleByClass, function (e, targetClass, command) {
                var oldState;
                if (elem.hasClass(targetClass)) {
                    oldState = toggleState;
                    toggleState = ToggleHelper.applyCommand(command, oldState);
                    if (oldState !== toggleState) {
                        ToggleHelper.toggleStateChanged(elem, attrs, toggleState);
                    }
                }
            });

            var unbindToggleableToggled = $rootScope.$on(ToggleHelper.events.toggleableToggled, function (e, target, newState, sameGroup) {
                if (newState && (attrs.id !== target) && (attrs.exclusionGroup === sameGroup) && (attrs.exclusionGroup != null)) {
                    toggleState = false;
                    ToggleHelper.toggleStateChanged(elem, attrs, toggleState);
                }
            });

            var unbindTogglerLinked = $rootScope.$on(ToggleHelper.events.togglerLinked, function (e, target) {
                if (attrs.id === target) {
                    ToggleHelper.notifyToggleState(elem, attrs, toggleState);
                }
            });

            scope.$on('$destroy', function () {
                unbindToggle();
                unbindToggleByClass();
                unbindToggleableToggled();
                unbindTogglerLinked();
            });
        }
    };
}]);
'use strict';
/** 
  * A directive used for "close buttons" (eg: alert box).
  * It hides its parent node that has the class with the name of its value.
*/
app.directive('ctooltip', function ($compile) {
    return {
        restrict: 'A',
         scope:{
            msg: '@msg',
            placement: "@placement"
        },
        link: function (scope, elem, attrs) {
            if(angular.isUndefined(elem.attr('tooltip'))) {
                elem.attr('tooltip-placement', scope.placement || 'right');
                elem.attr('tooltip', scope.msg || 'This link will work on front End only');
                $compile(elem)(scope);
            }
        }
    };
});
'use strict';
app.directive('touchspin', function() {
	return {
		restrict: 'EA',
		link: function(scope, elem, attr) {
			var tsOptions = [
				'initval', 
				'min', 
				'max', 
				'step', 
				'forcestepdivisibility', 
				'decimals', 
				'stepinterval', 
				'stepintervaldelay', 
				'verticalbuttons', 
				'verticalupclass',
				'verticaldownclass',
				'prefix',
				'postfix',
				'prefix_extraclass',
				'postfix_extraclass',
				'booster',
				'boostat',
				'maxboostedstep',
				'mousewheel',
				'buttondown_class',
				'buttonup_class'				
				];
			var options = {};
			for(var i = 0, l = tsOptions.length; i < l; i++) {
				var opt = tsOptions[i];
				if(attr[opt] !== undefined) {
					if(opt === 'max' || opt === 'min' )
						options[opt] = parseInt(attr[opt], 10);
					else
						options[opt] = attr[opt];
				}
			}
			elem.TouchSpin(options);
		}
	};
}); 
'use strict';

app.directive('indigewebTransactionLabel', ['OrderService', function(OrderService) {
    return {
        restrict: 'E',
        template: '{{label}}',
        link: function(scope, element, attrs) {
            scope.label = 'order';
            scope.hasOrder = false;
            scope.hasDonation = false;

            var updateLogicFn = function(orders) {
                orders.forEach(function(order, index) {
                    order.line_items.forEach(function(item, index) {
                        if (item.type == 'DONATION') {
                            scope.hasDonation = true;
                        } else {
                            scope.hasOrder = true;
                        }
                    });
                });
                if (scope.hasOrder && scope.hasDonation) {
                    scope.label = 'transaction';
                } else if (scope.hasOrder && !scope.hasDonation) {
                    scope.label = 'order';
                } else if (!scope.hasOrder && scope.hasDonation) {
                    scope.label = 'donation';
                }

                if (attrs.plural) {
                    scope.label = scope.label + 's';
                }

                if (attrs.lower) {
                    scope.label = scope.label.toLowerCase();
                }

                if (attrs.upper) {
                    scope.label = scope.label.toUpperCase();
                }

                if (attrs.capitalize) {
                    scope.label = scope.label.charAt(0).toUpperCase() + scope.label.slice(1);
                }
            };

            OrderService.getOrders(function(orders) {
                updateLogicFn(orders);
            });
        }
    }
}]);

'use strict';

app.filter('cleanType', function () {
    return function(type) {
          return String(type)
            .replace('ssb', '')
            .replace('text-only', 'text')
            .replace('-', ' ')
            .replace(/\w\S*/g, function(txt){
                return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
            });
    }
});

'use strict';

app.filter('filterPages', function () {
  return function (pages, websiteLinks, customLinks, customNav, handle) {
    var linkList = [];    
    var _links = null;
    if(customNav){
      _links = customLinks;
    }
    else{
      _links = websiteLinks;
    }
    _links.forEach(function (value, index) {
      if (value.handle === "head-menu") {
        linkList = value.links;
      }
    });
    if (pages) {
      return pages.filter(function (page) {   
          var valid = true;
          if(page.mainmenu === false){
            valid = false;
          }
          if(valid){
            _.each(linkList, function (link) {
              if (page.handle === link.linkTo.data && (link.linkTo.type === 'page' || link.linkTo.type === 'home')) {
                if(handle && handle === link.linkTo.data){
                  valid = true;
                }
                else
                  valid = false;
              }
            });
          }
          return valid;          
      });
    }
  };
});

'use strict';

app.filter('formatText', function () {
  return function (string) {
  	if (string) {
  		var res;
  		if (string === 'blog.post.post_title') {
  			res = 'Post Title';
  		}
  		if (string === 'blog.post.post_content') {
  			res = 'Post Content';
  		}
  		if (!res) {
  			res = string.replace("_", " ").replace(".", " ").replace("component", "").replace("img", "Image ").replace("vm .text", "Text");
  		}
	    var newVal = '';
	    res = res.split(' ');
	    for (var c = 0; c < res.length; c++) {
	      newVal += res[c].substring(0, 1).toUpperCase() + res[c].substring(1, res[c].length) + ' ';
	    }
	    return newVal;
	}
  };
});

'use strict';

app.filter('generateURLforLinks', function () {
  return function (linkToObject) {
    var _url = "";
    if (linkToObject) {
      switch (linkToObject.type) {
        case "page":
          //if (linkToObject.data != 'blog') {
          _url = '/page/' + linkToObject.data;
          // } else {
          //     _url = '/'+linkToObject.data;
          // }
          return _url;
          break;
        case "home":
          _url = "/";
          break;
        case "url":
          return linkToObject.data;
          break;
        case "section":
          return '/#' + linkToObject.data;
          break;
        case "product":
          _url = ""; //Not yet implemented
          break;
        case "collection":
          _url = ""; //Not yet implemented
          break;
        case "external":
          var value = linkToObject.data;
          if (value && !/http[s]?/.test(value)) {
            value = 'http://' + value;
          }
          _url = value;
          break;
        default:
          return "#";
          break;
      }
    }

    //toDo findOut use of isEditor
    /*var isEditor = true;
    if (_url != null && isEditor === true) {
        if (_url.indexOf("?") == -1) {
            _url = _url + "?";
        }
        _url += "&editor=true";
    }*/
    return _url;
  }

});

'use strict';

app
  .filter('htmlToPlaintext', function () {
      return function (text) {
          return String(text).replace(/<[^>]+>/gm, '');
      };
  }
);
'use strict';

app.filter('offset', function () {
  return function (input, start) {
    start = parseInt(start, 10);
    if (input)
      return input.slice(start);
  }
});

'use strict';

app.filter('orderByArrayLength', function () {
    return function(input, attribute) {
	    if (!angular.isObject(input)) return input;

        var retList = _.sortBy(input, function(item) {
            if (item[attribute]) {
                if (_.isArray(item[attribute])) {
                    return item[attribute].length;
                } else {
                    return item[attribute];
                }
            } else {
                return null;
            }
        });
        return retList.reverse();
    }
});

'use strict';

app
  .filter('productTableFilter', function ($filter) {
    return function(input, predicate){
        var customPredicate = angular.copy(predicate);

        if (predicate.name) {
            input = _.filter(input, function(x) {
              return x.name.toLowerCase().startsWith(predicate.name.toLowerCase());
            });
            delete customPredicate['name'];
        }

        if (predicate.is_image) {
          customPredicate.is_image = predicate.is_image == 'true' ? true : false;
        }

        return $filter('filter')(input, customPredicate, true);
    }
});

'use strict';

app.filter('selectedTags', function () {
  return function (products, tags) {
    if (products) {
      return products.filter(function (product) {
        if (!tags || tags.length === 0) {
          if (product.status === 'active') {
            return true;
          }
        } else {
          _.each(product.tags, function (tag) {
            if (product.status === 'active' && tags.indexOf(tag) !== -1) {
              return true;
            }
          });
        }
      });
    }
  };
});

app.filter('propsFilter', function () {
    return function (items, props) {
      var out = [];

      if (angular.isArray(items)) {
        items.forEach(function (item) {
          var itemMatches = false;

          var keys = Object.keys(props);
          var i = 0;
          for (i; i < keys.length; i++) {
            if (item[keys[i]] && item[keys[i]].toString().toLowerCase().indexOf(props[keys[i]].toLowerCase()) !== -1) {
              itemMatches = true;
              break;
            }
          }

          if (itemMatches) {
            out.push(item);
          }
        });
      } else {
        // Let the output be the input untouched
        out = items;
      }

      return out;
    };
  });
'use strict';

app.filter('secTotime', ['$filter', function($filter) {
    return function(duration) {
        var minutes = parseInt(Math.floor(duration / 60));
        var seconds = parseInt(duration - minutes * 60);

        minutes = (minutes < 10) ? "0" + minutes : minutes;
        seconds = (seconds < 10) ? "0" + seconds : seconds;

        return minutes + ":" + seconds;
    };
}]);

'use strict';

app.filter('sortListPages', function () {
  return function (pages, id, account) {

        if (pages) {
            var pageArr = _(pages).chain()
                        .where({_id: id})
                        .pluck("_id")
                        .value()

            var _sortOrder = _.invert(_.object(_.pairs(pageArr)));

            var _filteredPages = pages;

            if (account && !account.showhide.blog) {
                _filteredPages = _(pages).chain()
                        .filter(function(page) {
                            return page.handle !== 'blog-list' && page.handle !== 'blog-post';
                        })
                        .value();
            }

            var _list =  _.sortBy(_filteredPages, function(x) {
                return _sortOrder[x._id]
            });

            return _list;
        }
  };
});

'use strict';

app
  .filter('timeAgoFilter', function () {
    return function(date) {
      return moment(date).fromNow();
  	}
});
'use strict';

app
  .filter('titleCase', function () {
    return function (input) {
      if (input && input.length > 0) {
        var words = input.split(' ');
        for (var i = 0; i < words.length; i++) {
          words[i] = words[i].charAt(0).toUpperCase() + words[i].slice(1);
        }
        return words.join(' ');
      }
    };
  });

'use strict';

app.filter('unsafe', ['$sce', function ($sce) {
  return function (text) {
    return $sce.trustAsHtml(text);
  };
}]);

(function () {

  app.directive('emailComponentLoader', emailComponentLoader);

  emailComponentLoader.$inject = ['$compile', '$timeout'];
  /* @ngInject */
  function emailComponentLoader($compile, $timeout) {
    return {
      restrict: 'A',
      controller: 'EmailBuilderComponentLoaderController',
      controllerAs: 'vm',
      bindToController: true,
      scope: {
        component: "=",
        website: "=",
        account: '=',
        componentClass: '&',
        componentStyle: '&',
        componentIndex: '=',
        componentCount: '=',
        state: '=',
        uiState: '='
      },
      replace: false,
      templateUrl: '/admin/assets/js/indi-email-builder/email-component-loader/email-component-loader.component.html',
      link: function (scope, element, attrs, ctrl) {


      }
    }

  }

})();

(function () {

  app.controller('EmailBuilderComponentLoaderController', emailbComponentLoaderController);

  emailbComponentLoaderController.$inject = ['$rootScope', '$scope', '$attrs', '$filter', '$timeout'];
  /* @ngInject */
  function emailbComponentLoaderController($rootScope, $scope, $attrs, $filter, $timeout) {

    console.info('component-loader directive init...');

    var vm = this;
    var pVm = $scope.$parent.vm;

    vm.ssbEditor = true;
    vm.components = pVm.state.email.components;

    $scope.component = vm.component;
    $scope.isEditing = true;
    $scope.website = vm.website;
    $scope.primaryColor = $scope.website.settings.primary_color;
    $scope.secondaryColor = $scope.website.settings.secondary_color;
    $scope.primaryHighlight = $scope.website.settings.primary_highlight;
    $scope.primaryTextColor = $scope.website.settings.primary_text_color;
    $scope.primaryFontFamily = $scope.website.settings.font_family;
    $scope.secondaryFontFamily = $scope.website.settings.font_family_2;
    $scope.googleFontFamily = $scope.website.settings.google_font_family;

    $scope.primaryFontStack = $scope.website.settings.font_family;
    $scope.secondaryFontStack = $scope.website.settings.font_family_2;

    vm.init = init;
    vm.componentStyleFn = componentStyleFn;


    function componentStyleFn(component) {

        var styleString = ' ';

        if (component.bg) {

            if (component.bg.color) {
                styleString += 'background-color: ' + component.bg.color + ';';
            }

            if (component.bg.img && component.bg.img.show && component.bg.img.url !== '') {
                styleString += 'background-image: url("' + component.bg.img.url + '");';
            }

        }

        return styleString;

    }


    function init(element) {
      vm.element = element;
    }

  }

})();

(function () {

  app.directive('emailEditControl', emailEditControl);

  function emailEditControl() {

    return {
      restrict: 'E',
      scope: {
        component: '=',
        componentIndex: '=',
        components: '=',
        state: '=',
        uiState: '='
      },
      templateUrl: '/admin/assets/js/indi-email-builder/email-edit-control/email-edit-control.component.html',
      controller: 'EmailBuilderEditControlController',
      controllerAs: 'vm',
      bindToController: true,
      link: function (scope, element, attrs, ctrl) {
        ctrl.init(element);
      }
    };

  }

})();

(function () {

  app.controller('EmailBuilderEditControlController', indiEmailBuilderEditControlController);

  indiEmailBuilderEditControlController.$inject = ['$scope'];
  /* @ngInject */
  function indiEmailBuilderEditControlController($scope) {

    var vm = this;

    vm.init = init;
    vm.moveComponentFn = moveComponentFn;
    vm.duplicateComponentFn = duplicateComponentFn;
    vm.removeComponentFn = removeComponentFn;
    vm.openMenuPanelFn = openMenuPanelFn;

    function moveComponentFn(direction, index) {
      $scope.$emit('email.move.component', {direction: direction, component: vm.component});
    }

    function duplicateComponentFn() {
      $scope.$emit('email.duplicate.component', {component: vm.component});
    }

    function removeComponentFn() {
      $scope.$emit('email.remove.component', {component: vm.component});
    }

    function openMenuPanelFn(index) {

        vm.uiState.navigation.sectionPanel.reset();
        vm.uiState.showSectionPanel = false;
        vm.uiState.activeComponentIndex = null;

        vm.uiState.showSectionPanel = true;
        vm.uiState.activeComponentIndex = index;

    }


    function init(element) {
      vm.element = element;
    }

  }

})();

(function () {

    app.directive('indiEmailBuilder', indiEmailBuilder);

    function indiEmailBuilder() {

        return {
            restrict: 'E',
            scope: {},
            templateUrl: 'assets/js/indi-email-builder/indi-email-builder.component.html',
            controller: 'EmailBuilderController',
            controllerAs: 'vm',
            bindToController: true,
            link: function (scope, element, attrs, ctrl) {
                ctrl.init(element);
            }
        };

    }

})();
(function() {

    app.controller('EmailBuilderController', indiEmailBuilderController);

    indiEmailBuilderController.$inject = ['$scope', '$rootScope', 'EmailBuilderService', 'EmailCampaignService', '$stateParams', '$state', 'toaster', 'AccountService', 'WebsiteService', '$modal', '$timeout', '$document', '$window', '$location'];
    /* @ngInject */
    function indiEmailBuilderController($scope, $rootScope, EmailBuilderService, EmailCampaignService, $stateParams, $state, toaster, AccountService, WebsiteService, $modal, $timeout, $document, $window, $location) {

        console.info('email-builder directive init...');

        $scope.$state = $state;
        var vm = this;

        vm.init = init;

        vm.state = vm.state || {};
        vm.uiState = vm.uiState || {};

        vm.state.email = null;
        vm.state.emailId = $stateParams.id;
        vm.uiState.dataLoaded = false;
        vm.state.account = null;
        vm.state.website = {
            settings: {}
        };
        vm.uiState.modalInstance = null;
        vm.uiState.editor = null;
        vm.uiState.componentTypes = [{
            title: 'Header',
            type: 'email-header',
            preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/blog.png',
            filter: 'email',
            description: 'Use this component for email header section.',
            enabled: true
        }, {
            title: 'Content 1 Column',
            type: 'email-1-col',
            preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/blog.png',
            filter: 'layout',
            description: 'Use this component for single column content.',
            enabled: true
        }, {
            title: 'Content 2 Column',
            type: 'email-2-col',
            preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/blog.png',
            filter: 'layout',
            description: 'Use this component for 2 column content.',
            enabled: true
        }, {
            title: 'Content 3 Column',
            type: 'email-3-col',
            preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/blog.png',
            filter: 'layout',
            description: 'Use this component for 3 column content.',
            enabled: true
        }, {
            title: 'Social Links',
            type: 'email-social',
            preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/blog.png',
            filter: 'social',
            description: 'Use this component for social links.',
            enabled: true
        }, {
            title: 'Horizontal Rule',
            type: 'email-hr',
            preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/blog.png',
            filter: 'layout',
            description: 'Use this component to insert a horizontal rule between components.',
            enabled: true
        }, {
            title: 'Footer',
            type: 'email-footer',
            preview: 'https://s3-us-west-2.amazonaws.com/indigenous-admin/blog-teaser.png',
            filter: 'email',
            description: 'A footer for your email.',
            enabled: true
        }];

        vm.openSimpleModalFn = openSimpleModalFn;
        vm.openModalFn = openModalFn;
        vm.closeModalFn = closeModalFn;
        vm.addComponentFn = addComponentFn;
        vm.cloneComponentFn = cloneComponentFn;
        vm.saveFn = saveFn;
        vm.insertMediaFn = insertMediaFn;
        vm.moveComponentFn = moveComponentFn;
        vm.clickImageButton = clickImageButton;
        vm.deleteFn = deleteFn;
        vm.filterComponentsFn = filterComponentsFn;
        vm.sendOneTimeEmailFn = sendOneTimeEmailFn;
        vm.changeBackgroundFn = changeBackgroundFn;
        vm.closeSectionPanel = closeSectionPanel;
        vm.createCampaignFn = createCampaignFn;
        vm.checkIfDirtyFn = checkIfDirtyFn;
        vm.resetDirtyFn = resetDirtyFn;

        vm.uiState.navigation = {
            back: function() {
                vm.uiState.navigation.index = 0;
            },
            index: 0,
            sectionPanel: {
                navigationHistory: [],
                loadPanel: function(obj, back) {

                    if (!back) {
                        vm.uiState.navigation.sectionPanel.navigationHistory.push(obj);
                    }

                    vm.uiState.openSidebarSectionPanel = obj;
                    console.log(vm.uiState.navigation.sectionPanel.navigationHistory);

                },
                back: function() {
                    var hist = vm.uiState.navigation.sectionPanel.navigationHistory;
                    var previousPanel;

                    hist.pop();

                    previousPanel = hist[hist.length - 1];

                    vm.uiState.navigation.sectionPanel.loadPanel(previousPanel, true);

                    if (previousPanel && !previousPanel.id) {
                        hideAllControls();
                        angular.element(".ssb-active-section").addClass("ssb-active-edit-control");
                    }

                },
                reset: function() {
                    vm.uiState.openSidebarSectionPanel = {
                        name: '',
                        id: ''
                    };
                    vm.uiState.navigation.sectionPanel.navigationHistory = [];
                }
            }
        };

        $rootScope.$on('$stateChangeStart', function(event, toState, toParams, fromState, fromParams, options) {
            $rootScope.$broadcast('$destroyFroalaInstances');
            $rootScope.app.layout.isMinimalAdminChrome = false;
            $rootScope.app.layout.isMinimalAdminChromeLight = false;
            $rootScope.app.layout.isSidebarClosed = vm.uiState.isSidebarClosed;
        });

        $scope.$on('email.move.component', function(event, args) {
            vm.moveComponentFn(args.component, args.direction);
        });

        $scope.$on('email.duplicate.component', function(event, args) {
            vm.cloneComponentFn(args.component);
        });

        $scope.$on('email.remove.component', function(event, args) {
            vm.uiState.dataLoaded = false;

            vm.state.email.components.forEach(function(c, index) {
                if (c._id === args.component._id) {
                    vm.state.email.components.splice(index, 1);
                }
            });
            $timeout(function() {
                var element = vm.state.email.components.length ? document.getElementById(vm.state.email.components[vm.state.email.components.length - 1]._id) : null;
                if (element) {
                    $document.scrollToElementAnimated(element, 175, 1000);
                    $(window).trigger('resize');
                }
                vm.uiState.dataLoaded = true;
                toaster.pop('warning', 'component deleted');
            }, 500);
        });

        function openSimpleModalFn(modal, _size) {

            var _modal = {
                templateUrl: modal,
                keyboard: false,
                // backdrop: 'static',
                scope: $scope,
                size: _size || 'md',
            };

            vm.uiState.modalInstance = $modal.open(_modal);

            vm.uiState.modalInstance.result.then(null, function() {
                angular.element('.sp-container').addClass('sp-hidden');
            });

        }


        function openModalFn(modal, controller, index, size) {
            console.log('openModal >>> ', modal, controller, index, size);
            var _modal = {
                templateUrl: modal,
                keyboard: false,
                backdrop: 'static',
                size: 'md',
                scope: $scope,
                resolve: {
                    components: function() {
                        return vm.state.email && vm.state.email.components ? vm.state.email.components : [];
                    }
                }
            };

            if (controller) {
                _modal.controller = controller;

                _modal.resolve.contactMap = function() {
                    return {};
                };
                _modal.resolve.website = function() {
                    return vm.state.website;
                };

                _modal.resolve.showInsert = function() {
                    return true;
                };

                _modal.resolve.insertMedia = function() {
                    return vm.insertMediaFn;
                };

                _modal.resolve.openParentModal = function() {
                    return vm.openModalFn;
                };

                _modal.resolve.accountShowHide = function() {
                    return vm.state.account.showhide;
                };
                _modal.resolve.isEmail = function() {
                    return true;
                };

                _modal.resolve.isSingleSelect = function() {
                    return true;
                };
            }

            if (angular.isDefined(index) && index !== null && index >= 0) {
                $scope.setEditingComponent(index);
                _modal.resolve.clickedIndex = function() {
                    return index;
                };

                _modal.resolve.pageHandle = function() {
                    return $scope.page ? $scope.page.handle : null;
                };
            }

            if (size) {
                _modal.size = size;
            }
            vm.uiState.modalInstance = $modal.open(_modal);
            vm.uiState.modalInstance.result.then(null, function() {
                angular.element('.sp-container').addClass('sp-hidden');
            });
        }


        function closeModalFn() {
            if (vm.uiState.modalInstance) {
                vm.uiState.modalInstance.close();
            }
        }

        function addComponentFn(addedType) {
            if (vm.uiState.dataLoaded) {
                vm.uiState.dataLoaded = false;
                var componentType = null;
                if (['email-footer', 'email-header'].indexOf(addedType.type) > -1) {
                    componentType = _.findWhere(vm.state.email.components, {
                        type: addedType.type
                    });
                    if (componentType) {
                        toaster.pop('error', componentType.type + " component already exists");
                        vm.uiState.dataLoaded = true;
                        return;
                    }
                }

                WebsiteService.getComponent(addedType, addedType.version || 1, function(newComponent) {
                    if (newComponent) {
                        vm.closeModalFn();
                        vm.state.email.components.push(newComponent);
                        $timeout(function() {
                            var element = document.getElementById(newComponent._id);
                            if (element) {
                                $document.scrollToElementAnimated(element, 175, 1000);
                                $(window).trigger('resize');
                            }
                            vm.uiState.dataLoaded = true;
                            toaster.pop('success', "Component Added", "The " + newComponent.type + " component was added successfully.");
                        }, 500);
                    }
                });
            }
        }

        function cloneComponentFn(component) {
            var clone = angular.copy(component);
            delete clone['_id'];
            delete clone['anchor'];
            var addedType = {
                type: clone.type,
                version: clone.version
            };

            if (vm.uiState.dataLoaded) {
                vm.uiState.dataLoaded = false;
                var componentType = null;
                if (['email', 'email-footer', 'email-header'].indexOf(addedType.type) > -1) {
                    componentType = _.findWhere(vm.state.email.components, {
                        type: addedType.type
                    });
                    if (componentType) {
                        toaster.pop('error', componentType.type + " component can't be cloned");
                        vm.uiState.dataLoaded = true;
                        return;
                    }
                }

                WebsiteService.getComponent(addedType, addedType.version || 1, function(newComponent) {
                    if (newComponent) {
                        _.extend(newComponent, clone);
                        vm.state.email.components.push(newComponent);
                        $timeout(function() {
                            var element = document.getElementById(newComponent._id);
                            if (element) {
                                $document.scrollToElementAnimated(element, 175, 1000);
                                $(window).trigger('resize');
                            }
                            vm.uiState.dataLoaded = true;
                            toaster.pop('success', "Component cloned", "The " + newComponent.type + " component was cloned successfully.");
                        }, 500);
                    }
                });
            }
        }



        function saveFn() {
            vm.uiState.dataLoaded = false;
            EmailBuilderService.updateEmail(vm.state.email).then(function(res) {
                vm.uiState.dataLoaded = true;
                vm.state.originalEmail = angular.copy(vm.state.email);
                toaster.pop('success', 'Email saved');
            });
        }

        $window.clickandInsertImageButton = function(editor) {
            console.log('clickandInsertImageButton >>> ');
            vm.clickImageButton(editor, false);
        };

        function clickImageButton(editor, edit) {
            $scope.insertMediaImage = true;
            $scope.showInsert = true;
            $scope.inlineInput = editor;
            $scope.isEditMode = edit;
            vm.openModalFn('media-modal', 'MediaModalCtrl', null, 'lg');
        }

        function insertMediaFn(asset) {
            if (vm.uiState.editor) {
                vm.uiState.editor.image.insert(asset.url, !1, null, vm.uiState.editor.img);
            } else {
                toaster.pop('error', 'Position cursor at the point of insertion');
            }
        }

        function moveComponentFn(component, direction) {
            var toIndex;
            var fromIndex = _.findIndex(vm.state.email.components, function(x) {
                return x._id === component._id;
            });

            if (direction === 'up') {
                toIndex = fromIndex - 1;
            }

            if (direction === 'down') {
                toIndex = fromIndex + 1;
            }

            vm.state.email.components.splice(toIndex, 0, vm.state.email.components.splice(fromIndex, 1)[0]);
        }

        function deleteFn() {
            vm.uiState.dataLoaded = false;
            WebsiteService.deleteEmail(vm.state.email, function() {
                vm.uiState.dataLoaded = true;
                $state.go('app.emails');
                toaster.pop('Warning', 'Email deleted.');
            });
        }

        function filterComponentsFn() {
            var componentLabel = '';
            vm.enabledComponentTypes = _.where(vm.uiState.componentTypes, {
                enabled: true
            });

            vm.componentFilters = _.without(_.uniq(_.pluck(_.sortBy(vm.enabledComponentTypes, 'filter'), 'filter')), 'misc');

            // Iterates through the array of filters and replaces each one with an object containing an
            // upper and lowercase version
            _.each(vm.componentFilters, function(element, index) {
                componentLabel = element.charAt(0).toUpperCase() + element.substring(1).toLowerCase();
                vm.componentFilters[index] = {
                    'capitalized': componentLabel,
                    'lowercase': element
                };
                componentLabel = null;
            });

            // Manually add the All option to the begining of the list
            vm.componentFilters.unshift({
                'capitalized': 'All',
                'lowercase': 'all'
            });
        }

        function sendOneTimeEmailFn(address) {
            vm.uiState.dataLoaded = false;
            EmailBuilderService.sendOneTimeEmail(address, vm.state.email).then(function() {
                vm.uiState.dataLoaded = true;
                vm.closeModalFn();
                toaster.pop('success', 'Test email sent successfully');
            }).catch(function(e) {
                console.error('Error sending one-time email:', JSON.stringify(e));
                vm.uiState.dataLoaded = true;
                vm.closeModalFn();
                toaster.pop('error', 'Test email sending failed');
            });
        }

        function pageLinkClick(e) {
            if (!angular.element(this).hasClass("clickable-link")) {
                e.preventDefault();
                // e.stopPropagation();
            }
        }

        function emailSettingsClick(e) {
            vm.uiState.navigation.sectionPanel.reset();
            vm.uiState.showSectionPanel = false;
        }

        function changeBackgroundFn() {
            vm.uiState.navigation.sectionPanel.loadPanel({
                name: 'Email Background',
                id: 'background'
            })
            vm.uiState.showSectionPanel = true;
            vm.uiState.activeComponentIndex = null;
        }

        function closeSectionPanel() {
            vm.uiState.navigation.sectionPanel.reset();
            vm.uiState.showSectionPanel = false;
            vm.uiState.activeComponentIndex = null;
        }

        function createCampaignFn() {
            var campaign = {
                "name": vm.state.email.title + ' Campaign Draft ' + moment().toDate().getTime(),
                "type": "onetime",
                "status": "DRAFT",
                "visibility": 1,
                "startDate": "",
                "steps": [{
                    "type": "email",
                    "trigger": null,
                    "index": 1,
                    "settings": {
                        "emailId": vm.state.email._id,
                        "offset": "",
                        "fromEmail": vm.state.email.fromEmail,
                        "fromName": vm.state.email.fromName,
                        "replyTo": vm.state.email.replyTo,
                        "bcc": vm.state.email.bcc,
                        "subject": vm.state.email.subject,
                        "vars": [],
                        "sendAt": {}
                    }
                }],
                "searchTags": {
                    "operation": "set",
                    "tags": []
                },
                "contactTags": [],
            }

            EmailCampaignService.createCampaign(campaign).then(function(res) {
                console.log('EmailCampaignService.createCampaign created', res.data.name);
                $location.path('/marketing/campaigns/' + res.data._id);
            }).catch(function(err) {
                console.error('EmailCampaignService.createCampaign error', JSON.stringify(err));
            });

        }

        function checkIfDirtyFn() {
            if (angular.equals(vm.state.email, vm.state.originalEmail)) {
                return false;
            } else {
                return true;
            }
        }

        function resetDirtyFn() {
            vm.state.email = angular.copy(vm.state.originalEmail);
        }

        function init(element) {

            vm.element = element;

            vm.uiState.isSidebarClosed = $rootScope.app.layout.isSidebarClosed;
            $rootScope.app.layout.isSidebarClosed = true;
            $rootScope.app.layout.isMinimalAdminChrome = true;
            $rootScope.app.layout.isMinimalAdminChromeLight = true;

            angular.element("body").on("click", "[email-component-loader] a", pageLinkClick);

            angular.element("body").on("click", 'a[href="#email-settings"]', emailSettingsClick);

            vm.filterComponentsFn();

            AccountService.getAccount(function(data) {
                vm.state.account = data;
            });

            WebsiteService.getWebsite(function(data) {
                vm.state.website = data;
            });

            EmailBuilderService
                .getEmail(vm.state.emailId)
                .then(function(res) {
                    if (!res.data._id) {
                        toaster.pop('error', 'Email not found');
                        $state.go('app.emails');
                    }
                    vm.state.email = res.data;
                    vm.state.originalEmail = angular.copy(res.data);
                    $timeout(function() {
                        $('.editable').on('froalaEditor.focus', function(e, editor) {
                            vm.uiState.editor = editor;
                            console.info('Event froalaEditor.focus triggered');
                        });

                        vm.uiState.dataLoaded = true;

                    }, 1000);
                }, function(err) {
                    console.error(err);
                    $state.go('app.emails');
                });

        }


    }

})();

'use strict';
/*global app, window, $$*/
/*jslint unparam:true*/
(function () {

  app.factory('EmailBuilderService', EmailBuilderService);

  EmailBuilderService.$inject = ['$http', 'AccountService'];
  /* @ngInject */
  function EmailBuilderService($http, AccountService) {
    var emailService = {};
    var baseCmsAPIUrlv1 = '/api/1.0/cms';
    var baseWebsiteAPIUrlv1 = '/api/1.0/cms/website';

    emailService.loading = {value: 0};
    emailService.getEmails = getEmails;
    emailService.getEmail = getEmail;
    emailService.updateEmail = updateEmail;
    emailService.sendOneTimeEmail = sendOneTimeEmail;

    /**
     * Get list of all emails for the account
     */
    function getEmails() {

      function success(data) {
        emailService.emails = data;
      }

      function error(error) {
        console.error('EmailBuilderService getEmails error: ', JSON.stringify(error));
      }

      return emailRequest($http.get([baseWebsiteAPIUrlv1, emailService.websiteId, 'emails'].join('/')).success(success).error(error));
    }

    /**
     * Get get email by ID
     * @param {string} id - email _id
     */
    function getEmail(id) {

      function success(data) {
      }

      function error(error) {
        console.error('EmailBuilderService getEmail error: ', JSON.stringify(error));
      }

      return emailRequest($http.get([baseCmsAPIUrlv1, 'email', id].join('/')).success(success).error(error));
    }

    /**
     * Update Email by ID
     * @param {object} - email object
     */
    function updateEmail(email) {
      function success(data) {
      }

      function error(error) {
        console.error('EmailBuilderService updateEmail error: ', JSON.stringify(error));
      }

      var promise = $http({
        url: [baseCmsAPIUrlv1, 'email', email._id].join('/'),
        method: "PUT",
        data: angular.toJson(email)
      });
      return emailRequest(promise).success(success).error(error);
    }

    /**
     * A wrapper around API requests
     * @param {function} fn - callback
     *
     * @returns {function} fn - callback
     *
     */
    function emailRequest(fn) {
      emailService.loading.value = emailService.loading.value + 1;
      console.info('service | loading +1 : ' + emailService.loading.value);
      fn.finally(function () {
        emailService.loading.value = emailService.loading.value - 1;
        console.info('service | loading -1 : ' + emailService.loading.value);
      })
      return fn;
    }

    function sendOneTimeEmail(address, email) {

        var payload = angular.toJson({
            address: address,
            content: email
        });

        function success(data) {

        }

        function error(error) {
            console.error('EmailBuilderService sendOneTimeEmail error: ', JSON.stringify(error));
        }

        return emailRequest(
            $http({
                url: [baseCmsAPIUrlv1, 'testemail'].join('/'),
                method: "POST",
                data: payload
            })
            .success(success)
            .error(error)
        )

    }

    (function init() {

      AccountService.getAccount(function (data) {
        emailService.account = data;
        emailService.websiteId = data.website.websiteId;
      });

    })();


    return emailService;
  }

})();

(function () {

    app.directive('indiEmailCampaign', indiEmailCampaign);

    function indiEmailCampaign() {

        return {
            restrict: 'E',
            scope: {},
            templateUrl: 'assets/js/indi-email-campaign/indi-email-campaign.component.html',
            controller: 'EmailCampaignController',
            controllerAs: 'vm',
            bindToController: true,
            link: function (scope, element, attrs, ctrl) {
                ctrl.init(element);
            }
        };

    }

})();
(function () {

    app.controller('EmailCampaignController', indiEmailCampaignController);

    indiEmailCampaignController.$inject = ['$scope', 'EmailBuilderService', '$stateParams', '$state', 'toaster', 'AccountService', 'WebsiteService', '$modal', '$timeout', '$document', '$window', 'EmailCampaignService', 'ContactService', 'userConstant'];
    /* @ngInject */
    function indiEmailCampaignController($scope, EmailBuilderService, $stateParams, $state, toaster, AccountService, WebsiteService, $modal, $timeout, $document, $window, EmailCampaignService, ContactService, userConstant) {

        console.info('email-campaign directive init...');

        $scope.$state = $state;
        var vm = this;
        var contactTags = userConstant.contact_types.dp;

        vm.init = init;
        vm.state = vm.state || {};
        vm.uiState = vm.uiState || {};

        vm.state.campaignId = $stateParams.id;
        vm.state.campaign = {
            status: 'DRAFT',
            type: 'onetime'
        };
        vm.state.campaignOriginal = angular.copy(vm.state.campaign);
        vm.state.email = null;
        vm.uiState.dataLoaded = false;
        vm.uiState.disableEditing = true;
        vm.state.account = null;
        vm.state.website = {
            settings: {}
        };
        vm.state.contacts = [];
        vm.state.allContacts = [];
        vm.state.tagSelection = [];
        vm.state.recipients = [];
        vm.state.recipientsToRemove = [];
        vm.state.originalRecipients = [];
        vm.uiState.selectedContacts = {
            individuals: []
        };
        vm.uiState.whenToSend = 'now';
        vm.uiState.watchDeliveryDate = false;
        vm.uiState.delivery = {
            date: moment(),
            minDate: new Date()
        };
        vm.uiState.hstep = 1;
        vm.uiState.mstep = 1;
        vm.uiState.tableView = 'list';
        vm.uiState.triggers = [{
            name: 'Sign Up',
            icon: 'fa-paper-plane',
            value: 'SIGNUP'
        }];

        vm.saveAsDraftFn = saveAsDraftFn;
        vm.sendTestFn = sendTestFn;
        vm.activateCampaignFn = activateCampaignFn;
        vm.getContactsFn = getContactsFn;
        vm.checkBestEmailFn = checkBestEmailFn;
        vm.toggleSelectionFn = toggleSelectionFn;
        vm.getRecipientsFn = getRecipientsFn;
        vm.getSelectedTagsFn = getSelectedTagsFn;
        vm.eliminateDuplicateFn = eliminateDuplicateFn;
        vm.contactSelectedFn = contactSelectedFn;
        vm.contactRemovedFn = contactRemovedFn;
        vm.checkContactExistsFn = checkContactExistsFn;
        vm.updateSendNowFn = updateSendNowFn;
        vm.openModalFn = openModalFn;
        vm.closeModalFn = closeModalFn;
        vm.getCampaignContactsFn = getCampaignContactsFn;
        vm.loadSavedTagsFn = loadSavedTagsFn;
        vm.checkAndCreateContactFn = checkAndCreateContactFn;
        vm.addContactsFn = addContactsFn;
        vm.removeContactsFromCampaignFn = removeContactsFromCampaignFn;
        vm.resetDirtyFn = resetDirtyFn;
        vm.checkIfDirtyFn = checkIfDirtyFn;
        vm.duplicateFn = duplicateFn;


        function addContactsFn(createdContactsArr) {
            //get an array of contact Ids from recipients
            var recipientsIdArr = [];

            _.each(vm.state.recipients, function (recipient) {
                if (recipient._id) {
                    recipientsIdArr.push(recipient._id);
                }
            });

            //add created contacts to recipients array
            if (createdContactsArr.length > 0) {
                _.each(createdContactsArr, function (createdContactId) {
                    if (recipientsIdArr.indexOf(createdContactId) < 0) {
                        recipientsIdArr.push(createdContactId);
                    }
                });
            }

            var contactsArr = recipientsIdArr;

            vm.state.campaign.contacts = contactsArr;
        }

        function removeContactsFromCampaignFn() {
            angular.forEach(vm.state.recipientsToRemove, function (contactId) {
                EmailCampaignService.cancelCampaignForContact(vm.state.campaign, contactId)
                    .then(function (res) {
                        console.warn('removed ' + contactId);
                    });
            });

            _.each(vm.removeContactsFromCampaign, function (id) {
                console.warn('remove ' + id);
                console.warn(_.indexOf(vm.state.campaign.contacts, id));
            });
        }

        function checkAndCreateContactFn(fn) {
            var contactsArr = [];
            var promises = [];
            if (vm.uiState.selectedContacts.newEmails) {
                var _emails = vm.uiState.selectedContacts.newEmails;
                _.each(_emails, function (email) {
                    var contact = _.findWhere(vm.state.contacts, {
                        email: email.text
                    });
                    if (!contact) {
                        var tempContact = vm.createContactData(email.text);
                        promises.push(ContactService.createContact(tempContact));
                    } else {
                        contactsArr.push(contact._id);
                    }
                });
            }

            if (promises.length) {
                $q.all(promises)
                    .then(function (data) {
                        _.each(data, function (value) {
                            contactsArr.push(value.data._id);
                        });
                        fn(contactsArr);
                    })
                    .catch(function (err) {
                        console.error(err);
                    });
            } else {
                fn(contactsArr);
            }
        }

        function saveAsDraftFn() {
            vm.uiState.dataLoaded = false;
            var fn = EmailCampaignService.updateCampaign;

            if (vm.state.campaignId === 'create') {
                fn = EmailCampaignService.createCampaign;
            }

            //resetting status
            vm.state.campaign.status = 'DRAFT';

            //populating structured delivery timestamp
            var sendAt = {};
            sendAt.year = moment.utc(vm.uiState.delivery.date).get('year');
            sendAt.month = moment.utc(vm.uiState.delivery.date).get('month') + 1;
            sendAt.day = moment.utc(vm.uiState.delivery.date).get('date');
            sendAt.hour = moment.utc(vm.uiState.delivery.date).get('hour');
            sendAt.minute = moment.utc(vm.uiState.delivery.date).get('minute');
            vm.state.campaign.steps[0].settings.sendAt = sendAt;

            vm.state.campaign.contactTags = vm.getSelectedTagsFn();
            vm.removeContactsFromCampaignFn();

            //processing custom emails for contact
            vm.checkAndCreateContactFn(function (createdContactsArr) {
                vm.addContactsFn(createdContactsArr);
                fn(vm.state.campaign)
                    .then(function (res) {
                        vm.state.campaign = res.data;
                        vm.state.campaignOriginal = angular.copy(res.data);
                        vm.state.originalRecipients = angular.copy(vm.state.recipients);
                        vm.uiState.dataLoaded = true;
                        vm.uiState.disableEditing = false;
                        toaster.pop('success', 'Campaign saved');
                    }, function (err) {
                        vm.uiState.dataLoaded = true;
                        toaster.pop('error', 'Campaign save failed');
                    });
            });
        }

        function sendTestFn(address) {
            vm.uiState.dataLoaded = false;
            EmailCampaignService.sendTestEmail(address, vm.state.email)
                .then(function (res) {
                    vm.uiState.dataLoaded = true;
                    vm.closeModalFn();
                    toaster.pop('success', 'Send test email');
                }, function (err) {
                    vm.uiState.dataLoaded = true;
                    vm.closeModalFn();
                    toaster.pop('error', 'Send test mail failed');
                });
        }

        function activateCampaignFn() {
            vm.uiState.dataLoaded = false;
            var fn = EmailCampaignService.updateCampaign;

            if (vm.state.campaignId === 'create') {
                fn = EmailCampaignService.createCampaign;
            }
            vm.state.campaign.status = 'PENDING';
            fn(vm.state.campaign)
                .then(function (res) {
                    vm.state.campaign = res.data;
                    vm.state.campaignOriginal = angular.copy(res.data);
                    vm.state.originalRecipients = angular.copy(vm.state.recipients);
                    vm.uiState.dataLoaded = true;
                    vm.uiState.disableEditing = true;
                    toaster.pop('success', 'Campaign activated');
                }, function (err) {
                    vm.uiState.dataLoaded = true;
                    toaster.pop('error', 'Campaign activation failed');
                });
        }

        function checkBestEmailFn(contact) {
            var returnVal = ContactService.checkContactBestEmail(contact);
            return returnVal;
        }

        function getContactsFn() {
            var promise = ContactService.getContacts(function (contacts) {
                var contactWithoutEmails = [];
                _.each(contacts, function (contact) {
                    if (!vm.checkBestEmailFn(contact)) {
                        contactWithoutEmails.push(contact);
                    }
                });
                contacts = _.difference(contacts, contactWithoutEmails);
                vm.state.contacts = contacts;
                ContactService.getAllContactTags(contacts, function (tags) {
                    contactTags = tags;
                });
                var _tags = [];
                vm.state.allContacts = [];
                _.each(contacts, function (contact) {
                    vm.state.allContacts.push({
                        _id: contact._id,
                        first: contact.first
                    });
                    //contact.fullName = contact.first + " " + contact.last || '';
                    if (contact.tags && contact.tags.length > 0) {
                        _.each(contact.tags, function (tag) {
                            var tagLabel = _.findWhere(contactTags, {
                                data: tag
                            });
                            if (tagLabel)
                                _tags.push(tagLabel.label);
                            else
                                _tags.push(tag);
                        });
                    } else {
                        _tags.push('nt');
                    }
                });
                var d = _.groupBy(_tags, function (tag) {
                    return tag;
                });

                var x = _.map(d, function (tag) {
                    var returnObj = {
                        uniqueTag: tag[0],
                        numberOfTags: tag.length
                    };
                    var matchingTagObj = _.find(contactTags, function (matchTag) {
                        return matchTag.label === tag[0];
                    });
                    if (matchingTagObj) {
                        returnObj.matchingTag = matchingTagObj.label;
                    } else {
                        returnObj.matchingTag = 'No Tag';
                    }
                    return returnObj;
                });
                vm.contactCounts = x;
            });

            return promise;
        }

        function getSelectedTagsFn() {
            var tags = [];
            _.each(vm.state.tagSelection, function (fullTag) {
                var matchingTag = _.find(contactTags, function (matchTag) {
                    return matchTag.label === fullTag;
                });
                if (matchingTag) {
                    tags.push(matchingTag.label);
                } else {
                    tags.push(fullTag);
                }
            });
            return tags;
        }

        function eliminateDuplicateFn(contact) {
            return vm.uiState.selectedContacts.individuals.indexOf(contact._id) > -1;
        };

        function getRecipientsFn() {

            var fullContacts = [];

            //get the tags that have been selected
            var tags = vm.getSelectedTagsFn();

            //loop through contacts and add if one of the tags matches

            _.each(vm.state.contacts, function (contact) {
                if (contact.tags && contact.tags.length > 0) {
                    var tempTags = [];
                    var tagLabel = "";
                    _.each(contact.tags, function (tag) {
                        tagLabel = _.findWhere(contactTags, {
                            data: tag
                        });
                        if (tagLabel)
                            tempTags.push(tagLabel.label);
                        else
                            tempTags.push(tag);
                    });
                    var tagExists = _.intersection(tempTags, tags);
                    if (tagExists.length > 0) {
                        if (!vm.eliminateDuplicateFn(contact)) {
                            fullContacts.push(contact);
                        }
                    }
                } else {
                    if (tags.indexOf('No Tag') > -1) {
                        if (!vm.eliminateDuplicateFn(contact)) {
                            fullContacts.push(contact);
                        }
                    }
                }

                //add contacts from individual

                if (vm.uiState.selectedContacts.individuals.indexOf(contact._id) > -1) {
                    fullContacts.push(contact);
                }
            });

            return fullContacts;
        }

        function toggleSelectionFn(tagName) {
            var idx = vm.state.tagSelection.indexOf(tagName);

            // is currently selected
            if (idx > -1) {
                vm.state.tagSelection.splice(idx, 1);
            } else {
                vm.state.tagSelection.push(tagName);
            }
            vm.state.recipients = vm.getRecipientsFn();

        }

        function contactSelectedFn(select) {
            var selected = select.selected[select.selected.length - 1];
            var removalIndex = _.indexOf(vm.state.recipientsToRemove, selected._id);
            var existingContact = _.find(vm.state.recipients, function (recipient) {
                return recipient._id === selected._id;
            });

            if (!existingContact) {
                vm.state.recipients.push(selected);
            }

            // clear search text
            select.search = '';

            //remove from removal array
            if (removalIndex !== -1) {
                vm.state.recipientsToRemove.splice(removalIndex, 1);
            }
        }

        function contactRemovedFn(select, selected) {
            var existingContactIndex;
            var contact = _.findWhere(vm.state.recipients, {
                _id: selected._id
            });
            if (contact) {
                existingContactIndex = _.indexOf(vm.state.recipients, contact);
            }

            if (existingContactIndex > -1) {
                //get the tags that have been selected
                var tags = vm.getSelectedTagsFn();
                var tempTags = [];
                var tagLabel = "";
                _.each(contact.tags, function (tag) {
                    tagLabel = _.findWhere(contactTags, {
                        data: tag
                    });
                    if (tagLabel)
                        tempTags.push(tagLabel.label);
                    else
                        tempTags.push(tag);
                });
                if (!tempTags.length)
                    tempTags.push('No Tag');
                var tagExists = _.intersection(tempTags, tags);
                if (tagExists.length === 0) {
                    vm.state.recipients.splice(existingContactIndex, 1);
                }

            }
            // clear search text
            select.search = '';

            //add to removal array
            vm.state.recipientsToRemove.push(selected._id);
        }

        function checkContactExistsFn(email) {
            var matchingRecipient = _.find(vm.state.recipients, function (recipient) {
                if (recipient.details && recipient.details[0] && recipient.details[0].emails && recipient.details[0].emails[0] && recipient.details[0].emails[0].email) {
                    return (recipient.details[0].emails[0].email).toLowerCase() === email.text;
                }
            });
            var matchingContact = _.find(vm.state.contacts, function (contact) {
                if (contact.details && contact.details[0] && contact.details[0].emails && contact.details[0].emails[0] && contact.details[0].emails[0].email) {
                    return (contact.details[0].emails[0].email).toLowerCase() === email.text;
                }
            });
            if (matchingRecipient || matchingContact) {
                return false;
            }

            return true;
        }

        function updateSendNowFn(value) {
            vm.uiState.whenToSend = value;
            vm.uiState.watchDeliveryDate = true;
            if (vm.uiState.whenToSend !== 'later') {
                vm.uiState.delivery.date = moment();
            }
        }

        function openModalFn(template) {
            vm.modalInstance = $modal.open({
                templateUrl: template,
                keyboard: false,
                backdrop: 'static',
                scope: $scope
            });
            vm.modalInstance.result.finally(vm.closeModalFn());
        }

        function closeModalFn() {
            vm.modalInstance.close();
        }

        function getCampaignContactsFn() {
            vm.uiState.dataLoaded = false;
            EmailCampaignService.getCampaignContacts(vm.state.campaignId)
                .then(function (res) {
                    vm.state.originalRecipients = angular.copy(res.data);
                    vm.state.recipients = res.data;
                    var individuals = [];
                    _.each(res.data, function (contact) {
                        individuals.push(
                            contact._id
                        );
                    });
                    vm.uiState.selectedContacts.individuals = individuals;
                    vm.uiState.dataLoaded = true;
                });
        }

        function loadSavedTagsFn() {
            vm.uiState.dataLoaded = false;
            _.each(vm.state.campaign.contactTags, function (tag) {
                var tagLabel = _.findWhere(contactTags, {
                    data: tag
                });
                if (tagLabel) {
                    tag = tagLabel.label;
                }
                var tag = _.findWhere(vm.contactCounts, {
                    uniqueTag: tag
                });
                if (tag)
                    vm.toggleSelectionFn(tag.matchingTag);
            });
            vm.uiState.dataLoaded = true;
        }

        function checkIfDirtyFn() {
            var isDirty = false;

            if (!angular.equals(vm.state.campaign, vm.state.campaignOriginal)) {
                isDirty = true;
                console.info('Dirty vm.state.campaign', vm.state.campaign, vm.state.campaignOriginal);
            }

            if (!angular.equals(vm.uiState.delivery.date, vm.uiState.delivery.originalDate)) {
                isDirty = true;
                console.info('Dirty vm.uiState.delivery.date', vm.uiState.delivery.date, vm.uiState.delivery.originalDate);
            }

            if (!angular.equals(_.pluck(vm.state.recipients, '_id').sort(), _.pluck(vm.state.originalRecipients, '_id').sort())) {
                isDirty = true;
                console.info('Dirty vm.state.recipients', _.pluck(vm.state.recipients, '_id').sort(), _.pluck(vm.state.originalRecipients, '_id').sort());
            }

            return isDirty;
        }

        function resetDirtyFn() {
            vm.state.campaign = angular.copy(vm.state.campaignOriginal);
            vm.uiState.delivery.date = angular.copy(vm.uiState.delivery.originalDate);
            vm.state.recipients = angular.copy(vm.state.originalRecipients);
        }

        function duplicateFn() {
            EmailCampaignService.duplicateCampaign(vm.state.campaign)
                .then(function (res) {
                    $state.go('app.emailCampaign', {
                        id: res.data._id
                    });
                    toaster.pop('success', 'Campaign cloned');
                });
        }

        function init(element) {
            vm.element = element;

            AccountService.getAccount(function (data) {
                vm.state.account = data;
            });

            WebsiteService.getWebsite(function (data) {
                vm.state.website = data;
            });

            if (vm.state.campaignId !== 'create') {
                EmailCampaignService.getCampaign(vm.state.campaignId)
                    .then(function (res) {
                        if (!res.data._id) {
                            toaster.pop('error', 'Campaign not found');
                            $state.go('app.marketing.campaigns');
                        }
                        vm.state.campaign = res.data;
                        vm.state.campaignOriginal = angular.copy(res.data);
                        console.info('campaign obj', vm.state.campaign);

                        if (vm.state.campaign.steps[0].settings.emailId) {
                            EmailBuilderService.getEmail(vm.state.campaign.steps[0].settings.emailId)
                                .then(function (res) {
                                    vm.state.email = res.data;
                                });
                        }

                        var sendAtDateISOString = moment.utc(vm.state.campaign.steps[0].settings.sendAt).subtract('months', 1).toISOString();
                        var localMoment = moment(sendAtDateISOString);

                        if (vm.state.campaign.type === 'onetime') {
                            if (localMoment.isValid()) {
                                vm.uiState.delivery.date = localMoment;
                                vm.uiState.delivery.originalDate = angular.copy(localMoment);
                                vm.uiState.whenToSend = localMoment.isAfter() ? 'later' : 'now';
                            }
                        }

                        if (vm.state.campaign.status === 'DRAFT') {
                            vm.uiState.disableEditing = false;
                        }
                        vm.getContactsFn()
                            .then(function () {
                                vm.loadSavedTagsFn();
                            });
                        vm.getCampaignContactsFn();
                    }, function (err) {
                        $state.go('app.marketing.campaigns');
                    });
            }
        }


    }

})();

'use strict';
/*global app, window, $$*/
/*jslint unparam:true*/
(function() {

    app.factory('EmailCampaignService', EmailCampaignService);

    EmailCampaignService.$inject = ['$http', 'AccountService'];
    /* @ngInject */
    function EmailCampaignService($http, AccountService) {
        var campaignService = {};
        var baseCampaignAPIv1 = '/api/1.0/campaigns';
        var baseCmsAPIUrlv1 = '/api/1.0/cms';

        campaignService.loading = {
            value: 0
        };
        campaignService.getCampaign = getCampaign;
        campaignService.createCampaign = createCampaign;
        campaignService.updateCampaign = updateCampaign;
        campaignService.sendTestEmail = sendTestEmail;
        campaignService.getCampaignContacts = getCampaignContacts;
        campaignService.cancelCampaignForContact = cancelCampaignForContact;
        campaignService.duplicateCampaign = duplicateCampaign;

        /**
         * Get get email by ID
         * @param {string} id - email _id
         */
        function getCampaign(id) {

            function success(data) {}

            function error(error) {
                console.error('EmailCampaignService getCampaign error: ', JSON.stringify(error));
            }

            return campaignRequest($http.get([baseCampaignAPIv1, id].join('/')).success(success).error(error));
        }

        function createCampaign(campaign) {
            function success(data) {}

            function error(error) {
                console.error('EmailCampaignService createCampaign error: ', JSON.stringify(error));
            }

            return campaignRequest($http.post(baseCampaignAPIv1, campaign).success(success).error(error));
        }

        function updateCampaign(campaign) {

            function success(data) {}

            function error(error) {
                console.error('EmailCampaignService updateCampaign error: ', JSON.stringify(error));
            }

            return campaignRequest($http.post([baseCampaignAPIv1, campaign._id].join('/'), campaign).success(success).error(error));
        }

        function sendTestEmail(address, campaign) {
            var data = {
                address: address,
                content: campaign
            };

            function success(data) {}

            function error(error) {
                console.error('EmailCampaignService sendTestEmail error: ', JSON.stringify(error));
            }

            return campaignRequest($http.post([baseCmsAPIUrlv1, 'testemail'].join('/'), data).success(success).error(error));
        }

        function getCampaignContacts(id) {

            function success(data) {}

            function error(error) {
                console.error('EmailCampaignService getCampaignContacts error: ', JSON.stringify(error));
            }

            return campaignRequest($http.get([baseCampaignAPIv1, id, 'contacts'].join('/')).success(success).error(error));
        }

        function cancelCampaignForContact(campaign, contactId) {

            function success(data) {}

            function error(error) {
                console.error('EmailCampaignService cancelCampaignForContact error: ', JSON.stringify(error));
            }

            var promise = $http({
                url: [baseCampaignAPIv1, campaign._id, 'contact', contactId].join('/'),
                method: 'DELETE',
                data: campaign
            });

            return campaignRequest(promise).success(success).error(error);
        }

        function duplicateCampaign(campaign) {
            function success(data) {}

            function error(error) {
                console.error('EmailCampaignService duplicateCampaign error: ', JSON.stringify(error));
            }

            return campaignRequest($http.post([baseCampaignAPIv1, campaign._id, 'duplicate'].join('/'), campaign).success(success).error(error));
        }

        /**
         * A wrapper around API requests
         * @param {function} fn - callback
         *
         * @returns {function} fn - callback
         *
         */
        function campaignRequest(fn) {
            campaignService.loading.value = campaignService.loading.value + 1;
            console.info('service | loading +1 : ' + campaignService.loading.value);
            fn.finally(function() {
                campaignService.loading.value = campaignService.loading.value - 1;
                console.info('service | loading -1 : ' + campaignService.loading.value);
            });
            return fn;
        }

        (function init() {

            AccountService.getAccount(function(data) {
                campaignService.account = data;
                campaignService.websiteId = data.website.websiteId;
            });

        })();


        return campaignService;
    }

})();

(function(){

app.directive('indiLoginModal', indiLoginModal);

function indiLoginModal() {

    return {
        restrict: 'E',
        // scope: {
        //     modalInstance: '='
        // },
        templateUrl: 'assets/js/indi-login-modal/indi-login-modal.component.html',
        controller: 'IndiLoginModalController',
        controllerAs: 'vm',
        bindToController: true,
        link: function(scope, element, attrs, ctrl) {
            ctrl.init(element);
        }
    };

}

})();

(function(){

app.controller('IndiLoginModalController', indiLoginModalController);

indiLoginModalController.$inject = ['$scope', '$attrs', '$filter', '$document', '$timeout', 'toaster', 'IndiLoginModalService', 'authService'];
/* @ngInject */
function indiLoginModalController($scope, $attrs, $filter, $document, $timeout, toaster, IndiLoginModalService, authService) {

    console.info('indi-login-modal directive init...')

    var vm = this;

    vm.init = init;
    vm.onload = onload;
    vm.setupModalEvents = setupModalEvents;
    vm.closeModal = closeModal;

    vm.uiState = {
        loading: true
    }

    vm.unbindModalWatcher = $scope.$watch(function() { IndiLoginModalService.getModalInstance(); }, function(modalInstance) {
        if (modalInstance) {
            vm.setupModalEvents(modalInstance);
        }
    });

    function setupModalEvents(modalInstance) {
        vm.modalInstance = modalInstance;
        vm.modalInstance.result.then(
            function(results){
                console.log('modal closed', results);
            },
            function(error){
                console.log('modal error', error);
            }
        );
    }

    function closeModal() {
        IndiLoginModalService.closeModal();
        vm.unbindModalWatcher();
        vm.loginIframe = null;
        vm.loginIframeContentWindow = null;
    }

    function login(e) {

        console.debug('login');

        $timeout(function() {
            vm.uiState.loading = true;
        });

    }

    function onload(e) {

        vm.loginIframeContentWindow = vm.loginIframe.get(0).contentWindow;

        $timeout(function() {

            vm.uiState.loading = false;

            //if iframe is at login screen
            if (vm.loginIframeContentWindow.location.pathname === '/login') {

                overrideLoginStyles();

            //if iframe is at any other admin page
            } else if(vm.loginIframeContentWindow.location.pathname.indexOf('/admin') !== -1) {

                authService.loginConfirmed();

                vm.closeModal();

                toaster.pop('success', 'Signed in', 'Sign in successful.');

            } else {

                vm.closeModal();

                toaster.pop('success', 'Not Signed in', 'Sign in failed. Please try again.');

            }

        });

    }

    function overrideLoginStyles() {
        var contents = vm.element.find('iframe').contents();
        var loginHTMLEl = contents.find('html');
        var loginButton = contents.find('button[type="submit"');

        loginHTMLEl.addClass('is-indi-modal');
        loginButton.on('click', login);

    }

    function init(element) {

        vm.element = element;
        vm.loginIframe = vm.element.find('iframe');
        vm.loginIframe.on('load', vm.onload);

    }

}

})();

(function(){

app.factory('IndiLoginModalService', indiLoginModalService);

indiLoginModalService.$inject = ['$rootScope', '$http', '$q', '$timeout',];
/* @ngInject */
function indiLoginModalService($rootScope, $http, $q, $timeout) {

    console.info('indi-login-modal service init...');

    var indiService = this;
    indiService.setModalInstance = setModalInstance;
    indiService.getModalInstance = getModalInstance;
    indiService.closeModal = closeModal;

    indiService.queue = [];


    function setModalInstance(modalInstance) {
        indiService.modalInstance = modalInstance;
    }

    function getModalInstance() {
        return indiService.modalInstance
    }

    function closeModal() {
        indiService.modalInstance.close();
        indiService.modalInstance = undefined;
    }

    return indiService;

}

})();

var app = angular.module('indigenousApp', ['indigenous']);
app.run(['$rootScope', '$state', '$stateParams', '$injector',
function ($rootScope, $state, $stateParams, $injector) {

    var $modal;
    var modalInstance;
    var IndiLoginModalService;

    // Attach Fastclick for eliminating the 300ms delay between a physical tap and the firing of a click event on mobile browsers
    FastClick.attach(document.body);

    // Set some reference to access them from any scope
    $rootScope.$state = $state;
    $rootScope.$stateParams = $stateParams;

    // GLOBAL APP SCOPE
    // set below basic information
    $rootScope.app = {
        name: 'Indigenous', // name of your project
        author: 'Indigenous Software, INC', // author's name or company name
        description: 'An all in one solution for small to medium sized businesses.', // brief description
        version: '1.0', // current version
        year: ((new Date()).getFullYear()), // automatic current year (for copyright information)
        isMobile: (function () {// true if the browser is a mobile device
            var check = false;
            if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                check = true;
            } else {
                check = false;
            };
            return check;
        })(),
        layout: {
            isNavbarFixed: true, //true if you want to initialize the template with fixed header
            isSidebarFixed: true, // true if you want to initialize the template with fixed sidebar
            isSidebarClosed: false, // true if you want to initialize the template with closed sidebar
            isFooterFixed: false, // true if you want to initialize the template with fixed footer
            isMinimalAdminChrome: false, //minimal admin chrome for site builder experience
            theme: 'theme-6', // indicate the theme chosen for your project
            logo: 'assets/images/logo.png', // relative path of the project logo
        }
    };
    $rootScope.user = {
        name: 'Peter',
        job: 'ng-Dev',
        picture: 'app/img/user/02.jpg'
    };

    $rootScope.$on('event:auth-loginRequired', function(data) {

        /**
         * List of ignored API requests
         *  - /api/1.0/social/socialconfig/*
         *      - Reason: 401's on expired auth
         */

        $modal = $modal || $injector.get('$modal');
        IndiLoginModalService = IndiLoginModalService || $injector.get('IndiLoginModalService');

        if (!angular.isObject(IndiLoginModalService.getModalInstance())) {

            modalInstance = $modal.open({
                templateUrl: 'indigeneous-admin-login-modal',
                keyboard: false,
                backdrop: 'static',
                size: 'sm'
            });

            IndiLoginModalService.setModalInstance(modalInstance);

        }

    });


}]);
// translate config
app.config(['$translateProvider',
function ($translateProvider) {

    // prefix and suffix information  is required to specify a pattern
    // You can simply use the static-files loader with this pattern:
    $translateProvider.useStaticFilesLoader({
        prefix: 'assets/i18n/',
        suffix: '.json'
    });

    // Since you've now registered more then one translation table, angular-translate has to know which one to use.
    // This is where preferredLanguage(langKey) comes in.
    $translateProvider.preferredLanguage('en');

    // Store the language in the local storage
    $translateProvider.useLocalStorage();

}]);
// Angular-Loading-Bar
// configuration
app.config(['cfpLoadingBarProvider',
function (cfpLoadingBarProvider) {
    cfpLoadingBarProvider.includeBar = true;
    cfpLoadingBarProvider.includeSpinner = false;

}]);

/*global app*/
/*jslint unparam: true*/
'use strict';
(function (angular) {
  app.service('AccountService', ['$http', '$q', function ($http, $q) {
    var baseUrl = '/api/1.0/account/';

    this.mainAccount = null;
    this.getMainAccount = function () {
      return this.mainAccount;
    };

    this.setMainAccount = function (account) {
      this.mainAccount = account;
    };

    this.getAccount = function (fn) {
      var apiUrl = baseUrl;
      var deferred = $q.defer();
      $http.get(apiUrl)
        .success(function (data) {
          if (fn) {
            console.log('resolve >>> ');
            deferred.resolve(fn(data));
          }
          // fn(data);
        })
        .error(function (err) {
          console.warn('END:Account Service with ERROR');
          fn(err, null);
        });

      return deferred.promise;
    };

    //:id/setting
    this.updateAccount = function (account, fn) {
      var apiUrl = baseUrl + [account._id].join('/');
      $http.put(apiUrl, account)
        .success(function (data) {
          fn(data);
        })
        .error(function (error) {
          fn(null, error);
        });
    };

  }]);
}(angular));

/*global app*/
/*jslint unparam: true*/
'use strict';
(function (angular) {
  app.service('AssetsService', ['$http', function ($http) {
    var baseUrl = '/api/1.0/';
    this.getAssetsByAccount = function (fn) {
      var apiUrl = baseUrl + ['assets'].join('/');
      $http.get(apiUrl)
        .success(function (data) {
          fn(data);
        });
    };

    this.deleteAssets = function (assets, fn) {
      assets.forEach(function (v) {
        this.deleteAssetById(v._id, fn);
      }, this);
    };

    this.deleteAssetById = function (assetId, fn) {
      var apiUrl = baseUrl + ['assets', assetId].join('/');
      $http.delete(apiUrl)
        .error(function (data, status) {
          fn(data, status);
        })
        .success(function (data, status) {
          fn(data, status);
        });
    };
    
    this.updateAsset = function (asset, fn) {
      var apiUrl = baseUrl + ['assets', asset._id].join('/');
      $http.post(apiUrl, asset)
        .error(function (data, status) {
          fn(data, status);
        })
        .success(function (data, status) {
          fn(data, status);
        });
    };
  }]);
}(angular));

/*global app*/
/*jslint unparam: true*/
'use strict';
(function (angular) {
  app.service('CampaignService', function ($http, $cacheFactory, $q) {
    var baseUrl = '/api/1.0/campaigns/';

    var campaigncache = $cacheFactory('campaigns');

    this.getCampaigns = function (fn) {
      // var data = campaigncache.get('campaigns');
      // if (data) {
      //   if (fn) {
      //     fn(data);
      //   }
      // } else {
        var apiUrl = baseUrl;
        $http.get(apiUrl)
          .success(function (data) {
            campaigncache.put('campaigns', data);
            fn(data);
          });
      // }
    };

    this.getCampaign = function (id, fn) {
      var apiUrl = baseUrl + id;
      var deferred = $q.defer();
      
      $http.get(apiUrl)
        .success(function (data) {
          if (fn) {
            console.log('resolve >>> ');
            deferred.resolve(fn(data));
          }
        })
        .error(function (err) {
          console.warn('END:Campaign Service with ERROR');
          fn(err, null);
        });

      return deferred.promise;
    };

    this.createCampaign = function (campaign, fn) {
      var _campaigns = campaigncache.get('campaigns');
      var apiUrl = baseUrl;
      $http({
        url: apiUrl,
        method: "POST",
        data: campaign
      }).success(function (data) {
        if (_campaigns) {
          _campaigns.push(data);
          campaigncache.put('campaigns', _campaigns);
        }
        fn(data);
      }).error(function (error) {
        console.error('CampaignService: createCampaign error >>> ', error);
      });
    };

    this.updateCampaign = function (campaign, fn) {
      var apiUrl = baseUrl + campaign._id;
      $http({
        url: apiUrl,
        method: "POST",
        data: campaign
      }).success(function (data) {
        fn(data);
      }).error(function (error) {
        console.error('CampaignService: updateCampaign error >>> ', error);
      });
    };

    this.cancelCampaignForContact = function (campaign, contactId, fn) {
      var apiUrl = baseUrl + [campaign._id, 'contact', contactId].join('/');
      $http({
        url: apiUrl,
        method: "DELETE",
        data: campaign
      }).success(function (data) {
        fn(data);
      }).error(function (error) {
        if (error) {
          console.error('CampaignService: cancelCampaignForContact error >>> ', error);
        }
      });
    };

    this.duplicateCampaign = function(campaignId, campaign, fn) {
        var apiUrl = baseUrl + [campaignId, 'duplicate'].join('/');
        $http({
            url: apiUrl,
            method: "POST",
            data: campaign
        }).success(function (data) {
            fn(data);
        }).error(function (error) {
            if (error) {
              console.error('CampaignService: duplicateCampaign error >>> ', error);
            }
        });
    };

    this.deleteCampaign = function(campaignId, fn) {
        var apiUrl = baseUrl + [campaignId].join('/');
        $http({
            url: apiUrl,
            method: "DELETE"
        }).success(function (data) {
            var campaigns = campaigncache.get('campaigns');
            campaigns = _.without(campaigns, _.findWhere(campaigns, { _id: campaignId }));
            campaigncache.put('campaigns', campaigns);
            fn(data);
        }).error(function (error) {
            if (error) {
              console.error('CampaignService: deleteCampaign error >>> ', error);
            }
        });
    };

    this.bulkAddContactsToCampaign = function (contactsArr, campaignId, fn) {
      var apiUrl = baseUrl + [campaignId, 'contacts'].join('/');
      $http({
        url: apiUrl,
        method: "POST",
        data: contactsArr
      }).success(function (data) {
        fn(data);
      }).error(function (error) {
        console.error('CampaignService: bulkAddContactsToCampaign error >>> ', error);
      });
    };

    this.checkCampaignNameExists = function (_name, fn) {
      var self = this;
      self.getCampaigns(function (campaigns) {
        console.log('campaigns ', campaigns);
        var _matchingCampaign = _.find(campaigns, function (campaign) {
          return angular.lowercase(campaign.name) === angular.lowercase(_name);
        });
        if (_matchingCampaign) {
          fn(true);
        } else {
          fn(false);
        }
      });
    };

    this.getCampaignContacts = function (campaignId, fn) {
      var apiUrl = baseUrl + [campaignId, 'contacts'].join('/');
      var deferred = $q.defer();
      
      $http.get(apiUrl)
        .success(function (data) {
          if (fn) {
            console.log('resolve >>> ');
            deferred.resolve(fn(data));
          }
        })
        .error(function (err) {
          console.warn('END:Campaign Service with ERROR');
          fn(err, null);
        });

      return deferred.promise;
    };

  });
}(angular));

'use strict';
/*global app, moment, angular, window, Keen, Highcharts, $$*/
/*jslint unparam: true*/
(function (angular) {
    app.service('ChartAnalyticsService', ['KeenService', function (KeenService) {

        //common functions

        this.secToTime = function (duration) {
            var minutes = parseInt(Math.floor(duration / 60), 10);
            var seconds = parseInt(duration - minutes * 60, 10);

            minutes = (minutes < 10) ? "0" + minutes : minutes;
            seconds = (seconds < 10) ? "0" + seconds : seconds;

            return minutes + ":" + seconds;
        };

        this.getHostName = function (account) {
            var hostname = '';
            var windowHostname = window.location.hostname;
            if (windowHostname.indexOf(".local") > -1) {
                hostname = account.subdomain + '.indigenous.local';
            } else if (windowHostname.indexOf(".test.") > -1) {
                hostname = windowHostname;
            } else {
                hostname = account.subdomain + '.indigenous.io';
            }
            if (account.domain) {
                hostname = account.domain;
            }
            if (account._id === 6 && windowHostname.indexOf(".local") <= 0 && windowHostname.indexOf(".test") <= 0) {
                hostname = 'indigenous.io';
            }
            return hostname;
        };

        this.getCommaSeparatedHostNames = function(account) {
            var hostname = '';
            var windowHostname = window.location.hostname;
            if (windowHostname.indexOf(".local") > -1) {
                hostname = account.subdomain + '.indigenous.local';
            } else if (windowHostname.indexOf(".test.") > -1) {
                hostname = windowHostname;
            } else {
                hostname = account.subdomain + '.indigenous.io';
            }
            if (account._id === 6 && windowHostname.indexOf(".local") <= 0 && windowHostname.indexOf(".test") <= 0) {
                hostname = 'indigenous.io,www.indigneous.io';
            }
            if(account.customDomain) {
                hostname += ',' + account.customDomain + ',www.' + account.customDomain;
            }
            if(account.alternateDomains) {
                _.each(account.alternateDomains, function(domain){
                    hostname += ',' + domain + ',www.' + domain;
                });
            }
            return hostname;
        };

        this.calculatePercentage = function (oldval, newval) {
            var result;
            oldval = parseInt(oldval, 10);
            newval = parseInt(newval, 10);
            if (oldval === 0 && newval === 0) {
                return 0;
            }
            if (newval < oldval) {
                result = ((oldval - newval) / oldval) * 100;
            } else {
                result = ((newval - oldval) / newval) * 100;
            }

            if (newval === oldval) {
                result = 100;
            }
            return Math.round(result * 100) / 100;
        };

        this.stateToAbbr = function (strInput) {
            var strOutput;
            if (strInput) {
                var arrStates = [
                    {
                        "name": "Alabama",
                        "abbreviation": "AL"
                    },
                    {
                        "name": "Alaska",
                        "abbreviation": "AK"
                    },
                    {
                        "name": "American Samoa",
                        "abbreviation": "AS"
                    },
                    {
                        "name": "Arizona",
                        "abbreviation": "AZ"
                    },
                    {
                        "name": "Arkansas",
                        "abbreviation": "AR"
                    },
                    {
                        "name": "California",
                        "abbreviation": "CA"
                    },
                    {
                        "name": "Colorado",
                        "abbreviation": "CO"
                    },
                    {
                        "name": "Connecticut",
                        "abbreviation": "CT"
                    },
                    {
                        "name": "Delaware",
                        "abbreviation": "DE"
                    },
                    {
                        "name": "District Of Columbia",
                        "abbreviation": "DC"
                    },
                    {
                        "name": "Federated States Of Micronesia",
                        "abbreviation": "FM"
                    },
                    {
                        "name": "Florida",
                        "abbreviation": "FL"
                    },
                    {
                        "name": "Georgia",
                        "abbreviation": "GA"
                    },
                    {
                        "name": "Guam",
                        "abbreviation": "GU"
                    },
                    {
                        "name": "Hawaii",
                        "abbreviation": "HI"
                    },
                    {
                        "name": "Idaho",
                        "abbreviation": "ID"
                    },
                    {
                        "name": "Illinois",
                        "abbreviation": "IL"
                    },
                    {
                        "name": "Indiana",
                        "abbreviation": "IN"
                    },
                    {
                        "name": "Iowa",
                        "abbreviation": "IA"
                    },
                    {
                        "name": "Kansas",
                        "abbreviation": "KS"
                    },
                    {
                        "name": "Kentucky",
                        "abbreviation": "KY"
                    },
                    {
                        "name": "Louisiana",
                        "abbreviation": "LA"
                    },
                    {
                        "name": "Maine",
                        "abbreviation": "ME"
                    },
                    {
                        "name": "Marshall Islands",
                        "abbreviation": "MH"
                    },
                    {
                        "name": "Maryland",
                        "abbreviation": "MD"
                    },
                    {
                        "name": "Massachusetts",
                        "abbreviation": "MA"
                    },
                    {
                        "name": "Michigan",
                        "abbreviation": "MI"
                    },
                    {
                        "name": "Minnesota",
                        "abbreviation": "MN"
                    },
                    {
                        "name": "Mississippi",
                        "abbreviation": "MS"
                    },
                    {
                        "name": "Missouri",
                        "abbreviation": "MO"
                    },
                    {
                        "name": "Montana",
                        "abbreviation": "MT"
                    },
                    {
                        "name": "Nebraska",
                        "abbreviation": "NE"
                    },
                    {
                        "name": "Nevada",
                        "abbreviation": "NV"
                    },
                    {
                        "name": "New Hampshire",
                        "abbreviation": "NH"
                    },
                    {
                        "name": "New Jersey",
                        "abbreviation": "NJ"
                    },
                    {
                        "name": "New Mexico",
                        "abbreviation": "NM"
                    },
                    {
                        "name": "New York",
                        "abbreviation": "NY"
                    },
                    {
                        "name": "North Carolina",
                        "abbreviation": "NC"
                    },
                    {
                        "name": "North Dakota",
                        "abbreviation": "ND"
                    },
                    {
                        "name": "Northern Mariana Islands",
                        "abbreviation": "MP"
                    },
                    {
                        "name": "Ohio",
                        "abbreviation": "OH"
                    },
                    {
                        "name": "Oklahoma",
                        "abbreviation": "OK"
                    },
                    {
                        "name": "Oregon",
                        "abbreviation": "OR"
                    },
                    {
                        "name": "Palau",
                        "abbreviation": "PW"
                    },
                    {
                        "name": "Pennsylvania",
                        "abbreviation": "PA"
                    },
                    {
                        "name": "Puerto Rico",
                        "abbreviation": "PR"
                    },
                    {
                        "name": "Rhode Island",
                        "abbreviation": "RI"
                    },
                    {
                        "name": "South Carolina",
                        "abbreviation": "SC"
                    },
                    {
                        "name": "South Dakota",
                        "abbreviation": "SD"
                    },
                    {
                        "name": "Tennessee",
                        "abbreviation": "TN"
                    },
                    {
                        "name": "Texas",
                        "abbreviation": "TX"
                    },
                    {
                        "name": "Utah",
                        "abbreviation": "UT"
                    },
                    {
                        "name": "Vermont",
                        "abbreviation": "VT"
                    },
                    {
                        "name": "Virgin Islands",
                        "abbreviation": "VI"
                    },
                    {
                        "name": "Virginia",
                        "abbreviation": "VA"
                    },
                    {
                        "name": "Washington",
                        "abbreviation": "WA"
                    },
                    {
                        "name": "West Virginia",
                        "abbreviation": "WV"
                    },
                    {
                        "name": "Wisconsin",
                        "abbreviation": "WI"
                    },
                    {
                        "name": "Wyoming",
                        "abbreviation": "WY"
                    }
                ];
                _.each(arrStates, function (state) {
                    if (state.name.toLowerCase() === strInput.toLowerCase()) {
                        strOutput = state.abbreviation;
                    }
                });
            }

            return strOutput || false;
        };

        /*
         * I assume these timeframes are the past 30days and the past 60 days.
         * .utc().format("YYYY-MM-DDTHH:mm:ss") + "Z"
         * moment().subtract(29, 'days'), moment()
         */
        var timeframePreviousStart = moment().subtract(60, 'days').format(); //TODO: 60d ago
        var timeframePreviousEnd = moment().subtract(30, 'days').format(); //TODO: 30d ago
        var interval = "daily";

        //reports

        this.queryReports = function (date, _hostname, _hostnameAry) {
            var queryData = {};

            queryData.visitorLocations = new Keen.Query("count", {
                eventCollection: "session_data",
                groupBy: "ip_geo_info.province",
                timeframe: {
                    "start": date.startDate,
                    "end": date.endDate
                },
                filters: [
                    {
                        "property_name": "accountId",
                        "operator": "eq",
                        "property_value": $$.server.accountId
                    },
                    {
                        "property_name": "ip_geo_info",
                        "operator": "ne",
                        "property_value": "null"
                    },
                    {
                        "property_name": "fingerprint",
                        "operator": "ne",
                        "property_value": 0
                    }
                ]
            });

            queryData.deviceReportByCategory = new Keen.Query("count", {
                eventCollection: "session_data",
                timeframe: {
                    "start": date.startDate,
                    "end": date.endDate
                },
                groupBy: "user_agent.device",
                filters: [
                    {
                        "property_name": "accountId",
                        "operator": "eq",
                        "property_value": $$.server.accountId
                    },
                    {
                        "property_name": "fingerprint",
                        "operator": "ne",
                        "property_value": 0
                    }
                ]
            });

            queryData.userReport = new Keen.Query("count_unique", {
                eventCollection: "session_data",
                targetProperty: "fingerprint",
                timeframe: {
                    "start": date.startDate,
                    "end": date.endDate
                },
                interval: interval,
                filters: [
                    {
                        "property_name": "accountId",
                        "operator": "eq",
                        "property_value": $$.server.accountId
                    },
                    {
                        "property_name": "fingerprint",
                        "operator": "ne",
                        "property_value": 0
                    }
                ]
            });

            queryData.userReportPreviousMonth = new Keen.Query("count_unique", {
                eventCollection: "session_data",
                targetProperty: "fingerprint",
                timeframe: {
                    "start": timeframePreviousStart,
                    "end": timeframePreviousEnd
                },
                interval: interval,
                filters: [
                    {
                        "property_name": "accountId",
                        "operator": "eq",
                        "property_value": $$.server.accountId
                    },
                    {
                        "property_name": "fingerprint",
                        "operator": "ne",
                        "property_value": 0
                    }
                ]
            });

            queryData.pageviewsReport = new Keen.Query("count", {
                eventCollection: "page_data",
                timeframe: {
                    "start": date.startDate,
                    "end": date.endDate
                },
                interval: interval,
                filters: [
                    {
                        "property_name": "url.domain",
                        "operator": "in",
                        "property_value": _hostnameAry.split(',')
                    }
                ]
            });


            queryData.pageviewsPreviousReport = new Keen.Query("count", {
                eventCollection: "page_data",
                timeframe: {
                    "start": timeframePreviousStart,
                    "end": timeframePreviousEnd
                },
                interval: interval,
                filters: [
                    {
                        "property_name": "url.domain",
                        "operator": "in",
                        "property_value": _hostnameAry.split(',')
                    }
                ]
            });

            queryData.sessionsReport = new Keen.Query("count_unique", {
                eventCollection: "session_data",
                targetProperty: "session_id",
                timeframe: {
                    "start": date.startDate,
                    "end": date.endDate
                },
                interval: interval,
                filters: [
                    {
                        "property_name": "accountId",
                        "operator": "eq",
                        "property_value": $$.server.accountId
                    },
                    {
                        "property_name": "fingerprint",
                        "operator": "ne",
                        "property_value": 0
                    }
                ]
            });

            queryData.sessionsPreviousReport = new Keen.Query("count_unique", {
                eventCollection: "session_data",
                targetProperty: "session_id",
                timeframe: {
                    "start": timeframePreviousStart,
                    "end": timeframePreviousEnd
                },
                interval: interval,
                filters: [
                    {
                        "property_name": "accountId",
                        "operator": "eq",
                        "property_value": $$.server.accountId
                    },
                    {
                        "property_name": "fingerprint",
                        "operator": "ne",
                        "property_value": 0
                    }
                ]
            });

            queryData.sessionLengthReport = new Keen.Query("count", {
                eventCollection: "session_data",
                targetProperty: "session_length",
                timeframe: {
                    "start": date.startDate,
                    "end": date.endDate
                },
                interval: interval,
                filters: [
                    {
                        "property_name": "accountId",
                        "operator": "eq",
                        "property_value": $$.server.accountId
                    },
                    {
                        "property_name": "fingerprint",
                        "operator": "ne",
                        "property_value": 0
                    }
                ]
            });

            queryData.sessionAvgLengthReport = new Keen.Query("average", {
                eventCollection: "session_data",
                targetProperty: "session_length",
                timeframe: {
                    "start": date.startDate,
                    "end": date.endDate
                },
                filters: [
                    {
                        "property_name": "accountId",
                        "operator": "eq",
                        "property_value": $$.server.accountId
                    },
                    {
                        "property_name": "fingerprint",
                        "operator": "ne",
                        "property_value": 0
                    }
                ]
            });

            queryData.bouncesReport = new Keen.Query("count_unique", {
                eventCollection: "session_data",
                targetProperty: "session_id",
                timeframe: {
                    "start": date.startDate,
                    "end": date.endDate
                },
                interval: interval,
                filters: [
                    {
                        "property_name": "accountId",
                        "operator": "eq",
                        "property_value": $$.server.accountId
                    },
                    {
                        "property_name": "session_length",
                        "operator": "lte",
                        "property_value": 5000
                    },
                    {
                        "property_name": "page_depth",
                        "operator": "eq",
                        "property_value": 1
                    },
                    {
                        "property_name": "fingerprint",
                        "operator": "ne",
                        "property_value": 0
                    }
                ]
            });

            queryData.bouncesPreviousReport = new Keen.Query("count_unique", {
                eventCollection: "session_data",
                targetProperty: "session_id",
                timeframe: {
                    "start": date.startDate,
                    "end": date.endDate
                },
                filters: [
                    {
                        "property_name": "accountId",
                        "operator": "eq",
                        "property_value": $$.server.accountId
                    },
                    {
                        "property_name": "session_length",
                        "operator": "lte",
                        "property_value": 5000
                    },
                    {
                        "property_name": "page_depth",
                        "operator": "eq",
                        "property_value": 1
                    },
                    {
                        "property_name": "fingerprint",
                        "operator": "ne",
                        "property_value": 0
                    }
                ]
            });

            queryData.trafficSources = new Keen.Query("count", {
                eventCollection: "session_data",
                groupBy: "referrer.domain",
                timeframe: {
                    "start": date.startDate,
                    "end": date.endDate
                },
                filters: [
                    {
                        "property_name": "accountId",
                        "operator": "eq",
                        "property_value": $$.server.accountId
                    },
                    {
                        "property_name": "fingerprint",
                        "operator": "ne",
                        "property_value": 0
                    }
                ]
            });

            queryData.returningVisitors = new Keen.Query("count_unique", {
                eventCollection: "session_data",
                targetProperty: "permanent_tracker",
                timeframe: {
                    "start": date.startDate,
                    "end": date.endDate
                },
                filters: [
                    {
                        "property_name": "accountId",
                        "operator": "eq",
                        "property_value": $$.server.accountId
                    },
                    {
                        "property_name": "new_visitor",
                        "operator": "eq",
                        "property_value": false
                    },
                    {
                        "property_name": "fingerprint",
                        "operator": "ne",
                        "property_value": 0
                    }
                ]
            });

            queryData.newVisitors = new Keen.Query("count_unique", {
                eventCollection: "session_data",
                targetProperty: "permanent_tracker",
                timeframe: {
                    "start": date.startDate,
                    "end": date.endDate
                },
                filters: [
                    {
                        "property_name": "accountId",
                        "operator": "eq",
                        "property_value": $$.server.accountId
                    },
                    {
                        "property_name": "new_visitor",
                        "operator": "eq",
                        "property_value": true
                    },
                    {
                        "property_name": "fingerprint",
                        "operator": "ne",
                        "property_value": 0
                    }
                ]
            });


            queryData.sessionPreviousAvgLengthReport = new Keen.Query("average", {
                eventCollection: "session_data",
                targetProperty: "session_length",
                timeframe: {
                    "start": timeframePreviousStart,
                    "end": timeframePreviousEnd
                },
                filters: [
                    {
                        "property_name": "accountId",
                        "operator": "eq",
                        "property_value": $$.server.accountId
                    }
                ]
            }, {
                "property_name": "fingerprint",
                "operator": "ne",
                "property_value": 0
            });

            return queryData;
        };

        this.runReports = function (date, account, fn) {
            var self = this;
            var hostname = this.getHostName(account);
            var hostnameAry = this.getCommaSeparatedHostNames(account);
            console.log('hostname ', hostname);
            console.log('date range ', date);
            console.log('hostnameAry', hostnameAry);

            KeenService.keenClient(function (client) {
                var queryData = self.queryReports(date, hostname, hostnameAry);
                client.run([
                    queryData.visitorLocations,
                    queryData.deviceReportByCategory,
                    queryData.userReport,
                    queryData.userReportPreviousMonth,
                    queryData.pageviewsReport,
                    queryData.pageviewsPreviousReport,
                    queryData.sessionsReport,
                    queryData.sessionsPreviousReport,
                    queryData.sessionLengthReport,
                    queryData.sessionAvgLengthReport,
                    queryData.bouncesReport,
                    queryData.bouncesPreviousReport,
                    queryData.trafficSources,
                    queryData.returningVisitors,
                    queryData.newVisitors,
                    // queryData.pageDepth,
                    queryData.sessionPreviousAvgLengthReport
                ], function (results) {
                    fn(results);
                    console.log(results[2]);
                });
            });
        };

        this.runPagedReports = function (date, account, fn) {
            var filters = [];
            var hostname = this.getHostName(account);
            var hostnameAry = this.getCommaSeparatedHostNames(account);
            filters.push({
                "property_name": "url.domain",
                "operator": "in",
                "property_value": hostnameAry.split(',')
            });


            var reportData = {};
            var params2 = {
                event_collection: 'page_data',
                analyses: {
                    "pageviews": {
                        "analysis_type": "count"
                    },
                    "uniquePageviews": {
                        "analysis_type": "count_unique",
                        "target_property": "session_id"
                    },
                    "timeOnPage": {
                        "analysis_type": "sum",
                        "target_property": "timeOnPage"
                    },
                    "avgTimeOnPage": {
                        "analysis_type": "average",
                        "target_property": "timeOnPage"
                    },
                    "entrances": {
                        "analysis_type": "count",
                        "target_property": "entrance"
                    },
                    "exits": {
                        "analysis_type": "count",
                        "target_property": "exit"
                    }
                },
                timeframe: {
                    "start": date.startDate,
                    "end": date.endDate
                },
                group_by: 'url.path',
                filters: filters
            };

            KeenService.multiAnalysis(params2, function (multidata) {
                var formattedTopPages = [];
                var pagedformattedTopPages;

                // ----------------------------------------
                // Top Pageviews
                // ----------------------------------------
                _.each(multidata.result, function (singleRow) {
                    var subObj = {};

                    if (singleRow['url.path']) {
                        subObj.page = singleRow['url.path'];
                        subObj.pageviews = singleRow.pageviews;
                        subObj.avgTime = Math.abs(singleRow.avgTimeOnPage) / 1000;
                        subObj.uniquePageviews = singleRow.uniquePageviews;
                        //TODO
                        //subObj.entrances = singleRow['entrances'];
                        //subObj.bounceRate = singleRow['bounces']/singleRow['pageviews'];
                        //subObj.exitRate = self.calculatePercentage(singleRow['exits'], currentTotalPageviews);
                    }
                    if (subObj) {
                        formattedTopPages.push(subObj);
                    }
                });

                //pagedformattedTopPages = formattedTopPages.slice(0, 15);  // don't bother shortening list (UI does)
                pagedformattedTopPages = formattedTopPages;
                reportData.formattedTopPages = formattedTopPages;
                reportData.pagedformattedTopPages = pagedformattedTopPages;
                fn(reportData);
            });
        };

        this.visitorsReport = function (date, account, fn) {
            var self = this;
            var _hostname = this.getHostName(account);

            KeenService.keenClient(function (client) {
                var queryData = self.queryVisitorReports(date, _hostname);
                client.run([
                    queryData.returningVisitors,
                    queryData.newVisitors,
                    queryData.lastVisitor
                ], function (results) {
                    fn(results);
                });
            });
        };

        this.queryVisitorReports = function (date, _hostname) {
            var queryData = {};

            queryData.returningVisitors = new Keen.Query("count_unique", {
                eventCollection: "session_data",
                targetProperty: "permanent_tracker",
                timeframe: "this_month",
                interval: "daily",
                filters: [
                    {
                        "property_name": "accountId",
                        "operator": "eq",
                        "property_value": $$.server.accountId
                    },
                    {
                        "property_name": "new_visitor",
                        "operator": "eq",
                        "property_value": false
                    }
                ]
            });

            queryData.newVisitors = new Keen.Query("count_unique", {
                eventCollection: "session_data",
                targetProperty: "permanent_tracker",
                timeframe: "this_month",
                interval: "daily",
                filters: [
                    {
                        "property_name": "accountId",
                        "operator": "eq",
                        "property_value": $$.server.accountId
                    },
                    {
                        "property_name": "new_visitor",
                        "operator": "eq",
                        "property_value": true
                    }
                ]
            });

            queryData.lastVisitor = new Keen.Query("extraction", {
                eventCollection: "session_data",
                targetProperty: "permanent_tracker",
                latest: 1,
                filters: [
                    {
                        "property_name": "accountId",
                        "operator": "eq",
                        "property_value": $$.server.accountId
                    }
                ]
            });

            return queryData;
        };

        //charts

        this.pageDepth = function () {
            var pageDepthConfig = {
                options: {
                    chart: {
                        plotBackgroundColor: null,
                        plotBorderWidth: 0,
                        plotShadow: false,
                        spacing: [25, 25, 25, 25]
                    },
                    title: {
                        text: ''
                    },
                    tooltip: {
                        pointFormat: '{point.x}: <b>{point.percentage:.1f}%</b>'
                    },
                    plotOptions: {
                        pie: {
                            dataLabels: {
                                enabled: true,
                                distance: -50,
                                style: {
                                    fontWeight: 'bold',
                                    color: 'white',
                                    textShadow: '0px 1px 2px black'
                                }
                            },
                            colors: ['#41b0c7', '#fcb252', '#309cb2', '#f8cc49', '#f8d949']
                        }
                    },
                    exporting: {
                        enabled: false
                    }
                },
                series: [
                    {
                        type: 'pie',
                        name: 'Gender',
                        innerSize: '40%',
                        data: [
                            ['Male', 44.3],
                            ['Female', 55.7]
                        ]
                    }
                ],
                credits: {
                    enabled: false
                }
            };

            return pageDepthConfig;
        };

        this.analyticsOverview = function (readyPageviewsData, sessionsData, readyVisitorsData, fn) {
            var analyticsOverviewConfig = {
                options: {
                    chart: {
                        spacing: [25, 25, 25, 25]
                    },
                    colors: ['#41b0c7', '#fcb252', '#993300', '#f8cc49', '#f8d949'],
                    title: {
                        text: null
                    },
                    subtitle: {
                        text: ''
                    },
                    tooltip: {
                        headerFormat: '<b>{point.x:%b %d}</b><br>',
                        pointFormat: '<b class="text-center">{point.y}</b>'
                    },
                    legend: {
                        enabled: true
                    },
                    exporting: {
                        enabled: false
                    },
                    plotOptions: {
                        series: {
                            marker: {
                                enabled: true,
                                radius: 3
                            }
                        }
                    }
                },
                xAxis: {
                    type: 'datetime',
                    labels: {
                        format: "{value:%b %d}"
                    }
                },
                yAxis: {
                    min: 0,
                    // max: Math.max.apply(Math, lineData) + 100,
                    title: {
                        text: ''
                    }
                },
                series: [
                    {
                        name: 'Visitors',
                        data: readyVisitorsData
                    },
                    {
                        name: 'Visits',
                        data: sessionsData
                    },
                    {
                        name: 'Pageviews',
                        data: readyPageviewsData
                    }
                ],
                credits: {
                    enabled: false
                }
                /*
                 func: function (chart) {

                 }
                 */
            };
            fn(analyticsOverviewConfig);
        };

        this.timeOnSite = function (timeOnSiteData, bouncesData, fn) {
            var timeonSiteConfig = {
                options: {
                    chart: {
                        spacing: [25, 25, 25, 25],
                        height: 360
                    },
                    colors: ['#41b0c7', '#fcb252', '#309cb2', '#f8cc49', '#f8d949'],
                    title: {
                        text: ''
                    },
                    subtitle: {
                        text: ''
                    },
                    tooltip: {
                        headerFormat: '<b>{point.x:%b %d}</b><br>',
                        pointFormat: '<b class="text-center">{point.y}</b>'
                    },
                    legend: {
                        enabled: true
                    },
                    exporting: {
                        enabled: false
                    },
                    plotOptions: {
                        series: {
                            marker: {
                                enabled: true,
                                radius: 3
                            }
                        }
                    }
                },
                xAxis: {
                    type: 'datetime',
                    labels: {
                        format: "{value:%b %d}"
                    }
                },
                yAxis: {
                    // min: 0,
                    // max: Math.max.apply(Math, lineData) + 100,
                    title: {
                        text: ''
                    }
                },
                series: [
                    {
                        name: 'Time on Site',
                        data: timeOnSiteData
                    },
                    {
                        name: 'Bounces',
                        data: bouncesData
                    }
                ],
                credits: {
                    enabled: false
                }
            };
            fn(timeonSiteConfig);
        };

        this.trafficSources = function (trafficSourceData, fn) {
            var trafficSourcesConfig = {
                options: {
                    chart: {
                        plotBackgroundColor: null,
                        plotBorderWidth: 0,
                        plotShadow: false,
                        spacing: [25, 25, 25, 25],
                        height: 300
                    },
                    title: {
                        text: ''
                    },
                    tooltip: {
                        pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
                    },
                    plotOptions: {
                        pie: {
                            dataLabels: {
                                enabled: true,
                                distance: -50,
                                style: {
                                    fontWeight: 'bold',
                                    color: 'white',
                                    textShadow: '0px 1px 2px black'
                                }
                            },
                            colors: ['#41b0c7', '#fcb252', '#309cb2', '#f8cc49', '#f8d949']
                        }
                    },
                    exporting: {
                        enabled: false
                    }
                },
                series: [
                    {
                        type: 'pie',
                        name: 'Traffic Source',
                        innerSize: '40%',
                        data: trafficSourceData
                    }
                ],
                credits: {
                    enabled: false
                }
            };
            fn(trafficSourcesConfig);
        };

        this.newVsReturning = function (newVsReturning, fn) {
            var newVsReturningConfig = {
                options: {
                    chart: {
                        height: 300
                    },
                    colors: ['#41b0c7', '#fcb252', '#309cb2', '#f8cc49', '#f8d949'],
                    title: {
                        text: ''
                    },
                    legend: {
                        enabled: true
                    },
                    exporting: {
                        enabled: false
                    }
                },
                plotOptions: {
                    pie: {
                        allowPointSelect: true,
                        cursor: 'pointer',
                        dataLabels: {
                            enabled: true,
                            format: '<b>{point.name}</b>: {point.percentage:.1f} %',
                            style: {
                                color: (Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black'
                            }
                        }
                    }
                },
                series: [
                    {
                        type: 'pie',
                        name: 'Browser share',
                        data: newVsReturning
                    }
                ],
                yAxis: {
                    title: {
                        text: 'Visitors'
                    }
                },
                credits: {
                    enabled: false
                }
            };

            fn(newVsReturningConfig);
        };

        this.visitorLocations = function (locationData, highchartsData) {

            if ($("#visitor_locations").length) {
                var chart1 = new Highcharts.Map({
                    chart: {
                        renderTo: 'visitor_locations',
                        height: 360
                    },

                    title: {
                        text: ''
                    },

                    exporting: {
                        enabled: false
                    },

                    legend: {
                        enabled: false
                    },

                    mapNavigation: {
                        buttonOptions: {
                            align: 'right',
                            verticalAlign: 'bottom'
                        },
                        enableButtons: true,
                        //enableDoubleClickZoomTo: true,
                        enableDoubleClickZoom: true,
                        enableTouchZoom: false
                    },

                    colorAxis: {
                        min: 1,
                        type: 'logarithmic',
                        minColor: '#4cb0ca',
                        maxColor: '#224f5b'
                    },

                    series: [
                        {
                            animation: {
                                duration: 1000
                            },
                            data: locationData,
                            mapData: highchartsData,
                            joinBy: ['postal-code', 'code'],
                            dataLabels: {
                                enabled: false
                            },
                            name: '# of Visitors',
                            tooltip: {
                                pointFormat: '{point.code}: {point.value}'
                            }
                        }
                    ],
                    credits: {
                        enabled: false
                    }
                });
            }
        };

    }]);
}(angular));

/*global app, $$, Keen*/
/*jslint unparam: true*/
'use strict';
(function (angular) {
  app.service('ChartCommerceService', ['PaymentService', 'KeenService', function (PaymentService, KeenService) {

    //local variables
    var customers = [];
    var totalCustomers = [];

    this.calculatePercentage = function (oldval, newval) {
      var result;
      oldval = parseInt(oldval, 10);
      newval = parseInt(newval, 10);
      if (oldval === 0 && newval === 0) {
        return 0;
      }
      if (newval < oldval) {
        result = ((oldval - newval) / oldval) * 100;
      } else {
        result = ((newval - oldval) / newval) * 100;
      }

      if (newval === oldval) {
        result = 100;
      }
      return Math.round(result * 100) / 100;
    };

    this.queryReports = function () {
      var queryData = {};
      // ======================================
      // Monthly Recurring Revenue Metric
      // Monthly Recurring = Avg Revenue Per Customer * # of Customers
      // ======================================

      queryData.monthlyRecurringRevenue = new Keen.Query("sum", {
        eventCollection: "Stripe_Events",
        targetProperty: 'data.object.total',
        timeframe: 'last_30_days',
        filters: [{
          "property_name": "data.object.subscription",
          "operator": "exists",
          "property_value": true
        }, {
          "property_name": "type",
          "operator": "eq",
          "property_value": "invoice.payment_succeeded"
        }, {
          "property_name": "accountId",
          "operator": "eq",
          "property_value": $$.server.accountId
        }]
      });

      queryData.activeSubscriptions = new Keen.Query("count", {
        eventCollection: "Stripe_Events",
        timeframe: "last_30_days",
        filters: [{
          "property_name": "type",
          "operator": "eq",
          "property_value": "customer.subscription.created"
        }, {
          "property_name": "data.object.status",
          "operator": "eq",
          "property_value": "active"
        }, {
          "property_name": "accountId",
          "operator": "eq",
          "property_value": $$.server.accountId
        }]
      });

      queryData.canceledSubscriptions = new Keen.Query("count", {
        eventCollection: "Stripe_Events",
        timeframe: "last_30_days",
        interval: 'daily',
        filters: [{
          "property_name": "type",
          "operator": "eq",
          "property_value": "customer.subscription.deleted"
        }, {
          "property_name": "accountId",
          "operator": "eq",
          "property_value": $$.server.accountId
        }]
      });

      queryData.canceledSubscriptionsPrevious = new Keen.Query("count", {
        eventCollection: "Stripe_Events",
        timeframe: "previous_30_days",
        interval: 'daily',
        filters: [{
          "property_name": "type",
          "operator": "eq",
          "property_value": "customer.subscription.deleted"
        }, {
          "property_name": "accountId",
          "operator": "eq",
          "property_value": $$.server.accountId
        }]
      });

      // =========================================
      // Create Unique Paying Customers Line Chart
      // =========================================

      queryData.payingCustomersSeries = new Keen.Query('count_unique', {
        eventCollection: 'Stripe_Events',
        timeframe: 'last_30_days',
        targetProperty: 'data.object.customer',
        interval: 'daily',
        filters: [{
          'property_name': 'type',
          'operator': 'eq',
          'property_value': 'invoice.payment_succeeded'
        }, {
          'property_name': 'data.object.total',
          'operator': 'gt',
          'property_value': 0
        }, {
          "property_name": "accountId",
          "operator": "eq",
          "property_value": $$.server.accountId
        }]
      });

      queryData.previousPayingCustomersSeries = new Keen.Query('count_unique', {
        eventCollection: 'Stripe_Events',
        timeframe: 'previous_30_days',
        targetProperty: 'data.object.customer',
        interval: 'daily',
        filters: [{
          'property_name': 'type',
          'operator': 'eq',
          'property_value': 'invoice.payment_succeeded'
        }, {
          'property_name': 'data.object.total',
          'operator': 'gt',
          'property_value': 0
        }, {
          "property_name": "accountId",
          "operator": "eq",
          "property_value": $$.server.accountId
        }]
      });

      // ======================================
      // Fees Metric
      // ======================================

      queryData.feesThisMonth = new Keen.Query("sum", {
        eventCollection: "Stripe_Events",
        targetProperty: "data.object.fee",
        timeframe: 'last_30_days',
        filters: [{
          "property_name": "accountId",
          "operator": "eq",
          "property_value": $$.server.accountId
        }],
      });

      queryData.feesPreviousMonth = new Keen.Query("sum", {
        eventCollection: "Stripe_Events",
        targetProperty: "data.object.fee",
        timeframe: 'previous_30_days',
        filters: [{
          "property_name": "accountId",
          "operator": "eq",
          "property_value": $$.server.accountId
        }],
      });

      // ======================================
      // Net Revenue Metric
      // Net revenue = gross revenue – damages/coupons/returns
      // ======================================

      queryData.netRevenueThisMonth = new Keen.Query("sum", {
        eventCollection: "Stripe_Events",
        targetProperty: 'data.object.amount',
        timeframe: 'last_30_days',
        filters: [{
          'property_name': 'type',
          'operator': 'eq',
          'property_value': 'charge.succeeded'
        }, {
          "property_name": "accountId",
          "operator": "eq",
          "property_value": $$.server.accountId
        }]
      });

      queryData.netRevenuePreviousMonth = new Keen.Query("sum", {
        eventCollection: "Stripe_Events",
        targetProperty: 'data.object.amount',
        timeframe: 'previous_month',
        filters: [{
          'property_name': 'type',
          'operator': 'eq',
          'property_value': 'charge.succeeded'
        }, {
          "property_name": "accountId",
          "operator": "eq",
          "property_value": $$.server.accountId
        }]
      });

      return queryData;
    };

    this.runReports = function (fn) {
      var self = this;

      var reportData = {};

      PaymentService.getCustomers(function (data) {
        self.customers = data;

        // ======================================
        // Total Customer Metric
        // ======================================

        self.totalCustomers = data.length;

        KeenService.keenClient(function (client) {
          var queryData = self.queryReports();

          client.run([
            queryData.monthlyRecurringRevenue,
            queryData.activeSubscriptions,
            queryData.canceledSubscriptions,
            queryData.payingCustomersSeries,
            queryData.feesThisMonth,
            queryData.feesPreviousMonth,
            queryData.netRevenueThisMonth,
            queryData.netRevenuePreviousMonth,
            queryData.canceledSubscriptionsPrevious,
            queryData.previousPayingCustomersSeries
          ], function () {
            var totalRevenue = this.data[0].result;
            var numOfCustomers = totalCustomers;
            var _avgRevenue = totalRevenue / numOfCustomers;
            var result = _avgRevenue * numOfCustomers;
            var monthlyRecurringRevenue = result / 100;

            // ======================================
            // Average Revenue Per Customer Metric
            // ======================================

            var avgRevenue = _avgRevenue;

            // ======================================
            // Annual Run Rate Metric
            // MRR * 12
            // ======================================

            var annualRunRate = monthlyRecurringRevenue * 12;

            // ======================================
            // Average monthly Recurring Revenue Per User (ARPU)
            // ARPU = MRR / Active Subscriptions.
            // ======================================

            var activeSubscriptions = this.data[1].result;

            var arpu = monthlyRecurringRevenue / activeSubscriptions;

            // ======================================
            // User Churn
            // Churn = canceled subscriptions / (canceled subscriptions + active subscriptions)
            // ======================================

            var cancelSubscriptionData = [];
            var totalCanceledSubscriptions = 0;
            _.each(this.data[2].result, function (dataResult) {
              cancelSubscriptionData.push(dataResult.value);
              totalCanceledSubscriptions += parseInt(dataResult.value, 10);
            });

            var cancelStart = this.data[2].result[0].timeframe.start;

            //previous canceled subscriptions
            var cancelPreviousSubscriptionData = [];
            var totalPreviousCanceledSubscriptions = 0;
            _.each(this.data[7].result, function (dataResult) {
              cancelPreviousSubscriptionData.push(dataResult.value);
              totalPreviousCanceledSubscriptions += parseInt(dataResult.value, 10);
            });

            var cancelSubscriptionPercent = self.calculatePercentage(totalCanceledSubscriptions, totalPreviousCanceledSubscriptions);

            //TODO: get average of monthly subscription price instead of $97
            var potentialMRRLoss = cancelSubscriptionData.length * 97;

            var userChurnCalc = this.data[2].result / (this.data[2].result + this.data[1].result) * 100;
            var userChurn = userChurnCalc.toFixed(1) * -1;

            // ======================================
            // Lifetime Value (LTV)
            // LTV =  ARPU / Churn
            // ======================================
            var lifetimeValue = arpu / userChurn;


            var totalCustomerData = [];
            var totalPayingCustomers = 0;
            _.each(this.data[3].result, function (dataResult) {
              totalCustomerData.push(dataResult.value);
              totalPayingCustomers += dataResult.value;
            });

            //previous customers
            var previousTotalCustomerData = [];
            var previousTotalPayingCustomers = 0;
            _.each(this.data[8].result, function (dataResult) {
              previousTotalCustomerData.push(dataResult.value);
              previousTotalPayingCustomers += dataResult.value;
            });

            var payingCustomerPercent = self.calculatePercentage(totalPayingCustomers, previousTotalPayingCustomers);

            var customerStart = this.data[3].result[0].timeframe.start;

            var totalFees = this.data[4].result / 100;
            var totalFeesPrevious = this.data[5].result / 100;
            var calculatedTotalFees = ((totalFees - totalFeesPrevious) / totalFees) * 100;
            var format = Math.round(calculatedTotalFees * 100) / 100;
            if (format === 0) {
              format = null;
            }
            var totalFeesPercent = format;

            var netRevenue = this.data[6].result;
            var totalRevenuePrevious = this.data[7].result;
            var calculatedTotalRevenue = ((netRevenue - totalRevenuePrevious) / netRevenue) * 100;
            var totalRevenuePercent = Math.round(calculatedTotalRevenue * 100) / 100;
            //TODO: Subtract damages/coupons/returns

            //put all data is reportData
            reportData.monthlyRecurringRevenue = monthlyRecurringRevenue;
            reportData.avgRevenue = avgRevenue;
            reportData.annualRunRate = annualRunRate;
            reportData.arpu = arpu;
            reportData.totalCanceledSubscriptions = totalCanceledSubscriptions;
            reportData.cancelSubscriptionData = cancelSubscriptionData;
            reportData.cancelSubscriptionPercent = cancelSubscriptionPercent;
            reportData.cancelStart = cancelStart;
            reportData.potentialMRRLoss = potentialMRRLoss;
            reportData.userChurn = userChurn;
            reportData.lifetimeValue = lifetimeValue;
            reportData.totalRevenue = totalRevenue / 100;
            reportData.totalFees = totalFees;
            reportData.totalFeesPrevious = totalFeesPrevious;
            reportData.totalFeesPercent = totalFeesPercent;
            reportData.netRevenue = netRevenue / 100;
            reportData.totalRevenuePrevious = totalRevenuePrevious / 100;
            reportData.totalRevenuePercent = totalRevenuePercent;
            reportData.totalCustomerData = totalCustomerData;
            reportData.totalPayingCustomers = totalPayingCustomers;
            reportData.totalPayingCustomerPercent = payingCustomerPercent;
            reportData.customerStart = customerStart;

            fn(reportData);

          });
        });
      }); //end PaymentService.getCustomers

      // // ======================================
      // // Other Revenue Metric
      // // ======================================

      // var otherRevenue = new Keen.Query("sum", {
      //     eventCollection: "Stripe_Events",
      //     targetProperty: 'data.object.total',
      //     timeframe: 'this_day',
      //     filters: [{
      //         "property_name": "data.object.subscription",
      //         "operator": "exists",
      //         "property_value": false
      //     }, {
      //         "property_name": "type",
      //         "operator": "eq",
      //         "property_value": "invoice.payment_succeeded"
      //     }]
      // });
      // client.run(otherRevenue, function(response) {
      //     $scope.totalRevenue = this.data.result;
      // });

      // // ======================================
      // // Upgrades Metric
      // // ======================================

      // var otherRevenueQuery = new Keen.Query("extraction", {
      //     eventCollection: "Stripe_Events",
      //     timeframe: 'this_day',
      //     filters: [{
      //         "property_name": "type",
      //         "operator": "eq",
      //         "property_value": "customer.subscription.updated"
      //     }, {
      //         "property_name": "data.object.customer",
      //         "operator": "eq",
      //         "property_value": "cus_5Fcng8oztqf8aD"
      //     }]
      // });
      // client.run(otherRevenueQuery, function(response) {

      //     var updatedSubscriptions = [];

      //     var result = this.data.result;

      //     console.log('result >>> ', result);

      //     for (var x in result) {
      //         //result[x].data.previous_attributes.plan.amount >= 
      //         if (result[x].data.object.plan.amount) {
      //             updatedSubscriptions.push(result[x]);
      //         }
      //     }

      //     var result = updatedSubscriptions.length;

      //     var data = {
      //         result: result
      //     };

      //     window.chart = new Keen.Visualization(data, document.getElementById('upgrades'), {
      //         chartType: "metric",
      //         title: "Upgrades",
      //         width: 345,
      //         colors: ["#49c5b1"]
      //     });
      // });
      //fn(reportData);
    };

    this.queryNetRevenueReport = function () {
      var queryData = {};

      // ======================================
      // Net Revenue Metric
      // Net revenue = gross revenue – damages/coupons/returns
      // ======================================

      queryData.netRevenueThisMonth = new Keen.Query("sum", {
        eventCollection: "Stripe_Events",
        targetProperty: 'data.object.amount',
        timeframe: 'this_month',
        interval: "daily",
        filters: [{
          'property_name': 'type',
          'operator': 'eq',
          'property_value': 'charge.succeeded'
        }, {
          "property_name": "accountId",
          "operator": "eq",
          "property_value": $$.server.accountId
        }]
      });

      queryData.netRevenueCharges = new Keen.Query("count", {
        eventCollection: "Stripe_Events",
        timeframe: 'this_month',
        filters: [{
          'property_name': 'type',
          'operator': 'eq',
          'property_value': 'charge.succeeded'
        }, {
          "property_name": "accountId",
          "operator": "eq",
          "property_value": $$.server.accountId
        }]
      });

      queryData.lastCharge = new Keen.Query("extraction", {
        eventCollection: "Stripe_Events",
        latest: 1,
        filters: [{
          'property_name': 'type',
          'operator': 'eq',
          'property_value': 'charge.succeeded'
        }, {
          "property_name": "accountId",
          "operator": "eq",
          "property_value": $$.server.accountId
        }]
      });

      return queryData;
    };

    this.runNetRevenuReport = function (fn) {
      var self = this;

      PaymentService.getCustomers(function (data) {
        self.customers = data;

        // ======================================
        // Total Customer Metric
        // ======================================

        self.totalCustomers = data.length;

        KeenService.keenClient(function (client) {
          var queryData = self.queryNetRevenueReport();

          client.run([
            queryData.netRevenueThisMonth,
            queryData.netRevenueCharges,
            queryData.lastCharge
          ], function (response) {
            fn(response);
          });
        });
      }); //end PaymentService.getCustomers

      // // ======================================
      // // Other Revenue Metric
      // // ======================================

      // var otherRevenue = new Keen.Query("sum", {
      //     eventCollection: "Stripe_Events",
      //     targetProperty: 'data.object.total',
      //     timeframe: 'this_day',
      //     filters: [{
      //         "property_name": "data.object.subscription",
      //         "operator": "exists",
      //         "property_value": false
      //     }, {
      //         "property_name": "type",
      //         "operator": "eq",
      //         "property_value": "invoice.payment_succeeded"
      //     }]
      // });
      // client.run(otherRevenue, function(response) {
      //     $scope.totalRevenue = this.data.result;
      // });

      // // ======================================
      // // Upgrades Metric
      // // ======================================

      // var otherRevenueQuery = new Keen.Query("extraction", {
      //     eventCollection: "Stripe_Events",
      //     timeframe: 'this_day',
      //     filters: [{
      //         "property_name": "type",
      //         "operator": "eq",
      //         "property_value": "customer.subscription.updated"
      //     }, {
      //         "property_name": "data.object.customer",
      //         "operator": "eq",
      //         "property_value": "cus_5Fcng8oztqf8aD"
      //     }]
      // });
      // client.run(otherRevenueQuery, function(response) {

      //     var updatedSubscriptions = [];

      //     var result = this.data.result;

      //     console.log('result >>> ', result);

      //     for (var x in result) {
      //         //result[x].data.previous_attributes.plan.amount >= 
      //         if (result[x].data.object.plan.amount) {
      //             updatedSubscriptions.push(result[x]);
      //         }
      //     }

      //     var result = updatedSubscriptions.length;

      //     var data = {
      //         result: result
      //     };

      //     window.chart = new Keen.Visualization(data, document.getElementById('upgrades'), {
      //         chartType: "metric",
      //         title: "Upgrades",
      //         width: 345,
      //         colors: ["#49c5b1"]
      //     });
      // });
      //fn(reportData);
    };

    this.customerOverview = function (totalCustomerData, customerStart, cancelSubscriptionData, cancelstart, fn) {
      var customerOverviewConfig = {
        options: {
          chart: {
            spacing: [25, 25, 25, 25]
          },
          colors: ['#41b0c7', '#fcb252', '#309cb2', '#f8cc49'],
          title: {
            text: ''
          },
          tooltip: {
            pointFormat: '<b>{point.y}</b>'
          },
          exporting: {
            enabled: false
          }
        },
        xAxis: {
          type: 'datetime',
          labels: {
            format: "{value:%b %d}"
          },
          minRange: 30 * 24 * 3600000 // fourteen days
        },
        yAxis: {
          min: 0,
          max: Math.max.apply(Math, totalCustomerData) + 100,
          title: {
            text: ''
          }
        },
        series: [{
          type: 'area',
          name: 'Customers',
          pointInterval: 24 * 3600 * 1000,
          pointStart: Date.parse(customerStart),
          data: totalCustomerData
        }, {
          type: 'area',
          name: 'Cancellations',
          pointInterval: 24 * 3600 * 1000,
          pointStart: Date.parse(cancelstart),
          data: cancelSubscriptionData
        }],
        credits: {
          enabled: false
        }
      };

      fn(customerOverviewConfig);
    };

  }]);
}(angular));

'use strict';
/*global app, Keen, $$*/
/*jslint unparam: true*/
(function (angular) {
  app.service('ChartEmailService', ['KeenService', '$q', function (KeenService, $q) {

    this.queryMandrillData = function (emails, fn) {
      var self = this;
      var deferred = $q.defer();
      // ======================================
      // Emails Sent
      // # of emails sent from this account grouped by emailId
      // ======================================
      KeenService.keenClient(function (client) {
        var queryData = {};

        queryData.emailsSent = new Keen.Query("count", {
          eventCollection: "mandrill_send",
          targetProperty: 'msg.metadata.emailId',
          groupBy: 'msg.metadata.emailId',
          filters: [{
            "property_name": 'msg.metadata.accountId',
            "operator": "eq",
            "property_value": $$.server.accountId
          }]
        });

        queryData.emailsOpen = new Keen.Query("count_unique", {
          eventCollection: "mandrill_open",
          targetProperty: '_id',
          groupBy: 'msg.metadata.emailId',
          filters: [{
            "property_name": 'msg.metadata.accountId',
            "operator": "eq",
            "property_value": $$.server.accountId
          }]
        });

        queryData.emailsClick = new Keen.Query("count_unique", {
          eventCollection: "mandrill_click",
          targetProperty: '_id',
          groupBy: 'msg.metadata.emailId',
          filters: [{
            "property_name": 'msg.metadata.accountId',
            "operator": "eq",
            "property_value": $$.server.accountId
          }]
        });

        client.run([
          queryData.emailsSent,
          queryData.emailsOpen,
          queryData.emailsClick
        ], function (response) {
          var _response = {
            emailsSent: response[0].result,
            emailsOpen: response[1].result,
            emailsClick: response[2].result
          };
          var formatted = self.formatEmails(emails, _response);
          deferred.resolve(fn(formatted));
        });
      });

      return deferred.promise;

    };

    this.formatEmails = function (emails, data) {
      _.each(emails, function (_email) {
        var sent, open, click;

        var matchingEmailSent = _.find(data.emailsSent, function (_result) {
          return _result['msg.metadata.emailId'] === _email._id;
        });

        if (matchingEmailSent) {
          sent = matchingEmailSent.result;
        }

        var matchingEmailOpen = _.find(data.emailsOpen, function (_result) {
          return _result['msg.metadata.emailId'] === _email._id;
        });

        if (matchingEmailOpen) {
          open = matchingEmailOpen.result;
        }

        var matchingEmailClick = _.find(data.emailsClick, function (_result) {
          return _result['msg.metadata.emailId'] === _email._id;
        });

        if (matchingEmailClick) {
          click = matchingEmailClick.result;
        }

        if (sent && open) {
          _email.openRate = Math.round((open / sent) * 100) + '%';
          _email.sent = sent;
        }

        if (sent && !open) {
          _email.openRate = '0%';
          _email.sent = sent;
        }

        if (click && sent) {
          _email.clickRate = Math.round((click / sent) * 100) + '%';
          _email.clicks = click;
        }

        if (sent && !click) {
          _email.clickRate = '0%';
          _email.clicks = click || 0;
        }

      });

      return emails;
    };


  }]);
}(angular));

'use strict';
/*global app, Keen, $$*/
/*jslint unparam: true*/
(function (angular) {
  app.service('CommonService', ['$http', function ($http) {

    this.generateUniqueAlphaNumericShort = function () {
      return this.generateUniqueAlphaNumeric();
    };

    this.generateUniqueAlphaNumeric = function (length, lettersOnly, lowerOnly) {
      if (!angular.isDefined(length) || length === null || length === 0) {
        length = 10;
      }
      var val;

      if (length <= 10 && lettersOnly !== true) {
        if (length <= 10) {
          val = ((new Date().getTime() * parseInt(Math.random() + 1, 10) * 1000)) + new Date().getTime().toString(36);
          if (val == NaN || val === undefined) {
            return this.generateUniqueAlphaNumeric();
          }
        }

        return val.substring(0, length);
      }

      //97 - "a", 122 - "z"
      var integers = {
        min: 49,
        max: 57
      };
      var upper = {
        min: 65,
        max: 90
      };
      var lower = {
        min: 97,
        max: 122
      };

      var range = [],
        i;
      for (i = lower.min; i <= lower.max; i++) {
        range.push(String.fromCharCode(i));
      }
      if (lowerOnly !== true) {
        for (i = upper.min; i <= upper.max; i++) {
          range.push(String.fromCharCode(i));
        }
      }
      //Lets weight the numbers, else we barely get any
      if (lettersOnly !== true) {
        var weight = range.length / 10 / 2;
        var j = 0;
        for (j; j < weight; j++) {
          for (i = integers.min; i <= integers.max; i++) {
            range.push(String.fromCharCode(i));
          }
        }
      }

      var str = "",
        rangeLength = range.length,
        val2 = null;
      while (str.length < length) {
        val2 = range[Math.round(Math.random() * rangeLength)];
        if (val2 === null) {
          continue;
        }
        str += val2;
      }
      return str;
    };

  }]);
}(angular));

'use strict';
/*global app, Keen, $$*/
/*jslint unparam: true*/
(function (angular) {
  app.service('ContactService', ['$http', '$rootScope', '$cacheFactory', 'ImportContactService', 'contactConstant', 'userConstant', 'formValidations', '$q', function ($http, $rootScope, $cacheFactory, ImportContactService, contactConstant, userConstant, formValidations, $q) {
    var baseUrl = '/api/1.0/';

    this.getCache = function () {
      var cache = $cacheFactory.get('ContactService');
      if (cache) {
        return cache;
      }
      return $cacheFactory('ContactService');
    };

    this.getContacts = function (fn) {
      var apiUrl = baseUrl + ['contact'].join('/');
      return $http.get(apiUrl)
        .success(function (data) {
          fn(data);
        });
    };

    this.getContactsShortForm = function (fields, fn) {
      var apiUrl = baseUrl + ['contact', 'shortform'].join('/');
      var data = this.getCache().get('contacts');
      var cache = this.getCache();

      if (data) {
        console.info('Contacts call hit cache');
        fn(data);
      } else {
        $http({
          url: apiUrl,
          method: 'GET',
          params: {
            fields: fields
          }
        }).success(function (data) {
          cache.put('contacts', data);
          fn(data);
        });
      }
    };

    this.getContact = function (id, fn) {
      var apiUrl = baseUrl + ['contact', id].join('/');
      $http.get(apiUrl)
        .success(function (data) {
          fn(data);
        })
        .error(function (err) {
            console.warn('Error while fetching data', err);
            fn(null, err);
        });
    };

    this.deleteContact = function (id, fn) {
      var contacts = this.getCache().get('contacts');
      if (contacts) {
        contacts.forEach(function (value, index) {
          if (value._id === id) {
            contacts.splice(index, 1);
          }
        });
        this.getCache().put('contacts', contacts);
      }

      var apiUrl = baseUrl + ['contact', id].join('/');
      $http.delete(apiUrl)
        .success(function (data) {
          fn(data);
        });
    };

    this.deleteContactPromise = function (id) {
      var contacts = this.getCache().get('contacts');
      if (contacts) {
        contacts.forEach(function (value, index) {
          if (value._id === id) {
            contacts.splice(index, 1);
          }
        });
        this.getCache().put('contacts', contacts);
      }

      var apiUrl = baseUrl + ['contact', id].join('/');
      return $http.delete(apiUrl);
    };

    this.postContact = function (cache, contact, fn) {
      var contacts = cache.get('contacts');

      var apiUrl = baseUrl + ['contact'].join('/');
      $http.post(apiUrl, contact)
        .success(function (data) {
          if (contacts) {
            contacts.push(data);
            cache.put('contacts', contacts);
          }
          fn(data);
        });
    };

    this.putContact = function (cache, contact, fn) {
      var contacts = cache.get('contacts');

      var apiUrl = baseUrl + ['contact'].join('/');
      $http.put(apiUrl, contact)
        .success(function (data) {
          if (contacts) {
            contacts.forEach(function (value, index) {
              if (value._id === contact._id) {
                contacts[index] = contact;
              }
            });
            cache.put('contacts', contacts);
          }
          fn(data);
        });
    };

    this.putContactPromise = function (contact) {
      var self = this;
      var cache = self.getCache();
      var deferred = $q.defer();
      var contacts = cache.get('contacts');
      var apiUrl = baseUrl + ['contact'].join('/');

      $http.put(apiUrl, contact)
        .success(function (data) {
          if (contacts) {
            contacts.forEach(function (value, index) {
              if (value._id === contact._id) {
                contacts[index] = contact;
              }
            });
            cache.put('contacts', contacts);
          }
          deferred.resolve(data);
        })
        .error(function (data) {
          deferred.reject(data);
        });

      return deferred.promise;
    };

    this.saveContact = function (contact, fn) {
      var apiFn = null;
      if (contact._id) {
        apiFn = this.putContact;
      } else {
        apiFn = this.postContact;
      }
      apiFn(this.getCache(), contact, fn);
    };

    var contactUploading = 0;
    var contactArr = [];

    this.resetCount = function(){
      contactUploading = 0;
    }

    this.importCsvContacts = function (contacts, fn) {
      var self = this;
      var passedFn;
      if (contacts) {
        contactArr = contacts;
      }

      if (fn) {
        self.passedFn = fn;
      }

      self.postContact(self.getCache(), contactArr[contactUploading], function () {
        if (contactUploading < contactArr.length - 1) {
          $rootScope.$broadcast('importingContacts', {
            current: contactUploading + 1,
            total: contactArr.length
          });
          contactUploading++;
          self.importCsvContacts();
        }
        if (contactUploading === contactArr.length - 1) {
          $rootScope.$broadcast('importingContacts', {
            current: contactUploading + 1,
            total: contactArr.length
          });
        }
      });
    };

    this.getGeoSearchAddress = function (addressStr, fn) {
      var apiUrl = baseUrl + ['geo', 'search', 'address', addressStr].join('/');
      $http.get(apiUrl)
        .success(function (data) {
          fn(data);
        });
    };

    this.postFullContact = function (contactId, fn) {
      var apiUrl = baseUrl + ['contact', contactId, 'fullcontact'].join('/');
      $http.post(apiUrl, {
        _id: contactId
      }).success(function (data) {
        fn(data);
      });
    };

    this.contactTags = function (contact) {
      var contactTags = contactConstant.contact_tags.dp;
      contactTags = contactTags.concat(userConstant.contact_types.dp);
      var tags = [];

      if (contact.tags) {
        tags = _.map(contact.tags, function(tag) {
          var type = _.findWhere(contactTags, {data: tag});
          return type ? type.label : tag;
        });
      }
      return tags.join(', ');
    };

    this.checkBestEmail = function (contact) {
      if (contact && contact.details && contact.details.length > 0) {
        //see if we have a google contact, that's the best source of email
        var details = _.findWhere(contact.details, {
          type: userConstant.social_types.GOOGLE
        });
        if (details && details.emails.length > 0 && details.emails[0].email) {
          contact.email = details.emails[0].email;
          return contact.email;
        }
        var singleDetail = contact.details[0];
        if (singleDetail && singleDetail.emails && singleDetail.emails.length > 0 && singleDetail.emails[0].email) {
          contact.email = singleDetail.emails[0].email;
          return contact.email;
        }
        return false;
      }
    };

    this.checkContactBestEmail = function (contact) {
      if (contact && contact.details && contact.details.length > 0) {
        //see if we have a google contact, that's the best source of email
        var details = _.findWhere(contact.details, {
          type: userConstant.social_types.GOOGLE
        });
        if (details && details.emails.length > 0 && details.emails[0].email) {
          //contact.email = details.emails[0].email;
          return details.emails[0].email;
        }
        var singleDetail = contact.details[0];
        if (singleDetail && singleDetail.emails && singleDetail.emails.length > 0 && singleDetail.emails[0].email) {
          //contact.email = singleDetail.emails[0].email;
          return singleDetail.emails[0].email;
        }
        return false;
      }
    };

    this.checkFacebookId = function (contact) {
      if (contact && contact.details && contact.details.length > 0) {
        var details = _.findWhere(contact.details, {
          type: userConstant.social_types.FACEBOOK
        });
        if (details && details !== null) {
          contact.facebookId = details.socialId;
          return true;
        }
        return false;
      }
    };

    this.checkTwitterId = function (contact) {
      if (contact && contact.details && contact.details.length > 0) {
        var details = _.findWhere(contact.details, {
          type: userConstant.social_types.TWITTER
        });
        if (details) {
          contact.twitterId = details.socialId;
          return true;
        }
        return false;
      }
    };

    this.checkLinkedInId = function (contact) {
      if (contact && contact.details && contact.details.length > 0) {
        var details = _.findWhere(contact.details, {
          type: userConstant.social_types.LINKEDIN
        });
        if (details) {
          if (details.websites !== null && details.websites.length > 0) {
            var _value = _.find(details.websites, function (num) {
              return num !== null;
            });
            if (_value) {
              contact.linkedInUrl = _value;
              return true;
            }
          }
          contact.linkedInId = details.socialId;
          return true;
        }
        return false;
      }
    };

    this.checkGoogleId = function (contact) {
      if (contact.details && contact.details.length > 0) {
        var details = _.findWhere(contact.details, {
          type: userConstant.social_types.GOOGLE
        });
        if (details) {
          if (details.websites && details.websites.length > 0) {
            var _value = _.find(details.websites, function (num) {
              return num !== null;
            });
            if (_value) {
              contact.googleUrl = _value;
              return true;
            }
          }
          contact.googleId = details.socialId;
          return true;
        }
        return false;
      }
    };


    this.checkAddress = function (contact) {
      var _address = null;
      if (contact && contact.details && contact.details.length > 0) {
        if (contact.details && contact.details[0].addresses && contact.details[0].addresses.length > 0) {
          _address = contact.details[0].addresses[0];
          var address_str = "";
          if (_address.lat && _address.lat !== '' && _address.lon !== '') {
            address_str = _address.lat.concat(",", _address.lon);
          }
          contact.address = encodeURIComponent(address_str);
          return contact.address;
        }
      }
      return false;
    };

    this.getContactActivities = function (contactId, fn) {
      var apiUrl = baseUrl + ['contact', contactId, 'activity'].join('/');
      $http.get(apiUrl)
        .success(function (data) {
          fn(data);
        });
    };
    this.getContactUnreadActivities = function (contactId, fn) {
      var apiUrl = baseUrl + ['contact', contactId, 'activity', 'unread'].join('/');
      $http.get(apiUrl)
        .success(function (data) {
          fn(data);
        });
    };

    this.getAllContactActivities = function (fn) {
      var apiUrl = baseUrl + ['contact', 'activities'].join('/');
      $http.get(apiUrl)
        .success(function (data) {
          fn(data);
        });
    };


    this.getAllContactActivitiesWithLimit = function (queryParams, fn) {
      var apiUrl = baseUrl + ['contact', 'activities'].join('/');
      $http({
        url: apiUrl,
        method: 'GET',
        params: queryParams
      }).success(function (data) {
        fn(data);
      });
    };
    this.getAllContactUnreadActivities = function (fn) {
      var apiUrl = baseUrl + ['contact', 'activities', 'unread'].join('/');
      $http.get(apiUrl)
        .success(function (data) {
          fn(data);
        });
    };

    this.postContactActivity = function (activity, fn) {
      var apiUrl = baseUrl + ['contact', 'activity'].join('/');
      $http.post(apiUrl, activity)
        .success(function (data) {
          fn(data);
        });
    };

    this.getActivityTypes = function (fn) {
      var activityTypes = contactConstant.contact_activity_types.dp;
      fn(activityTypes);
    };


    this.getContactTags = function (fn) {
      var contactTags = contactConstant.contact_tags.dp;
      fn(contactTags);
    };


    this.getAllContactTags = function (contacts, fn) {
      var contactTags = contactConstant.contact_tags.dp;
        var extraContactTags = [];
        _.each(contacts, function (contact) {
          if (contact.tags) {
            _.each(contact.tags, function (tag) {
              var type = _.find(contactTags, function (type) {
                return type.data === tag;
              });
              if (!type) {
                extraContactTags.push({
                  label : tag,
                  data : tag
                })
              }
            });
          }
        })
      contactTags = _.uniq(contactTags.concat(extraContactTags), function(c) { return c.label; })
      fn(contactTags);
    };

    this.tagToContact = function (value, fn) {
      var regexTag = formValidations.contactTags;
      var isValid = regexTag.test(value);
      if(isValid){
        var item = {
          label: value,
          data: value
        };
      }
      return item;
    };


    //region IMPORT

    this.importFacebookFriends = function (fn) {
      ImportContactService.importContacts(userConstant.social_types.FACEBOOK, fn, function (data, success) {
        fn(data, success);
      });
    };


    this.importLinkedInConnections = function (fn) {
      ImportContactService.importContacts(userConstant.social_types.LINKEDIN, fn, function (data, success) {
        fn(data, success);
      });
    };


    this.importGmailContacts = function (fn) {
      ImportContactService.importContacts(userConstant.social_types.GOOGLE, fn, function (data, success) {
        fn(data, success);
      });
    };

    this.createContact = function (contact) {
      var apiUrl = baseUrl + ['contact'].join('/');
      return $http.post(apiUrl, contact);
    };

    this.checkDuplicateEmail = function (email, check, fn) {
      if (check && email) {
        var apiUrl = baseUrl + ['contact', 'search', 'email', email].join('/');
        $http.get(apiUrl)
          .success(function (data) {
            fn(data);
          });
      } else {
        fn(null);
      }
    };

    this.exportCsvContacts = function (ids) {
      var apiUrl = baseUrl + ['contact', 'export', 'csv'].join('/');
      if (ids) {
        var params = _.map(ids, function (x) {return ('ids=' + x);});
        var apiUrl = apiUrl + '?' + params.join('&');
      }
      window.location = apiUrl;
    };

  }]);
}(angular));

'use strict';
/*global app, Keen, $$, google*/
/*jslint unparam: true*/
(function (angular) {
  app.service('GeocodeService', function ($http) {
    var baseUrl = '/api/1.0/';

    this.stringifyAddress = function (address, breakLine) {
      if (address && (address.address || address.address2 || address.city || address.state || address.zip)) {
          //var address = scope.htmlToPlaintext(address);
          var separator = ' ';
          var _topline = _.filter([address.address, address.address2], function (str) {
            return str !== "";
          }).join(", ");
          var _bottomline = _.filter([address.city, address.state, address.zip], function (str) {
            return str !== "";
          }).join(", ");
          if (_topline) {
            if(breakLine)
              separator = ' <br> '
            return _topline + separator + _bottomline;
          }
          return _bottomline;
        }
    };

    this.validateAddress = function (location, locationObj, fn) {
      var geocoder = new google.maps.Geocoder();
      var myLatLng = null;
      if(locationObj)
        myLatLng = new google.maps.LatLng(locationObj.geometry.location.lat(), locationObj.geometry.location.lng());
      else
        myLatLng = new google.maps.LatLng(location.lat, location.lon);

      var address = locationObj ? locationObj.formatted_address : this.stringifyAddress(location);
      
      if (!(location.city || location.state || location.zip)) {
        fn(false, null);
      } else {
        geocoder.geocode({
          latLng: myLatLng,
          'address': address
        }, function (results, status) {
          if (status === google.maps.GeocoderStatus.OK) {
            if(results.length > 1 && address)
            {
              results = _.where(results, {
                formatted_address: address
              });
            }
            fn(true, results);
          } else {
            fn(false, null);
          }
        });
      }
    };

    this.getGeoSearchAddress = function (addressStr, fn) {
      var apiUrl = baseUrl + ['geo', 'search', 'address', addressStr].join('/');
      $http.get(apiUrl)
        .success(function (data) {
          fn(data);
        });
    };

  });
}(angular));

'use strict';
/*global app, Keen, $$*/

(function (angular) {
  app.service('ImportContactService', function ($http) {
    var baseUrl = '/api/1.0/';
    this.importContacts = function (socialType, fn) {
      var api = "social/";
      switch (socialType) {
        case $$.constants.social.types.FACEBOOK:
          api += "facebook/";
          break;
        case $$.constants.social.types.GOOGLE:
          api += "google/";
          break;
        case $$.constants.social.types.LINKEDIN:
          api += "linkedin/";
          break;
      };
      var apiUrl = baseUrl + api + ['checkaccess'].join('/');
      $http.get(apiUrl).success(function () {
        var path = "";
        api = "social/";
        switch (socialType) {
          case $$.constants.social.types.FACEBOOK:
            api += "facebook/";
            path = "friends/import/"
            break;
          case $$.constants.social.types.GOOGLE:
            api += "google/";
            path = "contacts/import/";
            break;
          case $$.constants.social.types.LINKEDIN:
            api += "linkedin/";
            path = "connections/import/";
            break;
        }
        apiUrl = baseUrl + api + path;
        $http.get(apiUrl).success(function (data) {
          fn(data, true);
        });
      }).error(function (data) {
        fn(data, false);
      });
    };
  });
}(angular));

'use strict';
/*global app, Keen, $$*/
/*jslint unparam: true*/
(function (angular) {
  app.service('KeenService', ['$http', 'ENV', function ($http, ENV) {
    var baseUrl = 'https://api.keen.io/3.0/projects/';
    console.log('ENV ', ENV);
    var readKey = ENV.keenReadKey;
    var writeKey = ENV.keenWriteKey;
    var projectId = ENV.keenProjectId;

    this.multiAnalysis = function (params, fn) {
      var apiUrl = baseUrl + [projectId, 'queries', 'multi_analysis'].join('/') + '?api_key=' + readKey;
      params.filters = JSON.stringify(params.filters);
      $http.get(apiUrl, {
        params: params
      }).success(function (data) {
        fn(data);
      });
    };

    //https://api.keen.io/3.0/projects/<project_id>/queries/extraction?api_key=<read_key>&event_collection=<event_collection>
    this.singleExtraction = function (params, fn) {
      var apiUrl = baseUrl + [projectId, 'queries', 'extraction'].join('/') + '?api_key=' + readKey;
      params.filters = JSON.stringify(params.filters);
      $http.get(apiUrl, {
        params: params
      }).success(function (data) {
        fn(data);
      });
    };

    this.keenClient = function (fn) {
      Keen.ready(function () {

        var client = new Keen({
          projectId: projectId,
          writeKey: writeKey,
          readKey: readKey,
          protocol: "https",
          host: "api.keen.io/3.0",
          requestType: "jsonp"
        });

        fn(client);

      });
    };

  }]);
}(angular));

'use strict';
/**
 * service for orders
 */
(function (angular) {
  app.service('OrderService', function ($http, orderConstant) {
    var baseUrl = '/api/1.0/orders/';

    this.getOrders = function (fn) {
      var apiUrl = baseUrl;
      $http.get(apiUrl)
        .success(function (data, status, headers, config) {
          fn(data);
        });
    };

    this.getCustomerOrders = function (customerId, fn) {
      var apiUrl = baseUrl + ['customer', customerId].join('/');
      $http.get(apiUrl)
        .success(function (data, status, headers, config) {
          fn(data);
        });
    };

    this.getOrder = function (orderId, fn) {
      var apiUrl = baseUrl + orderId;
      $http.get(apiUrl)
        .success(function (data, status, headers, config) {
          fn(data);
        });
    };

    this.createOrder = function (order, fn) {
      var apiUrl = baseUrl;
      $http({
          url: apiUrl,
          method: "POST",
          data: order
        })
        .success(function (data, status, headers, config) {
          fn(data);
        })
        .error(function (error) {
          console.error('OrderService: createOrder error >>> ', error);
        });
    };

    this.updateOrder = function (order, fn) {
      var apiUrl = baseUrl + [order._id, 'update'].join('/');
      $http({
          url: apiUrl,
          method: "POST",
          data: {
            order: order
          }
        })
        .success(function (data, status, headers, config) {
          fn(data);
        })
        .error(function (error) {
          console.error('OrderService: updateOrder error >>> ', error);
        });
    };

    this.refundOrder = function (orderId, reasonData, fn) {
      var apiUrl = baseUrl + [orderId, 'refund'].join('/');
      console.log('apiUrl ', apiUrl);
      $http({
          url: apiUrl,
          method: "POST",
          data: reasonData
        })
        .success(function (data, status, headers, config) {
          fn(data, null);
        })
        .error(function (error) {
          console.error('OrderService: refundOrder error >>> ', error);
          fn(null, error);
        });
    };

    this.completeOrder = function (orderId, note, fn) {
      var apiUrl = baseUrl + [orderId, 'complete'].join('/');
      $http({
          url: apiUrl,
          method: "POST",
          data: {
            note: note
          }
        })
        .success(function (data, status, headers, config) {
          fn(data);
        })
        .error(function (error) {
          console.error('OrderService: completeOrder error >>> ', error);
        });
    };

    this.addOrderNote = function (orderId, note, fn) {
      var apiUrl = baseUrl + [orderId, 'note'].join('/');
      $http({
          url: apiUrl,
          method: "POST",
          data: {
            note: note
          }
        })
        .success(function (data, status, headers, config) {
          fn(data);
        })
        .error(function (error) {
          console.error('OrderService: addOrderNote error >>> ', error);
        });
    };

    this.exportToCSV = function () {
      var apiUrl = baseUrl + ['order', 'export'].join('/');
      $http({
          url: apiUrl,
          method: "POST"
        })
    };

    this.formatOrderStatus = function (_status) {
      var orderStatuses = orderConstant.order_status.dp;
      if (_status) {
        var _formatted = _.find(orderStatuses, function (status) {
            return status.data === _status;
          });
        return _formatted.label;
      }
    };

  });
})(angular);

'use strict';
/**
 * service for payment
 */
(function(angular) {
    app.service('PaymentService', ['$http', 'ToasterService','ENV',
        function($http, ToasterService, ENV) {
            var baseUrl = '/api/1.0/';
            Stripe.setPublishableKey(ENV.stripeKey);

            this.getStripeCardToken = function(cardInput, fn, suppressToastSuccessMessage) {
                Stripe.card.createToken(cardInput, function(status, response) {
                    if (status !== 200) {
                        ToasterService.show('error', response.error.message);
                    } else {
                        if (!suppressToastSuccessMessage) {
                            ToasterService.show('success', 'Card added successfully.');
                        }
                    }
                    fn(response.id);
                });
            };

            this.postStripeCustomer = function(cardToken, fn) {
                var apiUrl = baseUrl + ['integrations', 'payments', 'customers'].join('/');
                $http.post(apiUrl, {
                        cardToken: cardToken
                    })
                    .success(function(data, status, headers, config) {
                        fn(data);
                    });
            };

            this.getCustomers = function(fn) {
                var apiUrl = baseUrl + ['integrations', 'payments', 'customers'].join('/');
                $http.get(apiUrl)
                    .success(function(data, status, headers, config) {
                        fn(data);
                    });
            };

            this.putCustomerCard = function(stripeId, cardToken, fn) {
                var apiUrl = baseUrl + ['integrations', 'payments', 'customers', stripeId, 'cards', cardToken].join('/');
                $http.put(apiUrl)
                    .success(function(data, status, headers, config) {
                        ToasterService.show('success', 'Card saved.');
                        fn(data);
                    });
            };

            this.deleteCustomerCard = function(stripeId, cardId, showToast, fn) {
                var showToast = showToast || false;
                var apiUrl = baseUrl + ['integrations', 'payments', 'customers', stripeId, 'cards', cardId].join('/');
                $http.delete(apiUrl)
                    .success(function(data, status, headers, config) {
                        if (showToast) {
                            ToasterService.show('success', 'Card deleted.');
                        }
                        fn(data);
                    });
            };

            this.getCustomerCards = function(stripeId, successFn, errorFn) {
                var apiUrl = baseUrl + ['integrations', 'payments', 'customers', stripeId, 'cards'].join('/');
                $http.get(apiUrl)
                    .success(function(data, status, headers, config) {
                        successFn(data);
                    })
                    .error(function(data, status, headers, config) {
                        errorFn(data);
                    });
            };

            this.getStripeCustomer = function(fn) {
                var apiUrl = baseUrl + ['integrations', 'payments', 'customers'].join('/');
                $http.get(apiUrl)
                    .success(function(data, status, headers, config) {
                        fn(data);
                    });
            };

            this.getUpcomingInvoice = function(stripeId, fn) {
                var apiUrl = baseUrl + ['integrations', 'payments', 'upcomingInvoice'].join('/');
                $http.get(apiUrl)
                  .then(function(response){
                      fn(response.data);
                  }, function(error) {
                      console.warn('PaymentsService.getUpcomingInvoice received an error:\n', error);
                  })
            };

            this.getUpcomingInvoiceForCustomer = function(stripeId, fn) {
                var apiUrl = baseUrl + ['integrations', 'payments', 'customers', stripeId, 'upcomingInvoice'].join('/');
                $http.get(apiUrl)
                    .success(function(data, status, headers, config) {
                        fn(data);
                    });
            };


            this.getAllInvoices = function(fn) {
                var apiUrl = baseUrl + ['integrations', 'payments', 'invoices'].join('/');
                $http.get(apiUrl)
                    .success(function(data, status, headers, config) {
                        fn(data);
                    });
            };

            this.getInvoicesForAccount = function(fn) {
                var apiUrl = baseUrl + ['integrations', 'payments', 'account', 'invoices'].join('/');
                $http.get(apiUrl)
                    .success(function(data, status, headers, config) {
                        fn(data);
                    });
            }

            this.getTransactionsForAccount = function(fn) {
                var apiUrl = baseUrl + ['integrations', 'payments', 'account', 'charges'].join('/');
                $http.get(apiUrl)
                    .success(function(data, status, headers, config) {
                        fn(data);
                    });
            }

            this.postCreatePlan = function(newProduct, fn, showToast) {
                var showToast = showToast || false;
                var apiUrl = baseUrl + ['integrations', 'payments', 'plans'].join('/');
                $http.post(apiUrl, newProduct)
                    .success(function(data, status, headers, config) {
                        if (showToast) {
                            ToasterService.show('success', 'Plan product created.');
                        }
                        fn(data);
                    });
            };

            this.getListPlans = function(fn) {
                var apiUrl = baseUrl + ['integrations', 'payments', 'plans'].join('/');
                $http.get(apiUrl)
                    .success(function(data, status, headers, config) {
                        fn(data);
                    });
            };

            this.getPlanPromise = function(planId) {
                var apiUrl = baseUrl + ['integrations', 'payments', 'plans', planId].join('/');
                return $http.get(apiUrl);
            };

            this.getIndigenousPlanPromise = function(planId) {
                var apiUrl = baseUrl + ['integrations', 'payments', 'indigenous', 'plans', planId].join('/');
                return $http.get(apiUrl);
            };

            this.getIndigenousStripePlan = function(planId, fn) {
                var apiUrl = baseUrl + ['integrations', 'payments', 'indigenous', 'plans', planId].join('/');
                $http.get(apiUrl)
                    .success(function(data, status, headers, config) {
                        fn(data);
                    });
            };

            this.getPlan = function(planId, fn) {
                var apiUrl = baseUrl + ['integrations', 'payments', 'plans', planId].join('/');
                $http.get(apiUrl)
                    .success(function(data, status, headers, config) {
                        fn(data);
                    });
            };

            this.postUpdatePlan = function(planId, plan, fn) {
                var apiUrl = baseUrl + ['integrations', 'payments', 'plans', planId].join('/');
                $http.post(apiUrl, plan)
                    .success(function(data, status, headers, config) {
                        ToasterService.show('success', 'Plan updated.');
                        fn(data);
                    });
            };

            this.deletePlan = function(planId, showToast, fn) {
                var showToast = showToast || false;
                var apiUrl = baseUrl + ['integrations', 'payments', 'plans', planId].join('/');
                $http.delete(apiUrl)
                    .success(function(data, status, headers, config) {
                        if (showToast) {
                            ToasterService.show('warning', 'Plan deleted.');
                        }
                        fn(data);
                    });
            };

            this.getListStripeSubscriptions = function(stripeId, fn) {
                var apiUrl = baseUrl + ['integrations', 'payments', 'customers', stripeId, 'subscriptions'].join('/');
                $http.get(apiUrl)
                    .success(function(data, status, headers, config) {
                        fn(data);
                    });
            };

            this.getStripeSubscription = function(stripeId, subscriptionId, fn) {
                var apiUrl = baseUrl + ['integrations', 'payments', 'customers', stripeId, 'subscriptions', subscriptionId].join('/');

                console.warn('PaymentService.getStripeSubscription, apiUrl:\n', apiUrl);
                $http.get(apiUrl)
                  .then(function(response) {
                      fn(response.data);
                  }, function(err) {
                      console.warn('An error occurred in PaymentService.getStripeSubscription:\n', err);
                  });
            };

            this.postCreateStripeSubscription = function(stripeId, planId, fn) {
                var apiUrl = baseUrl + ['integrations', 'payments', 'customers', stripeId, 'subscriptions'].join('/');
                $http.post(apiUrl, {
                        plan: planId
                    })
                    .success(function(data, status, headers, config) {
                        ToasterService.show('success', 'Subscribed to plan.');
                        fn(data);
                    });
            };

            this.postSubscribeToIndigenous = function(stripeCustomerId, planId, accountId, setupFee, addOns, coupon, fn, errFn) {
                var apiUrl = baseUrl + ['integrations', 'payments', 'indigenous', 'plans', planId, 'subscribe'].join('/');
                var params = {
                    customerId: stripeCustomerId
                };
                
                if (accountId) {
                    params.accountId = accountId;
                }

                if (setupFee) {
                    params.setupFee = setupFee;
                }

                if(addOns) {
                    params.addOns = addOns;
                }

                if(coupon) {
                    params.coupon = coupon;
                }


                $http.post(apiUrl, params)
                    .success(function(data, status, headers, config) {
                        fn(data);
                    })
                    .error(function(err) {
                        if (errFn) errFn(err);
                    });
            };

            this.deleteStripeSubscription = function(stripeId, subId, fn) {
                var apiUrl = baseUrl + ['integrations', 'payments', 'customers', stripeId, 'subscriptions', subId].join('/');
                $http.delete(apiUrl)
                    .success(function(data, status, headers, config) {
                        ToasterService.show('warning', 'Unsubscribed from old plan.');
                        fn(data);
                    });
            };

            this.validateCoupon = function(couponId, fn) {
                var apiUrl = baseUrl + ['integrations', 'payments', 'coupon', couponId, 'validate'].join('/');
                $http.get(apiUrl)
                    .success(function(data, status, headers, config) {
                        fn(data);
                    });
            };

        }
    ]);
})(angular);

'use strict';
/**
 * service for products
 */
(function(angular) {
    app.service('ProductService',  ['$http', 'productConstant', '$q', function($http, productConstant, $q) {
        var baseUrl = '/api/1.0/';

        this.getProducts = function(fn) {
            var apiUrl = baseUrl + ['products'].join('/');
            $http.get(apiUrl)
                .success(function(data, status, headers, config) {
                    fn(data);
                });
        };

        this.getProductsWithSort = function(sort, fn) {
            var apiUrl = baseUrl + ['products'].join('/');
            $http({
                url: apiUrl,
                params: {
                    sortFields: _.keys(sort),
                    sortDirections: _.values(sort)
                }
            }).success(function(data, status, headers, config) {
                    fn(data);
                });
        };

        this.postProduct = function(product, fn) {
            var apiUrl = baseUrl + ['products'].join('/');
            $http({
                    url: apiUrl,
                    method: "POST",
                    data: angular.toJson(product)
                })
                .success(function(data, status, headers, config) {
                    fn(data);
                })
                .error(function(error) {
                    console.error('ProductService: postProduct error >>> ', error);
                });
        };

        this.getProduct = function(productId, fn) {
            var apiUrl = baseUrl + ['products', productId].join('/');
            $http.get(apiUrl)
                .success(function(data, status, headers, config) {
                    fn(data);
                });
        };

        this.getSingleProduct = function(productId, fn) {
            var deferred = $q.defer();
            var apiUrl = baseUrl + ['products', productId].join('/');
            $http.get(apiUrl)
            .success(function(data, status, headers, config) {
                deferred.resolve(fn(data));
            }).error(function (err) {
                  console.warn('END:Campaign Service with ERROR');
                  fn(err, null);
            });
            return deferred.promise;
        };

        this.getIndigenousProducts = function(fn) {
            ///api/1.0/products/indigenous
            var apiUrl = baseUrl + ['products', 'indigenous'].join('/');
            $http.get(apiUrl)
                .success(function(data, status, headers, config) {
                    fn(data);
                });
        };

        this.saveProduct = function(product, fn) {
            var apiUrl = baseUrl + ['products', product._id].join('/');
            $http({
                    url: apiUrl,
                    method: "POST",
                    data: angular.toJson(product)
                })
                .success(function(data, status, headers, config) {
                    fn(data);
                });
        };

        this.getTax = function(postcode, fn) {
            var apiUrl = baseUrl + ['tax', postcode].join('/');
            $http.get(apiUrl)
                .success(function(data, status, headers, config) {
                    fn(data);
                });
        };

        this.deleteProduct = function (id, fn) {
            var apiUrl = baseUrl + ['Products', id].join('/');
            $http.delete(apiUrl)
            .success(function (data, status, headers, config) {
                fn(data);
            });
        };


        this.getActiveProducts = function (fn) {
            var apiUrl = baseUrl + ['products', 'active'].join('/');
            console.log(apiUrl);
            $http.get(apiUrl)
            .success(function(data, status, headers, config) {
                fn(data);
            });
        };


        this.productStatusTypes = function (fn) {
          var productStatusTypes = productConstant.product_status_types.dp;
          fn(productStatusTypes);
        };

        this.getAllOrdersForProduct = function (id, fn) {
            var apiUrl = baseUrl + ['products', id, 'orders'].join('/');
            $http.get(apiUrl)
                .success(function (data, status, headers, config) {
                    fn(data);
                });
        };

        this.cloneProduct = function (id, fn) {
          var apiUrl = baseUrl + ['products', id, 'clone'].join('/');
          $http.post(apiUrl)
            .success(function (data) {
              fn(data);
            });
        };

    }]);
})(angular);

'use strict';
/**
 * service for social config
 */
(function(angular) {
    app.service('SocialConfigService', ['$http', '$log', function($http, $log) {
        var baseUrl = '/api/1.0/';
        this.getAllSocialConfig = function(fn) {
            var apiUrl = baseUrl + ['social', 'socialconfig'].join('/');
            $http({ method: 'GET', url: apiUrl, ignoreAuthModule: true })
                .success(function(data, status, headers, config) {
                    fn(data);
                });
        };

        this.getTrackedObject = function(id, socialId, fn) {
            var apiUrl = baseUrl + ['social', 'socialconfig', 'tracked', id].join('/');
            $http({ method: 'GET', url: apiUrl, ignoreAuthModule: true })
                .success(function(data, status, headers, config) {
                    fn(data, socialId);
                });
        };

        this.getTrackedObjectPromise = function(id, socialId, fn) {
            var apiUrl = baseUrl + ['social', 'socialconfig', 'tracked', id].join('/');
            return $http({ method: 'GET', url: apiUrl, ignoreAuthModule: true });
        };

        this.postFBPost = function(socialAccountId, post, fn) {
            var apiUrl = baseUrl + ['social', 'socialconfig', 'facebook', socialAccountId, 'post'].join('/');
            $http.post(apiUrl, {
                post: post
            }).success(function(data, status, headers, config) {
                fn(data);
            }).error(function(data, status, headers, config) {
                console.log('data error ', data);
                //{code: 506, status: "Error creating post", message: "Duplicate status message", detail: ""}
                if (data.code == 506) {
                  fn({error: data.message});
                }
            });

        };

        this.likeFBPost = function(socialAccountId, postId, fn) {
            //facebook/:socialAccountId/post/:postId/like
            var apiUrl = baseUrl + ['social', 'socialconfig', 'facebook', socialAccountId, 'post', postId, 'like'].join('/');
          $http.post(apiUrl).success(function(data, status, headers, config) {
            fn(data);
          });

        };

        this.unlikeFBPost = function(socialAccountId, postId, fn) {
            //facebook/:socialAccountId/post/:postId/like
            var apiUrl = baseUrl + ['social', 'socialconfig', 'facebook', socialAccountId, 'post', postId, 'like'].join('/');
            $http.delete(apiUrl).success(function(data, status, headers, config) {
                fn(data);
            });
        };

        this.deleteSocialConfigEntry = function(id, fn) {
            var apiUrl = baseUrl + ['social', 'socialconfig', 'socialaccount', id].join('/');
            $http.delete(apiUrl)
                .success(function(data, status, headers, config) {
                    fn(data);
                });
        };


        this.getFBPages = function(socialAccountId, fn) {
            var apiUrl = baseUrl + ['social', 'socialconfig', 'facebook', socialAccountId, 'pages'].join('/');
            $http({ method: 'GET', url: apiUrl, ignoreAuthModule: true })
                .success(function(data, status, headers, config) {
                    fn(data);
                });
        };

        this.getFBPagesPromise = function(socialAccountId, fn) {
            var apiUrl = baseUrl + ['social', 'socialconfig', 'facebook', socialAccountId, 'pages'].join('/');
            return $http({ method: 'GET', url: apiUrl, ignoreAuthModule: true });
        };

        this.getFBPageInfo = function(socialAccountId, pageId, fn) {
            var apiUrl = baseUrl + ['social', 'socialconfig', 'facebook', socialAccountId, 'page', pageId].join('/');
            $http({ method: 'GET', url: apiUrl, ignoreAuthModule: true })
                .success(function(data, status, headers, config) {
                    fn(data);
                });
        };

        this.postSocialAccount = function(socialAccount, fn) {
            var apiUrl = baseUrl + ['social', 'socialconfig', 'socialaccount'].join('/');
            $http({
                    url: apiUrl,
                    method: "POST",
                    data: socialAccount
                })
                .success(function(data, status, headers, config) {
                    fn(data);
                })
                .error(function(err) {
                    console.log('END:postSocialAccount with ERROR');
                    fn(err);
                });

        };

        //Twitter
        this.getTwitterFeed = function(socialAccountId, fn) {
            var apiUrl = baseUrl + ['social', 'socialconfig', 'twitter', socialAccountId, 'feed'].join('/');
            $http({ method: 'GET', url: apiUrl, ignoreAuthModule: true })
                .success(function(data, status, headers, config) {
                    fn(data);
                });
        };

        this.getTwitterFollowers = function(socialAccountId, fn) {
            var apiUrl = baseUrl + ['social', 'socialconfig', 'twitter', socialAccountId, 'followers'].join('/');
            $http({ method: 'GET', url: apiUrl, ignoreAuthModule: true })
                .success(function(data, status, headers, config) {
                    fn(data);
                });
        };

        this.getTwitterProfile = function(socialAccountId, fn) {
            var apiUrl = baseUrl + ['social', 'socialconfig', 'twitter', socialAccountId, 'profile'].join('/');
            $http({ method: 'GET', url: apiUrl, ignoreAuthModule: true })
                .success(function(data, status, headers, config) {
                    fn(data);
                });
        };

        this.postTwitterPost = function(socialAccountId, post, fn) {
            var apiUrl = baseUrl + ['social', 'socialconfig', 'twitter', socialAccountId, 'post'].join('/');
            $http.post(apiUrl, {
                post: post
            }).success(function(data, status, headers, config) {
                fn(data);
            });
        };

        this.addTwitterPostReply = function(socialAccountId, postId, comment, fn) {
            var apiUrl = baseUrl + ['social', 'socialconfig', 'twitter', socialAccountId, 'post', postId, 'reply'].join('/');
            $http.post(apiUrl, {
                post: comment
            }).success(function(data, status, headers, config) {
                    fn(data);
            });
        };

        this.addTwitterPostRetweet = function(socialAccountId, postId, fn) {
            var apiUrl = baseUrl + ['social', 'socialconfig', 'twitter', socialAccountId, 'post', postId, 'retweet'].join('/');
            $http.post(apiUrl).success(function(data, status, headers, config) {
                fn(data);
            });
        };

        this.addTwitterDirectMessage = function(socialAccountId, userId, msg, fn) {
            var apiUrl = baseUrl + ['social', 'socialconfig', 'twitter', socialAccountId, 'user', userId, 'dm'].join('/');
            $http.post(apiUrl, {
                msg: msg
            }).success(function(data, status, headers, config) {
                fn(data);
            });
        };

        this.favTwitterPost = function(socialAccountId, postId, fn) {
            var apiUrl = baseUrl + ['social', 'socialconfig', 'twitter', socialAccountId, 'post', postId, 'favorite'].join('/');
            $http.post(apiUrl, {
            }).success(function(data, status, headers, config) {
                fn(data);
            });
        };

        this.unfavTwitterPost = function(socialAccountId, postId, fn) {
            var apiUrl = baseUrl + ['social', 'socialconfig', 'twitter', socialAccountId, 'post', postId, 'favorite'].join('/');
            $http.delete(apiUrl, {
            }).success(function(data, status, headers, config) {
                fn(data);
            });
        };

        this.followTwitterUser = function(socialAccountId, twitterFollowerId, fn) {
            var apiUrl = baseUrl + ['social', 'socialconfig', 'twitter', socialAccountId, 'follow', twitterFollowerId, 'follow'].join('/');

            $log.debug('xxx followTwitterUser');
            $http.post(apiUrl, {
            }).success(function(data, status, headers, config) {
                fn(data);
            });
        };

        this.unfollowTwitterUser = function(socialAccountId, twitterFollowerId, fn) {
            var apiUrl = baseUrl + ['social', 'socialconfig', 'twitter', socialAccountId, 'follow', twitterFollowerId, 'unfollow'].join('/');
            $http.delete(apiUrl, {
            }).success(function(data, status, headers, config) {
                fn(data);
            });
        };

        //Facebook
        this.getFBPosts = function(socialAccountId, fn) {
            var apiUrl = baseUrl + ['social', 'socialconfig', 'facebook', socialAccountId, 'posts'].join('/');
            $http({ method: 'GET', url: apiUrl, ignoreAuthModule: true })
                .success(function(data, status, headers, config) {
                    fn(data);
                });
        };

        this.getFBProfile = function(socialAccountId, fn) {
            var apiUrl = baseUrl + ['social', 'socialconfig', 'facebook', socialAccountId, 'profile'].join('/');
            $http({ method: 'GET', url: apiUrl, ignoreAuthModule: true })
                .success(function(data, status, headers, config) {
                    fn(data);
                });
        };

        this.importLinkedinContact = function(socialAccountId, fn) {
            var apiUrl = baseUrl + ['social', 'socialconfig', 'linkedin', socialAccountId, 'importcontacts'].join('/');
            $http({
                    url: apiUrl,
                    method: 'GET'
                })
                .success(function(data, status, headers, config) {
                    fn(data);
                });
        };

        this.importGoogleContact = function(socialAccountId, fn) {
            var apiUrl = baseUrl + ['social', 'socialconfig', 'google', socialAccountId, 'importcontacts'].join('/');
            $http({
                    url: apiUrl,
                    method: 'GET'
                })
                .success(function(data, status, headers, config) {
                    fn(data);
                });
        };

        this.importGoogleContactsForGroup = function(socialAccountId, groupId, fn) {
            var apiUrl = baseUrl + ['social', 'socialconfig', 'google', socialAccountId, 'importcontacts'].join('/');
            if(groupId !== 'All') {
                apiUrl += "?groupId=" + groupId;
            }
            $http({
                url: apiUrl,
                method: 'GET'
            })
            .success(function(data, status, headers, config) {
                fn(data);
            });
        };

        this.getGoogleGroups = function(socialAccountId, fn) {
            var apiUrl = baseUrl + ['social', 'socialconfig', 'google', socialAccountId, 'groups'].join('/');
            $http({
                    url: apiUrl,
                    method: 'GET'
                })
                .success(function(data, status, headers, config) {
                    fn(data);
                });
        };

        this.addFacebookPostComment = function(socialAccountId, postId, comment, fn) {
            var apiUrl = baseUrl + ['social', 'socialconfig', 'facebook', socialAccountId, 'post', postId, 'comment'].join('/');
            $http.post(apiUrl, {
                    comment: comment
                })
                .success(function(data, status, headers, config) {
                    fn(data);
                });
        };

        this.addTwitterReply = function(socialAccountId, postId, username, comment, fn) {
            var apiUrl = baseUrl + ['social', 'socialconfig', 'twitter', socialAccountId, 'post', postId, 'reply'].join('/');
            $http.post(apiUrl, {
                    post: '@' + username + ' ' + comment
                })
                .success(function(data, status, headers, config) {
                    fn(data);
                });
        };

        this.addTrackedAccount = function(account, fn) {
            var apiUrl = baseUrl + ['social', 'socialconfig', 'trackedAccounts'].join('/');
            $http.post(apiUrl, {
                    trackedAccount: account
                })
                .success(function(data, status, headers, config) {
                    fn(data);
                });
        };

        this.updateTrackedAccount = function(account, fn) {
            var apiUrl = baseUrl + ['social', 'socialconfig', 'trackedAccount', account.id].join('/');
            $http.post(apiUrl, {
                    trackedAccount: account
                })
                .success(function(data, status, headers, config) {
                    fn(data);
                });
        };

        this.deleteTrackedAccount = function(id, fn) {
            var apiUrl = baseUrl + ['social', 'socialconfig', 'trackedAccount', id].join('/');
            console.log('api URL ', apiUrl);
            $http.delete(apiUrl)
                .success(function(data, status, headers, config) {
                    fn(data);
                });
        };
    }])
})(angular);

'use strict';
/**
 * service for toaster
 */
(function(angular) {
  app.service('ToasterService', ['toaster', function(toaster) {
    var queue = [];

    var htmlQueue = [];

    this.show = function(status, msg) {
      toaster.pop(status, msg);
    };

    this.clearAll = function() {
      toaster.clear('*');
    };

    this.setPending = function(status, msg) {
      queue.push([status, msg]);
    };

    this.processPending = function() {
      queue.forEach(function(value, index) {
        toaster.pop(value[0], value[1]);
      });
      queue = [];
    };

    this.setHtmlPending = function(status, msg, body, timeout, options) {
      htmlQueue.push([status, msg, body, timeout, options]);
    };

    this.processHtmlPending = function() {
      htmlQueue.forEach(function(value, index) {
        toaster.pop(value[0], value[1], value[2], value[3], value[4]);
      });
      htmlQueue = [];
    };

  }]);
})(angular);

'use strict';
/**
 * service for user
 */
(function(angular) {
  app.service('UserService', function($http) {
    var account, that = this;
    var baseUrl = '/api/1.0/';

    this.getUser = function(fn) {
      var apiUrl = baseUrl + ['user'].join('/');
      $http.get(apiUrl)
      .success(function(data, status, headers, config) {
        fn(data);
      });
    };

    this.getUsers = function(fn) {
      var apiUrl = baseUrl + ['user', 'members'].join('/');
      $http.get(apiUrl)
      .success(function(data, status, headers, config) {
        fn(data);
      });
    };

    this.putUser = function(user, fn) {
      var apiUrl = baseUrl + ['user', $$.server.userId].join('/');
      $http.put(apiUrl, user)
      .success(function(data, status, headers, config) {
        // ToasterService.show('success', 'User update.');
        fn(data);
      });
    };

    this.setPassword = function(password, fn) {
      var apiUrl = baseUrl + ['user', 'password'].join('/');
      console.log('---- UserService.setPassword.api = ', apiUrl);

      var payload = {
        'password': password,
      };

      console.log('---- UserService.setPassword.payload = ', payload);

      $http.post(apiUrl, payload)
          .then(function(response){
            fn(response.data);
          },
          function(error){
            console.error('An error occurred in UserService.setPassword.', error);
          });
    };

    this.getSingleAccount = function(accountId, fn) {
      var apiUrl = baseUrl + ['account', accountId].join('/');
      $http.get(apiUrl)
      .success(function(data, status, headers, config) {
        fn(data);
      });
    };

    this.getAccount = function(fn) {
      var apiUrl = baseUrl + ['account', $$.server.accountId].join('/');
      $http.get(apiUrl)
      .success(function(data, status, headers, config) {
        that.account = data;
        fn(data);
      });
    };

    this.getAccounts = function(fn) {
      var apiUrl = baseUrl + ['user', 'accounts'].join('/');
      $http.get(apiUrl)
      .success(function(data, status, headers, config) {
        fn(data);
      });
    };

    this.putAccount = function(user, fn) {
      var apiUrl = baseUrl + ['account', $$.server.userId].join('/');
      $http.put(apiUrl, user)
      .success(function(data, status, headers, config) {
        fn(data);
      });
    };

    this.postAccountBilling = function(stripeCustomerId, cardToken, fn, errFn) {
      var apiUrl = baseUrl + ['account', 'billing'].join('/');
      $http.post(apiUrl, {
        stripeCustomerId: stripeCustomerId,
        cardToken: cardToken
      })
      .success(function(data, status, headers, config) {
        fn(data);
      })
      .error(function(err){
        if (errFn) {errFn(err);}
      });
    };

    this.getAccountBilling = function(fn) {
      var apiUrl = baseUrl + ['account', 'billing'].join('/');
      $http.get(apiUrl)
      .success(function(data, status, headers, config) {
        fn(data);
      });
    };

    this.postUserSubscribe = function(fn) {
      var apiUrl = baseUrl + ['account', 'billing'].join('/');
      $http.get(apiUrl)
      .success(function(data, status, headers, config) {
        fn(data);
      });
    };

    this.getUserSubscriptions = function(stripeCustomerId, fn) {
      var apiUrl = baseUrl + ['customers', stripeCustomerId, 'subscriptions'].join('/');
      $http.get(apiUrl)
      .success(function(data, status, headers, config) {
        fn(data);
      });
    };

    this.postSubscribeToIndigenous = function(stripeCustomerId, planId, accountId, fn) {
      var apiUrl = baseUrl + ['integrations', 'payments', 'indigenous', 'plans', planId, 'subscribe'].join('/');
      var params = {
        customerId: stripeCustomerId
      };
      if (accountId) {
        params.accountId = accountId;
      }
      $http.post(apiUrl, params)
      .success(function(data, status, headers, config) {
        fn(data);
      });
    };

    this.postUserSubscriptions = function(stripeCustomerId, planId, fn) {
      var apiUrl = baseUrl + ['integrations', 'payments', 'customers', stripeCustomerId, 'subscriptions'].join('/');
      $http.post(apiUrl, {
        plan: planId
      })
      .success(function(data, status, headers, config) {
        fn(data);
      });
    };

    this.postUserDashboard = function(dashboard, fn) {
      var apiUrl = baseUrl + ['dashboard'].join('/');
      $http.post(apiUrl, {
        config: dashboard
      })
      .success(function(data, status, headers, config) {
        fn(data);
      });
    };

    this.getUserDashboard = function(fn) {
      var apiUrl = baseUrl + ['dashboard'].join('/');
      $http.get(apiUrl)
      .success(function(data, status, headers, config) {
        fn(data);
      });
    };

    this.postUserDashboardUpdate = function(id, dashboard, fn) {
      var apiUrl = baseUrl + ['dashboard', id].join('/');
      $http.post(apiUrl, {
        config: dashboard
      })
      .success(function(data, status, headers, config) {
        fn(data);
      });
    };

    this.checkDuplicateSubdomain = function(subDomain, accountId, fn) {
      var apiUrl = baseUrl + ['account', subDomain, 'duplicate'].join('/');
      $http.get(apiUrl)
      .success(function(data, status, headers, config) {
        fn(data);
      });
    };

    this.getUserPreferences = function(fn) {
      var apiUrl = baseUrl + ['user', 'preferences'].join('/');
      $http.get(apiUrl)
      .success(function(data, status, headers, config) {
        fn(data);
      });
    };

    this.updateUserPreferences = function(preferences, showToaster, fn) {
      var apiUrl = baseUrl + ['user', 'preferences'].join('/');
      $http.post(apiUrl, preferences)
      .success(function(data, status, headers, config) {
        if (showToaster) {
          //ToasterService.show('success', 'Preferences Updated.');
        }
        fn(data);
      });
    };

    this.getUserSocial = function(fn) {
      var apiUrl = baseUrl + ['user', 'social'].join('/');
      $http.get(apiUrl)
      .success(function(data, status, headers, config) {
        fn(data);
      });
    };

    this.deleteUserSocial = function(type, fn) {
      var apiUrl = baseUrl + ['user', 'social', type].join('/');
      $http.delete(apiUrl)
      .success(function(data, status, headers, config) {
        fn(data);
      });
    };

    this.getUserActivity = function(fn) {
      var apiUrl = baseUrl + ['useractivity'].join('/');
      $http.get(apiUrl)
      .success(function(data, status, headers, config) {
        fn(data);
      });
    };
  });
})(angular);

'use strict';
/*global app, moment, angular, window, $$*/
/*jslint unparam:true*/
(function (angular) {
  app.service('WebsiteService', function ($http, $cacheFactory, $timeout, $q, ChartEmailService, pageConstant) {
    var baseUrl = '/api/1.0/';
    this.editPageHandle = null;

    var pagecache = $cacheFactory('pages');
    var emailcache = $cacheFactory('emails');

    this.getEditedPageHandle = function () {
      return this.editPageHandle;
    };

    this.setEditedPageHandle = function (handle) {
      this.editPageHandle = handle;
    };

    this.getWebsite = function (fn) {
      var apiUrl = baseUrl + ['cms', 'website', $$.server.websiteId].join('/');
      $http.get(apiUrl).success(function (data, status, headers, config) {
        fn(data);
      });
    };

    //website
    this.updateWebsite = function (data, fn) {
      var apiUrl = baseUrl + ['cms', 'website'].join('/');
      $http({
        url: apiUrl,
        method: "POST",
        data: angular.toJson(data)
      }).success(function (data, status, headers, config) {
        fn(data);
      }).error(function (err) {
        console.warn('END:Website Service with ERROR', err);
        fn(err, null);
      });
    };

    //website/:websiteid/page/:handle
    this.getSinglePage = function (handle, fn) {
      var _pages = pagecache.get('pages');
      var _matchingPage = _.find(_pages, function (_page) {
        return _page.handle === handle;
      });
      if (_matchingPage) {
        fn(_matchingPage);
      } else {
        var apiUrl = baseUrl + ['cms', 'website', $$.server.websiteId, 'page', handle].join('/');
        $http.get(apiUrl)
          .success(function (data, status, headers, config) {
            fn(data);
          })
          .error(function (err) {
            //console.warn('END:getSinglePage with ERROR');
            fn(null, err);
          });
      }
    };

    //website/:websiteid/page/:handle
    this.checkDuplicatePage = function (handle, pageId, fn) {
      var _pages = pagecache.get('pages');
      var duplicate = false;
      var _matchingPages = _.filter(_pages, function (_page) {
        return (_page.handle === handle)
      });
      if (_matchingPages.length) {
        if(_matchingPages.length > 1)
        {
          duplicate = true;
        }
        else if(_matchingPages.length === 1)
        {
          duplicate = _matchingPages[0]._id !== pageId;
        }
        fn(duplicate);
      } else {
        var apiUrl = baseUrl + ['cms', 'website', $$.server.websiteId, 'page', handle].join('/');
        $http.get(apiUrl)
          .success(function (data, status, headers, config) {
            if(data && data._id)
            {
              duplicate = data._id !== pageId;
            }
            fn(duplicate);
          })
          .error(function (err) {
            //console.warn('END:checkDuplicatePage with ERROR', err);
            if(err && err.code && err.code === 404) {
                //no dupe
                fn(false);
            } else {
                fn(err, null);
            }

          });
      }
    };

    //website/:websiteid/email/:id
    this.getSingleEmail = function (_emailId, fn) {
      var _emails = emailcache.get('emails');
      var _matchingEmail = _.find(_emails, function (_email) {
        return _email._id === _emailId;
      });
      if (_matchingEmail) {
        fn(_matchingEmail);
      } else {
        var apiUrl = baseUrl + ['cms', 'email', _emailId].join('/');
        $http.get(apiUrl)
          .success(function (data, status, headers, config) {
            fn(data);
          })
          .error(function (err) {
            console.warn('END:getSingleEmail with ERROR');
            fn(err, null);
          });
      }
    };

    //website/:websiteid/page/:handle
    this.getSinglePost = function (handle, fn) {
      var apiUrl = baseUrl + ['cms', 'website', $$.server.websiteId, 'blog', handle].join('/');
      $http.get(apiUrl)
        .success(function (data, status, headers, config) {
          fn(data);
        })
        .error(function (err) {
          console.warn('END:getSinglePost with ERROR');
          fn(err, null);
        });
    };

    //page/:id/versions
    this.getPageVersions = function (pageId, fn) {
      var apiUrl = baseUrl + ['cms', 'page', pageId, 'versions'].join('/');
      $http.get(apiUrl)
        .success(function (data, status, headers, config) {
          fn(data);
        })
        .error(function (err) {
          console.warn('END:getPageVersions with ERROR');
          fn(err, null);
        });
    };

    //page/:id/revert/:version
    this.revertPageVersion = function (pageId, versionId, fn) {
      var apiUrl = baseUrl + ['cms', 'page', pageId, 'revert', versionId].join('/');
      $http({
        url: apiUrl,
        method: "POST"
      }).success(function (data, status, headers, config) {
        fn(data);
      }).error(function (err) {
        console.warn('END:Website Service revertPageVersion with ERROR');
        fn(err, null);
      });
    };

    var resetEmailCache = false;

    this.getEmails = function (getStats, fn) {
      console.log('getEmails >>> ');
      var self = this;
      var data = emailcache.get('emails');
      if (data && data.length && !resetEmailCache) {
        if (fn) {
          fn(data);
        }
      } else {
        var deferred = $q.defer();
        var apiUrl = baseUrl + ['cms', 'website', $$.server.websiteId.replace(/&quot;/g, ''), 'emails'].join('/');
        $http.get(apiUrl)
          .success(function (data, status, headers, config) {
            console.log('data >>> ', data);
            resetEmailCache = false;
            emailcache.put('emails', data);
            console.log('emailcache ', emailcache);
            if (getStats) {
              ChartEmailService.queryMandrillData(data, function (_data) {
                console.log('_data >>> ', _data);
                if (fn) {
                  console.log('resolve >>> ');
                  deferred.resolve(fn(_data));
                }
              });
            } else {
              deferred.resolve(fn(data));
            }
          })
          .error(function (err) {
            console.warn('END:Website Service with ERROR');
            fn(err, null);
          });
        return deferred.promise;
      }
    };

    var resetCache = false;

    this.getPages = function (fn) {
      var self = this;
      var data = pagecache.get('pages');
      if (data && !resetCache) {
        if (fn) {
          fn(data);
          // self.getPagesHeartbeat();
        }
      } else {
        var apiUrl = baseUrl + ['cms', 'website', $$.server.websiteId.replace(/&quot;/g, ''), 'pages'].join('/');
        $http.get(apiUrl)
          .success(function (data) {
            resetCache = false;
            pagecache.put('pages', data);
            if (fn) {
              fn(data);
            }
            // self.getPagesHeartbeat();
          }).error(function (msg, code) {
            console.warn(msg, code);
          });
      }
    };

    var heartrepeater;

    this.getPagesHeartbeat = function () {
      var self = this;

      function checkPulse() {
        $timeout.cancel(self.heartrepeater);
        var apiUrl = baseUrl + ['cms', 'website', $$.server.websiteId.replace(/&quot;/g, ''), 'pagesheartbeat'].join('/');
        $http.get(apiUrl)
          .success(function (data, status, headers, config) {
            console.log('data.pagelength >>> ', data.pagelength);
            console.log('_.size(pagecache.get(pages)) ', _.size(pagecache.get('pages')));
            if (data.pagelength > _.size(pagecache.get('pages'))) {
              resetCache = true;
              self.getPages(null);
            }
          })
          .error(function (err) {
            console.warn('END:Website Service with ERROR');
          });
        self.heartrepeater = $timeout(checkPulse, 60000);
      }

      checkPulse();

    };


    this.getPagesWithLimit = function (accountId, queryParams, fn) {
      var apiUrl = baseUrl + ['cms', 'website', accountId, 'pages'].join('/');
      $http({
        url: apiUrl,
        method: 'GET',
        params: queryParams
      }).success(function (data, status, headers, config) {
        fn(data);
      }).error(function (err) {
        console.warn('END:Website Service with ERROR');
        fn(err, null);
      });
    };

    this.getPosts = function (fn) {
      var apiUrl = baseUrl + ['cms', 'editor', 'blog'].join('/');
      $http.get(apiUrl)
        .success(function (data, status, headers, config) {
          fn(data.results);
        })
        .error(function (err) {
          console.warn('END:Get Posts with ERROR');
          fn(err, null);
        });
    };

    this.getPostsWithLimit = function (queryParams, fn) {
      var apiUrl = baseUrl + ['cms', 'editor', 'blog'].join('/');
      $http({
        url: apiUrl,
        method: 'GET',
        params: queryParams
      }).success(function (data, status, headers, config) {
        fn(data);
      }).error(function (err) {
        console.warn('END:Get Posts with ERROR');
        fn(err, null);
      });
    };

    // website/:websiteId/page/:id
    this.updatePage = function (page, handle, fn) {
      if (!page.modified) {
        page.modified = {};
      }
      page.modified.date = new Date();
      var apiUrl = baseUrl + ['cms', 'website', $$.server.websiteId, 'page', page._id].join('/');
      $http({
        url: apiUrl,
        method: "POST",
        data: angular.toJson(page)
      }).success(function (data, status, headers, config) {
        if (page.type === 'page') {
          var _pages = pagecache.get('pages');
          if (_pages) {
            if(data.handle !== handle)
            {
              delete _pages[handle];
            }
            _pages[data.handle] = data;
            pagecache.put('pages', _pages);
          }

        }
        fn(data);
      }).error(function (err) {
        console.warn('END:Website Service updatePage with ERROR');
        fn(null, err);
      });
    };

    //page/:id/components/all
    this.updateComponentOrder = function (pageId, componentId, newOrder, fn) {
      var apiUrl = baseUrl + ['cms', 'page', pageId, 'components', componentId, 'order', newOrder].join('/');
      $http({
        url: apiUrl,
        method: "POST"
      }).success(function (data, status, headers, config) {
        fn(data);
      }).error(function (err) {
        console.warn('END:Website Service with ERROR');
        fn(err, null);
      });
    };

    this.sendTestEmail = function (emailAddressObj, emailContentObj, fn) {
      var payload = angular.toJson({
        address: emailAddressObj,
        content: emailContentObj,
      });

      console.log('WebsiteService.sendTestEmail - payload', payload);

      var apiUrl = baseUrl + ['cms', 'testemail'].join('/');
      $http({
        url: apiUrl,
        method: "POST",
        data: payload,
      }).success(function (data, status, headers, config) {
        fn(data);
      }).error(function (err) {
        console.warn('END:Website Service with ERROR');
        fn(err, null);
      });
    };

    //page/:id/components/all
    this.updateAllComponents = function (pageId, componentJSON, fn) {
      var apiUrl = baseUrl + ['cms', 'page', pageId, 'components', 'all'].join('/');
      $http({
        url: apiUrl,
        method: "POST",
        //angular.toJson() used instead of JSON.stringify to remove $$hashkey value
        data: angular.toJson(componentJSON)
      }).success(function (data, status, headers, config) {
        fn(data);
      }).error(function (err) {
        console.warn('END:updateAllComponents with ERROR', err);
        fn(err);
      });
    };

    //page/:id/components/:componentId
    this.updateComponent = function (pageId, componentId, componentJSON, fn) {
      var apiUrl = baseUrl + ['cms', 'page', pageId, 'components', componentId].join('/');
      $http({
        url: apiUrl,
        method: "POST",
        //angular.toJson() used instead of JSON.stringify to remove $$hashkey value
        data: angular.toJson(componentJSON)
      }).success(function (data, status, headers, config) {
        fn(data);
      }).error(function (err) {
        console.warn('END:Website Service with ERROR');
        fn(err);
      });
    };

    //page/:id/components
    this.addNewComponent = function (pageId, title, type, cmpVersion, fn) {
      var apiUrl = baseUrl + ['cms', 'page', pageId, 'components'].join('/');
      var data = {
        title: title,
        type: type,
        cmpVersion: cmpVersion
      };
      $http({
        url: apiUrl,
        method: "POST",
        data: angular.toJson(data)
      }).success(function (data, status, headers, config) {
        fn(data);
      }).error(function (err) {
        console.warn('END:Website Service with ERROR');
      });
    };

    //page/:id/components/:componentId
    this.deleteComponent = function (pageId, componentId, fn) {
      var apiUrl = baseUrl + ['cms', 'page', pageId, 'components', componentId].join('/');
      $http({
        url: apiUrl,
        method: "DELETE"
      }).success(function (data, status, headers, config) {
        fn(data);
      }).error(function (err) {
        console.warn('END:Website Service with ERROR');
      });
    };

    //website/:websiteId/page
    this.createPage = function (websiteId, pagedata, fn) {
      var apiUrl = baseUrl + ['cms', 'website', websiteId, 'page'].join('/');
      $http({
        url: apiUrl,
        method: "POST",
        data: angular.toJson(pagedata)
      }).success(function (data, status, headers, config) {
        var _pages = pagecache.get('pages');
        _pages[data.handle] = data;
        pagecache.put('pages', _pages);
        fn(data);
      }).error(function (err) {
        console.warn('END:Create Page with ERROR');
      });
    };

    //email
    this.createEmail = function (emaildata, fn) {
      var apiUrl = baseUrl + ['cms', 'email'].join('/');
      $http({
        url: apiUrl,
        method: "POST",
        data: angular.toJson(emaildata)
      }).success(function (data, status, headers, config) {
        var _emails = emailcache.get('emails');
        if (_emails) {
          _emails.push(data);
          emailcache.put('emails', _emails);
        }
        fn(data, null);
      }).error(function (err) {
        console.warn('END:Create Email with ERROR');
        fn(null, err);
      });
    };

    this.updateEmail = function (emaildata, fn) {
      var apiUrl = baseUrl + ['cms', 'email', emaildata._id].join('/');
      $http({
        url: apiUrl,
        method: "PUT",
        data: angular.toJson(emaildata)
      }).success(function (data, status, headers, config) {
        var _emails = emailcache.get('emails');
          if (_emails) {
              var updatedEmail = _.find(_emails, function (_email) {
                return _email._id === data._id;
              });
              if(updatedEmail) {
                var _emailIndex  = _.indexOf(_emails, updatedEmail);
                _emails[_emailIndex] = data;
              }
            emailcache.put('emails', _emails);
          }
        fn(data, null);
      }).error(function (err) {
        console.warn('END:Create Email with ERROR');
        fn(null, err);
      });
    };

    //email/:id/
    this.deleteEmail = function (email, fn) {
      var apiUrl = baseUrl + ['cms', 'email', email._id].join('/');
      $http.delete(apiUrl).success(function (data, status, headers, config) {
        var _emails = emailcache.get('emails');
        _emails = _.reject(_emails, function (_email) {
          return _email._id === email._id;
        });
        emailcache.put('emails', _emails);
        fn(data);
      }).error(function (err) {
        console.warn('END:Delete Email with ERROR', err);
        fn(err);
      });
    };

    //website/:websiteId/duplicate/page
    this.createDuplicatePage = function (pagedata, fn) {
      var apiUrl = baseUrl + ['cms', 'website', $$.server.websiteId, 'duplicate', 'page'].join('/');
      $http({
        url: apiUrl,
        method: "POST",
        data: angular.toJson(pagedata)
      }).success(function (data, status, headers, config) {
        if (pagedata.type === 'page') {
          var _pages = pagecache.get('pages');
          if (_pages) {
            _pages[data.handle] = data;
            pagecache.put('pages', _pages);
          }
        }
        fn(data);
      }).error(function (err) {
        console.warn('END:Create Page with ERROR');
      });
    };

    //template/:id/website/:websiteId/page/
    this.createPageFromTemplate = function (templateId, pagedata, fn) {
      var apiUrl = baseUrl + ['cms', 'template', templateId, 'website', $$.server.websiteId, 'page'].join('/');
      $http({
        url: apiUrl,
        method: "POST",
        data: angular.toJson(pagedata)
      }).success(function (data, status, headers, config) {
        var _pages = pagecache.get('pages');
        _pages[data.handle] = data;
        pagecache.put('pages', _pages);
        fn(data);
      }).error(function (err) {
        fn(null, err);
      });
    };

    this.createPost = function (pageId, postdata, fn) {
      if (!postdata.created) {
        postdata.created = {};
      }
      if (!postdata.modified) {
        postdata.modified = {};
      }
      postdata.created.date = new Date().getTime();
      postdata.modified.date = new Date().getTime();
      var apiUrl = baseUrl + ['cms', 'page', pageId, 'blog'].join('/');
      $http({
        url: apiUrl,
        method: "POST",
        data: angular.toJson(postdata)
      }).success(function (data, status, headers, config) {
        fn(data);
      }).error(function (err) {
        console.warn('END:Create Page with ERROR', err);
      });
    };

    //website/:websiteId/page/:id/:label
    this.deletePage = function (page, websiteId, label, fn) {
      var apiUrl = baseUrl + ['cms', 'website', websiteId, 'page', page._id, label].join('/');
      $http.delete(apiUrl).success(function (data, status, headers, config) {
        var _pages = pagecache.get('pages');
        var _matchingPage = _.find(_pages, function (_page) {
          return _page.handle === page.handle;
        });
        if (_matchingPage) {
          delete _pages[page.handle];
          pagecache.put('pages', _pages);
        }
        fn(data);
      }).error(function (err) {
        console.warn('END:Delete Page with ERROR', err);
        fn(err);
      });
    };

    this.deletePost = function (pageId, postId, fn) {
      var apiUrl = baseUrl + ['cms', 'page', pageId, 'blog', postId].join('/');
      $http.delete(apiUrl)
        .success(function (data, status, headers, config) {
          fn(data);
        }).error(function (err) {
          console.warn('END:Delete Page with ERROR', err);
          fn(err);
        });
    };

    this.bulkDeletePosts = function (pageId, postIds, fn) {
      var apiUrl = baseUrl + ['cms', 'page', pageId, 'blogposts'].join('/');
      $http({
        url: apiUrl,
        method: "POST",
        data: {id: postIds},
      })
      .success(function (data, status, headers, config) {
        fn(data);
      }).error(function (err) {
        console.warn('END:Delete Page with ERROR', err);
        fn(err);
      });
    };

    this.getTemplates = function (fn) {
      var apiUrl = baseUrl + ['cms', 'template'].join('/');
      $http.get(apiUrl)
        .success(function (data, status, headers, config) {
          fn(data);
        });
    };

    this.updateTemplate = function (templateId, templatedata, fn) {
      var apiUrl = baseUrl + ['cms', 'template', templateId].join('/');
      $http({
        url: apiUrl,
        method: "POST",
        data: angular.toJson(templatedata)
      }).success(function (data, status, headers, config) {
        fn(data);
      }).error(function (err) {
        console.warn('END:Update Template with ERROR', err);
        fn(null, err);
      });
    };

    this.getTopics = function (fn) {
      var apiUrl = baseUrl + ['cms', 'topic'].join('/');
      $http.get(apiUrl)
        .success(function (data, status, headers, config) {
          fn(data);
        });
    };

    this.createTopic = function (topic, fn) {
      var apiUrl = baseUrl + ['cms', 'topic'].join('/');
      $http({
        url: apiUrl,
        method: "POST",
        data: angular.toJson(topic)
      }).success(function (data, status, headers, config) {
        fn(data);
      }).error(function (err) {
        console.warn('END:Update Topic with ERROR', err);
      });
    };

    this.updateTopic = function (topic, fn) {
      var apiUrl = baseUrl + ['cms', 'topic', topic._id].join('/');
      $http({
        url: apiUrl,
        method: "PUT",
        data: angular.toJson(topic)
      }).success(function (data, status, headers, config) {
        fn(data);
      }).error(function (err) {
        console.warn('END:Update Topic with ERROR', err);
        fn(null, err);
      });
    };

    this.deleteTopic = function (topic, fn) {
      var apiUrl = baseUrl + ['cms', 'topic', topic._id].join('/');
      $http.delete(apiUrl)
        .success(function (data, status, headers, config) {
          fn(data);
        }).error(function (err) {
          console.warn('END:Delete Topic with ERROR', err);
          fn(err);
        });
    };

    this.getPageComponents = function (pageId, fn) {
      var apiUrl = baseUrl + ['cms', 'page', pageId, 'components'].join('/');
      $http.get(apiUrl).success(function (data, status, headers, config) {
        fn(data);
      });
    };

    this.getComponentVersions = function (componentType, fn) {
      var apiUrl = baseUrl + ['cms', 'component', componentType, 'versions'].join('/');
      $http.get(apiUrl).success(function (data, status, headers, config) {
        fn(data);
      });
    };

    this.setWebsiteTheme = function (themeId, websiteId, fn) {
      var apiUrl = baseUrl + ['cms', 'theme', themeId, 'website', websiteId].join('/');
      $http.post(apiUrl).success(function (data, status, headers, config) {
        fn(data);
      });
    };

    this.createPageFromTheme = function (themeId, websiteId, handle, fn) {
      var apiUrl = baseUrl + ['cms', 'theme', themeId, 'website', websiteId, 'page', handle].join('/');
      $http.post(apiUrl).success(function (data, status, headers, config) {
        fn(data);
      });
    };

    this.updateLinkList = function (data, websiteId, handle, fn) {
      var apiUrl = baseUrl + ['cms', 'website', websiteId, 'linklists', handle].join('/');
      $http({
        url: apiUrl,
        method: "POST",
        data: data
      }).success(function (data, status, headers, config) {
        fn(data);
      }).error(function (err) {
        console.warn('END:Website Service with ERROR', err);
        fn(err, null);
      });
    };

    this.getComponent = function (component, cmpVersion, fn) {
      var apiUrl = baseUrl + ['cms', 'component', component.type].join('/');
      $http({
        url: apiUrl,
        method: "POST",
        data: angular.toJson({
          version: cmpVersion
        })
      }).success(function (data, status, headers, config) {
        fn(data);
      });
    };

    this.getPageScreenShot = function (handle, fn) {
      var apiUrl = baseUrl + ['cms', 'page', handle, 'savedscreenshot'].join('/');
      $http.get(apiUrl).success(function (data, status, headers, config) {
        fn(data);
      });
    };

    //page/:pageId/blog/:postId'
    this.updatePost = function (pageId, postId, postdata, fn) {
      var apiUrl = baseUrl + ['cms', 'page', pageId, 'blog', postId].join('/');
      $http({
        url: apiUrl,
        method: "POST",
        data: angular.toJson(postdata)
      }).success(function (data, status, headers, config) {
        fn(data);
      }).error(function (err) {
        console.warn('END:Website Service updatePost with ERROR');
        fn(null, err);
      });
    };

    //page/:pageId/blog/status/:postId'
    this.publishPost = function (pageId, postId, fn) {
      var apiUrl = baseUrl + ['cms', 'page', pageId, 'blog', 'status', postId].join('/');
      $http({
        url: apiUrl,
        method: "PUT"
      }).success(function (data, status, headers, config) {
        fn(data);
      }).error(function (err) {
        console.warn('END:Website Service updatePostStatus with ERROR');
        fn(err, null);
      });
    };

    this.checkEmailTitleExists = function (_name, fn) {
      var self = this;
      self.getEmails(function(emails) {
        console.log('emails ', emails);
        var _matchingEmail = _.find(emails, function(email) {
          return email.title === _name;
        });
        if (_matchingEmail) {
          fn(true);
        } else {
          fn(false);
        }
      });
    };

    this.isImage =function(src) {
      var deferred = $q.defer();
      var image = new Image();
      image.onerror = function() {
          deferred.resolve(false);
      };
      image.onload = function() {
          deferred.resolve(true);
      };
      image.src = src;
      return deferred.promise;
    }

    this.checkSystemRoute = function(handle){
      var inValidPageHandles = pageConstant.inValidPageHandles;
      if(inValidPageHandles[handle.toLowerCase()]){
        return "Page handle cannot be a system route.";
      }
      return false;
    }
    
    this.getEmailStatsPromise = function (emailId) {
      var apiUrl = baseUrl + ['cms', 'email', emailId, 'stats'].join('/');
      return $http.get(apiUrl);
    };


  });
}(angular));

(function(){

app.directive('ssbComponentLoader', ssbComponentLoader);

ssbComponentLoader.$inject = ['$compile', '$timeout'];
/* @ngInject */
function ssbComponentLoader($compile, $timeout) {
  return {
  	restrict: 'E',
  	controller: 'SiteBuilderComponentLoaderController',
  	controllerAs: 'vm',
  	bindToController: true,
      scope: {
        component: "=",
      	website: "=",
      	state: '=',
      	uiState: '=',
        componentClass: '&',
        componentStyle: '&',
        componentControl: '=',
        componentMedia: '=',
        sectionIndex: '=',
        componentIndex: '=',
        showComponent: '='
      },
    replace: true,
  	link: function (scope, element, attrs, ctrl) {
        var newEl;
  		var template = '<div ' + ctrl.component.type + '-component ' +
                        'id="component_' + ctrl.component._id + '" ' +
                        'component="vm.component" ' +
                        'website="vm.website" ' +
                        'state="vm.state" ' +
                        'ui-state="vm.uiState" ' +
                        'ssb-editor="true" ' +
                        'class="ssb-component ssb-{{vm.component.type}} {{vm.componentClass(vm.component)}}" ' +
                        'ng-attr-style="{{vm.componentStyle(vm.component)}}" ' +
                        'control="vm.componentControl"' +
                        'media="vm.componentMedia(componentId, index, update, fields)" ' +
                        'ng-mouseenter="vm.hover($event);" ' +
                        'ng-if="vm.showComponent">' +
                      '</div>';

        //if edit mode
        if (ctrl.uiState) {
            template =  '<ssb-edit-control ' +
                            'class="ssb-edit-control ssb-edit-control-component" ' +
                            'component="vm.component" ' +
                            'state="vm.state" ' +
                            'ui-state="vm.uiState" ' +
                            'section-index="vm.sectionIndex" ' +
                            'component-index="vm.componentIndex">' +
                        '</ssb-edit-control>\n' +
                        template;
        }

  		var compiled = $compile(template)(scope)
        element.replaceWith(compiled);

        $timeout(function() {
            newEl = angular.element('#component_' + ctrl.component._id);
            ctrl.init(newEl);
        });

  	}
  }

}

})();

(function(){

app.controller('SiteBuilderComponentLoaderController', ssbComponentLoaderController);

ssbComponentLoaderController.$inject = ['$rootScope', '$scope', '$attrs', '$filter'];
/* @ngInject */
function ssbComponentLoaderController($rootScope, $scope, $attrs, $filter) {

    console.info('component-loader directive init...')

    var vm = this;

    vm.init = init;
    vm.hover = hover;

    function hover(e) {

    }

    function init(element) {
    	vm.element = element;
    }

}

})();

'use strict';
/*global app*/
app.controller('SiteBuilderContactUsModalController', ['$scope', '$timeout', 'parentVm', 'toaster', 'SimpleSiteBuilderService', 'GeocodeService', 'hoursConstant', function ($scope, $timeout, parentVm, toaster, SimpleSiteBuilderService, GeocodeService, hoursConstant) {

    var vm = this;

    vm.parentVm = parentVm;

    vm.component = parentVm.state.page.sections[parentVm.uiState.activeSectionIndex].components[parentVm.uiState.activeComponentIndex];
    vm.originalContactMap = angular.copy(vm.component.location);
    vm.place = {};
    vm.place.address = null;
    vm.errorMapData = false;
    vm.showAddress = false;
    vm.hours = hoursConstant;

    vm.saveComponent = saveComponent;
    vm.updateContactUsAddress = updateContactUsAddress;
    vm.setLatLon = setLatLon;
    vm.validateGeoAddress = validateGeoAddress;
    vm.validateHours = validateHours;


    function updateContactUsAddress() {
        if (!angular.equals(vm.originalContactMap, vm.component.location)) {
            vm.locationAddress = null;
            vm.setLatLon();
            vm.validateGeoAddress();
        }
    }

    function setLatLon(lat, lon) {
        vm.component.location.lat = lat;
        vm.component.location.lon = lon;
    }

    function validateGeoAddress(fn) {
        GeocodeService.validateAddress(vm.component.location, vm.locationAddress, function (data, results) {
            if (data && results.length === 1) {
                $timeout(function () {
                    $scope.$apply(function () {
                        vm.setLatLon(results[0].geometry.location.lat(), results[0].geometry.location.lng());
                        vm.errorMapData = false;
                        angular.copy(vm.component.location, vm.originalContactMap);
                        vm.parentVm.uiState.componentControl.refreshMap();
                    });
                }, 0);
            } else {
                $timeout(function () {
                    $scope.$apply(function () {
                        vm.errorMapData = true;
                        angular.copy(vm.component.location, vm.originalContactMap);
                    });
                }, 0);
            }
            if (fn) {
                fn();
            }
        });
    };

    function saveComponent(is_address) {
        if (is_address) {
            vm.parentVm.uiState.componentControl.refreshMap();
            vm.place.address = GeocodeService.stringifyAddress(vm.component.location);
        } else {
            vm.parentVm.uiState.componentControl.refreshHours();
        }
    };

    vm.contactHoursInvalid = false;
    vm.contactHours = [];
    var i = 0;
    for (i; i <= 6; i++) {
      vm.contactHours.push({
        "valid": true
      });
    }

    function validateHours(hours, index) {
        vm.contactHours[index].valid = true;
        if (!hours.closed) {
            var startTime = hours.start;
            var endTime = hours.end;

            if (startTime && endTime) {
                startTime = startTime.split(" ")[1] === 'pm' && startTime.split(":")[0] !== '12' ? parseInt(startTime.split(":")[0], 10) + 12 : parseInt(startTime.split(":")[0], 10);
                endTime = endTime.split(" ")[1] === 'pm' && endTime.split(":")[0] !== '12' ? parseInt(endTime.split(":")[0], 10) + 12 : parseInt(endTime.split(":")[0], 10);
                startTime = parseInt(hours.start.split(":")[1], 10) === 30 ? startTime + 0.5 : startTime;
                endTime = parseInt(hours.end.split(":")[1], 10) === 30 ? endTime + 0.5 : endTime;
            }

            if (hours.split && vm.component.splitHours) {
                angular.element("#business_hours_start_" + index).removeClass('has-error');
                angular.element("#business_hours_start2_" + index).removeClass('has-error');
                angular.element("#business_hours_end_" + index).removeClass('has-error');
                var startTime2 = hours.start2;
                var endTime2 = hours.end2;

                if (startTime2 && endTime2) {
                    startTime2 = startTime2.split(" ")[1] === 'pm' && startTime2.split(":")[0] !== '12' ? parseInt(startTime2.split(":")[0], 10) + 12 : parseInt(startTime2.split(":")[0], 10);
                    endTime2 = endTime2.split(" ")[1] === 'pm' && endTime2.split(":")[0] !== '12' ? parseInt(endTime2.split(":")[0], 10) + 12 : parseInt(endTime2.split(":")[0], 10);
                    startTime2 = parseInt(hours.start2.split(":")[1], 10) === 30 ? startTime2 + 0.5 : startTime2;
                    endTime2 = parseInt(hours.end2.split(":")[1], 10) === 30 ? endTime2 + 0.5 : endTime2;
                }

                if (startTime > endTime || startTime > startTime2 || startTime > endTime2) {
                    if (startTime > endTime) {
                        angular.element("#business_hours_start_" + index).addClass('has-error');
                    } else if (startTime > startTime2) {
                        angular.element("#business_hours_start_" + index).addClass('has-error');
                    } else if (startTime > endTime2) {
                        angular.element("#business_hours_start_" + index).addClass('has-error');
                    }
                    vm.contactHours[index].valid = false;
                }

                if (endTime > startTime2 || endTime > endTime2) {
                    if (endTime > startTime2) {
                        angular.element("#business_hours_end_" + index).addClass('has-error');
                    } else if (endTime > endTime2) {
                        angular.element("#business_hours_end_" + index).addClass('has-error');
                    }
                    vm.contactHours[index].valid = false;
                }

                if (startTime2 > endTime2) {
                    angular.element("#business_hours_start2_" + index).addClass('has-error');
                    vm.contactHours[index].valid = false;
                }

            } else if (!hours.wholeday) {
                angular.element("#business_hours_start_" + index).removeClass('has-error');
                if (startTime > endTime) {
                    angular.element("#business_hours_start_" + index).addClass('has-error');
                    vm.contactHours[index].valid = false;
                }
            }
        }

        var validate = _.where(vm.contactHours, {
            valid: false
        });
        if (validate && validate.length) {
            vm.contactHoursInvalid = true;
        } else {
            vm.contactHoursInvalid = false;
        }
    };

    var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        administrative_area_level_1: 'short_name',
        postal_code: 'short_name',
        country: 'short_name'
    };

    var fillInAddress = function (place) {
        // Get each component of the address from the place details
        // and fill the corresponding field on the form.
        setDefaultAddress();
        var i = 0;
        var addressType, val;
        for (i; i < place.address_components.length; i++) {
          addressType = place.address_components[i].types[0];
          if (componentForm[addressType]) {
            val = place.address_components[i][componentForm[addressType]];
            if (addressType === 'street_number') {
              vm.component.location.address = val;
            } else if (addressType === 'route') {
              vm.component.location.address2 = val;
            } else if (addressType === 'locality') {
              vm.component.location.city = val;
            } else if (addressType === 'administrative_area_level_1') {
              vm.component.location.state = val;
            } else if (addressType === 'postal_code') {
              vm.component.location.zip = val;
            } else if (addressType === 'country') {
              vm.component.location.country = val;
            }
          }
        }
        vm.component.location.lat = place.geometry.location.lat();
        vm.component.location.lon = place.geometry.location.lng();
    };

    var setDefaultAddress = function () {
        vm.component.location.address = "";
        vm.component.location.address2 = "";
        vm.component.location.city = "";
        vm.component.location.state = "";
        vm.component.location.zip = "";
        vm.component.location.country = "";
    };

    vm.place.address = GeocodeService.stringifyAddress(vm.component.location);
    $scope.$watch('vm.place.address', function (newValue) {
        if (newValue) {
          if (angular.isObject(newValue)) {
            fillInAddress(newValue);
            vm.locationAddress = newValue;
            vm.setLatLon();
            vm.validateGeoAddress();
          }
        }
    });

    (function init() {

        console.debug('ContactUsModalController')

    })();

}]);

'use strict';
/*global app*/
app.controller('SiteBuilderSocialLinkModalController', ['$timeout', 'parentVm', 'toaster', 'SimpleSiteBuilderService', function ($timeout, parentVm, toaster, SimpleSiteBuilderService) {

    var vm = this;

    vm.parentVm = parentVm;
    vm.setSelectedLink = setSelectedLink;
    // vm.setSelectedSocialLink = setSelectedSocialLink;
    vm.saveSocialLink = saveSocialLink;
    vm.updateSocialNetworks = updateSocialNetworks;

    vm.component = parentVm.state.page.sections[parentVm.uiState.activeSectionIndex].components[parentVm.uiState.activeComponentIndex];
    vm.social = {};

    function setSelectedLink(social_link) {
        vm.social = social_link;
        var isLinkAdded = _.findWhere(vm.component.networks, {
            name: social_link.name
        });

        if (isLinkAdded) {
            console.log('link is added already')
            vm.social.selectedLink = social_link.name;
        } else {
            console.log('link is NOT added already')
            vm.social.selectedLink = null;
        }

    };

    // function setSelectedSocialLink(link, id, update, nested, index) {

    //     if (!vm.social) {
    //         vm.social = {};
    //     }

    //     if (nested) {
    //         vm.meetTeamIndex = index;
    //     } else {
    //         vm.meetTeamIndex = null;
    //     }
    //     if (update) {
    //         vm.social.selectedLink = link.name;
    //         vm.social.name = link.name;
    //         vm.social.icon = link.icon;
    //         vm.social.url = link.url;
    //     } else {
    //         vm.social = {};
    //     }

    //     if(vm.social.selectedLink){
    //         vm.matchingLink = _.findWhere(vm.social_links, {
    //             name: vm.social.selectedLink
    //         });
    //     }

    //     angular.element("#social-link-name .error").html("");
    //     angular.element("#social-link-name").removeClass('has-error');
    //     angular.element("#social-link-url .error").html("");
    //     angular.element("#social-link-url").removeClass('has-error');

    //     vm.component.networks = vm.component.networks;

    // };

    function saveSocialLink(social, id, mode) {
        angular.element("#social-link-name .error").html("");
        angular.element("#social-link-name").removeClass('has-error');
        angular.element("#social-link-url .error").html("");
        angular.element("#social-link-url").removeClass('has-error');
        var old_value = _.findWhere(vm.component.networks, {
          name: vm.social.selectedLink
        });
        var selectedName;
        switch (mode) {
          case "add":
            if (social && social.name) {
              if (!social.url || social.url == "") {
                angular.element("#social-link-url .error").html("Link url can not be blank.");
                angular.element("#social-link-url").addClass('has-error');
                return;
              }

              if (social.url) {
                var urlRegex = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
                if (urlRegex.test(social.url) == false) {
                  angular.element("#social-link-url .error").html("Link url incorrect format");
                  angular.element("#social-link-url").addClass('has-error');
                  return;
                }
              }
              selectedName = _.findWhere(vm.component.networks, {
                name: social.name
              });
              if (selectedName) {
                angular.element("#social-link-name .error").html("Link icon already exists");
                angular.element("#social-link-name").addClass('has-error');
                return;
              }
              var selectedUrl = _.findWhere(vm.component.networks, {
                url: social.url
              });
              if (selectedUrl) {
                angular.element("#social-link-url .error").html("Link url already exists");
                angular.element("#social-link-url").addClass('has-error');
                return;
              }
            } else {
              angular.element("#social-link-url .error").html("Please enter link url.");
              angular.element("#social-link-url").addClass('has-error');
              angular.element("#social-link-name .error").html("Please select link icon.");
              angular.element("#social-link-name").addClass('has-error');
              return;
            }
            angular.element("#social-link-name .error").html("");
            angular.element("#social-link-name").removeClass('has-error');
            angular.element("#social-link-url .error").html("");
            angular.element("#social-link-url").removeClass('has-error');
            break;
          case "update":
            if (social && social.name && social.url) {
              var networks = angular.copy(vm.component.networks);

              selectedName = _.findWhere(networks, {
                name: old_value.name
              });
              selectedName.name = social.name;
              selectedName.url = social.url;
              selectedName.icon = social.icon;


              var existingName = _.where(networks, {
                name: social.name
              });
              var existingUrl = _.where(networks, {
                url: social.url
              });
              if (existingName.length > 1) {
                angular.element("#social-link-name .error").html("Link icon already exists");
                angular.element("#social-link-name").addClass('has-error');
                return;
              } else if (existingUrl.length > 1) {
                angular.element("#social-link-url .error").html("Link url already exists");
                angular.element("#social-link-url").addClass('has-error');
                return;
              }
            }
            break;
        }

        // if (vm.meetTeamIndex !== null) {
        //     vm.updateTeamNetworks(old_value, mode, social, vm.meetTeamIndex);
        // } else {
            vm.updateSocialNetworks(old_value, mode, social);
            vm.social = {};
            vm.meetTeamIndex = null;
            vm.parentVm.closeModal();
        // }

    }

    function updateSocialNetworks(old_value, mode, new_value) {
        var selectedName;
        switch (mode) {
          case "add":
            if (new_value && new_value.name && new_value.url) {
              vm.component.networks.push({
                name: new_value.name,
                url: new_value.url,
                icon: new_value.icon
              });
            }
            break;
          case "update":
            if (new_value && new_value.name && new_value.url) {
              selectedName = _.findWhere(vm.component.networks, {
                name: old_value.name
              });
              selectedName.name = new_value.name;
              selectedName.url = new_value.url;
              selectedName.icon = new_value.icon;
            }
            break;
          case "delete":
            //wait for modal animation for 500ms
            $timeout(function () {
              selectedName = _.findWhere(vm.component.networks, {
                name: old_value.name
              });
              if (selectedName) {
                  var index = vm.component.networks.indexOf(selectedName)
                  vm.component.networks.splice(index, 1);
              }
              
            }, 500);
            break;
        }
    };

    (function init() {

        // vm.setSelectedSocialLink(vm.component.network, );

    })();

}]);

(function(){

app.directive('ssbBlogPostCardComponent', ssbBlogPostCardComponent);

function ssbBlogPostCardComponent() {
  return {
  	// transclude: true,
  	restrict: 'A',
  	controller: 'SiteBuilderBlogPostCardComponentController',
  	controllerAs: 'vm',
  	bindToController: true,
    scope: {
        ssbEditor: '=',
        componentClass: '&',
        component: '=',
        post: '=?',
        compactView: '=?',
        filteredPostView: '=?'
    },
    templateUrl: '/admin/assets/js/ssb-site-builder/ssb-components/ssb-blog-post/ssb-blog-post-card/ssb-blog-post-card.component.html',
    replace: true,
  	link: function (scope, element, attrs, ctrl) {
  		ctrl.init(element);
  	}
  }

}

})();

(function(){

app.controller('SiteBuilderBlogPostCardComponentController', ssbBlogPostCardComponentController);

ssbBlogPostCardComponentController.$inject = ['$scope', '$attrs', '$filter', '$location', 'SimpleSiteBuilderBlogService'];
/* @ngInject */
function ssbBlogPostCardComponentController($scope, $attrs, $filter, $location, SimpleSiteBuilderBlogService) {

    console.info('ssb-blog-post-card directive init...')

    var vm = this;

    vm.init = init;
    vm.initData = initData;

    function initData() {
        var posts = SimpleSiteBuilderBlogService.loadDataFromPage('script#indigenous-precache-sitedata-posts');
        if(posts && posts.length)
           vm.post = posts[0];

    }

    function init(element) {
        vm.element = element;

        if (!vm.post) {
            vm.initData();
        }

    }


}


})();

(function(){

app.directive('ssbBlogPostDetailComponent', ssbBlogPostDetailComponent);

function ssbBlogPostDetailComponent() {
  return {
  	// transclude: true,
  	restrict: 'A',
  	controller: 'SiteBuilderBlogPostDetailComponentController',
  	controllerAs: 'vm',
  	bindToController: true,
    scope: {
      ssbEditor: '=',
      componentClass: '&',
      component: '=',
      post: '=?'
    },
    templateUrl: '/admin/assets/js/ssb-site-builder/ssb-components/ssb-blog-post/ssb-blog-post-detail/ssb-blog-post-detail.component.html',
    replace: true,
  	link: function (scope, element, attrs, ctrl) {
  		ctrl.init(element);
  	}
  }

}

})();

(function(){

app.controller('SiteBuilderBlogPostDetailComponentController', ssbBlogPostDetailComponentController);

ssbBlogPostDetailComponentController.$inject = ['$scope', '$attrs', '$filter', '$transclude', '$location', 'SimpleSiteBuilderBlogService'];
/* @ngInject */
function ssbBlogPostDetailComponentController($scope, $attrs, $filter, $transclude, $location, SimpleSiteBuilderBlogService) {

    console.info('ssb-blog-post-detail directive init...')

    var vm = this;

    vm.init = init;
    vm.initData = initData;

    function initData() {
        window.indigenous.precache = window.indigenous.precache || {};
        window.indigenous.precache.siteData = window.indigenous.precache.siteData || {};
        var posts = SimpleSiteBuilderBlogService.loadDataFromPage('#indigenous-precache-sitedata-posts') || window.indigenous.precache.siteData.posts;
        var post = window.indigenous.precache.siteData.post;
        if (post) {
            vm.post = post;
        } else if (posts) {
            vm.post = posts[0];
        }
        // vm.post.post_content.replace('&lt;!-- more --&gt;', '');
    }

    function init(element) {
        vm.element = element;

        if (!vm.post) {
            vm.initData();
        }

    }

}


})();

(function(){

app.directive('ssbBlogPostListComponent', ssbBlogPostListComponent);

function ssbBlogPostListComponent() {
  return {
  	// transclude: true,
  	restrict: 'A',
  	controller: 'SiteBuilderBlogPostListComponentController',
  	controllerAs: 'vm',
  	bindToController: true,
    scope: {
        ssbEditor: '=',
        componentClass: '&',
        component: '=',
        blog: '=?'
    },
    templateUrl: '/admin/assets/js/ssb-site-builder/ssb-components/ssb-blog-post/ssb-blog-post-list/ssb-blog-post-list.component.html',
    replace: true,
  	link: function (scope, element, attrs, ctrl) {
  		ctrl.init(element);
  	}
  }

}

})();

(function(){

app.controller('SiteBuilderBlogPostListComponentController', ssbBlogPostListComponentController);

ssbBlogPostListComponentController.$inject = ['SimpleSiteBuilderBlogService', '$scope', '$timeout', '$location', '$filter'];
/* @ngInject */
function ssbBlogPostListComponentController(SimpleSiteBuilderBlogService, $scope, $timeout, $location, $filter) {

    console.info('ssb-blog-post-list directive init...')

    var vm = this;

    vm.init = init;
    vm.initData = initData;
    vm.hasFeaturedPosts = false;
    
    var path = $location.$$path.replace('/page/', '');

    vm.blog = SimpleSiteBuilderBlogService.blog || {};

    vm.sortBlogPosts = sortBlogPosts;

    vm.filteredPostView = false;

    if (path.indexOf("tag/") > -1) {
        vm.blog.currentTag = path.replace('/tag/', '');
        vm.filteredPostView = true;
    }

    if (path.indexOf("author/") > -1) {
        vm.blog.currentAuthor = path.replace('/author/', '');
        vm.filteredPostView = true;
    }

    $scope.$watchCollection('vm.blog.posts', function(newValue) {
        if (newValue) {
            $timeout(function () {
                $scope.$broadcast('$refreshSlickSlider');
            }, 2000)
            checkHasFeaturedPosts();
        }
    });

    function initData() {
        var posts = SimpleSiteBuilderBlogService.loadDataFromPage('#indigenous-precache-sitedata-posts') || window.indigenous.precache.siteData.posts;
        if (posts) {
            vm.blog.posts = posts;
            checkHasFeaturedPosts();
        }
    }

    function checkHasFeaturedPosts() {
        vm.hasFeaturedPosts = vm.blog.posts.filter(function(post){ return post.featured; }).length;
    }

    function sortBlogPosts(blogpost){
        return Date.parse($filter('date')(blogpost.publish_date || blogpost.created.date, "MM/dd/yyyy"));
    }

    function init(element) {

    	vm.element = element;

        checkHasFeaturedPosts();

        if (!vm.blog.posts.length) {
            vm.initData();
        }

    }

}


})();

'use strict';
/*global app, window, $$*/
/*jslint unparam:true*/
(function () {

    app.factory('SimpleSiteBuilderBlogService', SimpleSiteBuilderBlogService);

    SimpleSiteBuilderBlogService.$inject = ['$rootScope', '$compile', '$http', '$q', '$timeout', '$modal'];
    /* @ngInject */
    function SimpleSiteBuilderBlogService($rootScope, $compile, $http, $q, $timeout, $modal) {
        var ssbBlogService = {};
        var baseWebsiteAPIUrl = '/api/1.0/cms/website/';
        var basePageAPIUrl = '/api/1.0/cms/page/';
        var baseBlogAPIUrl = '/api/2.0/cms/blog';

        ssbBlogService.loadDataFromPage = loadDataFromPage;
        ssbBlogService.getPost = getPost;
        ssbBlogService.getPosts = getPosts;
        ssbBlogService.savePost = savePost;
        ssbBlogService.deletePost = deletePost;
        ssbBlogService.duplicatePost= duplicatePost;

        ssbBlogService.blog = {
            posts: [],
            postFilters: ['all', 'published', 'draft', 'featured']
        };

        /**
         * A wrapper around API requests
         * @param {function} fn - callback
         *
         * @returns {function} fn - callback
         *
         */
        function ssbBlogRequest(fn) {
            //ssbBlogService.loading.value = ssbBlogService.loading.value + 1;
            //console.info('blog service | loading +1 : ' + ssbBlogService.loading.value);
            fn.finally(function() {
                //ssbBlogService.loading.value = ssbBlogService.loading.value - 1;
                //console.info('blog service | loading -1 : ' + ssbBlogService.loading.value);
            })
            return fn;
        }

        function savePost(post) {

            function success(data) {

                var index = _.findIndex(ssbBlogService.blog.posts, {
                    _id: data._id
                });

                if (index > -1) {
                    ssbBlogService.blog.posts[index] = data;
                } else {
                    ssbBlogService.blog.posts.push(data);
                }

            }

            function error(error) {
                console.error('SimpleSiteBuilderBlogService savePost error: ', JSON.stringify(error));
            }

            if (post._id) {
                return (
                    ssbBlogRequest($http({
                        url: baseBlogAPIUrl + '/post/' + post._id,
                        method: 'PUT',
                        data: angular.toJson(post)
                    }).success(success).error(error))
                )
            } else {
                return (
                    ssbBlogRequest($http({
                        url: baseBlogAPIUrl + '/post/',
                        method: 'POST',
                        data: angular.toJson(post)
                    }).success(success).error(error))
                )
            }

        }

        function duplicatePost(post) {

            function success(data) {
                ssbBlogService.blog.posts.push(data);
            }

            function error(error) {
                console.error('SimpleSiteBuilderBlogService duplicatePost error: ', JSON.stringify(error));
            }

            return (
                ssbBlogRequest($http({
                    url: baseBlogAPIUrl + '/duplicate/post/',
                    method: 'POST',
                    data: angular.toJson(post)
                }).success(success).error(error))
            )

        }

        function deletePost(post) {
            var postId = post._id;
            function success(data) {
                console.log("post deleted");
                ssbBlogService.blog.posts = _.without(ssbBlogService.blog.posts, _.findWhere(ssbBlogService.blog.posts, {_id: postId}));
            }

            function error(error) {
                console.error('SimpleSiteBuilderBlogService deletePost error: ', JSON.stringify(error));
            }

            return (
                ssbBlogRequest($http({
                    url: baseBlogAPIUrl + '/post/' + post._id,
                    method: 'delete',
                    data: angular.toJson(post)
                }).success(success).error(error))
            )
        }

        function loadDataFromPage(scriptId) {

            var data = $(scriptId).html();

            if (!angular.isDefined(data)) {
                return
            }

            var unescapeMap = {
                "&amp;":"&",
                "&lt;":"<",
                "&gt;":">",
                '&quot;':'"',
                '&#39;':"'",
                '&#x2F;':"/",
                '&apos;': "'"
            };

            function unescapeHTML(string) {
                return String(string).replace(/(&amp;|&lt;|&gt;|&quot;|&#39;|&#x2f;|&apos;)/g, function(s) {
                    return unescapeMap[s] || s;
                });
            }

            var parsedData = JSON.parse(unescapeHTML(data));

            return parsedData;

        }

        function getPosts() {

        }

        function getPost(pageId, id) {

        }


        (function init() {



        })();


        return ssbBlogService;
    }

})();

(function(){

app.directive('ssbDataStyles', ssbDataStyles);

ssbDataStyles.$inject = ['$timeout'];
/* @ngInject */
function ssbDataStyles($timeout) {
  return {
    restrict: 'A',
    link: function (scope, element, attrs, ctrl) {

        enabledynamicStyles(element);

        function enabledynamicStyles(ssbContainer) {

            angular.element(document).ready(function() {

                var unbindWatcher = scope.$watch(function() {
                    return angular.element('.ssb-theme-btn').length;
                }, function(newValue, oldValue) {
                    if (newValue) {
                        unbindWatcher();
                        $timeout(function() {
                            var elements = angular.element('.ssb-theme-btn');
                            elements.each(function() {
                                var element = $(this);

                                var data = {
                                    hover: {
                                        bg: {
                                            color: null
                                        }
                                    },
                                    pressed: {
                                        bg: {
                                            color: null
                                        }
                                    }
                                };

                                var originalData = {
                                    bg: {
                                        color: element.css('background-color')
                                    },
                                    txtcolor: element.css('color')
                                };

                                var ssbHoverStyle = element.attr('data-ssb-hover-style');
                                var ssbActiveStyle = element.attr('data-ssb-active-style');



                                if (ssbHoverStyle) {
                                    var hoverStyleEl = $('<div style="' + ssbHoverStyle + '"></div>');
                                    var hoverStyle = hoverStyleEl.get(0).style;
                                    var hoverbgcolor = hoverStyle.backgroundColor;
                                    var hovertxtcolor = hoverStyle.color;

                                    data.hover.bg.color = hoverbgcolor;
                                    data.hover.txtcolor = hovertxtcolor;
                                }

                                if (ssbActiveStyle) {
                                    var activeStyleEl = $('<div style="' + ssbActiveStyle + '"></div>');
                                    var activeStyle = activeStyleEl.get(0).style;
                                    var activebgcolor = activeStyle.backgroundColor;
                                    var activetxtcolor = activeStyle.color;

                                    data.pressed.bg.color = activebgcolor;
                                    data.pressed.txtcolor = activetxtcolor;
                                }

                                // bind hover and active events to button
                                if (ssbHoverStyle || ssbActiveStyle) {

                                    element.hover(function(){
                                        this.style.setProperty( 'background-color', data.hover.bg.color, 'important' );
                                        this.style.setProperty( 'color', data.hover.txtcolor, 'important' );

                                    }, function(){
                                        this.style.setProperty( 'background-color', originalData.bg.color, 'important' );
                                        this.style.setProperty( 'color', originalData.txtcolor, 'important' );
                                    });

                                    element.on("mousedown touchstart", function(){
                                        this.style.setProperty( 'background-color', data.pressed.bg.color, 'important' );
                                        this.style.setProperty( 'color', data.pressed.txtcolor, 'important' );
                                    })

                                }

                            });

                        }, 1500);
                    }
                });
            });
        }

    }
  }

}


})();

'use strict';
/*global app*/
app.controller('SiteBuilderFormBuilderModalController', ['$scope', '$timeout', 'parentVm', 'toaster', 'SimpleSiteBuilderService', function ($scope, $timeout, parentVm, toaster, SimpleSiteBuilderService) {

    var vm = this;

    var pVm = $scope.$parent.vm;

    vm.addCustomField = pVm.addCustomField;
    vm.checkDuplicateField = pVm.checkDuplicateField;
    vm.closeModal = pVm.closeModal;
    vm.component = pVm.state.page.sections[pVm.uiState.activeSectionIndex].components[pVm.uiState.activeComponentIndex];

    (function init() {

        console.debug('init form-builder contact modal');

    })();

}]);

(function(){

app.directive('ssbFormBuilderComponent', ssbFormBuilderComponent);

function ssbFormBuilderComponent() {
  return {
  	// transclude: true,
  	restrict: 'A',
  	controller: 'SiteBuilderFormBuilderComponentController',
  	controllerAs: 'vm',
  	bindToController: true,
    scope: {
      ssbEditor: '=',
      componentClass: '&',
      component: '='
    },
    templateUrl: '/admin/assets/js/ssb-site-builder/ssb-components/ssb-form-builder/ssb-form-builder.component.html',
    replace: true,
  	link: function (scope, element, attrs, ctrl) {
  		ctrl.init(element);      
  	}
  }

}

})();

(function(){

app.controller('SiteBuilderFormBuilderComponentController', ssbFormBuilderComponentController);

ssbFormBuilderComponentController.$inject = ['$scope', '$attrs', '$filter', '$transclude', '$injector', 'formValidations', '$timeout'];
/* @ngInject */
function ssbFormBuilderComponentController($scope, $attrs, $filter, $transclude, $injector, formValidations, $timeout) {

	console.info('ssb-form-builder directive init...')

	var vm = this;

	vm.init = init;

	vm.userExists = false;

	vm.formBuilder = {};

	vm.fieldClass = fieldClass;

	vm.fieldStyle = fieldStyle;
	vm.inputStyle = inputStyle;
    vm.inputContainerStyle = inputContainerStyle;
	vm.buttonStyle = buttonStyle;
	vm.formStyle = formStyle;
    vm.addCustomField = addCustomField;
    vm.addPattern = addPattern;
    vm.checkDuplicateEmail = checkDuplicateEmail;
    vm.formValidations = formValidations;

    vm.nthRow = 'nth-row';

    vm.isEditing = $scope.$parent.vm && $scope.$parent.vm.uiState;


	function fieldClass(field){
		var classString = 'col-sm-12';

		if(vm.component.formSettings && vm.component.formSettings.fieldsPerRow > 0){
		classString = "col-sm-" + Math.floor(12/vm.component.formSettings.fieldsPerRow);
		if(vm.component.formSettings.spacing && vm.component.formSettings.spacing.pr)
			vm.nthRow = 'nth-row' + vm.component.formSettings.fieldsPerRow;
		}
		return classString;
	};


	function fieldStyle(field){
	var styleString = ' ';
	if (field && field.spacing) {
	    if (field.spacing.mb) {
	        styleString += 'margin-bottom: ' + field.spacing.mb + 'px;';
	    }
	}
    if(field && field.fieldsPerRow){
        styleString += "min-width:" + Math.floor(100/field.fieldsPerRow) + '%';
    }
	return styleString;
	};

    function inputContainerStyle(field){
        var styleString = ' ';
        if(field){
            if(field.align === 'left' || field.align === 'right')
                styleString += 'float: ' + field.align + " !important;";

            if(field.align === 'center'){
               styleString += 'margin: 0 auto !important; float:none !important;';
            }
        }
        return styleString;
      };

	function inputStyle(field){

		var styleString = ' ';
		if(field){
			if (field && field.inputTextSize) {
			  styleString += 'font-size: ' + field.inputTextSize  + 'px !important;';
			}
			if (field && field.inputFontFamily) {
			  styleString += 'font-family: ' + field.inputFontFamily + "!important;";
			}
            if (field && field.inputBgColor) {
              styleString += 'background-color: ' + field.inputBgColor + "!important;";
            }
            if (field && field.inputBorderColor) {
              styleString += 'border-color: ' + field.inputBorderColor + ";";
            }
            if (field && field.inputTextColor) {
              styleString += 'color: ' + field.inputTextColor + ";";
            }
		}

		return styleString;
	};



	function buttonStyle(btn){
		var styleString = '';

		if (btn && btn.align) {
		    if(btn.align === 'left' || btn.align === 'right')
		      styleString += 'float: ' + btn.align + " !important;";

		    if(btn.align === 'center'){
		      styleString += 'margin: 0 auto !important; float:none !important;';
		    }
		}
		return styleString;
	};

	function formStyle(form){
		var styleString = '';
        if(form){
            if (form.formFontFamily) {
                styleString += 'font-family: ' + form.formFontFamily + ";";
            }
            if (form.formTextColor) {
                styleString += 'color: ' + form.formTextColor + ";";
            }
        }
		return styleString;
	};

    function addCustomField(type){
        console.log("Add custom");
    };

    function addPattern(val){
        if(val.name === "phone"){
            return vm.formValidations.phone;
        }
        if(val.name === "email"){
            return vm.formValidations.email;
        }
    }

    function checkDuplicateEmail(val){
        if(val.name === "email"){
            return vm.userExists;
        }
    }



	vm.createUser = function (form) {
		// Admin check
		if($scope.$parent.vm.state)
			return;

		if($injector.has("userService"))
			userService = $injector.get("userService");

		if($injector.has("ipCookie"))
			ipCookie = $injector.get("ipCookie");

        var fingerprint = new Fingerprint().get();
        var sessionId = ipCookie("session_cookie").id;

        var skipWelcomeEmail;

        if (vm.component.skipWelcomeEmail) {
          skipWelcomeEmail = true;
        }

        var _campaignId;
        if (!vm.component.campaignId) {
          vm.component.campaignId = '';
        } else {
          _campaignId = vm.component.campaignId;
        }

        var first_name = "";
        var last_name = "";

        if(vm.formBuilder.name){
        	var name_arr = vm.formBuilder.name.split(/ (.+)?/);
        	first_name = name_arr[0];
        	if(name_arr.length > 1){
        	  last_name = name_arr[1];
        	}
        }

				var customFields = _.filter(vm.component.contactInfo, function (x) {
					return x.custom == true;
				});

				var extra = [];

				customFields.forEach(function (c, i) {
					extra.push({name: c.name, label: c.label, value: vm.formBuilder[c.name] || null});
				});

        var formatted = {
          fingerprint: fingerprint,
          sessionId: sessionId,
          first: first_name,
          last: last_name,
          details: [{
            emails: [],
            phones: [],
            addresses: []
          }],
          campaignId: _campaignId,
          emailId: vm.component.emailId,
          sendEmail: vm.component.sendEmail,
          skipWelcomeEmail: skipWelcomeEmail,
          fromEmail: vm.component.fromEmail,
          fromName: vm.component.fromName,
          contact_type: vm.component.tags,
          uniqueEmail: vm.component.uniqueEmail || false,
          activity: {
            activityType: 'CONTACT_FORM',
            note: vm.formBuilder.Message || "Contact form data.",
            sessionId: ipCookie("session_cookie").id,
            contact: vm.formBuilder
          },
		  extra: extra
        };
        if(vm.formBuilder.email)
	        formatted.details[0].emails.push({
	          email: vm.formBuilder.email
	        });
        if (vm.formBuilder.phone) {
          formatted.details[0].phones.push({
            number: vm.formBuilder.phone,
            type: 'm'
          });
        }

        if (vm.formBuilder.address || vm.formBuilder.city || vm.formBuilder.state || vm.formBuilder.zip || vm.formBuilder.country) {
          formatted.details[0].addresses.push({
            address: vm.formBuilder.address,
            city: vm.formBuilder.city,
            state: vm.formBuilder.state,
            country: vm.formBuilder.country,
            zip: vm.formBuilder.zip
          });
        }

        //create contact
        userService.addContact(formatted, function (data, err) {
          if (err && err.code === 409) {
            vm.userExists = true;
          }
          else if(err && err.code !== 409){
              vm.formError = true;
              $timeout(function () {
                vm.formError = false;
              }, 5000);
          }
          else if (data) {
            var name = vm.formBuilder.name;

            // This variant of the FB Tracking pixel is going away in late 2016
            // Ref: https://www.facebook.com/business/help/373979379354234
            if (vm.component.facebookConversionCode) {
              var _fbq = window._fbq || (window._fbq = []);
              if (!_fbq.loaded) {
                var fbds = document.createElement('script');
                fbds.async = true;
                fbds.src = '//connect.facebook.net/en_US/fbds.js';
                var s = document.getElementsByTagName('script')[0];
                s.parentNode.insertBefore(fbds, s);
                _fbq.loaded = true;
              }
              window._fbq = window._fbq || [];
              window._fbq.push(['track', vm.component.facebookConversionCode, {'value':'0.00','currency':'USD'}]);
            }


            if (!vm.component.redirect) {
              vm.formSuccess = true;
              vm.formBuilder = {};
              form.$setPristine(true);

              $timeout(function () {
                vm.formSuccess = false;
              }, 3000);
            } else {
              vm.formSuccess = true;
              vm.formBuilder = {};
              form.$setPristine(true);

              $timeout(function () {
                vm.formSuccess = false;
              }, 3000);
              
              if (vm.component.redirectType === 'page') {
                window.location.href = vm.component.redirectUrl;
              }
              if (vm.component.redirectType === 'external') {
                window.location.href = 'http://' + vm.component.redirectUrl;
              }
            }

          }
        });
      };


	function init(element) {
		vm.element = element;
	}

}


})();

(function(){

app.directive('ssbFormDonateComponent', ssbFormDonateComponent);

function ssbFormDonateComponent() {
  return {
  	// transclude: true,
  	restrict: 'A',
  	controller: 'SiteBuilderFormDonateComponentController',
  	controllerAs: 'vm',
  	bindToController: true,
    scope: {
      ssbEditor: '=',
      componentClass: '&',
      component: '='
    },
    templateUrl: '/admin/assets/js/ssb-site-builder/ssb-components/ssb-form-donate/ssb-form-donate.component.html',
    replace: true,
  	link: function (scope, element, attrs, ctrl) {
  		ctrl.init(element);
  	}
  }

}

})();

(function () {

    app.controller('SiteBuilderFormDonateComponentController', ssbFormDonateComponentController);

    ssbFormDonateComponentController.$inject = ['$scope', '$attrs', '$filter', '$transclude', '$injector', 'formValidations', '$timeout', '$sce', '$location', '$interval', 'ENV', '$modal'];
    /* @ngInject */
    function ssbFormDonateComponentController($scope, $attrs, $filter, $transclude, $injector, formValidations, $timeout, $sce, $location, $interval, ENV, $modal) {

        console.info('ssb-form-donate directive init...')

        var productService = null;
        var localStorageService = null;
        var $routeParams = null;
        var orderCookieData = null;

        if ($injector.has('ProductService')) {
            productService = $injector.get('ProductService');
        }

        if ($injector.has("productService")) {
            productService = $injector.get('productService');
        }

        if ($injector.has("localStorageService")) {
            localStorageService = $injector.get('localStorageService');
        }

        if ($injector.has("$routeParams")) {
            $routeParams = $injector.get('$routeParams');
            orderCookieData = localStorageService.get(orderCookieKey);
        }

        var vm = this;
        var orderCookieKey = 'order_cookie';

        vm.init = init;

        vm.userExists = false;

        vm.formBuilder = {};
        vm.checkoutModalState = 1;
        vm.showPaypalErrorMsg = false;
        vm.showPaypalLoading = false;
        vm.isAnonymous = false;
        vm.paypalLoginClickFn = paypalLoginClickFn;
        vm.paypalURL = $sce.trustAsResourceUrl(ENV.paypalCheckoutURL);
        vm.facebookClientID = ENV.facebookClientID;
        console.log('url:', vm.paypalURL);

        vm.fieldClass = fieldClass;

        vm.fieldStyle = fieldStyle;
        vm.inputStyle = inputStyle;
        vm.inputContainerStyle = inputContainerStyle;
        vm.buttonStyle = buttonStyle;
        vm.formStyle = formStyle;
        vm.addCustomField = addCustomField;
        vm.addPattern = addPattern;
        vm.formValidations = formValidations;
        vm.setCheckoutState = setCheckoutState;
        vm.paypalPayment = paypalPayment;
        vm.checkCardNumber = checkCardNumber;
        vm.checkCardName = checkCardName;
        vm.checkCardCvv = checkCardCvv;
        vm.checkCardExpiry = checkCardExpiry;
        vm.makeCartPayment = makeCartPayment;
        vm.deleteOrderFn = deleteOrderFn;
        vm.getDonations = getDonations;
        vm.augmentCompletePercentage = augmentCompletePercentage;
        vm.total = null;
        vm.percentage = null;
        vm.product = {};
        vm.close = close;
        //vm.parseFBShare = parseFBShare;
        vm.shareUrl = $location.url;
        vm.getProduct = getProduct;
        vm.getCredentials = getCredentials;
        vm.setInitialCheckoutState = setInitialCheckoutState;
        vm.setDefaultValues = setDefaultValues;
        vm.checkDateValidityFn = checkDateValidityFn;
        vm.formInvalidFn = formInvalidFn;
        vm.openModalFn = openModalFn;
        vm.closeModalFn = closeModalFn;

        vm.nthRow = 'nth-row';

        vm.isEditing = $scope.$parent.vm && $scope.$parent.vm.uiState;


        function fieldClass(field) {
            var classString = 'col-sm-12';

            if (vm.component.formSettings && vm.component.formSettings.fieldsPerRow > 0) {
                classString = "col-sm-" + Math.floor(12 / vm.component.formSettings.fieldsPerRow);
                if (vm.component.formSettings.spacing && vm.component.formSettings.spacing.pr)
                    vm.nthRow = 'nth-row' + vm.component.formSettings.fieldsPerRow;
            }
            return classString;
        };


        function fieldStyle(field) {
            var styleString = ' ';
            if (field && field.spacing) {
                if (field.spacing.mb) {
                    styleString += 'margin-bottom: ' + field.spacing.mb + 'px;';
                }
            }
            if (field && field.fieldsPerRow) {
                styleString += "min-width:" + Math.floor(100 / field.fieldsPerRow) + '%';
            }
            return styleString;
        };

        function inputContainerStyle(field) {
            var styleString = ' ';
            if (field) {
                if (field.align === 'left' || field.align === 'right')
                    styleString += 'float: ' + field.align + " !important;";

                if (field.align === 'center') {
                    styleString += 'margin: 0 auto !important; float:none !important;';
                }
            }
            return styleString;
        };

        function inputStyle(field) {

            var styleString = ' ';
            if (field) {
                if (field && field.inputTextSize) {
                    styleString += 'font-size: ' + field.inputTextSize + 'px !important;';
                }
                if (field && field.inputFontFamily) {
                    styleString += 'font-family: ' + field.inputFontFamily + "!important;";
                }
                if (field && field.inputBgColor) {
                    styleString += 'background-color: ' + field.inputBgColor + "!important;";
                }
                if (field && field.inputBorderColor) {
                    styleString += 'border-color: ' + field.inputBorderColor + ";";
                }
                if (field && field.inputTextColor) {
                    styleString += 'color: ' + field.inputTextColor + ";";
                }
            }

            return styleString;
        };



        function buttonStyle(btn) {
            var styleString = '';

            if (btn && btn.align) {
                if (btn.align === 'left' || btn.align === 'right')
                    styleString += 'float: ' + btn.align + " !important;";

                if (btn.align === 'center') {
                    styleString += 'margin: 0 auto !important; float:none !important;';
                }
            }
            return styleString;
        };

        function formStyle(form) {
            var styleString = '';
            if (form) {
                if (form.formFontFamily) {
                    styleString += 'font-family: ' + form.formFontFamily + ";";
                }
                if (form.formTextColor) {
                    styleString += 'color: ' + form.formTextColor + ";";
                }
            }
            return styleString;
        };

        function addCustomField(type) {
            console.log("Add custom");
        };

        function addPattern(val) {
            if (val.name === "phone") {
                return vm.formValidations.phone;
            }
            if (val.name === "email") {
                return vm.formValidations.email;
            }
        }



        vm.createUser = function (form) {
            // Admin check
            if ($scope.$parent.vm.state)
                return;

            if ($injector.has("userService"))
                userService = $injector.get("userService");

            if ($injector.has("ipCookie"))
                ipCookie = $injector.get("ipCookie");

            var fingerprint = new Fingerprint().get();
            var sessionId = ipCookie("session_cookie").id;

            var skipWelcomeEmail;

            if (vm.component.skipWelcomeEmail) {
                skipWelcomeEmail = true;
            }

            var _campaignId;
            if (!vm.component.campaignId) {
                vm.component.campaignId = '';
            } else {
                _campaignId = vm.component.campaignId;
            }

            var first_name = "";
            var last_name = "";

            if (vm.formBuilder.name) {
                var name_arr = vm.formBuilder.name.split(/ (.+)?/);
                first_name = name_arr[0];
                if (name_arr.length > 1) {
                    last_name = name_arr[1];
                }
            } else {
                if (vm.formBuilder.FirstName) {
                    first_name = vm.formBuilder.FirstName;
                }
                if (vm.formBuilder.LastName) {
                    last_name = vm.formBuilder.LastName;
                }
            }

            var formatted = {
                fingerprint: fingerprint,
                sessionId: sessionId,
                first: first_name,
                last: last_name,
                details: [{
                    emails: [],
                    phones: [],
                    addresses: []
                }],
                campaignId: _campaignId,
                emailId: vm.component.emailId,
                sendEmail: vm.component.sendEmail,
                skipWelcomeEmail: skipWelcomeEmail,
                fromEmail: vm.component.fromEmail,
                fromName: vm.component.fromName,
                contact_type: vm.component.tags,
                uniqueEmail: vm.component.uniqueEmail || false,
                activity: {
                    activityType: 'CONTACT_FORM',
                    note: vm.formBuilder.Message || "Contact form data.",
                    sessionId: ipCookie("session_cookie").id,
                    contact: vm.formBuilder
                }
            };
            if (vm.formBuilder.email)
                formatted.details[0].emails.push({
                    email: vm.formBuilder.email
                });
            if (vm.formBuilder.phone) {
                formatted.details[0].phones.push({
                    number: vm.formBuilder.phone,
                    type: 'm'
                });
            }

            if (vm.formBuilder.address || vm.formBuilder.city || vm.formBuilder.state || vm.formBuilder.zip || vm.formBuilder.country) {
                formatted.details[0].addresses.push({
                    address: vm.formBuilder.address,
                    city: vm.formBuilder.city,
                    state: vm.formBuilder.state,
                    country: vm.formBuilder.country,
                    zip: vm.formBuilder.zip
                });
            }

            //create contact
            userService.addContact(formatted, function (data, err) {
                if (err && err.code === 409) {
                    vm.userExists = true;
                } else if (err && err.code !== 409) {
                    vm.formError = true;
                    $timeout(function () {
                        vm.formError = false;
                    }, 5000);
                } else if (data) {
                    var name = vm.formBuilder.name;

                    // This variant of the FB Tracking pixel is going away in late 2016
                    // Ref: https://www.facebook.com/business/help/373979379354234
                    if (vm.component.facebookConversionCode) {
                        var _fbq = window._fbq || (window._fbq = []);
                        if (!_fbq.loaded) {
                            var fbds = document.createElement('script');
                            fbds.async = true;
                            fbds.src = '//connect.facebook.net/en_US/fbds.js';
                            var s = document.getElementsByTagName('script')[0];
                            s.parentNode.insertBefore(fbds, s);
                            _fbq.loaded = true;
                        }
                        window._fbq = window._fbq || [];
                        window._fbq.push(['track', vm.component.facebookConversionCode, {
                            'value': '0.00',
                            'currency': 'USD'
                        }]);
                    }


                    if (!vm.component.redirect) {
                        vm.formSuccess = true;
                        vm.formBuilder = {};
                        $('#donation-card-details').find("input[type=text]").val("");
                        form.$setPristine(true);

                        $timeout(function () {
                            vm.formSuccess = false;
                        }, 3000);
                    } else {
                        if (vm.component.redirectType === 'page') {
                            window.location.href = vm.component.redirectUrl;
                        }
                        if (vm.component.redirectType === 'external') {
                            window.location.href = 'http://' + vm.component.redirectUrl;
                        }
                    }

                }
            });
        };

        function setCheckoutState(state) {
            vm.checkoutModalState = state;
        }

        function _formattedOrder() {
            if ($injector.has("ipCookie")) {
                ipCookie = $injector.get("ipCookie");
            }

            var fingerprint = new Fingerprint().get();
            var sessionId = ipCookie("session_cookie").id;

            var skipWelcomeEmail;

            if (vm.component.skipWelcomeEmail) {
                skipWelcomeEmail = true;
            }

            var _campaignId;
            if (!vm.component.campaignId) {
                vm.component.campaignId = '';
            } else {
                _campaignId = vm.component.campaignId;
            }

            var first_name = "";
            var last_name = "";

            if (vm.formBuilder.name) {
                var name_arr = vm.formBuilder.name.split(/ (.+)?/);
                first_name = name_arr[0];
                if (name_arr.length > 1) {
                    last_name = name_arr[1];
                }
            } else {
                if (vm.formBuilder.FirstName) {
                    first_name = vm.formBuilder.FirstName;
                }
                if (vm.formBuilder.LastName) {
                    last_name = vm.formBuilder.LastName;
                }
            }

            var customFields = _.filter(vm.component.contactInfo, function (x) {
                return x.custom == true;
            });

            var extra = [];

            customFields.forEach(function (c, i) {
                extra.push({
                    name: c.name,
                    label: c.label,
                    value: vm.formBuilder[c.name] || null
                });
            });

            var formatted = {
                fingerprint: fingerprint,
                sessionId: sessionId,
                first: first_name,
                last: last_name,
                details: [{
                    emails: [],
                    phones: [],
                    addresses: []
                }],
                campaignId: _campaignId,
                emailId: vm.component.emailId,
                sendEmail: vm.component.sendEmail,
                skipWelcomeEmail: skipWelcomeEmail,
                fromEmail: vm.component.fromEmail,
                fromName: vm.component.fromName,
                contact_type: vm.component.contact_type,
                tags: vm.product.tags ? _.uniq(_.flatten([vm.product.tags, vm.component.tags])) : _.uniq(vm.component.tags),
                uniqueEmail: vm.component.uniqueEmail || false,
                activity: {
                    activityType: 'DONATE_FORM',
                    note: vm.formBuilder.Message || "Donate form data.",
                    sessionId: ipCookie("session_cookie").id,
                    contact: vm.formBuilder
                },
                extra: extra
            };

            if (vm.formBuilder.email)
                formatted.details[0].emails.push({
                    email: vm.formBuilder.email
                });
            if (vm.formBuilder.phone) {
                formatted.details[0].phones.push({
                    number: vm.formBuilder.phone,
                    type: 'm'
                });
            }

            if (vm.formBuilder.address || vm.formBuilder.city || vm.formBuilder.state || vm.formBuilder.zip || vm.formBuilder.country) {
                formatted.details[0].addresses.push({
                    address: vm.formBuilder.address,
                    city: vm.formBuilder.city,
                    state: vm.formBuilder.state,
                    country: vm.formBuilder.country,
                    zip: vm.formBuilder.zip
                });
            }

            var url = $location.absUrl().split('?')[0];
            var order = {
                //"customer_id": customer._id,
                "cancelUrl": url + '?state=2&comp=donation',
                "returnUrl": url + '?state=5&comp=donation',
                "isAnonymous": vm.isAnonymous,
                "customer": formatted,
                "session_id": null,
                "status": "pending_payment",
                "cart_discount": 0,
                "total_discount": 0,
                "total_shipping": 0,
                "total_tax": 0,
                "shipping_tax": 0,
                "cart_tax": 0,
                "currency": "usd",
                "line_items": [], // { "product_id": 31, "quantity": 1, "variation_id": 7, "subtotal": "20.00", "tax_class": null, "sku": "", "total": "20.00", "name": "Product Name", "total_tax": "0.00" }
                "total_line_items_quantity": 1,
                "payment_details": {
                    "method_title": 'Credit Card Payment', //Check Payment, Credit Card Payment
                    "method_id": 'cc', //check, cc
                    "card_token": null, //Stripe card token if applicable
                    "charge_description": null, //description of charge if applicable
                    "statement_description": null, //22char string for cc statement if applicable
                    "paid": true
                },
                "shipping_methods": "",
                "shipping_address": {
                    "first_name": formatted.first,
                    "last_name": formatted.last,
                    "phone": vm.formBuilder.Phone || '',
                    "city": formatted.details[0].addresses.length ? formatted.details[0].addresses[0].city : '',
                    "country": "US",
                    "address_1": formatted.details[0].addresses.length ? formatted.details[0].addresses[0].address : '',
                    "company": "",
                    "postcode": formatted.details[0].addresses.length ? formatted.details[0].addresses[0].zip : '',
                    "email": formatted.details[0].emails.length ? formatted.details[0].emails[0].email : '',
                    "address_2": formatted.details[0].addresses.length ? formatted.details[0].addresses[0].address2 : '',
                    "state": formatted.details[0].addresses.length ? formatted.details[0].addresses[0].state : ''
                },
                "billing_address": {
                    "first_name": formatted.first,
                    "last_name": formatted.last,
                    "phone": vm.formBuilder.Phone || '',
                    "city": formatted.details[0].addresses.length ? formatted.details[0].addresses[0].city : '',
                    "country": "US",
                    "address_1": formatted.details[0].addresses.length ? formatted.details[0].addresses[0].address : '',
                    "company": "",
                    "postcode": formatted.details[0].addresses.length ? formatted.details[0].addresses[0].zip : '',
                    "email": formatted.details[0].emails.length ? formatted.details[0].emails[0].email : '',
                    "address_2": formatted.details[0].addresses.length ? formatted.details[0].addresses[0].address2 : '',
                    "state": formatted.details[0].addresses.length ? formatted.details[0].addresses[0].state : ''
                },
                "notes": []
            };

            var totalAmount = parseFloat(vm.formBuilder.amount);
            var _item = {
                "product_id": vm.product._id,
                "quantity": 1,
                "sale_price": totalAmount,
                "regular_price": totalAmount,
                "variation_id": '',
                "tax_class": null,
                "sku": "",
                "total": totalAmount,
                "name": vm.product.name,
                "total_tax": "0.00",
                "type": vm.product.type
            };
            order.line_items.push(_item);

            return order;
        }

        function paypalPayment() {
            vm.showPaypalLoading = true;

            if ($injector.has('orderService')) {
                var orderService = $injector.get('orderService');
                var order = _formattedOrder();

                orderService.createPaypalOrder(order, function (data) {
                    vm.order = data;
                    vm.showPaypalLoading = false;
                    if (data && !data._id) {
                        var failedOrderMessage = "Error in order processing";
                        console.log(failedOrderMessage);
                        if (data.message)
                            failedOrderMessage = data.message;
                        vm.checkoutModalState = 5;
                        //vm.parseFBShare();
                        vm.failedOrderMessage = failedOrderMessage;
                        return;
                    }
                    console.log('order, ', order);
                    vm.checkoutModalState = 3;
                    localStorageService.set(orderCookieKey, data);
                    vm.paypalKey = data.payment_details.payKey;
                    // vm.formBuilder = {};
                });
            }
        }

        function paypalLoginClickFn() {
            var dgFlow = new PAYPAL.apps.DGFlow({
                expType: null
            });
            dgFlow.startFlow($location.absUrl());
            vm.closeModalFn();
        }

        function checkCardNumber() {
            vm.failedOrderMessage = "";
            var card_number = $('.donation-v1 #number').val();
            if (!card_number) {
                $(".donation-v1 #card_number .error").html("Card Number Required");
                $(".donation-v1 #card_number").addClass('has-error');
                $(".donation-v1 #card_number .glyphicon").addClass('glyphicon-remove');
            } else {
                $(".donation-v1 #card_number .error").html("");
                $(".donation-v1 #card_number").removeClass('has-error').addClass('has-success');
                $(vm.element).find("#card_number .glyphicon").removeClass('glyphicon-remove').addClass('glyphicon-ok');
            }
        };

        function checkCardName() {
            vm.failedOrderMessage = "";
            var name = $('.donation-v1 #card_name #name').val();
            if (!name) {
                $(".donation-v1 #card_name .error").html("Card Name Required");
                $(".donation-v1 #card_name").addClass('has-error');
                $(".donation-v1 #card_name .glyphicon").addClass('glyphicon-remove');
            } else {
                $(".donation-v1 #card_name .error").html("");
                $(".donation-v1 #card_name").removeClass('has-error').addClass('has-success');
                $(".donation-v1 #card_name .glyphicon").removeClass('glyphicon-remove').addClass('glyphicon-ok');
            }

        };

        function checkCardExpiry() {
            vm.failedOrderMessage = "";
            var expiry = $('.donation-v1 #expiry').val();
            var card_expiry = expiry.split("/");
            var exp_month = card_expiry[0].trim();
            var exp_year;
            if (card_expiry.length > 1) {
                exp_year = card_expiry[1].trim();
            }

            if (!expiry || !exp_month || !exp_year) {
                if (!expiry) {
                    $(".donation-v1 #card_expiry .error").html("Expiry Required");
                } else if (!exp_month) {
                    $(".donation-v1 #card_expiry .error").html("Expiry Month Required");
                } else if (!exp_year) {
                    $(".donation-v1 #card_expiry .error").html("Expiry Year Required");
                }
                $(".donation-v1 #card_expiry").addClass('has-error');
                $(".donation-v1 #card_expiry .glyphicon").addClass('glyphicon-remove');
            } else {
                $(".donation-v1 #card_expiry .error").html("");
                $(".donation-v1 #card_expiry .glyphicon").removeClass('glyphicon-remove').addClass('glyphicon-ok');
                $(".donation-v1 #card_expiry").removeClass('has-error').addClass('has-success');
            }
        };

        function checkCardCvv() {
            vm.failedOrderMessage = "";
            var card_cvc = $('.donation-v1 #cvc').val();
            if (!card_cvc) {
                $(".donation-v1 #card_cvc .error").html("CVC Required");
                $(".donation-v1 #card_cvc").addClass('has-error');
                $(".donation-v1 #card_cvc .glyphicon").addClass('glyphicon-remove');
            } else {
                $(".donation-v1 #card_cvc .error").html("");
                $(".donation-v1 #card_cvc").removeClass('has-error').addClass('has-success');
                $(".donation-v1 #card_cvc .glyphicon").removeClass('glyphicon-remove').addClass('glyphicon-ok');
            }
        };

        function makeCartPayment() {
            if ($injector.has('orderService')) {
                vm.failedOrderMessage = "";
                vm.checkoutModalState = 6;

                var expiry = $('.donation-v1 #expiry').val().split("/");
                var exp_month = expiry[0].trim();
                var exp_year = "";
                if (expiry.length > 1) {
                    exp_year = expiry[1].trim();
                }
                var cardInput = {
                    name: $('.donation-v1 #card_name #name').val(),
                    number: $('.donation-v1 #number').val(),
                    cvc: $('.donation-v1 #cvc').val(),
                    exp_month: exp_month,
                    exp_year: exp_year
                        //TODO: add the following:
                        /*
                         * name:name,
                         * address_city:city,
                         * address_country:country,
                         * address_line1:line1,
                         * address_line2:line2,
                         * address_state:state,
                         * address_zip:zip
                         */
                };
                if (!cardInput.number || !cardInput.cvc || !cardInput.exp_month || !cardInput.exp_year || !cardInput.name) {
                    vm.checkCardName();
                    vm.checkCardNumber();
                    vm.checkCardExpiry();
                    vm.checkCardCvv();
                    vm.checkoutModalState = 4;
                    return;
                }
                var orderService = $injector.get('orderService');
                var order = _formattedOrder();
                if (order.customer) {
                    cardInput.name = order.customer.first + ' ' + order.customer.last;
                    // cardInput.address_line1 = order.customer.details[0].addresses.length ? order.customer.details[0].addresses[0].address : '';
                    // cardInput.address_city = order.customer.details[0].addresses ? order.customer.details[0].addresses[0].city : '';
                    // cardInput.address_state = order.customer.details[0].addresses ? order.customer.details[0].addresses[0].state : '';
                    // if (!vm.isAnonymous) {
                    //     cardInput.address_zip = order.customer.details[0].addresses ? order.customer.details[0].addresses[0].zip : '';
                    // }
                    // cardInput.address_country = order.customer.details[0].addresses ? order.customer.details[0].addresses[0].country : 'US';
                    // if (order.customer.details[0].addresses.length && order.customer.details[0].addresses[0].address2) {
                    //     cardInput.address_line2 = order.customer.details[0].addresses[0].address2;
                    // }
                }

                if ($injector.has('paymentService')) {
                    var paymentService = $injector.get('paymentService');
                    paymentService.getStripeCardToken(cardInput, function (token, error) {
                        if (error) {
                            switch (error.param) {
                                case "number":
                                    $(".donation-v1 #card_number .error").html(error.message);
                                    $(".donation-v1 #card_number").addClass('has-error');
                                    $(".donation-v1 #card_number .glyphicon").addClass('glyphicon-remove');
                                    break;
                                case "exp_month":
                                    $(".donation-v1 #card_expiry .error").html(error.message);
                                    $(".donation-v1 #card_expiry").addClass('has-error');
                                    $(".donation-v1 #card_expiry .glyphicon").addClass('glyphicon-remove');
                                    break;
                                case "exp_year":
                                    $(".donation-v1 #card_expiry .error").html(error.message);
                                    $(".donation-v1 #card_expiry").addClass('has-error');
                                    $(".donation-v1 #card_expiry .glyphicon").addClass('glyphicon-remove');
                                    break;
                                case "cvc":
                                    $(".donation-v1 #card_cvc .error").html(error.message);
                                    $(".donation-v1 #card_cvc").addClass('has-error');
                                    $(".donation-v1 #card_cvc .glyphicon").addClass('glyphicon-remove');
                                    break;
                                case "name":
                                    $(".donation-v1 #card_name .error").html(error.message);
                                    $(".donation-v1 #card_name").addClass('has-error');
                                    $(".donation-v1 #card_name .glyphicon").addClass('glyphicon-remove');

                            }
                            vm.checkoutModalState = 4;
                            return;
                        }

                        order.payment_details.card_token = token;
                        orderService.createOrder(order, function (data) {
                            if (data && !data._id) {
                                var failedOrderMessage = "Error in order processing";
                                console.log(failedOrderMessage);
                                if (data.message)
                                    failedOrderMessage = data.message;
                                vm.checkoutModalState = 4;
                                vm.failedOrderMessage = failedOrderMessage;
                                return;
                            }
                            console.log('order, ', order);
                            //vm.parseFBShare();
                            vm.checkoutModalState = 5;
                            // vm.formBuilder = {};
                        });
                    });
                }
            }
        }

        function augmentCompletePercentage(percentage) {
            if (percentage > 100) {
                vm.completePercentageStyle = 100 + '%';
            } else {
                vm.completePercentageStyle = percentage + '%';
            }
        }

        function getDonations(id) {
            if (vm.component.productSettings.goal) {
                productService.getAllOrdersForProduct(id, function (data) {
                    if (data.total) {
                        var percentage = data.total / vm.component.productSettings.goal * 100;
                        vm.augmentCompletePercentage(percentage);
                        vm.total = data.total;
                        vm.percentage = percentage.toFixed(0);
                    } else {
                        vm.setDefaultValues();
                    }
                })
            } else {
                vm.setDefaultValues();
            }
        }

        function close() {
            vm.formBuilder = {};
            vm.checkoutModalState = 1;
            vm.getDonations(vm.product._id);

            if (vm.component.redirect) {
                if (vm.component.redirectType === 'page') {
                    window.location.href = vm.component.redirectUrl;
                }
                if (vm.component.redirectType === 'external') {
                    window.location.href = 'http://' + vm.component.redirectUrl;
                }
            } else {
                $('#donation-card-details').find("input[type=text]").val("");
            }
        }

        function deleteOrderFn(order) {
            if ($injector.has('orderService')) {
                var orderService = $injector.get('orderService');
                orderService.deletePaypalOrder(order, function (data) {
                    if (data.deleted) {
                        vm.closeModalFn();
                        vm.checkoutModalState = 1;
                    }
                });
            }
        };

        function getProduct() {
            if (productService) {
                if (vm.component.productSettings.product) {
                    productService.getProduct(vm.component.productSettings.product.data, function (product) {
                        vm.product = product;
                        vm.getDonations(vm.product._id);
                    });
                } else {
                    vm.setDefaultValues();
                }

            }
        }

        function setDefaultValues() {
            vm.total = "0";
            vm.percentage = "0";
        }

        function getCredentials() {
            if ($injector.has('accountService')) {
                var accountService = $injector.get('accountService');
                accountService(function (err, account) {
                    vm.account = account;
                    vm.paypalInfo = null;
                    vm.stripeInfo = null;

                    account.credentials.forEach(function (cred, index) {
                        if (cred.type == 'stripe') {
                            vm.stripeInfo = cred;
                        }
                    });

                    vm.paypalInfo = account.commerceSettings.paypal;
                });
            }
        }

        function setInitialCheckoutState() {
            if ($routeParams && $routeParams.state && $routeParams.comp == 'donation') {
                vm.checkoutModalState = parseInt($routeParams.state);
                $timeout(function () {
                    vm.openModalFn();
                }, 1000);
                if (vm.checkoutModalState == 5 && orderCookieData) {
                    if ($injector.has('orderService')) {
                        var orderService = $injector.get('orderService');
                        orderService.setOrderPaid(orderCookieData, function (data) {
                            if (data && !data._id) {
                                var failedOrderMessage = "Error in order processing";
                                console.log(failedOrderMessage);
                                if (data.message)
                                    failedOrderMessage = data.message;
                                vm.failedOrderMessage = failedOrderMessage;
                                return;
                            }
                            localStorageService.remove(orderCookieKey);
                        });
                    }
                }
                if (vm.checkoutModalState == 2) {
                    vm.showPaypalErrorMsg = true;
                }
            }
        }

        function checkDateValidityFn() {
            if (!angular.isDefined(vm.component.productSettings.timePeriod)) {
                return true;
            }

            if ($('#form-donate-modal-amount-' + vm.component._id).hasClass('ng-invalid')) {
                return false;
            }

            if (!vm.component.productSettings.timePeriod.enabled) {
                return true;
            }

            if (vm.component.productSettings.timePeriod.startDate && vm.component.productSettings.timePeriod.endDate) {
                return (moment().isAfter(vm.component.productSettings.timePeriod.startDate) && moment().isBefore(vm.component.productSettings.timePeriod.endDate));
            } else if (vm.component.productSettings.timePeriod.startDate) {
                return moment().isAfter(vm.component.productSettings.timePeriod.startDate);
            } else if (vm.component.productSettings.timePeriod.endDate) {
                return moment().isBefore(vm.component.productSettings.timePeriod.endDate);
            } else {
                return true;
            }
        };

        function formInvalidFn(form) {
            if (!vm.formBuilder.amount) {
                return true;
            } else if (!vm.isAnonymous && !form.$valid) {
                return true;
            } else {
                return false;
            }
        };

        function openModalFn() {
            vm.modalInstance = $modal.open({
                templateUrl: 'donation-modal',
                keyboard: true,
                size: 'lg',
                scope: $scope
            });

            $timeout(function () {
              $('#donation-card-details-' + vm.component._id).card({
                container: '#card-wrapper-' + vm.component._id
              });
              console.log('card setup');
            }, 200);
        };

        function closeModalFn() {
            vm.close();
            vm.modalInstance.close();
        };

        function init(element) {
            vm.element = element;

            //vm.parseFBShare();

            $(vm.element).find('.modal').on('hidden.bs.modal', function () {
                if (vm.checkoutModalState == 5) {
                    vm.close();
                }
            })

            $scope.$watch('vm.component.productSettings.product', function (val) {
                if (val) {
                    vm.getProduct();
                }
            });

            if (vm.component.productSettings) {

                vm.getProduct();

                vm.getCredentials();

                vm.setInitialCheckoutState();

            }
        }

    }


})();

(function(){

app.directive('ssbImageGalleryComponent', ssbImageGalleryComponent);

function ssbImageGalleryComponent() {
  return {
  	// transclude: true,
  	restrict: 'A',
  	controller: 'SiteBuilderImageGalleryComponentController',
  	controllerAs: 'vm',
  	bindToController: true,
    scope: {
      ssbEditor: '=',
      componentClass: '&',
      component: '='
    },
    templateUrl: '/admin/assets/js/ssb-site-builder/ssb-components/ssb-image-gallery/ssb-image-gallery.component.html',
    replace: true,
  	link: function (scope, element, attrs, ctrl) {
  		ctrl.init(element);
  	}
  }

}

})();

(function(){

app.controller('SiteBuilderImageGalleryComponentController', ssbImageGalleryComponentController);

ssbImageGalleryComponentController.$inject = ['$scope', '$attrs', '$filter', '$transclude'];
/* @ngInject */
function ssbImageGalleryComponentController($scope, $attrs, $filter, $transclude) {

  console.info('ssb-image-gallery directive init...')

  var vm = this;

  vm.init = init;


  function init(element) {
  	vm.element = element;
  }

}


})();

(function(){

app.directive('ssbImageComponent', ssbImageComponent);

function ssbImageComponent() {
  return {
  	// transclude: true,
  	restrict: 'A',
  	controller: 'SiteBuilderImageComponentController',
  	controllerAs: 'vm',
  	bindToController: true,
    scope: {
      ssbEditor: '=',
      componentClass: '&',
      component: '='
    },
    templateUrl: '/admin/assets/js/ssb-site-builder/ssb-components/ssb-image/ssb-image.component.html',
    replace: true,
  	link: function (scope, element, attrs, ctrl) {
  		ctrl.init(element);
  	}
  }

}

})();

(function(){

app.controller('SiteBuilderImageComponentController', ssbImageComponentController);

ssbImageComponentController.$inject = ['$scope', '$attrs', '$filter', '$transclude'];
/* @ngInject */
function ssbImageComponentController($scope, $attrs, $filter, $transclude) {

  console.info('ssb-image directive init...')

  var vm = this;

  vm.init = init;

  function init(element) {
  	vm.element = element;
  }

}


})();

(function(){

app.directive('ssbLocationFinderComponent', ssbLocationFinderComponent);

function ssbLocationFinderComponent() {
  return {
  	restrict: 'A',
  	controller: 'SiteBuilderLocationFinderComponentController',
  	controllerAs: 'vm',
  	bindToController: true,
    scope: {
      ssbEditor: '=',
      componentClass: '&',
      component: '='
    },
    templateUrl: '/admin/assets/js/ssb-site-builder/ssb-components/ssb-location-finder/ssb-location-finder.component.html',
    replace: true,
  	link: function (scope, element, attrs, ctrl) {
  		ctrl.init(element);
  	}
  }

}

})();

(function(){

app.controller('SiteBuilderLocationFinderComponentController', ssbLocationFinderComponentController);

ssbLocationFinderComponentController.$inject = ['$scope', '$q', '$timeout', '$injector'];
/* @ngInject */
function ssbLocationFinderComponentController($scope, $q, $timeout, $injector) {

    console.info('ssb-location-finder directive init...')

    var geocodeService;

    if ($injector.has("geocodeService")) {
        geocodeService = $injector.get('geocodeService');
    }

    var vm = this;

    vm.map = {};
    vm.submitBtn = {};
    vm.mapId = 'ssb-map-canvas-' + vm.component._id;
    vm.searchAddress = '';
    vm.searchLat = '';
    vm.searchLong = '';
    vm.searchRadius = 5;
    vm.searchResults = {}; // { count: 10, results: [] }
    vm.loading = false;
    vm.markers = [];
    vm.infowindow = {};
    vm.helmsMarkerIcon = {};
    vm.searchBasisMarkerIcon = {};
    vm.locationMarkerIcon = {};
    vm.clusterOptions = {};
    vm.geolocationEnabled = false;
    vm.mapCenterLocation = new google.maps.LatLng(32.837377, -117.138966); //helms

    vm.helmsMarker = {};
    vm.searchBasisMarker = {};

    vm.init = init;
    vm.setupMap = setupMap;
    vm.setupSubmitBtn = setupSubmitBtn;
    vm.loadScript = loadScript;
    vm.initMap = initMap;
    vm.initIcons = initIcons;
    vm.search = search;
    vm.setMapCenter = setMapCenter;
    vm.getLocations = getLocations;
    vm.searchMyLocation = searchMyLocation;
    vm.clearMarkers = clearMarkers;
    vm.displayMarkers = displayMarkers;
    vm.displayMarker = displayMarker;
    vm.setupInfoWindowCallback = setupInfoWindowCallback;
    vm.getDirectionsLink = getDirectionsLink;
    vm.onDestroy = onDestroy;
    vm.addStaticLocations = addStaticLocations;

    $scope.$watch('vm.loading', function(val) {
        if (!val) {
            vm.submitBtn.button('reset');
        }
    });

    function setupMap() {

        if (typeof google === 'object' && typeof google.maps === 'object') {

            $timeout(vm.initMap, 2000);

        } else {

            window['initialize' + vm.component._id] = $timeout(vm.initMap, 1000);

            vm.loadScript('http://maps.googleapis.com/maps/api/js?v=3&callback=initialize' + vm.component._id, function(){
                console.debug('google-loader async loaded');
            });

        }

    }

    function setupSubmitBtn() {

        vm.submitBtn = vm.element.find('input[type="submit"]');

        vm.submitBtn.on('click', function() {
            vm.submitBtn.button('loading');
        });

    }

    function loadScript(src,callback){
        var script = document.createElement("script");
        script.type = "text/javascript";
        if(callback)script.onload=callback;
        document.getElementsByTagName("head")[0].appendChild(script);
        script.src = src;
    }

    function initMap() {

        // var MY_MAPTYPE_ID = 'custom_style';
        var MY_MAPTYPE_ID = 'HYBRID';

        // var featureOpts = [ { "stylers": [ { "saturation": -100 }, { "lightness": -5 } ] } ];
        var featureOpts = [];

        vm.initIcons();

        var mapOptions = {
            zoom: 11,
            center: vm.mapCenterLocation,
            mapTypeControl: false,
            scrollwheel: false,
            zoomControl: true,
            mapTypeId: MY_MAPTYPE_ID
        };

        console.debug(vm.mapId);
        console.debug(angular.element('#' + vm.mapId)[0])

        vm.map = new google.maps.Map(angular.element('#' + vm.mapId)[0], mapOptions);

        var customMapType = new google.maps.StyledMapType(featureOpts);

        addStaticLocations();

        vm.map.mapTypes.set(MY_MAPTYPE_ID, customMapType);

        google.maps.event.addDomListener(window, "resize", function() {
            var center = vm.map.getCenter();
            google.maps.event.trigger(vm.map, "resize");
            vm.map.setCenter(center);
        });

    }

    function initIcons() {

        vm.helmsMarkerIcon = {
            url: '/images/indi-location-marker-small-helms.png'
        };

        vm.searchBasisMarkerIcon = {
            url: '/images/indi-location-marker-home.png'
        };

        vm.locationMarkerIcon = {
            url: '/images/indi-location-marker-small.png'
        };

        vm.clusterOptions = {
            styles: [{
                textColor: 'white',
                url: '/images/indi-location-marker-small.png',
                width: 75,
                height: 75,
                fontFamily:  "inherit",
                textSize: 15
            },
            {
                textColor: 'white',
                url: '/images/indi-location-marker-medium.png',
                width: 100,
                height: 100,
                fontFamily:  "inherit",
                textSize: 18
            },
            {
                textColor: 'white',
                url: '/images/indi-location-marker-large.png',
                width: 125,
                height: 125,
                fontFamily:  "inherit",
                textSize: 20
            }]
        };

    }

    function search() {

        if (vm.searchAddress.length) {

            vm.loading = true;

            vm.geocoder = vm.geocoder || new google.maps.Geocoder();

            vm.geocoder.geocode( { 'address': vm.searchAddress }, function(results, status) {

                if (status == google.maps.GeocoderStatus.OK) {

                    vm.setMapCenter(results[0].geometry.location.lat(), results[0].geometry.location.lng());
                    vm.getLocations();

                } else {
                    console.debug("Geocode was not successful for the following reason: " + status);
                    vm.loading = false;
                }

            });

        }

    }

    function setMapCenter(lat, lng) {

        vm.map.setCenter({ lat: lat, lng: lng });
        vm.searchLat = lat;
        vm.searchLong = lng;

        vm.searchBasisMarker.setMap && vm.searchBasisMarker.setMap(null);

        vm.searchBasisMarker = new google.maps.Marker({
            position: new google.maps.LatLng(vm.searchLat, vm.searchLong),
            map: vm.map,
            draggable: false,
            icon: vm.searchBasisMarkerIcon,
            title: 'Your search location',
            opacity: 0.8
        });

    }

    function getLocations() {
        geocodeService.getLocations(vm.searchLat, vm.searchLong, vm.searchRadius).then(function(data) {
            vm.searchResults = data.data;
            vm.displayMarkers();
        }).catch(function(err) {
            console.error(JSON.stringify(err));
        }).finally(function() {
            vm.loading = false;
        });
    }

    function searchMyLocation() {

        if(navigator.geolocation) {

            navigator.geolocation.getCurrentPosition(function(position) {

                vm.setMapCenter(position.coords.latitude, position.coords.longitude);
                vm.getLocations();

            }, function() {

                console.error('no geo');

            });

        } else {

            console.error('no geo');

        }

    }

    function displayMarkers() {

        vm.clearMarkers();

        vm.bounds = new google.maps.LatLngBounds();

        for (var i = 0; i < vm.searchResults.results.length; i++) {

            var result = vm.searchResults.results[i];

            var latLng = new google.maps.LatLng(result.lat, result.lng);

            vm.displayMarker(result, latLng);

        }

        vm.markerCluster = new MarkerClusterer(vm.map, vm.markers, vm.clusterOptions);

        if (vm.searchResults.results.length) {
            console.debug(vm.searchBasisMarker.getPosition().lat(), vm.searchBasisMarker.getPosition().lng());
            vm.bounds.extend(vm.searchBasisMarker.getPosition());
            vm.map.fitBounds(vm.bounds);
        }

        vm.loading = false;

    }

    function clearMarkers() {
        for (var i = 0; i < vm.markers.length; i++) {
            vm.markers[i].setMap(null);
        }
        vm.markers = [];
    }

    function displayMarker(result, latLng) {

        var marker = new google.maps.Marker({
            map: vm.map,
            position: latLng,
            draggable: false,
            icon: vm.locationMarkerIcon,
            title: result.name,
            opacity: 0.8
        });

        var contentString =
            '<div class="ssb-infowindow-content">' +
                '<ul>' +
                '<li><b>' + result.name + '</b></li>' +
                '<li>' + result.address + '</li>' +
                '<li>' + result.address2 + '</li>' +
                '<li>' + result.city + ', ' + result.state + ' ' + result.zip + '</li>' +
                '<li><a href="' + vm.getDirectionsLink(result) + ' class="btn ssb-theme-btn" target="_blank">Directions</a>' +
                '</ul>' +
            '</div>';

        var infowindow = new google.maps.InfoWindow({
            content: contentString
        });

        vm.bounds.extend(marker.getPosition());

        vm.setupInfoWindowCallback(infowindow, marker);

        vm.markers.push(marker);

    }

    function setupInfoWindowCallback(infowindow, marker, open) {
        google.maps.event.addListener(marker, 'click', function() {
            if (vm.infowindow && vm.infowindow.close) {
                vm.infowindow.close();
            }
            vm.infowindow = infowindow;
            vm.infowindow.open(vm.map, marker);
        });

        if (open) {
            $timeout(function() {
                vm.infowindow = infowindow;
                vm.infowindow.open(vm.map, marker);
            }, 1000);
        }

    }

    function getDirectionsLink(location) {
        var destinationAddress = location.name + ' ' +
                location.address + ' ' +
                location.address2 + ' ' +
                location.city + ' ' +
                location.state + ' ' +
                location.zip + ' ' +
                location.country;
        return geocodeService && geocodeService.getDirectionsLinkGoogle(vm.searchAddress, destinationAddress);
    }

    function onDestroy() {
        window['initialize' + vm.component._id] = angular.noop;
    }

    function addStaticLocations() {

        var staticLocations = [{
            name: 'Helms Brewing Co',
            address: '5640 Kearny Mesa Road',
            address2: '',
            city: 'San Diego',
            state: 'CA',
            zip: '92111',
            lat: 32.837377,
            lng: -117.138966
        },
        {
            name: 'Tasting Room',
            address: '4896 Newport Ave',
            address2: '',
            city: 'San Diego',
            state: 'CA',
            zip: '92107',
            lat: 32.7458203,
            lng: -117.24903540000003
        }];

        staticLocations.forEach(function(location, index) {

            vm.setupInfoWindowCallback(new google.maps.InfoWindow({
                content: '<div class="ssb-infowindow-content">' +
                    '<ul>' +
                    '<li><b>' + location.name + '</b></li>' +
                    '<li>' + location.address + '</li>' +
                    '<li>' + location.address2 + '</li>' +
                    '<li>' + location.city + ', ' + location.state + ' ' + location.zip + '</li>' +
                    '<li><a href="' + vm.getDirectionsLink(location) + ' class="btn ssb-theme-btn" target="_blank">Directions</a>' +
                    '</ul>' +
                '</div>'
            }), new google.maps.Marker({
                position: new google.maps.LatLng(location.lat, location.lng),
                map: vm.map,
                draggable: false,
                icon: vm.helmsMarkerIcon,
                title: location.name
            }), index === 0); //trigger click on first static location

        });


    }

    function init(element) {

        vm.element = element;

        vm.setupMap();

        vm.setupSubmitBtn();

        if(navigator.geolocation) {
            vm.geolocationEnabled = true;
        }

        vm.element.on('$destroy', vm.onDestroy);

    }

}


})();

(function(){

app.directive('ssbPageSection', ssbPageSection);

ssbPageSection.$inject = ['$compile'];
/* @ngInject */
function ssbPageSection($compile) {
  return {
  	// transclude: true,
  	restrict: 'E',
  	controller: 'SiteBuilderPageSectionController',
  	controllerAs: 'vm',
  	bindToController: true,
    scope: {
        section: '=',
        index: '=',
        state: '=',
        uiState: '=',
        sectionLayoutName: '=?',
        sectionLayoutIndex: '=?'
    },
    templateUrl: function(element, attrs) {
        var url = '/admin/assets/js/ssb-site-builder/ssb-components/ssb-page-section/ssb-page-section.component.html';
        if (attrs.uiState) {
            url = '/admin/assets/js/ssb-site-builder/ssb-components/ssb-page-section/ssb-page-section.edit.html';
        }
        return url;
    },
    replace: true,
  	link: function (scope, element, attrs, ctrl) {
  		ctrl.init(element);
  	}
  }

}

})();

(function(){

app.controller('SiteBuilderPageSectionController', ssbPageSectionController);

ssbPageSectionController.$inject = ['$scope', '$attrs', '$filter', '$transclude', '$sce', '$timeout', '$window', '$location'];
/* @ngInject */
function ssbPageSectionController($scope, $attrs, $filter, $transclude, $sce, $timeout, $window, $location) {

    console.info('page-section directive init...')

    var vm = this;

    vm.init = init;
    vm.sectionClass = sectionClass;
    vm.sectionBGClass = sectionBGClass;
    vm.sectionStyle = sectionStyle;
    vm.sectionBGStyle = sectionBGStyle;
    vm.componentClass = componentClass;
    vm.componentStyle = componentStyle;
    vm.sectionHasFooter = sectionHasFooter;
    vm.sectionHasLegacyUnderNavSetting = sectionHasLegacyUnderNavSetting;
    vm.getTrustedUrl = getTrustedUrl;
    vm.setupVideoBackground = setupVideoBackground;
    vm.playerObject = {};
    vm.player = {};
    vm.sectionInitDelayDone = false;
    vm.setFixedPosition = setFixedPosition;



    $scope.$watch('vm.section.bg.video.id', function (_id) {
        if (_id && vm.section.bg.video.show) {
            $timeout(function() {
                vm.setupVideoBackground();
            }, 1000);
        }
    });

    //TODO: use https://github.com/martinandert/react-inline to generate inline styles for sections/components

    function sectionClass(section) {
        var classString = 'container-fluid '; //col-xs-12 was messing up legacy

        if (section) {
            var title = section.title || section.name;
            var version = section.version;

            if (title) {

                classString += ' ssb-page-section-' + $filter('slugify')(title);

                if (version) {
                    classString += ' ssb-page-section-' + $filter('slugify')(title); + '-v' + version;
                }

            }

            if (section.layout) {

                classString += ' ssb-page-section-layout-' + section.layout;

                if (version) {
                    classString += ' ssb-page-section-layout-' + section.layout + '-v' + version;
                }

            }

            if (section.layoutModifiers) {

                if (section.layoutModifiers.fixed) {

                    classString += ' ssb-page-section-layout-' + section.layout + '-fixed';
                    classString += ' ssb-fixed sticky';

                    if (vm.index === 0) {
                        classString += ' ssb-fixed-first-element';
                    }

                }
                if(section.layoutModifiers.columns && section.layoutModifiers.columns.columnsNum){
                    var _col = section.layoutModifiers.columns.columnsNum;
                    classString += ' ssb-text-column-layout ssb-text-column-' + _col;
                }

            }

            if (vm.sectionHasFooter(section)) {
                classString += ' ssb-page-section-layout-overflow-visible';
            }

            if (vm.sectionHasLegacyUnderNavSetting(section)) {
                classString += ' ssb-page-section-layout-legacy-undernav';
            }

            if (section.bg && section.bg.video && section.bg.video.show && section.bg.video.urlProcessed) {

                if (!angular.equals(vm.playerObject, {})) {
                    classString += ' ssb-page-section-layout-video-bg';
                }
            }

            if (section.bg && section.bg.img && section.bg.img.blur) {
                classString += ' ssb-page-section-layout-blur-image';
            }

        }
        // console.debug('section classString')
        // console.debug(classString)

        return classString;
    }

    function sectionBGClass(section) {
        var classString = ' ';


        if (section && section.bg) {

            if (section.bg.img && section.bg.img.blur) {
                classString += ' blur-image';
            }

            if (section.bg.img && section.bg.img.parallax) {
                classString += ' parallax';
            }

        }

        return classString;
    }

    function sectionStyle(section) {
        var styleString = ' ';

        if (section && section.spacing) {
            if (section.spacing.pt) {
                styleString += 'padding-top: ' + section.spacing.pt + 'px;';
            }

            if (section.spacing.pb) {
                styleString += 'padding-bottom: ' + section.spacing.pb + 'px;';
            }

            if (section.spacing.pl) {
                styleString += 'padding-left: ' + section.spacing.pl + 'px;';
            }

            if (section.spacing.pr) {
                styleString += 'padding-right: ' + section.spacing.pr + 'px;';
            }

            if (section.spacing.mt) {
                styleString += 'margin-top: ' + section.spacing.mt + 'px;';
            }

            if (section.spacing.mb) {
                styleString += 'margin-bottom: ' + section.spacing.mb + 'px;';
            }

            if (section.spacing.ml) {
                styleString += section.spacing.ml == 'auto' ? 'margin-left: ' + section.spacing.ml + ';float: none;' : 'margin-left: ' + section.spacing.ml + 'px;';
            }

            if (section.spacing.mr) {
                styleString += (section.spacing.mr == 'auto') ? 'margin-right: ' + section.spacing.mr + ';float: none;' : 'margin-right: ' + section.spacing.mr + 'px;';
            }

            if (section.spacing.mw) {
                styleString += (section.spacing.mw == '100%') ?
                     'max-width: ' + section.spacing.mw + ';' :
                     'max-width: ' + section.spacing.mw  + 'px;margin-left:auto!important;margin-right:auto!important;';
            }

            if (section.spacing.lineHeight) {
                styleString += 'line-height: ' + section.spacing.lineHeight;
            }

        }

        if (section && section.txtcolor) {
            styleString += 'color: ' + section.txtcolor + ';';
        }

        if(section && section.border && section.border.show && section.border.color){
            styleString += 'border-color: ' + section.border.color + ';';
            styleString += 'border-width: ' + section.border.width + 'px;';
            styleString += 'border-style: ' + section.border.style + ';';
            styleString += 'border-radius: ' + section.border.radius + '%;';
        }


        return styleString;
    }

    function sectionBGStyle(section) {
        var styleString = ' ';

        if (section && section.bg) {

            /*
            bg:
                color: ""
                img:
                    blur: false
                    height: null
                    overlay: true
                    overlaycolor: "#d24d57"
                    overlayopacity: 60
                    parallax: false
                    show: true
                    url: "//s3.amazonaws.com/indigenous-digital-assets/account_1191/graph_paper_1447199316134.gif"
                    width: null
                opacity: 0.4

            */

            if (section.bg.color) {
                styleString += 'background-color: ' + section.bg.color + ';';
            }

            if (section.bg.img && section.bg.img.show && section.bg.img.url && section.bg.img.url !== '') {
                styleString += 'background-image: url("' + section.bg.img.url + '")';
            }

        }

        return styleString;
    }

    function componentClass(component, index) {
        var classString = 'container-fluid ';

        if (vm.section.layout === '1-col') {
          // classString += 'col-sm-12 ';
        }

        if (vm.section.layout === '2-col') {
          classString += ' col-md-6 ';
        }

        if (vm.section.layout === '2-col-right') {
          classString += ' col-md-6 ';
          if(index > 1){
            classString += ' ssb-col-md-float-right';
          }
        }

        if (vm.section.layout === '3-col') {
          classString += ' col-md-4 ';
        }

        if (vm.section.layout === '4-col') {
          classString += ' col-md-3';
        }

        if (index !== undefined) {
          classString += ' ssb-component-index-' + index + ' ';
        }

        if(vm.section.layoutModifiers && vm.section.layoutModifiers.columns){
            if (vm.section.layoutModifiers.columns.columnsNum) {
                var _lastCoulmnFullWidth = false;
                var actualColumnsToIgnore = [];
                if(vm.section.layoutModifiers.columns.ignoreColumns && vm.section.layoutModifiers.columns.ignoreColumns.length){
                    var ignoreColumns = vm.section.layoutModifiers.columns.ignoreColumns;                    
                    _.each(ignoreColumns, function(val){
                        if(val === 'last'){
                            actualColumnsToIgnore.push(vm.section.components.length - 1);
                            _lastCoulmnFullWidth = true;
                        }
                        else{
                            actualColumnsToIgnore.push(val - 1);   
                        }
                    });
                }
                var fixedColumn = actualColumnsToIgnore.indexOf(index) > -1 ? true : false;

                var colCount = parseInt(vm.section.layoutModifiers.columns.columnsNum);
                var colClass = " col-xs-12 col-md-" + Math.floor(12/colCount);
                
                if(!fixedColumn) {
                    classString += colClass;
                    if(colCount == 5){
                        classString += " col-xs-15 col-md-15";
                    }
                }             
                    
                var totalCoulmns = colCount;

                if(actualColumnsToIgnore.length){
                    totalCoulmns = totalCoulmns + actualColumnsToIgnore.length;
                }

                if (index !== undefined && index >= totalCoulmns && !fixedColumn) {
                    classString += " ssb-col-hide";
                }

                if(index === vm.section.components.length - 1 && _lastCoulmnFullWidth){
                    classString += " ssb-text-last-column-full-width";
                }
            }
            
        }

        if (component.layoutModifiers) {

            if (component.layoutModifiers.columns) {
                if (component.layoutModifiers.columnsNum) {
                    classString += ' ssb-component-layout-columns-' + component.layoutModifiers.columnsNum + ' ';
                }

                if (component.layoutModifiers.columnsSpacing) {
                    classString += ' ssb-component-layout-columns-spacing-' + component.layoutModifiers.columnsSpacing + ' ';
                }
            }

        }

        return classString;

    }

    function componentStyle(component) {
        var styleString = ' ';

        if (component.type.indexOf('ssb-') === 0) {

            if (component.spacing) {
                if (component.spacing.pt) {
                    styleString += 'padding-top: ' + component.spacing.pt + 'px;';
                }

                if (component.spacing.pb) {
                    styleString += 'padding-bottom: ' + component.spacing.pb + 'px;';
                }

                if (component.spacing.pl) {
                    styleString += 'padding-left: ' + component.spacing.pl + 'px;';
                }

                if (component.spacing.pr) {
                    styleString += 'padding-right: ' + component.spacing.pr + 'px;';
                }

                if (component.spacing.mt) {
                    styleString += 'margin-top: ' + component.spacing.mt + 'px;';
                }

                if (component.spacing.mb) {
                    styleString += 'margin-bottom: ' + component.spacing.mb + 'px;';
                }

                if (component.spacing.ml) {
                    styleString += component.spacing.ml == 'auto' ? 'margin-left: ' + component.spacing.ml + ';float: none;' : 'margin-left: ' + component.spacing.ml + 'px;';
                }

                if (component.spacing.mr) {
                    styleString += (component.spacing.mr == 'auto') ? 'margin-right: ' + component.spacing.mr + ';float: none;' : 'margin-right: ' + component.spacing.mr + 'px;';
                }

                if (component.spacing.mw) {
                    styleString += (component.spacing.mw == '100%') ?
                        'max-width: ' + component.spacing.mw + ';' :
                        'max-width: ' + component.spacing.mw  + 'px;margin:0 auto!important;';
                }

                if (component.spacing.lineHeight) {
                    styleString += 'line-height: ' + component.spacing.lineHeight;
                }
            }

            if (component.txtcolor) {
                styleString += 'color: ' + component.txtcolor + ';';
            }

            if (component.visibility === false) {
                styleString += 'display: none!important;';
            }

            if (component.bg) {
              if (component.bg.color) {
                styleString += 'background-color: ' + component.bg.color + ';';
              }

              if (component.bg.img && component.bg.img.show && component.bg.img.url !== '') {
                styleString += 'background-image: url("' + component.bg.img.url + '");';
              }
            }

            if (component.src) {
                if (component.src && component.src !== '') {
                    styleString += 'background-image: url("' + component.src + '");';
                }
            }

        }

        if (component.layoutModifiers) {
            if (component.layoutModifiers.columns) {
                if (component.layoutModifiers.columnsMaxHeight) {
                    styleString += ' max-height: ' + component.layoutModifiers.columnsMaxHeight + 'px';
                }
            }
        }

        if (component.border && component.border.show && component.border.color) {
            styleString += 'border-color: ' + component.border.color + ';';
            styleString += 'border-width: ' + component.border.width + 'px;';
            styleString += 'border-style: ' + component.border.style + ';';
            styleString += 'border-radius: ' + component.border.radius + '%;';
        }
        else if(vm.section.layoutModifiers && vm.section.layoutModifiers.columns && vm.section.layoutModifiers.columns.columnsNum){            
            if (vm.section.columnBorder && vm.section.columnBorder.show && vm.section.columnBorder.color) {
                styleString += 'border-color: ' + vm.section.columnBorder.color + ';';
                styleString += 'border-width: ' + vm.section.columnBorder.width + 'px;';
                styleString += 'border-style: ' + vm.section.columnBorder.style + ';';
                styleString += 'border-radius: ' + vm.section.columnBorder.radius + '%;';
            }
        }


        if(vm.section.layoutModifiers && vm.section.layoutModifiers.columns && vm.section.layoutModifiers.columns.columnsSpacing) {
            //styleString += 'padding-right: ' + vm.section.layoutModifiers.columns.columnsSpacing + 'px;';
        }

        return styleString;
    }

    /**
     * setFixedPosition
     * - If fixed element is first on page, just make it fixed
     * - Else, create new StickyState for element to fix at scroll position
     */
    function setFixedPosition() {
        var elementIsFirstPosition = vm.index === 0;
        if (elementIsFirstPosition) {
            var dup = vm.element.clone();
            dup.addClass('ssb-fixed-clone-element');
            dup.attr('id', 'clone_of_' + vm.section._id);
            dup.insertAfter(vm.element);
        } else {
            $timeout(function() {
                new StickyState(vm.element[0]);
            }, 2000);
        }
    }

    function sectionHasFooter(section) {
        return _.findWhere(section.components, { type: 'footer' });
    }

    function sectionHasLegacyUnderNavSetting(section) {
        var isUnderNav = false;
        var masthead = _.findWhere(section.components, { type: 'masthead' });

        if (masthead && masthead.bg && masthead.bg.img && masthead.bg.img.undernav) {
            isUnderNav = true;
        }

        return isUnderNav;
    }

    function getTrustedUrl(url) {
        return $sce.trustAsResourceUrl(url);
    }

   

    function setupVideoBackground() {

        var windowWidth = angular.element($window).width();

        if (windowWidth > 767 && vm.section.bg.video && vm.section.bg.video.id) {

            if (vm.playerObject.destroy) {
                vm.playerObject.destroy();
            }

            if (YT && YT.Player) {
                vm.playerObject = new YT.Player('section_video_' + vm.section._id, {
                    height: '100%',
                    width: '100%',
                    videoId: vm.section.bg.video.id,
                    events: {
                        'onReady': vm.onPlayerReady,
                        'onStateChange': vm.onPlayerStateChange,
                        'onError': vm.onPlayerError
                    },
                    playerVars: {
                        autohide: 1,
                        loop: 1,
                        rel: 0,
                        enablejsapi: 1,
                        controls: 0,
                        autoplay: 1,
                        showinfo: 0,
                        modestbranding: 1,
                        playlist: vm.section.bg.video.id,
                    }
                });
            } else {
                $timeout(setupVideoBackground, 500);
            }

        }

    }

    vm.onPlayerReady = function(event) {
        vm.player = event.target;
        vm.player.playVideo();
        vm.player.mute();
    }

    vm.onPlayerStateChange = function(event) {
        // console.log('onPlayerStateChange', JSON.stringify(event));
    }

    vm.onPlayerError = function(event) {
        console.log('onPlayerError', JSON.stringify(event));
    }

    vm.showSection = function(section){
        var _showSection = false;
        if(section)
        {
            _showSection = section.visibility || section.visibility === undefined;
            if(section.global && section.hiddenOnPages){
                var _pageHandle;
                if(vm.state){
                    _pageHandle = vm.state.page.handle;
                }
                else{
                    _pageHandle = $scope.$root.pageHandle;
                }
                _showSection = !section.hiddenOnPages[_pageHandle];
                section.visibility =  _showSection;
            }
        }
        return _showSection;
    }

    function init(element) {
        vm.element = element;

        $timeout(function() {
            vm.sectionInitDelayDone = true;
        });

        if (!vm.uiState && vm.section.layoutModifiers && vm.section.layoutModifiers.fixed) {
            $timeout(function() {
                vm.setFixedPosition();
            }, 1000);
        }

    }

}


})();

(function(){

app.directive('ssbTextSettings', ssbTextSettings);

ssbTextSettings.$inject = ['$compile'];
/* @ngInject */
function ssbTextSettings($compile) {
  return {
  	restrict: 'C',
  	controller: 'SiteBuilderTextSettingsController',
  	controllerAs: 'vm',
  	bindToController: true,
    scope: true,
  	link: function (scope, element, attrs, ctrl) {
        ctrl.init(element);
  	}
  }

}

})();

(function(){

app.controller('SiteBuilderTextSettingsController', ssbTextSettingsController);

ssbTextSettingsController.$inject = ['$rootScope', '$scope', '$attrs', '$filter', '$timeout', '$compile'];
/* @ngInject */
function ssbTextSettingsController($rootScope, $scope, $attrs, $filter, $timeout, $compile) {

    var vm = this;
    var pvm = null;
    var limit = 10;
    var pScope = $scope.$parent;

    vm.init = init;
    vm.element = null;
    vm.elementId = null;
    vm.parentTextElement = null;
    vm.parentTextElementModelAttribute = null;
    vm.parentComponent = null;
    vm.parentComponentId = null;
    vm.elementModelName = null;
    vm.elementModelIndex = null;
    vm.parentNgRepeat = null;
    vm.applyStylesToSiblingTextElements = false;
    vm.elementClass = elementClass;
    vm.elementStyle = elementStyle;
    vm.elementDataOriginal;
    vm.elementData = {
        'name': 'Text Element',
        'type': 'ssb-element-text',
        'title': 'Text Element',
        'version': null,
        'bg': {
            'img': {
                'url': '',
                'width': null,
                'height': null,
                'parallax': false,
                'blur': false,
                'overlay': false,
                'show': false
            },
            'color': ''
        },
        'txtcolor': '',
        'visibility': true,
        'spacing': {}
    };

    function applyStyles() {
        pvm = {};

        if (vm.parentComponent && vm.parentComponent.scope()) {
            pvm.component = vm.parentComponent.scope().vm.component;
            vm.elementData = getStylesForModel();
        }
    }

    function setupActiveElementWatch() {

        //get functions from parent text component
        while ((!pScope.vm || pScope.vm && !pScope.vm.uiState) && limit > 0) {
          pScope = pScope.$parent;
          limit--;
        }

        pvm = pScope.vm;

        $scope.pvm = pvm;

        if (pvm) {
            var pvmActiveElement = $scope.$watch('pvm.uiState.activeElement', function(activeElement) {
                if (activeElement) {
                    if (activeElement.id === vm.elementData.id) {
                        if (!angular.equals(vm.elementDataOriginal, activeElement)) {
                            console.log('changed activeElement.id:', activeElement.id)
                            vm.elementData = activeElement;
                            updateSettingsForModel();
                        }
                    }
                }
            }, true);
        }

        return pvm;

    }

    function setupElementForEditing() {

        var data = {};

        var editingEnabled = setupActiveElementWatch();

        if (!editingEnabled) {
            return false;
        }

        //layout reflow hack
        if (vm.parentSection.hasClass('ssb-page-section-layout-hero')) {
            $timeout(function() {
                // vm.element.get(0).style.webkitTransform = vm.element.get(0).style.webkitTransform;
                var el = vm.element[0];
                el.style.display='none';
                el.offsetHeight;
                el.style.display='';
                console.log('did it')
            }, 4000);
        }

        vm.elementId = 'text-element_' + vm.parentSectionId + "-" + vm.parentComponentId + "-" + vm.elementModelName;

        if (vm.isNestedModelProp) {

            if (vm.parentNgRepeat.length) {

                vm.elementModelIndex = vm.parentNgRepeat.scope().$index;

            }

            if (vm.elementModelIndex !== undefined && vm.elementModelIndex !== null) {

                vm.elementId = vm.elementId + "-i" + vm.elementModelIndex;

            }

        }

        data = {
            id: vm.elementId,
            _id: vm.elementId,
            anchor: vm.elementId
        };

        //extend with id values
        vm.elementData = angular.extend(vm.elementData, data);

        //extend with existing style values
        vm.elementData = angular.extend(vm.elementData, getStylesForModel());

        //save original state
        vm.elementDataOriginal = angular.copy(vm.elementData);

        return vm.elementData;

    }

    function updateSettingsForModel() {

        setStylesForModel();

    }

    function getStylesForModel() {

        var data = {};

        if (pvm.component.elementStyles && pvm.component.elementStyles[vm.elementModelName]) {
            if (!vm.isNestedModelProp) {

                data = pvm.component.elementStyles[vm.elementModelName];

            } else {

                if (vm.parentNgRepeat.length) {

                    vm.elementModelIndex = vm.parentNgRepeat.scope().$index;

                }

                if (vm.elementModelIndex !== undefined && vm.elementModelIndex !== null) {

                    data = pvm.component.elementStyles[vm.elementModelName][vm.elementModelIndex];

                }

            }

        }

        return data;

    }

    function setStylesForModel() {

        pvm.component.elementStyles = pvm.component.elementStyles || {};

        if (!vm.isNestedModelProp) {

            pvm.component.elementStyles[vm.elementModelName] = vm.elementData;

        } else { // i.e. "testimonial.title" array nested prop

            pvm.component.elementStyles[vm.elementModelName] = pvm.component.elementStyles[vm.elementModelName] || {};

            if (vm.parentNgRepeat.length) {
                vm.elementModelIndex = vm.parentNgRepeat.scope().$index;
            }

            if (vm.elementModelIndex !== undefined && vm.elementModelIndex !== null) {

                pvm.component.elementStyles[vm.elementModelName][vm.elementModelIndex] = vm.elementData;

            } else {
                return new Error('can\'t find parent ng-repeat');
            }

        }

        return pvm.component.elementStyles;

    }

    function getParentNgRepeat() {
        var parentNgRepeat = vm.element.parents('[data-ng-repeat]:first');

        if (!parentNgRepeat.length) {
            parentNgRepeat = vm.element.parents('[ng-repeat]:first');
        }

        return parentNgRepeat;
    }

    //TODO: use https://github.com/martinandert/react-inline to generate inline styles for sections/components
    function elementClass() {
        if (vm.elementData && vm.elementData.type) {
            var classObj = {};

            classObj['ssb-element'] = true;

            classObj[vm.elementData.type] = true;

            // classObj['ssb-hide-during-load'] = !buildDataObjFromHTMLDone;

            return classObj;

        } else {

            return ''

        }

    }

    function elementStyle() {
        if (vm.elementData && vm.elementData.type) {
            var styleString = ' ';
            var component = vm.elementData;

            if (component.spacing) {

                if (component.spacing.pt) {
                    styleString += 'padding-top: ' + component.spacing.pt + 'px;';
                }

                if (component.spacing.pb) {
                    styleString += 'padding-bottom: ' + component.spacing.pb + 'px;';
                }

                if (component.spacing.pl) {
                    styleString += 'padding-left: ' + component.spacing.pl + 'px;';
                }

                if (component.spacing.pr) {
                    styleString += 'padding-right: ' + component.spacing.pr + 'px;';
                }

                if (component.spacing.mt) {
                    styleString += 'margin-top: ' + component.spacing.mt + 'px;';
                }

                if (component.spacing.mb) {
                    styleString += 'margin-bottom: ' + component.spacing.mb + 'px;';
                }

                if (component.spacing.ml) {
                    styleString += component.spacing.ml == 'auto' ? 'margin-left: ' + component.spacing.ml + ';float: none;' : 'margin-left: ' + component.spacing.ml + 'px;';
                }

                if (component.spacing.mr) {
                    styleString += (component.spacing.mr == 'auto') ? 'margin-right: ' + component.spacing.mr + ';float: none;' : 'margin-right: ' + component.spacing.mr + 'px;';
                }

                if (component.spacing.mw) {
                    styleString += (component.spacing.mw == '100%') ?
                    'max-width: ' + component.spacing.mw + ';' :
                    'max-width: ' + component.spacing.mw  + 'px;margin:0 auto!important;';
                }

                if (component.spacing.lineHeight) {
                styleString += 'line-height: ' + component.spacing.lineHeight;
                }
            }

            if (component.txtcolor) {
                styleString += 'color: ' + component.txtcolor + ';';
            }

            if (component.visibility === false) {
                styleString += 'display: none!important;';
            }

            if (component.bg) {
                if (component.bg.color) {
                    styleString += 'background-color: ' + component.bg.color + ';';
                }

                if (component.bg.img && component.bg.img.show && component.bg.img.url !== '') {
                    styleString += 'background-image: url("' + component.bg.img.url + '");';
                }

            }

            if(component.border && component.border.show && component.border.color){
                styleString += 'border-color: ' + component.border.color + ';';
                styleString += 'border-width: ' + component.border.width + 'px;';
                styleString += 'border-style: ' + component.border.style + ';';
                styleString += 'border-radius: ' + component.border.radius + '%;';
            }

            return styleString;

        } else {

            return '';

        }
    }

    function init(element) {

        console.info('ssb-text-settings directive init...');

        vm.element = element;

        vm.parentTextElement = vm.element.parent();

        vm.parentTextElementModelAttribute = vm.parentTextElement.attr('ng-model');

        vm.elementModelName = vm.parentTextElementModelAttribute.replace('component.', '').replace('vm.', '').replace('.', '/');

        vm.isNestedModelProp = vm.applyStylesToSiblingTextElements ? false : vm.elementModelName.indexOf('/') !== -1;

        vm.parentComponent = vm.element.closest('.ssb-component');

        vm.parentNgRepeat = getParentNgRepeat();

        if ($attrs.isEdit) {

            if (!vm.element.closest('indi-email-builder').length) {

                vm.parentComponentId = vm.parentComponent.attr('id');

                vm.parentSection = vm.element.closest('.ssb-section-layout');

                vm.parentSectionId = vm.parentSection.attr('id');

                setupElementForEditing();

            } else {

                console.debug('Text Settings should not be available in Email Editor');

            }

        } else {

            //just set the style props on the frontend
            applyStyles();

        }

    }

}


})();

(function(){

app.directive('ssbTextComponent', ssbTextComponent);

function ssbTextComponent() {
  return {
  	// transclude: true,
  	restrict: 'A',
  	controller: 'SiteBuilderTextComponentController',
  	controllerAs: 'vm',
  	bindToController: true,
    scope: {
      ssbEditor: '=',
      componentClass: '&',
      component: '='
    },
    templateUrl: '/admin/assets/js/ssb-site-builder/ssb-components/ssb-text/ssb-text.component.html',
    replace: true,
  	link: function (scope, element, attrs, ctrl) {
  		ctrl.init(element);
  	}
  }

}

})();

(function(){

app.controller('SiteBuilderTextComponentController', ssbTextComponentController);

ssbTextComponentController.$inject = ['$scope', '$attrs', '$filter', '$transclude'];
/* @ngInject */
function ssbTextComponentController($scope, $attrs, $filter, $transclude) {

  console.info('ssb-text directive init...')

  var vm = this;

  vm.init = init;


  function init(element) {
  	vm.element = element;
  }

}


})();

(function(){

app.directive('ssbThemeBtn', ssbThemeBtn);

ssbThemeBtn.$inject = ['$compile'];
/* @ngInject */
function ssbThemeBtn($compile) {
  return {
  	// transclude: true,
    // require: '^ssbComponentLoader',
  	restrict: 'C',
  	controller: 'SiteBuilderThemeBtnController',
  	controllerAs: 'vm',
  	bindToController: true,
    scope: true,
  	link: function (scope, element, attrs, ctrl) {
        ctrl.init(element);
  	}
  }

}

})();

(function(){

app.controller('SiteBuilderThemeBtnController', ssbThemeBtnController);

ssbThemeBtnController.$inject = ['$rootScope', '$scope', '$attrs', '$filter', '$transclude', '$sce', '$timeout', '$compile','SimpleSiteBuilderService'];
/* @ngInject */
function ssbThemeBtnController($rootScope, $scope, $attrs, $filter, $transclude, $sce, $timeout, $compile, SimpleSiteBuilderService) {

    var vm = this;
    var elementId = '';
    var parentComponent;
    var parentEditor;
    var parentEditorId;
    var buildDataObjFromHTMLDone = false;

    vm.init = init;
    vm.elementClass = elementClass;
    vm.elementStyle = elementStyle;

    vm.elementDataOriginal;
    vm.elementData = {
        'name': 'Button',
        'type': 'ssb-element-button',
        'title': 'Button',
        'version': null,
        'bg': {
            'img': {
                'url': '',
                'width': null,
                'height': null,
                'parallax': false,
                'blur': false,
                'overlay': false,
                'show': false
            },
            'color': ''
        },
        'txtcolor': '',
        'visibility': true,
        'spacing': {},
        'hover':{
            'txtcolor': '',
            'bg':{
                'color': ''
            }
        },
        'pressed':{
            'txtcolor': '',
            'bg':{
                'color': ''
            }
        },
        'border':{}
    };

    //get functions from parent text component
    var limit = 10;
    var pScope = $scope.$parent;
    while ((!pScope.vm || pScope.vm && !pScope.vm.uiState) && limit > 0) {
      pScope = pScope.$parent;
      limit--;
    }
    var pvm = pScope.vm;
    $scope.pvm = pvm;

    $rootScope.$on('$ssbElementsChanged', function(event, componentId, editorId) {

        if (parentEditorId && parentEditorId === editorId && parentComponent && componentId === parentComponent.attr('id')) {
            console.log('$ssbElementsChanged');
            positionEditControl();
        }

    });

    var watchElementData = $scope.$watch('vm.elementData', updateTextEditor, true);

    // var pvmStateLoading = $scope.$watch('pvm.state.saveLoading', function() {
    //     if (parentComponent && pvm && pvm.state.saveLoading) {
    //         var el = SimpleSiteBuilderService.getCompiledElement(parentComponent.attr('id'), parentEditorId, elementId)

    //         if (el) {
    //             el.removeClass('ssb-theme-btn-active-element ng-scope');
    //             el.removeAttr('data-compiled');
    //         }

    //         updateTextEditor(true);
    //     }
    // });
    // var pvmActiveElement = $scope.$watch('pvm.uiState.activeElement', function(value) {
    //     // console.log('pvm.uiState.activeElement', pvm.uiState.activeElement);
    // });



    function buildDataObjFromHTML() {
        // var el = SimpleSiteBuilderService.getCompiledElement(parentComponent.attr('id'), parentEditorId, elementId);
        var ssbStyle = vm.element.attr('data-ssb-style');
        var ssbHoverStyle = vm.element.attr('data-ssb-hover-style');
        var ssbActiveStyle = vm.element.attr('data-ssb-active-style');
        var ssbClass = vm.element.attr('data-ssb-class');
        var ssbShowBorder = vm.element.attr('data-show-border');
        var data = {
            id: 'button-element_' + elementId,
            _id: 'button-element_' + elementId,
            anchor: 'button-element_' + elementId,
            'bg': {},
            'hover':{
                'bg':{}
            },
            'pressed':{
                'bg':{}
            },
            'border':{},
            'spacing': {}
        };

        if (ssbStyle) {
            var styleEl = $('<div style="' + ssbStyle + '"></div>');
            var style = styleEl.get(0).style;
            var bgcolor = style.backgroundColor;
            var txtcolor = style.color;
            var visibility = style.display !== 'none';
            var spacingPT = style.paddingTop.replace('px', '');
            var spacingPL = style.paddingLeft.replace('px', '');
            var spacingPR = style.paddingRight.replace('px', '');
            var spacingPB = style.paddingBottom.replace('px', '');
            var spacingMT = style.marginTop.replace('px', '');
            var spacingML = style.marginLeft.replace('px', '');
            var spacingMR = style.marginRight.replace('px', '');
            var spacingMB = style.marginBottom.replace('px', '');
            var spacingMW = style.maxWidth.replace('px', '');

            // Border related
            var borderColor = style.borderColor;
            var borderWidth = style.borderWidth.replace('px', '');
            var borderRadius = style.borderRadius.replace('%', '');
            var borderStyle = style.borderStyle;

            data.bg.color = bgcolor;
            data.txtcolor = txtcolor;
            data.visibility = visibility;
            data.spacing.pt = spacingPT;
            data.spacing.pl = spacingPL;
            data.spacing.pr = spacingPR;
            data.spacing.pb = spacingPB;
            data.spacing.mt = spacingMT;
            data.spacing.ml = spacingML;
            data.spacing.mr = spacingMR;
            data.spacing.mb = spacingMB;
            data.spacing.mw = spacingMW;

            data.border.color = borderColor;
            data.border.width = borderWidth;
            data.border.style = borderStyle;
            data.border.radius = borderRadius;
        }
        data.border.show = ssbShowBorder;
        if (ssbHoverStyle) {
            var hoverStyleEl = $('<div style="' + ssbHoverStyle + '"></div>');
            var hoverStyle = hoverStyleEl.get(0).style;
            var hoverbgcolor = hoverStyle.backgroundColor;
            var hovertxtcolor = hoverStyle.color;

            data.hover.bg.color = hoverbgcolor;
            data.hover.txtcolor = hovertxtcolor;
        }

        if (ssbActiveStyle) {
            var activeStyleEl = $('<div style="' + ssbActiveStyle + '"></div>');
            var activeStyle = activeStyleEl.get(0).style;
            var activebgcolor = activeStyle.backgroundColor;
            var activetxtcolor = activeStyle.color;

            data.pressed.bg.color = activebgcolor;
            data.pressed.txtcolor = activetxtcolor;
        }

        if (ssbClass) {
            try {
                var classObj = JSON.parse(ssbClass);
            } catch(e) {};

            console.log('classObj', classObj);

            if (classObj) {
                data.version = _.each(classObj, function(value, key, obj) {
                    if (key.indexOf('ssb-theme-btn-style-') === 0) {
                        return key.replace('ssb-theme-btn-style-', '')
                    }
                });
            }
        }

        // bind hover and active events to button

        vm.element.hover(function(){
            var component = vm.elementData;
            if(component.hover.txtcolor){
                this.style.setProperty( 'color', data.hover.txtcolor, 'important' );
            }

            if (component.hover.bg) {
                this.style.setProperty( 'background-color', component.hover.bg.color, 'important' );
            }
        }, function(){
            vm.elementStyle(vm.element);
        });

        vm.element.on("mousedown touchstart", function(){
            var component = vm.elementData;
            if(component.pressed.txtcolor){
                this.style.setProperty( 'color', data.pressed.txtcolor, 'important' );
            }

            if (component.pressed.bg) {
                this.style.setProperty( 'background-color', component.pressed.bg.color, 'important' );
            }
        })

        angular.extend(vm.elementData, data);

        buildDataObjFromHTMLDone = true;

    }

    function updateTextEditor(force) {

        if (buildDataObjFromHTMLDone) {

            positionEditControl();

            vm.elementDataOriginal = vm.elementDataOriginal || angular.copy(vm.elementData);

            if (!angular.equals(vm.elementDataOriginal, vm.elementData)) {

                pvm.state.pendingPageChanges = true;

                if (parentEditor.froalaEditor) {
                    parentEditor.froalaEditor('events.trigger', 'contentChanged');
                }

            }

            if (force && parentEditor.froalaEditor) {
                parentEditor.froalaEditor('events.trigger', 'contentChanged');
            }

        }

    }

    //TODO: use https://github.com/martinandert/react-inline to generate inline styles for sections/components
    function elementClass() {
        var classObj = {};
        var version = parseInt(vm.elementData.version);
        var versionIsNumber = typeof parseInt(vm.elementData.version) === "number";
        var versionIsNaN = isNaN(parseInt(vm.elementData.version));

        classObj['ssb-element'] = true;

        classObj[vm.elementData.type] = true;

        classObj['ssb-hide-during-load'] = !buildDataObjFromHTMLDone;

        if (versionIsNumber && !versionIsNaN) {
            classObj['ssb-theme-btn-style-' + version] = true;
        }

        if (vm.element) {
            vm.element.attr('data-ssb-class', JSON.stringify(classObj));
        }

        return classObj;
    }

    function elementStyle(el) {

        var styleString = ' ';
        var hoverStyleString = ' ';
        var activeStyleString = ' ';
        var component = vm.elementData;

        if (component.spacing) {

            if (component.spacing.pt) {
                styleString += 'padding-top: ' + component.spacing.pt + 'px;';
            }

            if (component.spacing.pb) {
                styleString += 'padding-bottom: ' + component.spacing.pb + 'px;';
            }

            if (component.spacing.pl) {
                styleString += 'padding-left: ' + component.spacing.pl + 'px;';
            }

            if (component.spacing.pr) {
                styleString += 'padding-right: ' + component.spacing.pr + 'px;';
            }

            if (component.spacing.mt) {
                styleString += 'margin-top: ' + component.spacing.mt + 'px;';
            }

            if (component.spacing.mb) {
                styleString += 'margin-bottom: ' + component.spacing.mb + 'px;';
            }

            if (component.spacing.ml) {
                styleString += component.spacing.ml == 'auto' ? 'margin-left: ' + component.spacing.ml + ';float: none;' : 'margin-left: ' + component.spacing.ml + 'px;';
            }

            if (component.spacing.mr) {
                styleString += (component.spacing.mr == 'auto') ? 'margin-right: ' + component.spacing.mr + ';float: none;' : 'margin-right: ' + component.spacing.mr + 'px;';
            }

            if (component.spacing.mw) {
                styleString += (component.spacing.mw == '100%') ?
                'max-width: ' + component.spacing.mw + ';' :
                'max-width: ' + component.spacing.mw  + 'px;margin:0 auto!important;';
            }

            if (component.spacing.lineHeight) {
                styleString += 'line-height: ' + component.spacing.lineHeight;
            }
        }

        if (component.txtcolor) {
            styleString += 'color: ' + component.txtcolor + ';';
        }

        if (component.visibility === false) {
            styleString += 'display: none!important;';
        }

        if (component.bg) {
            if (component.bg.color) {
                styleString += 'background-color: ' + component.bg.color + ';';
            }
        }

        if (component.hover) {
            if(component.hover.txtcolor){
                hoverStyleString += 'color: ' + component.hover.txtcolor + ';';
            }
            if (component.hover.bg) {
                hoverStyleString += 'background-color: ' + component.hover.bg.color + ';';
            }
        }

        if (component.pressed) {
            if(component.pressed.txtcolor){
                activeStyleString += 'color: ' + component.pressed.txtcolor + ';';
            }
            if (component.pressed.bg) {
                activeStyleString += 'background-color: ' + component.pressed.bg.color + ';';
            }
        }

        if(component.border && component.border.show && component.border.color && component.border.style){
            styleString += 'border-color: ' + component.border.color + ';';
            styleString += 'border-width: ' + component.border.width + 'px;';
            styleString += 'border-style: ' + component.border.style + ';';
            styleString += 'border-radius: ' + component.border.radius + '%;';
        }

        if (vm.element) {
            vm.element.attr('data-show-border', component.border.show);
            vm.element.attr('data-ssb-style', styleString);
            vm.element.attr('data-ssb-hover-style', hoverStyleString);
            vm.element.attr('data-ssb-active-style', activeStyleString);
        }
        if (el) {
            el.attr('style', styleString);
        }

        return styleString;
    }

    function setActiveElementId(reset) {

        if (!reset) {
            pvm.uiState.activeElement = vm.elementData;
        } else {
            pvm.uiState.activeElement = {}
        }
    }

    function hideAllControls() {

        //hide editable-title's and borders
        angular.element('.ssb-edit-wrap, .editable-title, .editable-cover, [data-edit]', '.ssb-main').removeClass('ssb-on');

        //hide all edit-controls
        angular.element('.ssb-main').find('.ssb-active-edit-control').removeClass('ssb-active-edit-control');
        angular.element('.ssb-main').find('.ssb-on').removeClass('ssb-on');

        //components
        angular.element('.ssb-main').find('.ssb-active-component').removeClass('ssb-active-component');

        //btns
        angular.element('.ssb-main').find('.ssb-theme-btn-active-element').removeClass('ssb-theme-btn-active-element');
        angular.element('.ssb-main').find('.ssb-edit-control-component-btn').removeClass('on');
    }

    function showEditControl(e) {

        //prevent other handling
        e.stopPropagation();

        hideAllControls();

        //close section panel
        // pvm.uiState.openSidebarSectionPanel = null;
        // pvm.uiState.showSectionPanel = false;
        pvm.uiState.activeSectionIndex = null;
        pvm.uiState.activeComponentIndex = null;

        //get element
        var el = SimpleSiteBuilderService.getCompiledElement(parentComponent.attr('id'), parentEditorId, elementId);

        $timeout(function() {
            // un-highlight other compiled elements in this component
            parentComponent.find('[data-compiled]').removeClass('ssb-theme-btn-active-element');

            // highlight clicked element
            el.addClass('ssb-theme-btn-active-element');

            // hide other element edit controls
            $('.ssb-edit-control[data-compiled-control-id]').removeClass('on');
        });

        // if edit control hasn't been created, create it and compile it
        if (!SimpleSiteBuilderService.getCompiledElementEditControl(parentComponent.attr('id'), parentEditorId, elementId)) {
            $scope.component = { title: 'Button_'+elementId, type: 'Button' }; //TODO: make generic/configurable
            var template = '<ssb-edit-control ' +
                                'data-compiled-control-id="control_' + elementId + '" ' +
                                'class="ssb-edit-control ssb-edit-control-component ssb-edit-control-component-btn on" ' +
                                'component="component" ' +
                                'state="pvm.state" ' +
                                'ui-state="pvm.uiState" ' +
                                'section-index="null" ' +
                                'component-index="null">' +
                            '</ssb-edit-control>';
            $compile(template)($scope, compiledEditControl);

        // else set active element (for contextual menu) and position the edit control and make visible
        } else {
            $timeout(function() {

                setActiveElementId();
                positionEditControl();

                var editControlComponent = $('.ssb-edit-control[data-compiled-control-id="control_' + elementId + '"]')

                editControlComponent.addClass('on');

                //if contextual menu is already open, open directly from single click
                if (pvm.uiState.showSectionPanel) {
                    editControlComponent.find('.ssb-settings-btn').click();
                }

                /*
                 * if contextual menu is already open, open directly from single click
                 */
                if (pvm.uiState.showSectionPanel || SimpleSiteBuilderService.isIENotEdge) {
                    $timeout(function() {
                        editControlComponent.find('.ssb-settings-btn').click();
                    });
                }

            });
        }
    }

    function hideEditControl(e) {
        $timeout(function() {
            $('.ssb-edit-control[data-compiled-control-id="control_' + elementId + '"]').removeClass('on');
        });
    }

    function compiledEditControl(cloned, scope) {
        var newEl;
        $timeout(function() {
            cloned.prependTo(parentComponent.parent());
            newEl = $('.ssb-edit-control[data-compiled-control-id="control_' + elementId + '"]')
            newEl.addClass('on');
            SimpleSiteBuilderService.addCompiledElementEditControl(parentComponent.attr('id'), parentEditorId, elementId, newEl);
            setActiveElementId();
            positionEditControl();

            //if contextual menu is already open, open directly from single click
            if (pvm.uiState.showSectionPanel) {
                newEl.find('.ssb-settings-btn').click();
            }

        });
    }

    function positionEditControl() {
        var top = 0;
        var left = 0;
        var topbarHeight = 125;
        var sidebarWidth = 140;
        var scrollTop = document.querySelector('.ssb-site-builder-container').scrollTop;
        var topOffset = 35;
        var leftOffset = 35;
        var compiledEl = SimpleSiteBuilderService.getCompiledElement(parentComponent.attr('id'), parentEditorId, elementId);
        var compiledEditControl = SimpleSiteBuilderService.getCompiledElementEditControl(parentComponent.attr('id'), parentEditorId, elementId);

        if (compiledEl.length) {
            top = compiledEl[0].getBoundingClientRect().top - topOffset - topbarHeight + scrollTop;
            left = compiledEl[0].getBoundingClientRect().left - leftOffset - sidebarWidth;
        }

        if (compiledEditControl && compiledEditControl.length) {
            compiledEditControl.css({ top: top, left: left });
        }

    }

    // function clearActiveElement(e) {
    //     var isEditControl = $(e.target).parents('[data-compiled-control-id], [data-compiled]').length > 0;
    //     if (!isEditControl) {
    //         pvm.uiState.activeElement = {};
    //         angular.element('[data-compiled-control-id], [data-compiled]').removeClass('on ssb-theme-btn-active-element');
    //     }
    // }

    function init(element) {

        console.info('ssb-theme-btn directive init...');

        vm.element = element;

        if (pvm && element.data('compiled')) {

            elementId = element.data('compiled');

            parentComponent = element.closest('[component]');

            parentEditor = element.closest('.editable');

            parentEditorId = parentEditor.froalaEditor().data('froala.editor').id;

            buildDataObjFromHTML();

            $timeout(function() {
                $('[data-compiled=' + elementId + ']').on('click', showEditControl);

                $('[data-compiled-control-id=control_' + elementId + ']').on('click', setActiveElementId);

                // angular.element('.ssb-page-section').on('click', clearActiveElement);
            });

        } else {

            console.log('button outside of editor context: ', element.html());

            /**
             *  unbind watchers for inactive .ssb-theme-btn's
             */
            vm.elementClass = angular.noop();

            watchElementData();

            // pvmStateLoading();

        }

    }

}


})();

(function(){

app.directive('ssbActionButtons', ssbActionButtons);

function ssbActionButtons() {

    return {
        restrict: 'E',
        scope: {
            state: '=',
            saveAction: '&',
            cancelAction: '&',
            revertAction: '&',
            publishAction: '&'
        },
        templateUrl: 'assets/js/ssb-site-builder/ssb-controls/ssb-action-buttons/ssb-action-buttons.component.html',
        controller: 'SiteBuilderActionButtonsController',
        controllerAs: 'vm',
        bindToController: true,
        link: function(scope, element, attrs, ctrl) {
            ctrl.init(element);
        }
    };

}

})();

(function(){

app.controller('SiteBuilderActionButtonsController', ssbSiteBuilderActionButtonsController);

ssbSiteBuilderActionButtonsController.$inject = ['$scope', '$attrs', '$filter', 'SimpleSiteBuilderService', '$timeout'];
/* @ngInject */
function ssbSiteBuilderActionButtonsController($scope, $attrs, $filter, SimpleSiteBuilderService, $timeout) {

    console.info('site-build sidebar directive init...')

    var vm = this;

    vm.pageVersions = [];
    vm.hideHistoryTT = false;
    vm.spinTimeoutPromise = null;

    vm.init = init;
    vm.save = save;
    vm.cancel = cancel;
    vm.revert = revert;
    vm.publish = publish;
    vm.historyDropdownFn = historyDropdownFn;

    $scope.$watch(vm.state, function(newValue, oldValue) {
        if (angular.isDefined(vm.state.page.published)) {
            if (vm.state.page.published.date < vm.state.page.modified.date) {
                if (vm.spinTimeoutPromise) {
                    $timeout.cancel(vm.spinTimeoutPromise);
                }
                vm.spinTimeoutPromise = $timeout(function () {
                    $('.fa.fa-globe.fa-spin').removeClass('fa-spin');
                }, 10000);
            }
        }
    }, true);

    function save() {
    	vm.saveAction();
    }

    function cancel() {
    	vm.cancelAction();
    }

    function revert(versionId) {
        vm.revertAction({versionId: versionId});
    }

    function publish() {
        vm.publishAction();
    }

    function init(element) {
    	vm.element = element;
    }

    function historyDropdownFn (open) {
        vm.hideHistoryTT = open;
        if (open) {
            $('.tooltip').hide();
            SimpleSiteBuilderService.getPageVersions(vm.state.page._id, function (data) {
                vm.pageVersions = data;
            });
        } else {
            vm.pageVersions = [];
            $('.tooltip').show();
        }
    };

}

})();

'use strict';
/*global app*/
app.controller('SiteBuilderAddSectionModalController', ['$timeout', 'parentVm', 'SimpleSiteBuilderService', function ($timeout, parentVm, SimpleSiteBuilderService) {

	var sectionLabel;
	var vm = this;

	vm.parentVm = parentVm;

	/*
	* @platformSections
	* - an array of section types and icons for the add section modal
	*/
	vm.enabledPlatformSections = _.where(vm.parentVm.state.platformSections, {
		enabled: true
	});

    /*
    * @userSections
    * - an array of sections created by current user
    */
    vm.enabledUserSections = _.where(vm.parentVm.state.userSections, {
        enabled: true
    });

    //initially show platform sections
    vm.sections = vm.enabledPlatformSections;
    vm.sectionType = 'enabledPlatformSections';

	/************************************************************************************************************
	* Takes the platformSections object and gets the value for the filter property from any that are enabled.
	* It then makes that list unique, sorts the results alphabetically, and and removes the misc value if
	* it exists. (The misc value is added back on to the end of the list later)
	************************************************************************************************************/
	vm.sectionFilters = _.without(_.uniq(_.pluck(_.sortBy(vm.enabledPlatformSections, 'filter'), 'filter')), 'misc');

	// Iterates through the array of filters and replaces each one with an object containing an
	// upper and lowercase version
	_.each(vm.sectionFilters, function (element, index) {
		sectionLabel = element.charAt(0).toUpperCase() + element.substring(1).toLowerCase();
		vm.sectionFilters[index] = {
		  'capitalized': sectionLabel,
		  'lowercase': element
		};
		sectionLabel = null;
	});

	// Manually add the All option to the begining of the list
	vm.sectionFilters.unshift({
		'capitalized': 'All',
		'lowercase': 'all'
	});

	// Manually add the Misc section back on to the end of the list
	// Exclude 'Misc' filter for emails
	vm.sectionFilters.push({
	  'capitalized': 'Misc',
	  'lowercase': 'misc'
	});

    vm.setFilterType = function (label) {
        vm.typefilter = label;
    };

    // type is 'enabledPlatformSections' or 'enabledUserSections'
	vm.setSectionType = function (type) {
        SimpleSiteBuilderService.getUserSections().then(function() {
            vm.sectionType = type;
            vm.sections = vm[type];
        })
	};

}]);

(function(){

app.directive('ssbBlogEditor', ssbBlogEditor);

function ssbBlogEditor() {

    return {
        restrict: 'E',
        scope: {
            state: '=',
            uiState: '='
        },
        templateUrl: 'assets/js/ssb-site-builder/ssb-controls/ssb-blog-editor/ssb-blog-editor.component.html',
        controller: 'SiteBuilderBlogEditorController',
        controllerAs: 'vm',
        bindToController: true,
        link: function(scope, element, attrs, ctrl) {
            ctrl.init(element);
        }
    };

}

})();

(function(){

app.controller('SiteBuilderBlogEditorController', ssbSiteBuilderBlogEditorController);

ssbSiteBuilderBlogEditorController.$inject = ['$scope', '$rootScope', '$timeout', 'SimpleSiteBuilderBlogService', 'SweetAlert', 'toaster', 'SimpleSiteBuilderService', '$filter', '$window'];
/* @ngInject */
function ssbSiteBuilderBlogEditorController($scope, $rootScope, $timeout, SimpleSiteBuilderBlogService, SweetAlert, toaster, SimpleSiteBuilderService, $filter, $window) {

    console.info('site-builder blog-editor directive init...')

    var vm = this;

    vm.init = init;
    vm.ssbEditor = true;
    vm.ssbBlogEditor = true;

    vm.closeBlogPanel = closeBlogPanel;
    vm.backBlogPanel = backBlogPanel;

    vm.state.pendingBlogChanges = vm.state.pendingBlogChanges || false;

    vm.uiState.activePostFilter = 'all';
    vm.uiState.froalaEditorActive = false;
    vm.editableElementSelectors = '.ssb-blog-editor-post-title, .ssb-blog-editor-post-body';
    vm.editableElements = [];
    vm.blogListPageTemplate = SimpleSiteBuilderService.getBlogListPage();
    vm.blogPostPageTemplate = SimpleSiteBuilderService.getBlogPostPage();

    vm.toggleFeatured = toggleFeatured;
    vm.togglePublished = togglePublished;
    vm.filter = filter;
    vm.duplicatePost = duplicatePost;
    // vm.previewPost = previewPost;
    vm.viewPost = viewPost;
    vm.deletePost = deletePost;
    vm.editPost = editPost;
    vm.publishPost = publishPost;
    vm.retractPost = retractPost;
    vm.savePost = savePost;
    vm.isValidPost = isValidPost;
    vm.setFeaturedImage = setFeaturedImage;
    vm.removeFeaturedImage = removeFeaturedImage;
    vm.handleSaveErrors = handleSaveErrors;
    vm.autoSave = autoSave;
    vm.checkPendingChanges = checkPendingChanges;
    vm.refreshPost = refreshPost;
    vm.draftPost = draftPost;

    vm.uiState.cleanBlogPanel = cleanBlogPanel;

    vm.defaultPost = {
        post_title: '',
        post_content: 'Tell your story...',
        post_author: getDefualtAuthor()
    };

    function refreshPost(){
        vm.state.post = angular.copy(vm.defaultPost);
    }

    $scope.$watchGroup(['vm.uiState.openSidebarPanel.id', 'vm.uiState.openBlogPanel.id'], _.debounce(function(id) {
        $timeout(function() {
           vm.ssbBlogLoaded = true; 
        }, 0);
        
        if (vm.state.post && vm.state.pendingBlogChanges && id[1] !== "edit") {
            vm.savePost();
        }
    }, 1000), true);

    $scope.$watch('vm.state.post', vm.checkPendingChanges, true);

    // $rootScope.$on('$locationChangeStart', vm.checkStateNavigation);

    // function checkStateNavigation(event, toState, toParams, fromState, fromParams, options) {

    //     if (vm.state.pendingBlogChanges) {
    //         SweetAlert.swal({
    //             title: "Are you sure?",
    //             text: "You have unsaved changes. Are you sure you want to leave the Blog Editor?",
    //             type: "warning",
    //             showCancelButton: true,
    //             confirmButtonColor: "#DD6B55",
    //             confirmButtonText: "Yes, leave without saving.",
    //             cancelButtonText: "Cancel",
    //             closeOnConfirm: true,
    //             closeOnCancel: true
    //         },
    //         function (isConfirm) {
    //             if (!isConfirm) {
    //                 event.preventDefault();
    //             }
    //         });
    //     }

    // }

    function getDefualtAuthor(){
        if(vm.state.account && vm.state.account.business) {
            return vm.state.account.business.name;
        }
    }

    function filter(item) {

        var filter = false;

        //['','all','published','draft','featured']

        if (vm.uiState.activePostFilter === 'all' || vm.uiState.activePostFilter === '') {
            filter = true;
        }

        if (vm.uiState.activePostFilter === 'published') {
            filter = item.post_status.toLowerCase() === 'published';
        }

        if (vm.uiState.activePostFilter === 'draft') {
            filter = item.post_status.toLowerCase() === 'draft';
        }

        if (vm.uiState.activePostFilter === 'featured') {
            filter = item.featured;
        }

        return filter;

    }

    function toggleFeatured(post) {
        post.featured = !post.featured;
        vm.savePost(post);
    }

    function togglePublished(post) {
        post.post_status = post.post_status !== 'PUBLISHED' ? 'PUBLISHED' : 'DRAFT';
        vm.savePost(post);
    }

    function closeBlogPanel() {
        if (vm.state.pendingBlogChanges) {
            vm.savePost().then(vm.uiState.cleanBlogPanel);
        } else {
            vm.uiState.cleanBlogPanel();
        }
    }

    function backBlogPanel() {
        vm.savePost().then(vm.uiState.navigation.blogPanel.back);
    }

    function cleanBlogPanel() {
        //$rootScope.$broadcast('$destroyFroalaInstances');
        $timeout(function() {
            vm.uiState.openBlogPanel = { name: '', id: '' };
            vm.uiState.openSidebarPanel = '';
            vm.state.post = null;
        }, 500);
    }

    function duplicatePost(post) {
        SimpleSiteBuilderBlogService.duplicatePost(post).then(function() {
            console.log('duplicated post');
            toaster.pop('success', 'Duplicate Post Created', 'The post was created successfully.');
        }).catch(function(error) {
            console.error('error duplicating post');
            toaster.pop('error', 'Error', 'Error creating duplicate post. Please try again.');
        });

    }

    function viewPost(post) {
        if (vm.blogPostPageTemplate[0]) {
            var previewWindow = $window.open();
            previewWindow.opener = null;
            previewWindow.location = '/preview/' + vm.blogPostPageTemplate[0]._id + '/' + post._id;
        }
    }

    function deletePost(post) {

        SweetAlert.swal({
            title: "Are you sure?",
            text: "Do you want to delete this post?",
            type: "warning",
            showCancelButton: true,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "Yes",
            cancelButtonText: "Cancel",
            closeOnConfirm: true,
            closeOnCancel: true
        }, function (isConfirm) {
            if (isConfirm) {
                SimpleSiteBuilderBlogService.deletePost(post).then(function() {
                    console.log('deleted post');
                    toaster.pop('success', 'Post Deleted', 'The post was deleted successfully.');
                }).catch(function(error) {
                    console.error('error deleting post');
                    toaster.pop('error', 'Error', 'Error deleting post. Please try again.');
                });
            }
        });

    }

    function editPost(post) {
        vm.state.post = post;
        vm.uiState.navigation.blogPanel.loadPanel({ name: 'Edit Post', id: 'edit' })
    }

    function publishPost(post) {
        post.post_status = 'PUBLISHED';
        if(!post.publish_date){
           post.publish_date = $filter('date')(new Date(), "MM/dd/yyyy");
        }
        vm.savePost(post);
    }

    function retractPost(post) {
        post.post_status = 'DRAFT';
        vm.savePost(post);
    }

    function savePost(post, suppressToaster) {
        var post = post || vm.state.post;

        if (!post || !isValidPost(post)) {
            return SimpleSiteBuilderService.returnInvalidPost();
        }

        
        if(!post.publish_date && post.post_status === 'PUBLISHED'){
           post.publish_date = Date.parse($filter('date')(new Date(), "MM/dd/yyyy"));
        }

        var toast = {};
        vm.uiState.saveLoading = true;
        post.websiteId = vm.state.website._id;
        post.display_title = angular.element('<div>' + post.post_title + '</div>').text().trim();
        post.post_url = slugifyHandle(angular.element('<div>' + post.post_title + '</div>').text().trim());
        return SimpleSiteBuilderBlogService.savePost(post).then(function(savedPost) {
            console.log('post saved');
            vm.state.post = savedPost.data;
            vm.state.pendingBlogChanges = false;
            toast = { type: 'success', title: 'Post Saved', message: 'The post was saved successfully.' };
        }).catch(function(error) {
            toast = { type: 'error', title: 'Error', message: (error.data ? error.data.message : 'Error updating post. Please try again.') };
            vm.handleSaveErrors(error);
        }).finally(function() {
            vm.uiState.saveLoading = false;
            if (!suppressToaster) {
                toaster.pop(toast.type, toast.title, toast.message);
            }
        });
    }

    function isValidPost(post){
        if(post){
            return post.post_title;
        }
        else{
            return vm.state.post && vm.state.post.post_title;
        }
    }

    function slugifyHandle(title){
       return $filter('slugify')(title);
    }

    function setFeaturedImage(post) {
        if(!post)
        {
            return;
            console.log("no post");
        }
        SimpleSiteBuilderService.openMediaModal('media-modal', 'MediaModalCtrl', null, 'lg').result.then(function(){
            if(SimpleSiteBuilderService.asset){
                vm.state.post.featured_image = SimpleSiteBuilderService.asset.url;
                SimpleSiteBuilderService.asset = null;
            }
        })
    }

    function removeFeaturedImage(post) {
        post.featured_image = null;
    }

    function handleSaveErrors(error) {
        if (error.data && error.data.message === 'A post with this title already exists') {
            angular.element('input.ssb-blog-editor-post-title').focus();
        }
    }

    function autoSave(newValue, oldValue) {
        console.debug('autoSave');
        var compareNewValue = angular.copy(newValue);
        var compareOldValue = angular.copy(oldValue);

        if (compareNewValue && compareNewValue['modified']) {
            delete compareNewValue['modified'];
        }

        if (compareOldValue && compareOldValue['modified']) {
            delete compareOldValue['modified'];
        }

        if (compareOldValue && vm.state.post && vm.state.post.post_title !== '') {
            if (!angular.equals(compareNewValue, compareOldValue) && !vm.uiState.saveLoading) {
                vm.savePost(vm.state.post, true);
            }
        }

    }

    function checkPendingChanges(newValue, oldValue) {
        console.debug('check pending blog changes');

        newValue = newValue || {};
        oldValue = oldValue || {};

        if (angular.equals(newValue._id, oldValue._id)) {
            var compareNewValue = angular.copy(newValue);
            var compareOldValue = angular.copy(oldValue);

            if (compareNewValue && compareNewValue['modified']) {
                delete compareNewValue['modified'];
            }

            if (compareOldValue && compareOldValue['modified']) {
                delete compareOldValue['modified'];
            }

            if (compareOldValue && vm.state.post && vm.state.post.post_title !== '') {
                if(!vm.state.pendingBlogChanges){
                    if (!equalPosts(compareNewValue, compareOldValue)) {
                        vm.state.pendingBlogChanges = true;
                    } else {
                        vm.state.pendingBlogChanges = false;
                    }
                }
                
            }
        }

    }

    function equalPosts(compareNewValue, compareOldValue) {

        var equal = angular.equals(compareNewValue, compareOldValue);

        if (!equal) {

            var deepDiff = DeepDiff(compareNewValue, compareOldValue);
            var filterIgnoredDiff = deepDiff.filter(function(diff) {
                var equalPostTags = (diff.lhs && diff.rhs && (diff.lhs.text === diff.rhs || diff.lhs === diff.rhs.text));
                return equalPostTags;
            });

            if (deepDiff.length === filterIgnoredDiff.length) {
                equal = true;
            }

        }

        return equal;

    }

    function pageLinkClick(e) {
      if (!angular.element(this).hasClass("clickable-link")) {
        e.preventDefault();
        e.stopPropagation();
      }
    }

    function draftPost(post) {
        post.post_status = 'DRAFT';
        post.publish_date = null;
        vm.savePost(post);
    }

    function init(element) {

        vm.element = element;

        if (!vm.state.blog) {
            vm.state.blog = SimpleSiteBuilderBlogService.blog;
        }

        if (!vm.state.blog.posts.length) {
            vm.state.blog.posts = SimpleSiteBuilderBlogService.loadDataFromPage('#indigenous-precache-sitedata-posts');
        }

        angular.element(".ssb-sidebar-section-panel-scrollable").on("click", "article a", pageLinkClick);

    }
}

})();

(function(){

app.directive('ssbEditControl', ssbEditControl);

function ssbEditControl() {

    return {
        restrict: 'E',
        scope: {
            state: '=',
            uiState: '=',
            sectionIndex: '=',
            sectionLayoutName: '=?',
            sectionLayoutIndex: '=?',
            component: '=',
            componentIndex: '=?',
            compiledControlId: '@?'
        },
        templateUrl: 'assets/js/ssb-site-builder/ssb-controls/ssb-edit-control/ssb-edit-control.component.html',
        controller: 'SiteBuilderEditControlController',
        controllerAs: 'vm',
        bindToController: true,
        link: function(scope, element, attrs, ctrl) {
            ctrl.init(element);
        }
    };

}

})();

(function(){

app.controller('SiteBuilderEditControlController', ssbSiteBuilderEditControlController);

ssbSiteBuilderEditControlController.$inject = ['$scope', '$rootScope', '$interval', '$attrs', '$filter', '$timeout', '$q', 'SimpleSiteBuilderService', 'SweetAlert'];
/* @ngInject */
function ssbSiteBuilderEditControlController($scope, $rootScope, $interval, $attrs, $filter, $timeout, $q, SimpleSiteBuilderService, SweetAlert) {

    var vm = this;

    vm.init = init;
    vm.isElementControl = false;
    vm.isComponentControl = false;
    vm.isComponentPartialAreaControl = false;
    vm.setActive = setActive;
    vm.moveSection = moveSection;
    vm.duplicateSection = duplicateSection;
    vm.removeSectionFromPage = removeSectionFromPage;
    vm.scrollToActiveSection = scrollToActiveSection;
    vm.uiState.activeElementHistory = [];


    /**
     * Handle menu per content type ['component' | 'component-partial-area' | 'element']
     */
    function handleMenuPenVisibleForComponent(event, id, type) {

        return setPosition();

    }

    function handleMenuPenVisibleForComponentPartialArea(event, id, type) {

        if (id && id === vm.element.attr('data-control-id') && type === 'component-partial-area') {
            return setPosition();
        }

    }

    function handleMenuPenVisibleForElement(event, id, type) {

        if (id && id === vm.element.attr('data-control-id') && type === 'element') {
            return setPosition();
        }

    }



    /*
     * Position to account for section's margin/padding
     * and edit-control placement @ top:0, left:0
     */
    function setPosition() {

        var isActiveElement = vm.uiState.activeElement && angular.isDefined(vm.uiState.activeElement.type);

        if (vm.uiState.hoveredSectionIndex === vm.sectionIndex &&
            vm.uiState.hoveredComponentIndex === vm.componentIndex ||
            isActiveElement &&
            !SimpleSiteBuilderService.isIENotEdge) {

                var top = 0;
                var left = 0;
                var editElTop = 0;
                var editElLeft = 0;
                var topbarHeight = 125;
                var sidebarWidth = 140;
                var scrollTop = document.querySelector('.ssb-site-builder-container').scrollTop;
                var topOffset = 35;
                var leftOffset = 35;

                var editEl = vm.uiState.hoveredComponentEl;
                var editControl = vm.uiState.hoveredComponentEditControl;

                if (editEl.length) {
                    if(editEl.hasClass("no-offset-top")){
                        topOffset = 0;
                        leftOffset = 0;
                    }
                    editElTop = editEl[0].getBoundingClientRect().top;
                    editElLeft = editEl[0].getBoundingClientRect().left;
                    top = editEl[0].getBoundingClientRect().top - topOffset - topbarHeight + scrollTop;
                    left = editEl[0].getBoundingClientRect().left - leftOffset - sidebarWidth;
                }

                if (left < 0) {
                    left = 0;
                }

                if (editElLeft === sidebarWidth) {
                    left = 0;
                }

                if (editElTop - topbarHeight < 30 && top < 20) {
                    top = 20;
                    left = left + 36;
                }

                if (editControl && editControl.length) {
                    editControl.css({ top: top, left: left });
                    $timeout(function() {
                        editControl.addClass('ssb-on');
                    }, 500);
                }

        } else {

            if (!vm.element.data('compiled-control-id')) {
                vm.element.removeClass('on');
            }

        }

    }

    function setActive(sectionIndex, componentIndex, compiled) {

        vm.uiState.showSectionPanel = false;
        vm.uiState.navigation.sectionPanel.reset();
        SimpleSiteBuilderService.setActiveSection(undefined);
        SimpleSiteBuilderService.setActiveComponent(undefined);

        if (compiled || (componentIndex === null && sectionIndex === null)) {
            setActiveElement();
        } else if (componentIndex !== undefined) {
            setActiveComponent(sectionIndex, componentIndex);
        } else {
            setActiveSection(sectionIndex);
        }

    }

    function setActiveSection(index) {

        var section = vm.state.page.sections[index];
        var name = $filter('cleanType')(section.title || section.name).toLowerCase().trim().replace(' ', '-') + ' Section';

        $timeout(function() {
            SimpleSiteBuilderService.setActiveSection(index);
            SimpleSiteBuilderService.setActiveComponent(undefined);

            vm.uiState.navigation.sectionPanel.loadPanel({ id: '', name: name });

            if (index !== undefined) {
                vm.uiState.showSectionPanel = true;
            }
        });
    }

    function setActiveComponent(sectionIndex, componentIndex) {

        var component = vm.state.page.sections[sectionIndex].components[componentIndex];
        var name = $filter('cleanType')(component.type).toLowerCase().trim().replace(' ', '-');
        var sectionPanelLoadConfig = {
            name: name,
            id: component._id,
            componentId: component._id
        };

        // SimpleSiteBuilderService.setActiveSection(undefined);
        // SimpleSiteBuilderService.setActiveComponent(undefined);

        $timeout(function() {

            SimpleSiteBuilderService.setActiveSection(sectionIndex);
            SimpleSiteBuilderService.setActiveComponent(componentIndex);

            vm.uiState.navigation.sectionPanel.loadPanel(sectionPanelLoadConfig);

            if (sectionIndex !== undefined && componentIndex !== undefined) {
                vm.uiState.showSectionPanel = true;
            }

        });

    }

    function setActiveElement() {

        console.log('vm.uiState.activeElement', vm.uiState.activeElement);

        var previousActiveElement = vm.uiState.activeElementHistory[vm.uiState.activeElementHistory.length - 1];

        if (vm.uiState.activeElement && vm.uiState.activeElement.type) {
            vm.uiState.activeElementHistory.push(vm.uiState.activeElement);
        } else {
            vm.uiState.activeElement = previousActiveElement;
        }

        var sectionPanelLoadConfig = {
            name: vm.uiState.activeElement.name,
            id: vm.uiState.activeElement.id
        };

        vm.uiState.navigation.sectionPanel.loadPanel(sectionPanelLoadConfig);
        vm.uiState.showSectionPanel = true;
    }

    function moveSection(direction, section, index) {

        var sectionsArray = vm.state.page.sections;
        var toIndex;
        var fromIndex = index;

        if (direction === 'up') {
            toIndex = fromIndex - 1;
        }

        if (direction === 'down') {
            toIndex = fromIndex + 1;
        }

        sectionsArray.splice(toIndex, 0, sectionsArray.splice(fromIndex, 1)[0] );

        vm.setActive(toIndex);

        scrollToActiveSection();

    }

    function duplicateSection(section, index) {

        var sectionsArray = vm.state.page.sections;
        var insertAtIndex = (index >= 0) ? (index + 1) : index;

        section = SimpleSiteBuilderService.setTempUUIDForSection(section);

        section.accountId = 0;

        SimpleSiteBuilderService.addSectionToPage(section, null, null, null, insertAtIndex).then(function() {
            console.log('duplicateSection -> SimpleSiteBuilderService.addSectionToPage')
        }, function(error) {
            console.error('duplicateSection -> SimpleSiteBuilderService.addSectionToPage', JSON.stringify(error));
        });

    }

    function removeSectionFromPage(index) {
        if(vm.state.page.sections[index].global){
            SweetAlert.swal({
                title: "Are you sure?",
                text: "You are removing a global section. Changes made to global sections on this page will be reflected on all other pages. Consider removing from this page only.",
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: "#DD6B55",
                confirmButtonText: "Remove from all pages",
                cancelButtonText: "Hide on this page",
                showNoActionButton: true,
                noActionButtonText: 'Cancel',
                closeOnConfirm: true,
                closeOnCancel: true
            },
            function (isConfirm) {
                //Remove from all pages
                if (isConfirm) {
                    SimpleSiteBuilderService.removeSectionFromPage(index);
                }
                //Hide on this page
                else if(angular.isDefined(isConfirm) && isConfirm === false){
                    vm.state.page.sections[index].visibility = false;
                    vm.uiState.toggleSection(vm.state.page.sections[index]);
                }
            });
        } else {
            SweetAlert.swal({
                title: "Are you sure?",
                text: "Do you want to delete this section?",
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: "#DD6B55",
                confirmButtonText: "Yes, delete it!",
                cancelButtonText: "No, do not delete it!",
                closeOnConfirm: true,
                closeOnCancel: true
            },
            function (isConfirm) {
                if (isConfirm) {
                    SimpleSiteBuilderService.removeSectionFromPage(index);
                }
            });
        }
    }

    function scrollToActiveSection() {
        $timeout(function () {
            var scrollContainerEl = document.querySelector('.ssb-site-builder-container');
            var activeSection = document.querySelector('.ssb-active-section');
            if (activeSection) {
              scrollContainerEl.scrollTop = activeSection.offsetTop;
            }
        }, 500);
    }

    function init(element) {

    	vm.element = element;

        vm.isComponentControl = vm.element.hasClass('ssb-edit-control-component') && !vm.element.hasClass('ssb-edit-control-element')  && !vm.element.hasClass('ssb-edit-control-component-area');
        vm.isComponentPartialAreaControl = vm.element.hasClass('ssb-edit-control-component-area');
        vm.isElementControl = vm.element.hasClass('ssb-edit-control-element');

        /**
         * Handle events for component and element menu (section menu pen position handled via CSS only)
         */
        if (vm.isComponentControl) {
            $rootScope.$on('$ssbMenuPenVisibleForComponent', handleMenuPenVisibleForComponent);
        } else if (vm.isComponentPartialAreaControl) {
            $rootScope.$on('$ssbMenuPenVisibleForComponentPartialArea', handleMenuPenVisibleForComponentPartialArea);
        } else if (vm.isElementControl) {
            $rootScope.$on('$ssbMenuPenVisibleForElement', handleMenuPenVisibleForElement);
        }

    }

}

})();

(function(){

app.directive('ssbEditWrap', ssbEditWrap);

ssbEditWrap.$inject = ['$rootScope', '$compile', '$timeout', 'SimpleSiteBuilderService'];
/* @ngInject */
function ssbEditWrap($rootScope, $compile, $timeout, SimpleSiteBuilderService) {

    return {
        restrict: 'C',
        link: function(scope, element, attrs, ctrl) {

            var isSSB = $('.ssb-main').length > 0;

            if (isSSB) {
                init();
            }

            function init() {
                var isSection = element.hasClass('ssb-page-section');
                var isComponent = element.hasClass('component-wrap');
                var isElement = element.hasClass('ssb-element');
                var compileInProcess = false;

                (function setupEvents() {

                    element.on('mouseover', handleMouseOver);

                    element.on('mouseleave', handleSectionOrComponentMouseLeave);

                    $(element).on('click', handleClick);

                    $(element).on('mouseover', '[data-edit]', handleComponentPartialAreaMouseOver);

                    $(element).on('mouseleave', '[data-edit]', handleComponentPartialAreaMouseLeave);

                    $(element).on('click', '[data-edit]', handleComponentPartialAreaClick);

                })();

                function handleMouseOver(e) {

                    //ignore if clicked on a control
                    if ($(e.target).hasClass('ssb-edit-control') ||
                        $(e.target).hasClass('ssb-theme-btn') ||
                        $(e.target).hasClass('ssb-settings-btn') ||
                        $(e.target).parent().hasClass('ssb-settings-btn')) {

                        return false;
                    }

                    var hasSectionChildMouseOver = element.children().find('.ssb-edit-wrap.on').length > 0;
                    var hasComponentChildMouseOver = false//element.children().find('[data-edit]').length > 0;
                    var hasActiveEditControl = element.hasClass('ssb-active-edit-control');

                    if (!hasActiveEditControl && (isSection && !hasSectionChildMouseOver || isComponent && !hasComponentChildMouseOver)) {

                        e.stopPropagation();

                        angular.element('.ssb-edit-wrap, .editable-title, .editable-cover, [data-edit]', '.ssb-main').removeClass('ssb-on');
                        element.addClass('ssb-on');
                        element.find('> .editable-title:first').addClass('ssb-on');
                        element.find('> .editable-cover:first').addClass('ssb-on');

                    } else if (isElement) {

                        handleElementMouseOver(e);

                    }

                }


                function handleElementMouseOver(e) {

                    var el = angular.element(e.currentTarget);
                    var hasActiveEditControl = el.hasClass('ssb-active-edit-control');

                    if (!hasActiveEditControl) {
                        e.stopPropagation();

                        hideHoverControls();
                        // angular.element('.ssb-edit-wrap, .editable-title, .editable-cover, [data-edit]', '.ssb-main').removeClass('ssb-on');

                        var isList = el.is('ul') || el.is('ol');
                        var componentScope = el.closest('.ssb-component').scope();

                        if (!componentScope) {
                            return
                        }

                        var editableTitleText = componentScope.vm.component.type;

                        el.addClass('ssb-on');

                        var hasEditControl = angular.element('[data-control-id="control_' + el.attr('data-edit-id') + '"]').length > 0;

                        if (!hasEditControl && !compileInProcess) {
                            compileInProcess = true;
                            var tempUUID = SimpleSiteBuilderService.getTempUUID();

                            el.attr('data-edit-id', tempUUID);

                            var template = '<ssb-edit-control ' +
                                                'data-control-id="control_' + tempUUID + '" ' +
                                                'class="ssb-edit-control ssb-edit-control-component ssb-edit-control-element" ' +
                                                'component="ssbElement" ' +
                                                'state="vm.state" ' +
                                                'ui-state="vm.uiState" ' +
                                                'section-index="null" ' +
                                                'component-index="null">' +
                                            '</ssb-edit-control>';
                            componentScope.ssbElement = { title: 'Text Element', type: 'Text Element' };
                            $compile(template)(componentScope, function(clonedEditControl, scope) {
                                compiledEditControl(el, clonedEditControl);
                            });
                        }
                    }

                }


                function handleComponentPartialAreaMouseOver(e) {

                    var el = angular.element(e.currentTarget);
                    var hasActiveEditControl = el.hasClass('ssb-active-edit-control');

                    if (!hasActiveEditControl) {
                        e.stopPropagation();

                        hideHoverControls();
                        // angular.element('.ssb-edit-wrap, .editable-title, .editable-cover, [data-edit]', '.ssb-main').removeClass('ssb-on');

                        var isList = el.is('ul') || el.is('ol');
                        var componentScope = el.closest('.ssb-component').scope();

                        if (!componentScope) {
                            return
                        }

                        var editableTitleText = componentScope.vm.component.type;
                        var hasEditableCover = el.children('.editable-cover').length > 0;

                        el.addClass('ssb-on');

                        if (!hasEditableCover) {
                            if (!isList) {
                                el.append(
                                    '<span id="editable_cover_' + componentScope.vm.component._id + '" class="editable-cover"></span>' +
                                    '<span id="editable_title_' + componentScope.vm.component._id + '"class="editable-title">' + editableTitleText + '</span>'
                                )
                            } else {
                                el.append(
                                    '<li id="editable_cover_' + componentScope.vm.component._id + '"class="editable-cover"></li>' +
                                    '<li id="editable_title_' + componentScope.vm.component._id + '"class="editable-title">' + editableTitleText + '</li>'
                                )
                            }
                        }

                        var hasEditControl = angular.element('[data-control-id="control_' + el.attr('data-edit-id') + '"]').length > 0;

                        if (!hasEditControl && !compileInProcess) {
                            compileInProcess = true;
                            var tempUUID = SimpleSiteBuilderService.getTempUUID();

                            el.attr('data-edit-id', tempUUID);

                            var template = '<ssb-edit-control ' +
                                                'data-control-id="control_' + tempUUID + '" ' +
                                                'class="ssb-edit-control ssb-edit-control-component ssb-edit-control-component-area" ' +
                                                'component="vm.component" ' +
                                                'state="vm.state" ' +
                                                'ui-state="vm.uiState" ' +
                                                'section-index="vm.sectionIndex" ' +
                                                'component-index="vm.componentIndex">' +
                                            '</ssb-edit-control>';
                            $compile(template)(componentScope, function(clonedEditControl, scope) {
                                compiledEditControl(el, clonedEditControl);
                            });
                        }

                    }

                }

                function handleSectionOrComponentMouseLeave(e) {

                    element.removeClass('ssb-on');
                    element.find('.editable-title:first').removeClass('ssb-on');
                    element.find('.editable-cover:first').removeClass('ssb-on');

                }

                function handleComponentPartialAreaMouseLeave(e) {

                    var el = angular.element(e.currentTarget);
                    el.removeClass('ssb-on');
                    el.find('.editable-title:first').removeClass('ssb-on');
                    el.find('.editable-cover:first').removeClass('ssb-on');

                }

                function handleClick(e) {

                    //ignore if clicked on a control
                    if ($(e.target).hasClass('ssb-edit-control') ||
                        $(e.target).hasClass('ssb-theme-btn') ||
                        $(e.target).hasClass('ssb-settings-btn') ||
                        $(e.target).hasClass('no-edit') ||
                        $(e.target).parent().hasClass('ssb-settings-btn') ||
                        $(e.target).parent().hasClass('ssb-edit-control-active-title')) {

                        return;
                    }

                    e.preventDefault();

                    var el = angular.element(e.currentTarget);
                    var hasComponentChildMouseOver = false//el.find('[data-edit]').length > 0;

                    //let section handle clicks if the component has [data-edit] areas to surface menu
                    if ((isSection || isComponent) && !(isComponent && hasComponentChildMouseOver)) {
                        var clickedSection = el.closest('.ssb-section-layout');
                        var clickedComponent = el.closest('.ssb-component');

                        if(isComponent && clickedComponent.prev().hasClass("ssb-on")){
                            e.stopPropagation();
                            return;
                        }

                        hideAllControls();

                        //get related component data
                        var clickedSectionScope = clickedSection.scope();
                        var clickedComponentScope = clickedComponent.scope();

                        if (clickedSectionScope && clickedComponentScope) {
                            var clickedSectionData = clickedSectionScope.vm.section;
                            var clickedComponentData = clickedComponentScope.vm.component;

                            //reset uiState
                            // clickedComponentScope.vm.uiState.activeSectionIndex = undefined;
                            // clickedComponentScope.vm.uiState.activeComponentIndex = undefined;
                            clickedComponentScope.vm.uiState.hoveredSectionIndex = undefined;
                            clickedComponentScope.vm.uiState.hoveredComponentIndex = undefined;
                            clickedComponentScope.vm.uiState.hoveredComponentEl = undefined;
                            clickedComponentScope.vm.uiState.activeElement = {};
                        }

                        //show edit-control for this section|component|element
                        if (isSection) {

                            handleSectionClick(e, el);

                        } else if (isComponent) {

                            handleComponentClick(e, el, clickedSectionData, clickedComponent, clickedSectionScope, clickedComponentScope, clickedComponentData);

                        }

                    } else if (isElement) {

                        if (el.find('.ssb-active-component').length === 0) {
                            e.stopPropagation();
                            handleElementClick(el, el.closest('.ssb-component'));
                        }

                    } else {

                        console.log('component has clickable child area, allow bubble up to section');

                    }


                }

                function handleSectionClick(e, el) {

                    el.scope().vm.uiState.hoveredSectionIndex = undefined;
                    el.scope().vm.uiState.hoveredComponentIndex = undefined;
                    el.scope().vm.uiState.hoveredComponentEl = undefined;
                    el.addClass('ssb-active-edit-control');

                    $timeout(function() {
                        el.find('> ssb-edit-control').addClass('ssb-on');
                    }, 500);

                    //if contextual menu is already open, open directly from single click
                    if (el.scope().vm.uiState.showSectionPanel || SimpleSiteBuilderService.isIENotEdge) {
                        $timeout(function() {
                            el.find('> ssb-edit-control .ssb-settings-btn').click();
                        });
                    }

                }

                function handleComponentClick(e, el, clickedSectionData, clickedComponent, clickedSectionScope, clickedComponentScope, clickedComponentData) {
                    e.stopPropagation();

                    $timeout(function() {
                        var editControlComponent = el.parent().prevAll('.ssb-edit-control-component:not(.ssb-edit-control-element):first');
                        var editControlId = editControlComponent.attr('data-control-id');
                        var uiStateObj = {};

                        editControlComponent.addClass('ssb-active-edit-control');
                        clickedComponent.addClass('ssb-active-component');

                        /**
                         * set hovered edit control on uiState
                         */
                        uiStateObj.hoveredComponentEditControl = editControlComponent;

                        /**
                         find index of section based on component _id
                         */
                        uiStateObj.hoveredSectionIndex = _(clickedComponentScope.vm.state.page.sections).chain()
                            .findIndex(function(section) {
                                return section._id === clickedSectionData._id;
                            })
                            .value()

                        /**
                         find index of component based on component _id
                         */
                        uiStateObj.hoveredComponentIndex = _(clickedComponentScope.vm.state.page.sections[uiStateObj.hoveredSectionIndex].components).chain()
                            .findIndex(function(component) {
                                return component._id === clickedComponentData._id
                            })
                            .value()

                        /**
                         * set current el on uiState
                         */
                        uiStateObj.hoveredComponentEl = el;

                        /**
                         * update uiState
                         */
                        $rootScope.$broadcast('$ssbUpdateUiState', uiStateObj);

                        /**
                         * show menu pen
                         */
                        $rootScope.$broadcast('$ssbMenuPenVisibleForComponent', editControlId, 'component');

                        /*
                         * if contextual menu is already open, open directly from single click
                         */
                        if (clickedComponentScope.vm.uiState.showSectionPanel || SimpleSiteBuilderService.isIENotEdge) {
                            $timeout(function() {
                                editControlComponent.find('.ssb-settings-btn').click();
                            });
                        }

                    }, 100);

                }

                function handleComponentPartialAreaClick(e) {

                    e.preventDefault();

                    var el = angular.element(e.currentTarget);
                    var targetEl = angular.element(e.target);

                    if (el.hasClass('ssb-active-edit-control') ||
                        targetEl.hasClass('ssb-active-edit-control') ||
                        el.hasClass('ssb-element')) {

                        e.stopPropagation();
                        return false;

                    }

                    var hasComponentChildMouseOver = el.find('[data-edit]').length > 0;

                    //let section handle clicks if the component has [data-edit] areas to surface menu
                    if (!(isComponent && hasComponentChildMouseOver)) {
                        e.stopPropagation();

                        var clickedSectionScope = el.closest('.ssb-section-layout').scope();
                        var clickedSectionData = clickedSectionScope.vm.section;
                        var clickedComponentScope = el.closest('.ssb-component').scope();
                        var clickedComponentData = clickedComponentScope.vm.component;
                        var editControlComponent = angular.element('[data-control-id="control_' + el.attr('data-edit-id') + '"]');
                        var editControlId = editControlComponent.attr('data-control-id');
                        var uiStateObj = {}

                        hideAllControls();

                        //reset uiState
                        uiStateObj.hoveredSectionIndex = undefined;
                        uiStateObj.hoveredComponentIndex = undefined;
                        uiStateObj.hoveredComponentEl = undefined;
                        uiStateObj.hoveredComponentEditControl = undefined;
                        uiStateObj.activeElement = {};

                        /**
                         * set hovered edit control on uiState
                         */
                        uiStateObj.hoveredComponentEditControl = editControlComponent;

                        /**
                         * find index of section based on component _id
                         */
                        uiStateObj.hoveredSectionIndex = _(clickedComponentScope.vm.state.page.sections).chain()
                            .findIndex(function(section) {
                                return section._id === clickedSectionData._id;
                            })
                            .value()

                        /**
                         * find index of component based on component _id
                         */
                        uiStateObj.hoveredComponentIndex = _(clickedComponentScope.vm.state.page.sections[uiStateObj.hoveredSectionIndex].components).chain()
                            .findIndex(function(component) {
                                return component._id === clickedComponentData._id
                            })
                            .value()

                        /**
                         * current hovered el on uiState
                         */
                        uiStateObj.hoveredComponentEl = el;

                        /**
                         * update uiState
                         */
                        $rootScope.$broadcast('$ssbUpdateUiState', uiStateObj);

                        /**
                         * show menu pen
                         */
                        $rootScope.$broadcast('$ssbMenuPenVisibleForComponentPartialArea', editControlId, 'component-partial-area');

                        /**
                         * highlight component area
                         */
                        el.addClass('ssb-active-edit-control');

                        /**
                         * show pen
                         */
                        $timeout(function() {
                            editControlComponent.addClass('ssb-on');
                        }, 500);

                        /*
                         * if contextual menu is already open, open directly from single click
                         */
                        if (clickedComponentScope.vm.uiState.showSectionPanel || SimpleSiteBuilderService.isIENotEdge) {
                            $timeout(function() {
                                editControlComponent.find('.ssb-settings-btn').click();
                            });
                        }


                    } else {
                        console.log('component has clickable child area, allow bubble up');
                    }

                }

                function compiledEditControl(el, clonedEditControl) {

                    $timeout(function() {

                        if (el.hasClass('ssb-element')) {
                            el.closest('.ssb-component').before(clonedEditControl);
                        } else {
                            el.before(clonedEditControl);
                        }

                        compileInProcess = false;
                    });

                }

                function handleElementClick(el, clickedComponent) {

                    console.log('isElement edit control');

                    var clickedComponentScope = clickedComponent.scope();
                    var clickedTextElement = el.find('.ssb-text-settings:first');

                    if (clickedTextElement.length === 0) {
                        clickedTextElement = el.closest('.ssb-text-settings');
                    }

                    hideAllControls();

                    $timeout(function() {

                        var dataEditId = el.attr('data-edit-id');

                        if (!dataEditId) {
                            dataEditId = el.closest('[data-edit-id]').attr('data-edit-id');
                        }

                        var editControlComponent = angular.element('[data-control-id="control_' + dataEditId + '"]');
                        var editControlId = editControlComponent.attr('data-control-id');
                        var uiStateObj = {};

                        if (clickedTextElement && clickedTextElement.scope() && clickedTextElement.scope().vm) {
                            uiStateObj.hoveredComponentEl = clickedTextElement;
                            uiStateObj.hoveredComponentEditControl = editControlComponent;
                            uiStateObj.activeElement = clickedTextElement.scope().vm.elementData;
                        }

                        /**
                         * update uiState
                         */
                        $rootScope.$broadcast('$ssbUpdateUiState', uiStateObj);

                        /**
                         * show menu pen
                         */
                        $rootScope.$broadcast('$ssbMenuPenVisibleForElement', editControlId, 'element');

                        editControlComponent.addClass('ssb-active-edit-control ssb-on');
                        clickedTextElement.addClass('ssb-active-component');

                        /*
                         * if contextual menu is already open, open directly from single click
                         */
                        if (clickedComponentScope.vm.uiState.showSectionPanel || SimpleSiteBuilderService.isIENotEdge) {
                            $timeout(function() {
                                editControlComponent.find('.ssb-settings-btn').click();
                            });
                        }

                    }, 100);

                }

                function hideHoverControls() {

                    //hide editable-title's and borders
                    angular.element('.ssb-edit-wrap, .editable-title, .editable-cover, [data-edit]', '.ssb-main').removeClass('ssb-on');

                }

                function hideAllControls() {

                    //hide editable-title's and borders
                    angular.element('.ssb-edit-wrap, .editable-title, .editable-cover, [data-edit]', '.ssb-main').removeClass('ssb-on');

                    //hide all edit-controls
                    angular.element('.ssb-main').find('.ssb-active-edit-control').removeClass('ssb-active-edit-control');
                    angular.element('.ssb-main').find('.ssb-on').removeClass('ssb-on');

                    //components
                    angular.element('.ssb-main').find('.ssb-active-component').removeClass('ssb-active-component');

                    //btns
                    angular.element('.ssb-main').find('.ssb-theme-btn-active-element').removeClass('ssb-theme-btn-active-element');
                    angular.element('.ssb-main').find('.ssb-edit-control-component-btn').removeClass('on');

                }

            }

        }
    };

}

})();

(function(){

app.controller('SiteBuilderEditWrapController', ssbSiteBuilderEditWrapController);

ssbSiteBuilderEditWrapController.$inject = ['$scope', '$attrs', '$filter', '$timeout', '$q', 'SimpleSiteBuilderService', 'SweetAlert'];
/* @ngInject */
function ssbSiteBuilderEditWrapController($scope, $attrs, $filter, $timeout, $q, SimpleSiteBuilderService, SweetAlert) {



}

})();

'use strict';
/*global app*/
app.controller('SiteBuilderPageSettingsModalController', ['$scope', '$timeout', 'parentVm', 'pageId', 'toaster', 'SimpleSiteBuilderService', 'SweetAlert', '$location', '$filter', 'WebsiteService', function ($scope, $timeout, parentVm, pageId, toaster, SimpleSiteBuilderService, SweetAlert, $location, $filter, WebsiteService) {

    var sectionLabel;
    var vm = this;

    vm.parentVm = parentVm;
    vm.pageId = pageId;
    vm.saveSettings = saveSettings;
    vm.deletePage = deletePage;
    vm.setAsHomePage = setAsHomePage;
    vm.duplicatePage = duplicatePage;
    vm.hideFromMenu = hideFromMenu;
    vm.isBlogPage = false;

    function duplicatePage(){
        vm.saveLoading = true;
        saveWebsite().then(function(){
            SimpleSiteBuilderService.createDuplicatePage(vm.page).then(function(page) {
                vm.parentVm.closeModal();
                vm.saveLoading = false;
                vm.parentVm.uiState.navigation.loadPage(page.data._id);
            });
        })
    }

    function hideFromMenu(){
        angular.element('.modal.in').hide();
        SweetAlert.swal({
            title: "Are you sure?",
            text: "Do you want to hide this page from main menu",
            type: "warning",
            showCancelButton: true,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "Yes, hide page!",
            cancelButtonText: "No, do not hide page!",
            closeOnConfirm: true,
            closeOnCancel: true
            }, function (isConfirm) {
            if (isConfirm) {
                vm.page.mainmenu = false;
                angular.element('.modal.in').show();
                saveSettings();
            } else {
                vm.saveLoading = false;
                angular.element('.modal.in').show();
            }
        });
    }

    function saveSettings() {
        savePage(vm.page, false);
    }

    function setAsHomePage() {
        if(vm.page.homePage){
            if(vm.parentVm.state.pages["index"] && vm.page.handle !== 'index'){
                angular.element('.modal.in').hide();
                console.log("Homepage already exists");
                SweetAlert.swal({
                    title: "Are you sure?",
                    text: "CAUTION: Home page already exists. Do you want to set this page as your new home page?",
                    type: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#DD6B55",
                    confirmButtonText: "Yes",
                    cancelButtonText: "No",
                    closeOnConfirm: true,
                    closeOnCancel: true
                    }, function (isConfirm) {
                    if (isConfirm) {
                    vm.page.homePage = true;
                    angular.element('.modal.in').show();
                    } else {
                    angular.element('.modal.in').show();
                    vm.page.homePage = false;
                    }
                })
            }
            else{
            vm.page.homePage = true;
            }
        }
        else{
            vm.page.homePage = false;
        }

    }
    function deletePage() {
        angular.element('.modal.in').hide();
        var _deleteText = "Do you want to delete this page";
        if(vm.page.handle === 'index')
        {
          var _deleteText = "This is home page of the website. Do you want to delete this page";
        }
        SweetAlert.swal({
          title: "Are you sure?",
          text: _deleteText,
          type: "warning",
          showCancelButton: true,
          confirmButtonColor: "#DD6B55",
          confirmButtonText: "Yes",
          cancelButtonText: "No",
          closeOnConfirm: true,
          closeOnCancel: true
        }, function (isConfirm) {
          if (isConfirm) {

              vm.saveLoading = true;
              angular.element('.modal.in').show();
              saveWebsite().then(function(){
                SimpleSiteBuilderService.deletePage(vm.page).then(function(response){
                    console.log('page deleted');
                    SimpleSiteBuilderService.getSite(vm.page.websiteId).then(function() {
                      SimpleSiteBuilderService.getPages().then(function() {
                       toaster.pop('success', 'Page deleted', 'The page deleted successfully.');
                        vm.parentVm.closeModal();
                        vm.saveLoading = false;
                        if(vm.parentVm.state.page._id === vm.page._id){
                          vm.parentVm.state.pendingPageChanges = false;
                          vm.parentVm.state.pendingWebsiteChanges = false;
                        	$timeout(function () {
                      			$location.path('/website/site-builder/pages/');
                    		}, 0);
                        }
                      });
                    })
                })
              })
          } else {
            vm.saveLoading = false;
            angular.element('.modal.in').show();
          }
        });
    };

    function savePage(page, hide){
        vm.saveLoading = true;
        return(
            saveWebsite().then(function(){
                SimpleSiteBuilderService.savePage(page, true).then(function(data) {
                    SimpleSiteBuilderService.getSite(page.websiteId).then(function() {
                        SimpleSiteBuilderService.getPages().then(function(pages) {
                            vm.saveLoading = false;
                            toaster.pop('success', 'Setting Saved', 'The page settings saved successfully.');
                            if(hide){
                                vm.page.mainmenu = false;
                                angular.element('.modal.in').show();
                            }
                            else{
                            if(vm.page._id === vm.parentVm.state.page._id){

                                SimpleSiteBuilderService.page = data.data;
                                $timeout(function() {
                                    vm.parentVm.state.pendingPageChanges = false;
                                    if (vm.parentVm.uiState && vm.parentVm.uiState.selectedPage) {
                                        vm.parentVm.uiState.selectedPage = vm.parentVm.state.page;
                                    }
                                }, 0);
                            }
                            vm.parentVm.closeModal();
                        }
                    })
                })
            })
            }).catch(function(err) {
                vm.saveLoading = false;
                if(err.message)
                    toaster.pop('error', error.message);
                else
                    toaster.pop('error', "Setting not saved", "Error while saving page settings");
            })
        )
    }

    function saveWebsite() {
      return (
    		  SimpleSiteBuilderService.saveWebsite(vm.parentVm.state.website).then(function(response){
    			  console.log('website saved');
            if (vm.parentVm.state.account.showhide.userScripts && vm.parentVm.state.website.resources.toggles.userScripts) {
              SimpleSiteBuilderService.updateScriptResource(vm.parentVm.state.website).then(function(response) {
                vm.parentVm.state.website = response.data;
              });
            }
    		  })
      )
    }

    function validateDuplicatePage(pageHandle, old_handle) {

        var _page = vm.parentVm.state.originalPages.filter(function(page){return page.handle.toLowerCase() === pageHandle.toLowerCase()})[0]

        if(_page && _page._id !== vm.page._id) {
            return "Page handles must be unique.";
        } else if (!vm.isBlogPage && SimpleSiteBuilderService.inValidPageHandles[pageHandle.toLowerCase()]) {
            return "Page handle cannot be a system route.";
        }
        // update hiddenOnPages object for updated handle
        else{
            if(old_handle && old_handle !== pageHandle){
                _.each(vm.page.sections, function (section, index) {
                    if(section.hiddenOnPages && section.hiddenOnPages[old_handle]){
                        delete section.hiddenOnPages[old_handle];
                        section.hiddenOnPages[pageHandle] = true;
                    }
                })
            }

        }
    }

    $scope.$watch('vm.page.handle', function(handle, old_handle){
      if(handle){
        vm.page.handle = $filter('slugify')(handle);
        vm.inValidPageHandle = validateDuplicatePage(handle, old_handle);
      }
      else{
        vm.inValidPageHandle = null;
      }
    });

    $scope.$watch('vm.originalPage', function(page){
      if(page){
        vm.isBlogPage = vm.parentVm.uiState.checkIfBlogPage(vm.originalPage);
        vm.inValidPageHandle = validateDuplicatePage(vm.page.handle);
      }
    });

    vm.loading = true;
    if(vm.pageId === vm.parentVm.state.page._id){
        vm.page = angular.copy(vm.parentVm.state.page);
        vm.originalPage = angular.copy(vm.page);
        vm.loading = false;
    }
    else{
        SimpleSiteBuilderService.getPage(vm.pageId, true).then(function(page) {
            vm.page = page.data;
            vm.originalPage = angular.copy(vm.page);
            vm.loading = false;
        })
    }



}]);


//TODO: sidebar should call config services for each settings "module"
var spectrum = {
  options: {
    showPalette: true,
    clickoutFiresChange: true,
    showInput: true,
    showButtons: false,
    allowEmpty: true,
    hideAfterPaletteSelect: false,
    showPaletteOnly: true,
    togglePaletteOnly: true,
    togglePaletteMoreText: 'more',
    togglePaletteLessText: 'less',
    preferredFormat: 'hex',
    appendTo: 'body',
    palette: [
      ["#C91F37", "#DC3023", "#9D2933", "#CF000F", "#E68364", "#F22613", "#CF3A24", "#C3272B", "#8F1D21", "#D24D57"],
      ["#f47998", "#F47983", "#DB5A6B", "#C93756", "#FCC9B9", "#FFB3A7", "#F62459", "#F58F84", "#875F9A", "#5D3F6A"],
      ["#89729E", "#763568", "#8D608C", "#A87CA0", "#5B3256", "#BF55EC", "#8E44AD", "#9B59B6", "#BE90D4", "#4D8FAC"],
      ["#5D8CAE", "#22A7F0", "#19B5FE", "#59ABE3", "#48929B", "#317589", "#89C4F4", "#4B77BE", "#1F4788", "#003171"],
      ["#044F67", "#264348", "#7A942E", "#8DB255", "#5B8930", "#6B9362", "#407A52", "#006442", "#87D37C", "#26A65B"],
      ["#26C281", "#049372", "#2ABB9B", "#16A085", "#36D7B7", "#03A678", "#4DAF7C", "#D9B611", "#F3C13A", "#F7CA18"],
      ["#E2B13C", "#A17917", "#F5D76E", "#F4D03F", "#FFA400", "#E08A1E", "#FFB61E", "#FAA945", "#FFA631", "#FFB94E"],
      ["#E29C45", "#F9690E", "#CA6924", "#F5AB35", "#BFBFBF", "#F2F1EF", "#BDC3C7", "#ECF0F1", "#D2D7D3", "#757D75"],
      ["#EEEEEE", "#ABB7B7", "#6C7A89", "#95A5A6"]
    ]
  }
};

(function(){

app.directive('ssbSidebarSettingsPanel', ssbSidebarSettingsPanel);

ssbSidebarSettingsPanel.$inject = ['$compile', '$http', '$templateCache', '$parse'];
/* @ngInject */
function ssbSidebarSettingsPanel($compile, $http, $templateCache, $parse) {

    return {
        restrict: 'E',
        scope: {
            component: '=',
            state: '=',
            uiState: '=',
            settingsTemplate: '@'
        },
        controller: 'SiteBuilderSidebarSettingsPanelController',
        controllerAs: 'vm',
        bindToController: true,
        link: function(scope, element, attrs, ctrl) {

            var templateUrl = '';

            if (ctrl.settingsTemplate) {

                if (ctrl.settingsTemplate.indexOf('#COMPONENTTYPE#') !== -1) {
                    ctrl.settingsTemplate = ctrl.settingsTemplate.replace('#COMPONENTTYPE#', scope.component.type);
                }


                templateUrl = ctrl.settingsTemplate;

                $http
                    .get(templateUrl, { cache: $templateCache })
                    .success(function(templateContent) {

                        element.empty().append($compile(templateContent)(scope));

                        ctrl.init(element);

                    });

            }

        }
    };

}

})();

(function(){

app.controller('SiteBuilderSidebarSettingsPanelController', ssbSiteBuilderSidebarSettingsPanelController);

ssbSiteBuilderSidebarSettingsPanelController.$inject = ['$scope', '$attrs', '$filter', '$document', '$timeout', 'SimpleSiteBuilderService', '$modal', 'editableOptions', '$location', 'SweetAlert', 'ContactService'];
/* @ngInject */
function ssbSiteBuilderSidebarSettingsPanelController($scope, $attrs, $filter, $document, $timeout, SimpleSiteBuilderService, $modal, editableOptions, $location, SweetAlert, ContactService) {

    console.info('site-build sidebar settings-panel directive init...')

    var vm = this;

    vm.init = init

    //get functions from ssb-sidebar.controller.js
    var pVm = $scope.$parent.vm;
    vm.addBackground = pVm.addBackground;
    vm.addBackgroundVideo = pVm.addBackgroundVideo;
    vm.addImage = pVm.addImage;
    vm.openModal = pVm.openModal;
    vm.setActiveComponent = pVm.setActiveComponent;
    vm.removeImage = pVm.removeImage;
    vm.removeBackgroundImage = pVm.removeBackgroundImage;
    vm.removeSectionFromPage = pVm.removeSectionFromPage;
    vm.hideSectionFromPage = pVm.hideSectionFromPage;
    vm.editSectionName = pVm.editSectionName;
    vm.moveSection = pVm.moveSection;
    vm.duplicateSection = pVm.duplicateSection;
    vm.enabledPlatformSections = pVm.enabledPlatformSections;
    vm.contactTags = pVm.contactTags;
    vm.constructVideoUrl = pVm.constructVideoUrl;
    vm.donationProductTags = pVm.donationProductTags;

    vm.addSectionToPage = addSectionToPage;
    vm.tagToCustomer = tagToCustomer;
    vm.setTags = setTags;
    vm.filteredSections = filteredSections;
    vm.isSelectedLayout = isSelectedLayout;
    vm.resizeWindow = resizeWindow;
    vm.changeButtonDesign = changeButtonDesign;
    vm.addCustomField = pVm.addCustomField;
    vm.checkDuplicateField = pVm.checkDuplicateField;
    vm.openCal = openCal;
    vm.closeCal = closeCal;

    vm.isHero = vm.component.title && vm.component.title.toLowerCase() === 'hero';


    //TODO: move into config services
    vm.spectrum = {
      options: SimpleSiteBuilderService.getSpectrumColorOptions()
    };

    vm.fontFamilyOptions = SimpleSiteBuilderService.getFontFamilyOptions();


    $scope.component = vm.component;

    //TODO: change child components... unset (blank out) or set to color?
    $scope.$watch(function() {
        return vm.component ? vm.component.txtcolor : '';
    }, function(color) {
        console.debug(color);
    });

    $scope.$watch(function() {
        return vm.component && vm.component.bg ? vm.component.bg.color : '';
    }, function(color) {
        console.debug(color);
    });

    $scope.$watch('component.bg.img.overlaycolor', function (newValue, oldValue) {
        if (newValue) {
            if (!angular.isDefined($scope.component.bg.img.overlayopacity)) {
                $scope.component.bg.img.overlayopacity = 100;
            }
        }
    });

    /*
     * isSelectedLayout
     *
     * @param section {}
     * @returns bool
     *
     * TODO: optimize with filteredSections?
     *
     */
    function isSelectedLayout(section) {

        var selected = false;
        var currentSection = vm.state.page.sections[vm.uiState.activeSectionIndex];

        if (section.type === 'ssb-page-section' && section.version === currentSection.version) {

            //match title
            selected = section.title === currentSection.title;

        } else {

            var childComponents = _.map(currentSection.components, function(component) {
                return {
                    type: component.type,
                    version: component.version
                }
            });
            var match = _.findWhere(childComponents, { 'type': section.type, 'version': parseInt(section.version, 10) });
            if(!match)
                // check without parsing the version
                match = _.findWhere(childComponents, { 'type': section.type, 'version': section.version });
            //match type
            selected = angular.isObject(match);

        }

        return selected;
    }

    /*
     * filteredSections
     * - Return section content related to currently selected section
     *
     * @returns {*}
     *
     * TODO: optimize with isSelectedLayout?
     *
     */
    function filteredSections() {

        var currentSection = vm.state.page.sections[vm.uiState.activeSectionIndex];
        var childComponentTypes = _(currentSection.components).pluck('type');
        var enabledPlatformSectionsWithFooter =  _.filter(vm.state.platformSections, function(section) {
                                return  section.type === 'footer' || section.enabled
                              });

        //filter list of enabled content sections based on title or type
        return _.filter(enabledPlatformSectionsWithFooter, function(section) {

            //if ssb-page-section, match on title
            if (section.type === 'ssb-page-section') {

                //match title if current section has title else match component type
                if(currentSection.title)
                  return section.title === currentSection.title;
                else if(currentSection.name)
                  return section.name === currentSection.name;
                else if(currentSection.components.length === 1){
                  if(currentSection.components[0].type === "navigation"){
                    return section.title === "Header";
                  }
                }
            //else if legacy component
            } else if (currentSection.components.length === 1) {

                //match type
                return _.contains(childComponentTypes, section.type);

            }

        })


    }

    function tagToCustomer(value) {
      return ContactService.tagToContact(value);
    }

    function setTags(_customerTags) {
        console.log('setTags >>>');
        if(vm.component && vm.component.tags){
          _.each(vm.component.tags, function (tag , index) {
            var matchingTag = _.findWhere(vm.contactTags, {
              data: tag
            });
            if(matchingTag)
            {
              _customerTags.push(matchingTag);
            }
            else {
              _customerTags.push({
                  data : tag,
                  label : tag
              });
            }
          });
          vm.contactTags = _.uniq(_customerTags, function(c) { return c.label; })
        }
    }

    // function addCustomField(type){
    //     var cleanType = type.replace(' ','');
    //     var newInfo = {
    //         name: cleanType,
    //         type: type,
    //         label: type,
    //         custom: true,
    //         optional:true,
    //         visible: true
    //     }
    //     vm.component.contactInfo.push(newInfo);
    //     vm.contactInfo = {};
    // }

    // function checkDuplicateField(_type){
    //     return _.filter(vm.component.contactInfo, function(info){ return info.type.toLowerCase() === _type.toLowerCase(); }).length;
    // }


    function resizeWindow(){
      $(window).trigger('resize');
    }

    function addSectionToPage(section, version, activeSectionIndex){
      if(!vm.isSelectedLayout(section)){
        return pVm.addSectionToPage(section, version, activeSectionIndex);
      }
    }

    function changeButtonDesign(version) {
        var button = vm.uiState.activeElement;
        button.version = version;
    }

    function openCal($event, type) {
        $event.preventDefault();
        $event.stopPropagation();
        if (type == 'start') {
          vm.startCalOpened = true;
        }
        if (type == 'end') {
          vm.endCalOpened = true;
        }
    };

    function closeCal($event) {
        $event.preventDefault();
        $event.stopPropagation();
        $scope.opened = false;
    };


    function init(element) {
        vm.element = element;
        vm.setTags(vm.contactTags);
    }
}

})();

(function(){

app.directive('ssbSidebar', ssbSidebar);

function ssbSidebar() {

    return {
        restrict: 'E',
        scope: {
            state: '=',
            uiState: '='
        },
        templateUrl: 'assets/js/ssb-site-builder/ssb-controls/ssb-sidebar/ssb-sidebar.component.html',
        controller: 'SiteBuilderSidebarController',
        controllerAs: 'vm',
        bindToController: true,
        link: function(scope, element, attrs, ctrl) {
            ctrl.init(element);
        }
    };

}

})();
(function(){

/*
 * this allows us to use sortable + accordion
 */
app.config(['$provide', function ($provide){
	$provide.decorator('accordionDirective', function($delegate) {
		var directive = $delegate[0];
		directive.replace = true;
		return $delegate;
	});
}]);

app.controller('SiteBuilderSidebarController', ssbSiteBuilderSidebarController);

ssbSiteBuilderSidebarController.$inject = ['$scope', '$attrs', '$filter', '$document', '$timeout', 'SimpleSiteBuilderService', '$modal', 'editableOptions', '$location', 'SweetAlert', 'ContactService', 'toaster', 'ProductService'];
/* @ngInject */
function ssbSiteBuilderSidebarController($scope, $attrs, $filter, $document, $timeout, SimpleSiteBuilderService, $modal, editableOptions, $location, SweetAlert, ContactService, toaster, ProductService) {

    console.info('site-build sidebar directive init...')

    var vm = this;

    vm.init = init;
    vm.savePage = savePage;
    vm.saveWebsite = saveWebsite;
    vm.cancelPendingEdits = cancelPendingEdits;
    vm.togglePageSectionAccordion = togglePageSectionAccordion;
    vm.setActiveComponent = setActiveComponent;
    vm.setActiveSection = setActiveSection;
    vm.getPlatformSections = getPlatformSections;
    vm.getPlatformComponents = getPlatformComponents;
    vm.addSectionToPage = addSectionToPage;
    vm.scrollToActiveSection = scrollToActiveSection;
    vm.removeSectionFromPage = removeSectionFromPage;
    vm.removeComponentFromSection = removeComponentFromSection;
    vm.addComponentToSection = addComponentToSection;
    vm.addBackground = addBackground;
    vm.addBackgroundVideo = addBackgroundVideo;
    vm.addImage = addImage;
    vm.openModal = openModal;
    vm.closeModal = closeModal;
    vm.openMediaModal = openMediaModal;
    vm.insertMedia = insertMedia;
    vm.addToMainMenu = addToMainMenu;
    vm.showInsert = true;
    vm.applyThemeToSite = SimpleSiteBuilderService.applyThemeToSite;
    vm.insertMediaCallback = insertMediaCallback;
    vm.removeBackgroundImage = removeBackgroundImage;
    vm.removeImage = removeImage;
    vm.createPage = createPage;
    vm.getTemplateById = getTemplateById;
    vm.editSectionName = editSectionName;
    vm.hideSectionFromPage = hideSectionFromPage;
    vm.deletePage = deletePage;
    vm.duplicatePage = duplicatePage;
    vm.hideFromMenu = hideFromMenu;
    vm.showPageOnMenu = showPageOnMenu;
    vm.moveSection = moveSection;
    vm.duplicateSection = duplicateSection;
    vm.validateDuplicatePage = validateDuplicatePage;
    vm.constructVideoUrl = constructVideoUrl;
    vm.closeSectionPanel = closeSectionPanel;
    vm.initializeMapSlider = initializeMapSlider;
    vm.addCustomField = addCustomField;
    vm.checkDuplicateField = checkDuplicateField;
    vm.showSection = showSection;

    editableOptions.theme = 'bs3';


    vm.sortableOptions = {
    	handle: '.ssb-sidebar-move-handle',
		onSort: function (evt) {
			console.log(evt);
            vm.setActiveSection(evt.newIndex);
		},
		onStart: function (evt) {
			vm.dragging = true;
		},
		onEnd: function (evt) {
			vm.dragging = false;
		}
    };

    //TODO: move into config services
    vm.spectrum = {
  	  options: SimpleSiteBuilderService.getSpectrumColorOptions()
  	};

    //TODO: move into config services
    vm.social_links = [{
        name: "adn",
        icon: "adn",
        tooltip: "Adn",
        url: "http://www.adn.com"
      }, {
        name: "bitbucket",
        icon: "bitbucket",
        tooltip: "BitBucket",
        url: "https://bitbucket.org"
      }, {
        name: "dropbox",
        icon: "dropbox",
        tooltip: "Dropbox",
        url: "https://www.dropbox.com"
      }, {
        name: "facebook",
        icon: "facebook",
        tooltip: "Facebook",
        url: "https://www.facebook.com"
      }, {
        name: "flickr",
        icon: "flickr",
        tooltip: "Flickr",
        url: "https://www.flickr.com"
      }, {
        name: "foursquare",
        icon: "foursquare",
        tooltip: "Four Square",
        url: "https://foursquare.com"
      }, {
        name: "github",
        icon: "github",
        tooltip: "Github",
        url: "https://github.com"
      }, {
        name: "google-plus",
        icon: "google-plus",
        tooltip: "Google Plus",
        url: "https://www.gmail.com"
      }, {
        name: "instagram",
        icon: "instagram",
        tooltip: "Instagram",
        url: "https://instagram.com"
      }, {
        name: "linkedin",
        icon: "linkedin",
        tooltip: "Linkedin",
        url: "https://www.linkedin.com"
      }, {
        name: "microsoft",
        icon: "windows",
        tooltip: "Microsoft",
        url: "http://www.microsoft.com"
      }, {
        name: "openid",
        icon: "openid",
        tooltip: "Open Id",
        url: "http://openid.com"
      }, {
        name: "pinterest",
        icon: "pinterest",
        tooltip: "Pinterest",
        url: "https://www.pinterest.com"
      }, {
        name: "reddit",
        icon: "reddit",
        tooltip: "Reddit",
        url: "http://www.reddit.com"
      }, {
        name: "comment-o",
        icon: "comment-o",
        tooltip: "Snapchat",
        url: "https://www.snapchat.com"
      }, {
        name: "soundcloud",
        icon: "soundcloud",
        tooltip: "Sound Cloud",
        url: "https://soundcloud.com"
      }, {
        name: "tumblr",
        icon: "tumblr",
        tooltip: "Tumblr",
        url: "https://www.tumblr.com"
      }, {
        name: "twitter",
        icon: "twitter",
        tooltip: "Twitter",
        url: "https://twitter.com"
      }, {
        name: "vimeo",
        icon: "vimeo-square",
        tooltip: "Vimeo",
        url: "https://vimeo.com"
      }, {
        name: "vine",
        icon: "vine",
        tooltip: "Vine",
        url: "http://www.vinemarket.com"
      }, {
        name: "vk",
        icon: "vk",
        tooltip: "Vk",
        url: "http://vk.com"
      }, {
        name: "desktop",
        icon: "desktop",
        tooltip: "Website",
        url: "http://www.website.com"
      }, {
        name: "yahoo",
        icon: "yahoo",
        tooltip: "Yahoo",
        url: "https://yahoo.com"
      }, {
        name: "youtube",
        icon: "youtube",
        tooltip: "Youtube",
        url: "https://www.youtube.com"
      }, {
        name: "yelp",
        icon: "yelp",
        tooltip: "Yelp",
        url: "http://www.yelp.com"
      }];


    function insertMedia(asset) {
      vm.insertMediaCallback(asset);

      vm.insertMediaCallback = function() {};

      return true;
    };

    function removeBackgroundImage(container) {
        container.bg.img.url = null;
    }

    function removeImage(container) {
        container.src = null;
    }

  	function getPlatformSections() {
        // alert('used!')
  		// SimpleSiteBuilderService.getPlatformSections().then(function(data) {
    //     vm.platformSections = data;
      // });
  	}

    function getPlatformComponents() {
      SimpleSiteBuilderService.getPlatformComponents();
    }

    //TODO: handle versions
    function addComponentToSection(component, sectionIndex) {
    	return (
    		SimpleSiteBuilderService.getComponent(component, 1).then(function(response) {
    			vm.state.page.sections[sectionIndex].components.push(response.data);
    		})
    	)
    }

    function addSectionToPage(section, version, replaceAtIndex, oldSection, copyAtIndex) {
        vm.uiState.showSectionPanel = false;
        return (
            SimpleSiteBuilderService.addSectionToPage(section, version, replaceAtIndex, vm.state.page.sections[vm.uiState.activeSectionIndex], copyAtIndex).then(function() {
                vm.scrollToActiveSection();
            }, function(error) {
                console.error('section panel -> SimpleSiteBuilderService.addSectionToPage', JSON.stringify(error));
            })
        )
    }

    function scrollToActiveSection() {
        $timeout(function () {
            var scrollContainerEl = document.querySelector('.ssb-site-builder-container');
            var activeSection = document.querySelector('.ssb-active-section');
            if (activeSection) {
              scrollContainerEl.scrollTop = activeSection.offsetTop;
            }
        }, 500);
    }

    function editSectionName(id) {
      $timeout(function () {
        angular.element(document.getElementById(id)).click();
      },0);
    }

    function hideSectionFromPage(section, index) {

        if(section.visibility){

            SweetAlert.swal({
                title: "Are you sure?",
                text: "Do you want to hide this section from page?",
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: "#DD6B55",
                confirmButtonText: "Yes, hide it!",
                cancelButtonText: "No, do not hide it!",
                closeOnConfirm: true,
                closeOnCancel: true
            },
            function (isConfirm) {
                if (isConfirm) {
                    section.visibility = false;
                    vm.uiState.activeSectionIndex = undefined;
                    vm.uiState.activeComponentIndex = undefined;
                    vm.uiState.toggleSection(section);
                }
            });

        } else {
            section.visibility = true;
            vm.uiState.toggleSection(section);
        }

    }

    function moveSection(direction, section, index) {

        var sectionsArray = vm.state.page.sections;
        var toIndex;
        var fromIndex = index;

        if (direction === 'up') {
            toIndex = fromIndex - 1;
        }

        if (direction === 'down') {
            toIndex = fromIndex + 1;
        }

        sectionsArray.splice(toIndex, 0, sectionsArray.splice(fromIndex, 1)[0] );

        vm.setActiveSection(toIndex);

    }

    function duplicateSection(section, index) {

        var insertAtIndex = (index > 0) ? (index + 1) : index;

        section = SimpleSiteBuilderService.setTempUUIDForSection(section);

        section.accountId = 0;

        vm.addSectionToPage(section, null, null, null, index).then(function() {
            vm.setActiveSection(insertAtIndex);
        });

    }

    function removeSectionFromPage(index) {
        if(vm.state.page.sections[index].global){
            SweetAlert.swal({
                title: "Are you sure?",
                text: "You are removing a global section. Changes made to global sections on this page will be reflected on all other pages. Consider removing from this page only.",
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: "#DD6B55",
                confirmButtonText: "Remove from all pages",
                cancelButtonText: "Hide on this page",
                showNoActionButton: true,
                noActionButtonText: 'Cancel',
                closeOnConfirm: true,
                closeOnCancel: true
            },
            function (isConfirm) {
                //Remove from all pages
                if (isConfirm) {
                    SimpleSiteBuilderService.removeSectionFromPage(index);
                }
                //Hide on this page
                else if(angular.isDefined(isConfirm) && isConfirm === false){
                    vm.state.page.sections[index].visibility = false;
                    vm.uiState.toggleSection(vm.state.page.sections[index]);
                }
            });
        }
        else{
            SweetAlert.swal({
                title: "Are you sure?",
                text: "Do you want to delete this section?",
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: "#DD6B55",
                confirmButtonText: "Yes, delete it!",
                cancelButtonText: "No, do not delete it!",
                closeOnConfirm: true,
                closeOnCancel: true
            },
            function (isConfirm) {
            if (isConfirm) {
                SimpleSiteBuilderService.removeSectionFromPage(index);
            }
            });
        }
    }

    function removeComponentFromSection(index) {
      SweetAlert.swal({
        title: "Are you sure?",
        text: "Do you want to delete this component?",
        type: "warning",
        showCancelButton: true,
        confirmButtonColor: "#DD6B55",
        confirmButtonText: "Yes, delete it!",
        cancelButtonText: "No, do not delete it!",
        closeOnConfirm: true,
        closeOnCancel: true
      },
      function (isConfirm) {
        if (isConfirm) {
          vm.state.page.sections[vm.uiState.activeSectionIndex].components.splice(index, 1);
          vm.uiState.activeComponentIndex = undefined;
        }
      });
    }

  	function saveWebsite() {
  		vm.state.pendingWebsiteChanges = false;
  		return (
  			SimpleSiteBuilderService.saveWebsite(vm.state.website).then(function(response){
  				console.log('website saved');
  			})
  		)
  	}

    //TODO: refactor, this function exists in multiple controllers :)
  	function savePage() {
        vm.state.saveLoading = true;
        var isLegacyPage = !vm.state.page.ssb;
        console.log(isLegacyPage);

        if (!vm.uiState.hasSeenWarning && isLegacyPage) {

            SweetAlert.swal({
              title: "Are you sure?",
              text: "CAUTION: This editor is under active development. Pages saved in Site Builder will not render or be editable in the legacy Pages editor.",
              type: "warning",
              showCancelButton: true,
              confirmButtonColor: "#DD6B55",
              confirmButtonText: "Yes — Use Site Builder editor.",
              cancelButtonText: "No — Use the legacy editor.",
              closeOnConfirm: true,
              closeOnCancel: true
            },
            function (isConfirm) {
                if (isConfirm) {

                    vm.uiState.hasSeenWarning = true;

                    vm.state.pendingPageChanges = false;

                    //hide section panel
                    vm.uiState.showSectionPanel = false;

                    //reset section panel
                    vm.uiState.navigation.sectionPanel.reset();

                    saveWebsite().then(function(){
                        return (
                            SimpleSiteBuilderService.savePage(vm.state.page).then(function(response){
                                SimpleSiteBuilderService.getSite(vm.state.website._id).then(function(){
                                    console.log('page saved');
                                    toaster.pop('success', 'Page Saved', 'The page was saved successfully.');
                                    vm.state.saveLoading = false;
                                })
                            }).catch(function(err) {
                                vm.state.saveLoading = false;
                                toaster.pop('error', 'Error', 'The page was not saved. Please try again.');
                            })
                        )
                    })
                }
                else{
                    vm.state.saveLoading = false;
                }
            });

        } else {
            vm.state.pendingPageChanges = false;

            //hide section panel
            vm.uiState.showSectionPanel = false;

            //reset section panel
            vm.uiState.navigation.sectionPanel.reset();

            saveWebsite().then(function(){
                return (
                    SimpleSiteBuilderService.savePage(vm.state.page).then(function(response){
                        SimpleSiteBuilderService.getSite(vm.state.website._id).then(function(){
                            console.log('page saved');
                            toaster.pop('success', 'Page Saved', 'The page was saved successfully.');
                            vm.state.saveLoading = false;
                        })
                    }).catch(function(err) {
                        toaster.pop('error', 'Error', 'The page was not saved. Please try again.');
                        vm.state.saveLoading = false;
                    })
                )
            })
        }

    }

  	function cancelPendingEdits() {
      vm.state.pendingPageChanges = false;
      vm.state.pendingWebsiteChanges = false;
      SimpleSiteBuilderService.website = angular.copy(vm.state.originalWebsite);
      SimpleSiteBuilderService.page = angular.copy(vm.state.originalPage);
    }

  	function togglePageSectionAccordion(index) {
  		if (vm.uiState.accordion.sections[index].isOpen) {
  			SimpleSiteBuilderService.setActiveSection(index);
  		}
    }

    function setActiveComponent(index) {
  		//TODO: this fires on all clicks anywhere within the component panel... so all settings, etc.
  		SimpleSiteBuilderService.setActiveComponent(index);
    }

    function setActiveSection(index) {
      vm.uiState.showSectionPanel = false;
        $timeout(function() {
          SimpleSiteBuilderService.setActiveSection(index);
          if (vm.state.page.sections[index].visibility) {
            vm.uiState.showSectionPanel = true;
            vm.scrollToActiveSection();
          }
        })
    }

    function addBackground(sectionIndex, componentIndex) {
        vm.openMediaModal('media-modal', 'MediaModalCtrl', null, 'lg');

        vm.insertMediaCallback = function(asset) {
            if (componentIndex !== undefined && componentIndex !== null) {
                vm.state.page.sections[vm.uiState.activeSectionIndex].components[vm.uiState.activeComponentIndex].bg.img.url = asset.url;
            } else if (!angular.isDefined(sectionIndex) && vm.uiState.activeElement  && vm.uiState.activeElement.hasOwnProperty("bg")) {
                vm.uiState.activeElement.bg.img.url = asset.url;
            } else {
                vm.state.page.sections[vm.uiState.activeSectionIndex].bg.img.url = asset.url;
            }
        }

        SimpleSiteBuilderService.setActiveSection(sectionIndex);
        SimpleSiteBuilderService.setActiveComponent(componentIndex);
    }

    function addBackgroundVideo(sectionIndex, componentIndex) {
        vm.openMediaModal('media-modal', 'MediaModalCtrl', null, 'lg');

        vm.insertMediaCallback = function(asset) {
            if (componentIndex !== undefined && componentIndex !== null) {
                vm.state.page.sections[vm.uiState.activeSectionIndex].components[vm.uiState.activeComponentIndex].bg.video.url = asset.url;
            } else {
                vm.state.page.sections[vm.uiState.activeSectionIndex].bg.video.url = asset.url;
            }
        }

        SimpleSiteBuilderService.setActiveSection(sectionIndex);
        SimpleSiteBuilderService.setActiveComponent(componentIndex);
    }

    function addImage(sectionIndex, componentIndex) {
      vm.openMediaModal('media-modal', 'MediaModalCtrl', null, 'lg');

      vm.insertMediaCallback = function(asset) {
        if (componentIndex !== undefined && componentIndex !== null) {
          vm.state.page.sections[vm.uiState.activeSectionIndex].components[vm.uiState.activeComponentIndex].src = asset.url;
        } else {
          vm.state.page.sections[vm.uiState.activeSectionIndex].src = asset.url;
        }
      }

      // if (sectionIndex !== undefined) {
      //   SimpleSiteBuilderService.setActiveSection(sectionIndex);
      //   SimpleSiteBuilderService.setActiveComponent(undefined);
      // } else {
        SimpleSiteBuilderService.setActiveSection(sectionIndex);
        SimpleSiteBuilderService.setActiveComponent(componentIndex);
      // }

    }

    function insertMediaCallback(asset) {}

    function closeModal() {
      vm.modalInstance.close();
    }

    function openModal(modal, controller, index, size) {
      console.log('openModal >>> ', modal, controller, index);
      var _modal = {
        templateUrl: modal,
        keyboard: false,
        backdrop: 'static',
        size: 'md',
        scope: $scope,
        resolve: {
            parentVm: function () {
                return vm;
            }
        }
      };

      if (controller) {
        _modal.controller = controller + ' as vm';
      }

      if (size) {
        _modal.size = 'lg';
      }

      vm.modalInstance = $modal.open(_modal);

      vm.modalInstance.result.then(null, function () {
        angular.element('.sp-container').addClass('sp-hidden');
      });

    }

    function openMediaModal(modal, controller, index, size) {
      console.log('openModal >>> ', modal, controller, index);
      var _modal = {
        templateUrl: modal,
        keyboard: false,
        backdrop: 'static',
        size: 'md',
        resolve: {
          vm: function() {
            return vm;
          }
        }
      };

      if (controller) {
        _modal.controller = controller;

        _modal.resolve.showInsert = function () {
          return vm.showInsert;
        };

        _modal.resolve.insertMedia = function () {
          return vm.insertMedia;
        };

        _modal.resolve.isSingleSelect = function () {
            return true;
        };
      }

      if (size) {
        _modal.size = 'lg';
      }

      vm.modalInstance = $modal.open(_modal);

      vm.modalInstance.result.then(null, function () {
        angular.element('.sp-container').addClass('sp-hidden');
      });

    }

    function checkForDuplicatePage(pageHandle) {
  		SimpleSiteBuilderService.checkForDuplicatePage(pageHandle).then(function(dup) {
  			vm.uiState.duplicateUrl = dup;
  		})
    }

    function addToMainMenu(id) {
  		console.log('add page to main menu: ' + id);
  		// SimpleSiteBuilderService.checkForDuplicatePage(pageHandle).then(function(dup) {
  		// 	vm.uiState.duplicateUrl = dup;
  		// })
    }

    function createPage(template) {
        if (vm.state.saveLoading) {
            return;
        }
        vm.state.saveLoading = true;
        vm.saveWebsite().then(function(){
          return (
            SimpleSiteBuilderService.createPage(template._id).then(function(data) {
                SimpleSiteBuilderService.getSite(vm.state.website._id).then(function(){
                    vm.closeModal();
                    vm.state.saveLoading = false;
                    vm.uiState.navigation.loadPage(data.data._id);
                })
            })
          )
        })
    };


    function getTemplateById(id) {
        SimpleSiteBuilderService.getTemplateById(id);
    };

    /*
     * Transforms the content data to be used in the tabset UI
     *
     */
    function setupSectionContent() {

        var unbindWatcher = $scope.$watch(function() {
            return SimpleSiteBuilderService.platformSections
        }, function(newValue, oldValue) {

            if (newValue) {

                var sectionLabel;

                /*
                * @platformSections
                * - an array of sections to add to a page, sorted and filtered
                */
                vm.uiState.contentSectionDisplayOrder = _.invert(_.object(_.pairs(SimpleSiteBuilderService.contentSectionDisplayOrder)));
                vm.enabledPlatformSections = _(vm.state.platformSections).chain() // allow chaining underscore methods

                                                .sortBy(function(x) { // sort by predetermined order
                                                    return vm.uiState.contentSectionDisplayOrder[x.filter]
                                                })

                                                .filter(function(x) { //filter out any not enabled
                                                    return x.enabled;
                                                })

                                                .value(); //return the new array



                /*
                * @userSections
                * - an array of sections created by current user
                */
                vm.enabledUserSections = _.where(vm.state.userSections, {
                    enabled: true
                });


                /*
                 * The unique filter values of all the enabled components, sorted
                 */
                vm.sectionFilters = _(vm.enabledPlatformSections).chain()

                                        .pluck('filter') // get just the filter values

                                        .uniq() // get just unique values

                                        .without('misc') // remove misc, put at end of array later

                                        .sortBy(function(x) { // sort by predetermined order
                                            return vm.uiState.contentSectionDisplayOrder[x] && parseInt(vm.uiState.contentSectionDisplayOrder[x], 10)
                                        })

                                        .value(); // return the new array



                // Iterates through the array of filters and replaces each one with an object containing an
                // upper and lowercase version
                // Note: not sure why this was done, could be handled in CSS? - Jack

                // List the section icons
                var sectionIcons = SimpleSiteBuilderService.contentSectionIcons;

                _.each(vm.sectionFilters, function (element, index) {
                    sectionLabel = element.charAt(0).toUpperCase() + element.substring(1).toLowerCase();
                    vm.sectionFilters[index] = {
                      'capitalized': sectionLabel,
                      'lowercase': element,
                      'icon': sectionIcons[element] ? sectionIcons[element].icon : 'fa-adjust'
                    };
                    sectionLabel = null;
                });

                // Manually add the Misc section back on to the end of the list
                vm.sectionFilters.push({
                  'capitalized': 'Misc',
                  'lowercase': 'misc',
                  'icon': sectionIcons['misc'].icon
                });

                // Manually add the All option to the end of the list
                vm.sectionFilters.push({
                    'capitalized': 'All',
                    'lowercase': 'all',
                    'icon': sectionIcons['all'].icon
                });

                vm.setFilterType = function (label) {
                    vm.typefilter = label;
                };

                //initially show platform sections
                //TODO: when we implement section reuse
                vm.sections = vm.enabledPlatformSections;
                vm.sectionType = 'enabledPlatformSections';

                // type is 'enabledPlatformSections' or 'enabledUserSections'
                // TODO: when we implement section reuse
                vm.setSectionType = function (type) {
                    SimpleSiteBuilderService.getUserSections().then(function() {
                        vm.sectionType = type;
                        vm.sections = vm[type];
                    })
                };


                unbindWatcher();

            }
        }, true);

    }

    function hideFromMenu(){
      SweetAlert.swal({
        title: "Are you sure?",
        text: "Do you want to hide this page from main menu",
        type: "warning",
        showCancelButton: true,
        confirmButtonColor: "#DD6B55",
        confirmButtonText: "Yes, hide page!",
        cancelButtonText: "No, do not hide page!",
        closeOnConfirm: true,
        closeOnCancel: true
      }, function (isConfirm) {
        if (isConfirm) {
            vm.state.page.mainmenu = false;
            updateLinkList(false);
        }
      });
    }


    function showPageOnMenu(){
      SweetAlert.swal({
        title: "Are you sure?",
        text: "Do you want to show this page on main menu",
        type: "warning",
        showCancelButton: true,
        confirmButtonColor: "#DD6B55",
        confirmButtonText: "Yes, show page!",
        cancelButtonText: "No, do not show page!",
        closeOnConfirm: true,
        closeOnCancel: true
      }, function (isConfirm) {
        if (isConfirm) {
            vm.state.page.mainmenu = true;
            updateLinkList(true);
        }
      });
    }


    function updateLinkList(state){
        _.each(vm.state.website.linkLists, function (value, index) {
            if (value.handle === "head-menu") {
                if(!state){
                    var _list = _.reject(value.links, function(link){
                        return link.linkTo.data === vm.state.page.handle &&
                        (link.linkTo.type === "page" || link.linkTo.type === "home")
                    });
                    if(_list){
                        value.links = _list;
                    }
                }
                else{
                    value.links.push({
                        label: vm.state.page.menuTitle || vm.state.page.title,
                        type: "link",
                        linkTo: {
                            data: vm.state.page.handle,
                            type: 'page'
                        }
                    });
                }
            }
        });
    };

    function deletePage() {
      var _deleteText = "Do you want to delete this page";
      if(vm.state.page.handle === 'index')
      {
        var _deleteText = "This is home page of the website. Do you want to delete this page";
      }
      SweetAlert.swal({
        title: "Are you sure?",
        text: _deleteText,
        type: "warning",
        showCancelButton: true,
        confirmButtonColor: "#DD6B55",
        confirmButtonText: "Yes",
        cancelButtonText: "No",
        closeOnConfirm: true,
        closeOnCancel: true
      }, function (isConfirm) {
        if (isConfirm) {
          vm.state.saveLoading = true;
          vm.state.pendingPageChanges = false;
          vm.state.pendingWebsiteChanges = false;
          SimpleSiteBuilderService.deletePage(vm.state.page).then(function(response){
            SimpleSiteBuilderService.getSite(vm.state.page.websiteId).then(function() {
                vm.state.saveLoading = false;
                console.log('page deleted');
                toaster.pop('success', 'Page deleted', 'The page deleted successfully.');
                  $timeout(function () {
                    var pages = _.reject(vm.state.pages, function(page){ return page.handle === vm.state.page.handle});
                    if(pages.length)
                        vm.uiState.navigation.loadPage(pages[0]._id);
                      else
                        SimpleSiteBuilderService.getPages().then(function(pages) {
                            $location.path('/website/site-builder/pages/');
                        })
                }, 0);
            });
          })
        }
      });
    };

    function duplicatePage(){
      SweetAlert.swal({
        title: "Are you sure?",
        text: "Do you want to create a duplicate page?",
        type: "warning",
        showCancelButton: true,
        confirmButtonColor: "#DD6B55",
        confirmButtonText: "Yes",
        cancelButtonText: "No",
        closeOnConfirm: true,
        closeOnCancel: true
      }, function (isConfirm) {
        if (isConfirm) {
          vm.state.saveLoading = true;
          saveWebsite().then(function(){
            SimpleSiteBuilderService.createDuplicatePage(vm.state.page).then(function(page) {
               SimpleSiteBuilderService.getSite(vm.state.website._id).then(function() {
                  vm.state.saveLoading = false;
                  vm.uiState.navigation.loadPage(page.data._id);
               });
            })
          })
        }
      });
    }

    function validateDuplicatePage(pageHandle) {

        var _page = vm.state.pages.filter(function(page){return page.handle.toLowerCase() === pageHandle.toLowerCase()})[0]

        if (_page && _page._id !== vm.state.page._id) {
            return "Page handles must be unique.";
        } else if (SimpleSiteBuilderService.inValidPageHandles[pageHandle.toLowerCase()]) {
            return "Page handle cannot be a system route.";
        }
        // update hiddenOnPages object for updated handle
        else{
            _.each(vm.state.page.sections, function (section, index) {
                if(section.hiddenOnPages && section.hiddenOnPages[vm.state.page.handle]){
                    delete section.hiddenOnPages[vm.state.page.handle];
                    section.hiddenOnPages[pageHandle] = true;
                }
            })
        }
    }

    $scope.$watch('vm.state.page.handle', function(handle, oldHandle){
        if(handle && !angular.equals(oldHandle, handle)){
            vm.state.page.handle = $filter('slugify')(handle);
        }
    });

    function getYoutubeVideoUrl(videoIdReplaceToken, url) {
        var returnUrl;
        var id;
        var defaultUrl = '//www.youtube.com/embed/#VIDEO_ID#?playlist=#VIDEO_ID#&autoplay=1&controls=0&loop=1&rel=0&showinfo=0&autohide=1&wmode=transparent&hd=1';
        var regex = /^(?:https?:\/\/)?(?:www\.)?youtu\.?be(?:\.com)?.*?(?:v|list)=(.*?)(?:&|$)|^(?:https?:\/\/)?(?:www\.)?youtu\.?be(?:\.com)?(?:(?!=).)*\/(.*)$/;

        if (url) {
            var match = url.match(regex);

            if (match.length) {
                match = _.filter(match, function(val) { return val !== undefined });
            }

            var id = match && match[1] ? match[1] : null;

            returnUrl = defaultUrl.replace(videoIdReplaceToken, id).replace(videoIdReplaceToken, id);
        }

        return {
            url: returnUrl,
            id: id
        }
    }

    function getVimeoVideoUrl(videoIdReplaceToken, url) {
        var returnUrl;
        var id;
        var defaultUrl = '//vimeo.com/#VIDEO_ID#?autopause=0&autoplay=1&badge=0&byline=0&color=&loop=0&player_id=0&portrait=0&title=0';
        var regex = /https?:\/\/(?:www\.|player\.)?vimeo.com\/(?:channels\/(?:\w+\/)?|groups\/([^\/]*)\/videos\/|album\/(\d+)\/video\/|video\/|)(\d+)(?:$|\/|\?)/;

        if (url) {
            var match = url.match(regex);
            var id = match && match[4] ? match[4] : null;

            returnUrl = defaultUrl.replace(videoIdReplaceToken, id);
        }

        return {
            url: returnUrl,
            id: id
        }
    }

    function constructVideoUrl(section) {
        var videoData = {};
        var videoIdReplaceToken = '#VIDEO_ID#';

        if (section.bg.video.type === 'youtube') {
            videoData = getYoutubeVideoUrl(videoIdReplaceToken, section.bg.video.url);
        } else if (section.bg.video.type === 'vimeo') {
            videoData = getVimeoVideoUrl(videoIdReplaceToken, section.bg.video.url);
        }

        section.bg.video.urlProcessed = videoData.url;
        section.bg.video.id = videoData.id;

        console.log(videoData);

        return videoData;
    }

    function closeSectionPanel() {
        vm.uiState.activeElement = {};
        vm.uiState.showSectionPanel = false;
        vm.uiState.openSidebarSectionPanel = { name: '', id: '' };
    }

    function initializeMapSlider(){
        console.log('refresh slider');
        $timeout(function () {
          $scope.$broadcast('rzSliderForceRender');
        }, 0);
    }

    function addCustomField(type){
        var cleanType = type.replace(' ','');
        var newInfo = {
            name: cleanType,
            type: type,
            label: type,
            custom: true,
            optional:true,
            visible: true
        }
        vm.state.page.sections[vm.uiState.activeSectionIndex].components[vm.uiState.activeComponentIndex].contactInfo.push(newInfo);
        vm.contactInfo = {};
    }

    function checkDuplicateField(_type){
        var activeComponent = vm.state.page.sections[vm.uiState.activeSectionIndex].components[vm.uiState.activeComponentIndex];
        return _.filter(activeComponent.contactInfo, function(info){
            return info.type.toLowerCase() === _type.toLowerCase();
        }).length;
    }

    function showSection(section){
        var _showSection = false;
        if(section)
        {
            _showSection = section.visibility || section.visibility === undefined;
            if(section.global && section.hiddenOnPages){
                var _pageHandle = _pageHandle = vm.state.page.handle;
                _showSection = !section.hiddenOnPages[_pageHandle];
                section.visibility =  _showSection;
            }
        }
        return _showSection;
    }

    function init(element) {

        vm.element = element;

        setupSectionContent();
        ContactService.getContacts(function(customers){
            ContactService.getAllContactTags(customers,function(tags){
            vm.contactTags = tags;
            });
        })

		vm.donationProductTags = [];
		ProductService.getProducts(function(products) {
			products.forEach(function(product, index) {
				if (product.type === 'DONATION' && product.status.toLowerCase() === 'active') {
					vm.donationProductTags.push({data: product._id, label: product.name});
				}

			});
		});
    }
}

})();

(function(){

app.directive('ssbTopbar', ssbTopbar);

function ssbTopbar() {

    return {
        restrict: 'E',
        scope: {
            state: '=',
            uiState: '='
        },
        templateUrl: 'assets/js/ssb-site-builder/ssb-controls/ssb-topbar/ssb-topbar.component.html',
        controller: 'SiteBuilderTopbarController',
        controllerAs: 'vm',
        bindToController: true,
        link: function(scope, element, attrs, ctrl) {
            ctrl.init(element);
        }
    };

}

})();

(function(){

app.controller('SiteBuilderTopbarController', ssbSiteBuilderTopbarController);

ssbSiteBuilderTopbarController.$inject = ['$scope', '$rootScope', '$timeout', '$attrs', '$filter', 'SimpleSiteBuilderService', 'SimpleSiteBuilderBlogService', '$modal', '$location', 'SweetAlert', 'toaster', '$q'];
/* @ngInject */
function ssbSiteBuilderTopbarController($scope, $rootScope, $timeout, $attrs, $filter, SimpleSiteBuilderService, SimpleSiteBuilderBlogService, $modal, $location, SweetAlert, toaster, $q) {

    console.info('site-build topbar directive init...')

    var vm = this;

    vm.init = init;
    vm.savePage = savePage;
    vm.cancelPendingEdits = cancelPendingEdits;
    vm.revertPage = revertPage;
    vm.publishPage = publishPage;
    vm.hideActiveToolTips = hideActiveToolTips;
    vm.closeBlogPanel = closeBlogPanel;
    vm.backBlogPanel = backBlogPanel;
    vm.savePost = savePost;

    //TODO: refactor, this function exists in multiple controllers :)
    function savePage() {
        vm.state.saveLoading = true;
        var isLegacyPage = !vm.state.page.ssb;
        console.log(isLegacyPage);
        var promise = null;

        if (!vm.uiState.hasSeenWarning && isLegacyPage) {

            SweetAlert.swal({
              title: "Are you sure?",
              text: "CAUTION: This editor is under active development. Pages saved in Site Builder will not render or be editable in the legacy Pages editor.",
              type: "warning",
              showCancelButton: true,
              confirmButtonColor: "#DD6B55",
              confirmButtonText: "Yes — Use Site Builder editor.",
              cancelButtonText: "No — Use the legacy editor.",
              closeOnConfirm: true,
              closeOnCancel: true
            },
            function (isConfirm) {
                if (isConfirm) {

                    vm.uiState.hasSeenWarning = true;

                    vm.state.pendingPageChanges = false;

                    //hide section panel
                    vm.uiState.showSectionPanel = false;

                    //reset section panel
                    vm.uiState.navigation.sectionPanel.reset();

                    promise = saveWebsite().then(function(){
                        return (
                            SimpleSiteBuilderService.savePage(vm.state.page).then(function(response){
                                SimpleSiteBuilderService.getSite(vm.state.website._id).then(function(){
                                    console.log('page saved');
                                    if (!vm.state.publishLoading) {
                                        toaster.pop('success', 'Page Saved', 'The page was saved successfully.');
                                    }
                                    vm.state.saveLoading = false;
                                })
                            }).catch(function(err) {
                                vm.state.saveLoading = false;
                                toaster.pop('error', 'Error', 'The page was not saved. Please try again.');
                            })
                        )
                    })
                }
                else{
                    vm.state.saveLoading = false;
                }
            });

        } else {
            vm.state.pendingPageChanges = false;

            //hide section panel
            vm.uiState.showSectionPanel = false;

            //reset section panel
            vm.uiState.navigation.sectionPanel.reset();

            promise = saveWebsite().then(function(){
                return (
                    SimpleSiteBuilderService.savePage(vm.state.page).then(function(response){
                        SimpleSiteBuilderService.getSite(vm.state.website._id).then(function(){
                            console.log('page saved');
                            if (!vm.state.publishLoading) {
                                toaster.pop('success', 'Page Saved', 'The page was saved successfully.');
                            }
                            vm.state.saveLoading = false;
                        })
                    }).catch(function(err) {
                        toaster.pop('error', 'Error', 'The page was not saved. Please try again.');
                        vm.state.saveLoading = false;
                    })
                )
            })
        }


        return promise;

    }

    function cancelPendingEdits() {
        vm.uiState.openSidebarPanel = '';
        vm.uiState.showSectionPanel = false;
        vm.uiState.openSidebarSectionPanel = { name: '', id: '' };
        vm.state.pendingPageChanges = false;
        vm.state.pendingWebsiteChanges = false;
        SimpleSiteBuilderService.website = angular.copy(vm.state.originalWebsite);
        SimpleSiteBuilderService.page = angular.copy(vm.state.originalPage);
        vm.hideActiveToolTips();
    }

    function saveWebsite() {
        vm.state.pendingWebsiteChanges = false;
        return (
            SimpleSiteBuilderService.saveWebsite(vm.state.website).then(function(response){
                console.log('website saved');
            }).finally(function() {
                vm.hideActiveToolTips();
            })
        )
    }

    function revertPage(versionId) {
        vm.state.saveLoading = true;
        SimpleSiteBuilderService.revertPage(vm.state.page._id, versionId, function (data) {
            SimpleSiteBuilderService.getPage(data._id).then(function (page) {
                vm.uiState.openSidebarPanel = '';
                vm.uiState.showSectionPanel = false;
                vm.uiState.openSidebarSectionPanel = { name: '', id: '' };
                vm.state.pendingPageChanges = false;
                vm.state.pendingWebsiteChanges = false;
                SimpleSiteBuilderService.website = angular.copy(vm.state.originalWebsite);
                vm.state.originalPage = page.data;
                SimpleSiteBuilderService.page = angular.copy(vm.state.originalPage);
                vm.state.saveLoading = false;
            }).finally(function() {
                vm.hideActiveToolTips();
            })
        });
    };

    function publishPage() {
        vm.state.saveLoading = true;
        vm.state.publishLoading = true;
        var save = vm.savePage();

        if (save.then) {
            save.then(function(response) {
                SimpleSiteBuilderService.publishPage(vm.state.page._id).then(function (data) {
                    SimpleSiteBuilderService.getSite(vm.state.website._id).then(function(){
                        vm.state.publishLoading = false;
                        vm.state.page.modified = angular.copy(data.data.modified);
                        vm.state.page.published = angular.copy(data.data.published);
                        vm.state.pendingPageChanges = false;
                        vm.state.pendingWebsiteChanges = false;
                        toaster.pop('success', 'Page Published', 'The page was published successfully.');
                    })
                }).catch(function(err) {
                    vm.state.publishLoading = false;
                    toaster.pop('error', 'Error', 'The page was not published. Please try again.');
                    console.error(JSON.stringify(err));
                }).finally(function() {
                    vm.hideActiveToolTips();
                })
            })
        }

    };

    function hideActiveToolTips() {
        angular.element('.tooltip').remove();
    }

    function closeBlogPanel() {
        if (vm.state.pendingBlogChanges) {
            vm.savePost().then(vm.uiState.cleanBlogPanel);
        } else {
            vm.uiState.cleanBlogPanel();
        }
    }

    function backBlogPanel() {
        if (vm.state.pendingBlogChanges) {
            vm.savePost().then(vm.uiState.navigation.blogPanel.back);
        } else {
            vm.uiState.navigation.blogPanel.back();
        }
    }

    function savePost(post, suppressToaster) {
        var post = post || vm.state.post;

        if (!post || !isValidPost()) {
            return SimpleSiteBuilderService.returnInvalidPost();
        }

        var toast = {};
        vm.uiState.saveLoading = true;
        post.websiteId = vm.state.website._id;
        post.display_title = angular.element('<div>' + post.post_title + '</div>').text().trim();
        post.post_url = slugifyHandle(angular.element('<div>' + post.post_title + '</div>').text().trim());
        return SimpleSiteBuilderBlogService.savePost(post).then(function(savedPost) {
            console.log('post saved');
            vm.state.post = savedPost.data;
            vm.state.pendingBlogChanges = false;
            toast = { type: 'success', title: 'Post Saved', message: 'The post was saved successfully.' };
        }).catch(function(error) {
            toast = { type: 'error', title: 'Error', message: (error.data ? error.data.message : 'Error updating post. Please try again.') };
            vm.handleSaveErrors(error);
        }).finally(function() {
            vm.uiState.saveLoading = false;
            if (!suppressToaster) {
                toaster.pop(toast.type, toast.title, toast.message);
            }
        });
    }

    function isValidPost(){
        return vm.state.post && vm.state.post.post_title;
    }

    function slugifyHandle(title){
       return $filter('slugify')(title);
    }


    function init(element) {
    	vm.element = element;
        if (!vm.state.page) {
            vm.state.page = SimpleSiteBuilderService.page;
        }
    }

}

})();

(function(){

app.directive('ssbSiteBuilder', ssbSiteBuilder);

function ssbSiteBuilder() {

    return {
        restrict: 'E',
        scope: {},
        templateUrl: 'assets/js/ssb-site-builder/ssb-site-builder.component.html',
        controller: 'SiteBuilderController',
        controllerAs: 'vm',
        bindToController: true,
        link: function(scope, element, attrs, ctrl) {
            ctrl.init(element);
        }
    };

}

})();
(function(){

app.controller('SiteBuilderController', ssbSiteBuilderController);

ssbSiteBuilderController.$inject = ['$scope', '$rootScope', '$attrs', '$filter', 'SimpleSiteBuilderService', 'SimpleSiteBuilderBlogService', '$state', '$stateParams', '$modal', 'SweetAlert', '$window', '$timeout', '$location', 'toaster'];
/* @ngInject */
function ssbSiteBuilderController($scope, $rootScope, $attrs, $filter, SimpleSiteBuilderService, SimpleSiteBuilderBlogService, $state, $stateParams, $modal, SweetAlert, $window, $timeout, $location, toaster) {

    console.info('site-builder directive init...');

    var vm = this;

    vm.init = init;
    vm.state = {};

    vm.updateActiveSection = updateActiveSection;
    vm.updateActiveComponent = updateActiveComponent;
    vm.savePage = savePage;
    vm.saveWebsite = saveWebsite;
    vm.cancelPendingEdits = cancelPendingEdits;
    vm.openMediaModal = openMediaModal;
    vm.openModal = openModal;
    vm.closeModal = closeModal;
    vm.insertMedia = insertMedia;
    vm.addFroalaImage = addFroalaImage;
    vm.state.imageEditor = {};
    vm.applyThemeToSite = SimpleSiteBuilderService.applyThemeToSite;
    vm.addSectionToPage = addSectionToPage;
    vm.legacyComponentMedia = legacyComponentMedia;
    vm.checkIfDirty = checkIfDirty;
    vm.resetDirty = resetDirty;
    vm.pageChanged = pageChanged;
    vm.toggleSectionVisiblity = toggleSectionVisiblity;
    vm.isBlogPage = isBlogPage;
    vm.isBlogEditMode = isBlogEditMode;
    vm.isBlogEditWritingMode = isBlogEditWritingMode;
    vm.saveAndLoadPage = saveAndLoadPage;
    vm.openPageSettingsModal = openPageSettingsModal;
    // vm.checkStateNavigation = checkStateNavigation;
    vm.checkPageNavigation = checkPageNavigation;
    vm.savePost = savePost;
    vm.updateColumnLayout = updateColumnLayout;

    vm.uiState = {
        loading: 0,
        activeSectionIndex: undefined,
        activeComponentIndex: undefined,
        show: {
            flyover: true,
            sidebar: true
        },
        accordion: {
            site: {},
            page: {},
            sections: {}
        },
        openSidebarPanel: '',
        openSidebarSectionPanel: { name: '', id: '' },
        showSectionPanel: false,
        componentControl: {}, //hook into component scope (contact-us)
        componentMedia: vm.legacyComponentMedia, //hook into component scope (image-gallery)
        sidebarOrientation: 'vertical',

        sortableListPageContentConfig: {
            sort: false,
            filter: '.fr-wrapper',
            group: 'section',
            scroll: true,
            animation: 150,
            disabled: true,
            ghostClass: "sortable-ghost",  // Class name for the drop placeholder
            //chosenClass: "sortable-chosen",  // Class name for the chosen item
            onAdd: function (evt) {
                if(vm.uiState.draggedSection)
                    SimpleSiteBuilderService.getSection(vm.uiState.draggedSection, vm.uiState.draggedSection.version || 1).then(function(response) {
                        if (response) {
                            response = SimpleSiteBuilderService.checkAndSetGlobalHeader(response);
                            vm.state.page.sections[evt.newIndex] = response;
                        }
                    });
            },
            onEnd: function (evt) {
               console.log("Dragging End");
            }
        },

        sortableListAddContentConfig: {
            sort: false,
            // forceFallback: true,
            group: {
                name: 'section',
                pull: 'clone',
                model: 'vm.uiState.filteredSections'
            },
            animation: 150,
            ghostClass: "sortable-ghost",  // Class name for the drop placeholder
            chosenClass: "list-add-sortable-chosen",  // Class name for the chosen item
            scroll: true,
            onStart: function (evt) {
                vm.uiState.sortableListPageContentConfig.disabled = false;
                angular.element(".sortable-page-content").addClass("dragging");
                var _top = angular.element("ssb-topbar").offset().top;
                var _height = angular.element("ssb-topbar").height();
                var _winHeight = angular.element(window).height();
                var _heightDiff = _height + _top;
                angular.element(".sortable-page-content").height(_winHeight - _heightDiff);
            },
            onEnd: function (evt, e) {
                vm.uiState.activeSectionIndex = evt.newIndex;
                angular.element(".sortable-page-content").removeClass("dragging");
                angular.element(".sortable-page-content").css('height','auto');
                $timeout(function() {
                    vm.uiState.sortableListPageContentConfig.disabled = true;
                    vm.uiState.openSidebarPanel = '';
                    var scrollContainerEl = document.querySelector('.ssb-site-builder-container');
                    var activeSection = document.querySelector('.ssb-active-section');
                    if (activeSection) {
                      scrollContainerEl.scrollTop = activeSection.offsetTop;
                    }
                });
            },
            onSort: function (evt) {
                console.log("On Sort");
            },
            onMove: function (evt) {
                var sectionId = evt.dragged.attributes["sectionId"].value;
                vm.uiState.draggedSection = _.findWhere(vm.uiState.filteredSections, {
                    _id: sectionId
                });
            }
        },

        toggleSection: vm.toggleSectionVisiblity,

        openBlogPanel: {},

        isBlogPage: false,

        isBlogEditMode: false,

        isBlogEditWritingMode: false,

        saveAndLoadPage: vm.saveAndLoadPage,

        openPageSettingsModal: vm.openPageSettingsModal,

        checkIfBlogPage: vm.isBlogPage,

        isDuplicateGlobalHeader: false,

        updateColumnLayout: vm.updateColumnLayout, 

    };


    vm.uiState.navigation = {
        back: function() {
            vm.uiState.navigation.index = 0;
            vm.uiState.navigation.indexClass = 'ssb-sidebar-position-0';
        },
        loadPage: function(pageId) {
            if (pageId && pageId !== vm.state.page._id) {
                SimpleSiteBuilderService.getPages();
                if(!vm.state.pendingWebsiteChanges && !vm.state.pendingPageChanges)
                    vm.uiState.loaded = false;
                $location.path('/website/site-builder/pages/' + pageId);
            } else {
                vm.uiState.navigation.index = 1;
                vm.uiState.navigation.indexClass = 'ssb-sidebar-position-1';
            }
        },
        goToPagesListPage: function() {
            $location.url('/website/site-builder/pages/');
        },
        index: 0,
        indexClass: 'ssb-sidebar-position-1',
        sectionPanel: {
            navigationHistory: [],
            loadPanel: function(obj, back) {

                if (!back) {
                    vm.uiState.navigation.sectionPanel.navigationHistory.push(obj);
                }

                vm.uiState.openSidebarSectionPanel = obj;
                console.log(vm.uiState.navigation.sectionPanel.navigationHistory);

            },
            back: function() {
                var hist = vm.uiState.navigation.sectionPanel.navigationHistory;
                var previousPanel;

                hist.pop();

                previousPanel = hist[hist.length - 1];

                vm.uiState.navigation.sectionPanel.loadPanel(previousPanel, true);

                if(previousPanel && !previousPanel.id){
                    hideAllControls();
                    angular.element(".ssb-active-section").addClass("ssb-active-edit-control");
                }

            },
            reset: function() {
                vm.uiState.openSidebarSectionPanel = { name: '', id: '' };
                vm.uiState.navigation.sectionPanel.navigationHistory = [];
            }
        },
        componentPanel: {
            loadPanel: function(sectionIndex, componentIndex) {
                var component = vm.state.page.sections[sectionIndex].components[componentIndex];
                var name = $filter('cleanType')(component.type).toLowerCase().trim().replace(' ', '-');
                var sectionPanelLoadConfig = {
                    name: name,
                    id: component._id,
                    componentId: component._id
                };

                $timeout(function() {

                    SimpleSiteBuilderService.setActiveSection(sectionIndex);
                    SimpleSiteBuilderService.setActiveComponent(componentIndex);

                    vm.uiState.navigation.sectionPanel.loadPanel(sectionPanelLoadConfig);

                    if (sectionIndex !== undefined && componentIndex !== undefined) {
                        vm.uiState.showSectionPanel = true;
                        var el = angular.element("#component_"+ component._id);
                        hideAllControls();

                        $timeout(function() {
                            if(el.find("[data-edit]").length === 1){
                                el.find("[data-edit]").addClass("ssb-active-component");
                            }
                            else{
                                el.find(".ssb-edit-control-component-area").first().next("[data-edit]").addClass("ssb-active-component");
                            }
                        }, 100);

                    }

                });
            }
        },
        blogPanel: {
            navigationHistory: [],
            loadPanel: function(obj, back) {

                if (!back) {
                    vm.uiState.navigation.blogPanel.navigationHistory.push(obj);
                }

                vm.uiState.openBlogPanel = obj;
                console.log(vm.uiState.navigation.blogPanel.navigationHistory);

            },
            back: function() {
                var hist = vm.uiState.navigation.blogPanel.navigationHistory;
                var previousPanel;

                hist.pop();

                previousPanel = hist[hist.length - 1];

                vm.uiState.navigation.blogPanel.loadPanel(previousPanel, true);

            }
        }
    };

    vm.uiState.componentIcons = SimpleSiteBuilderService.manageComponentIcons;

    /**
     * event listeners
     */
    $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams, options) {
        // vm.checkStateNavigation(event, toState, toParams, fromState, fromParams, options);
        $rootScope.$broadcast('$destroyFroalaInstances');
        $rootScope.app.layout.isMinimalAdminChrome = false;
        $rootScope.app.layout.isSidebarClosed = vm.uiState.isSidebarClosed;
    });

    $rootScope.$on('$locationChangeStart', function (event, toState, toParams, fromState, fromParams, options) {
        // vm.checkStateNavigation(event, toState, toParams, fromState, fromParams, options);
    });

    $rootScope.$on('$ssbUpdateUiState', function (event, uiStateObj) {
        console.log('uiStateObj', uiStateObj);
        angular.extend(vm.uiState, uiStateObj);
    });

    $scope.$on('$destroy', destroy);



    /**
     * watchers
     */
    var unbindWebsiteServiceWatcher = $scope.$watch(function() { return SimpleSiteBuilderService.website; }, function(website){
        vm.state.pendingWebsiteChanges = false;
        vm.state.website = website;
        vm.state.originalWebsite = null;
        $timeout(function() {
            vm.state.originalWebsite = angular.copy(website);
        }, 1000);
    });

    var unbindPageServiceWatcher = $scope.$watch(function() { return SimpleSiteBuilderService.page; }, function(page){
        $rootScope.$broadcast('$destroyFroalaInstances');
        vm.state.pendingPageChanges = false;
        vm.state.page = page;
        vm.state.originalPage = null;
        vm.uiState.isBlogPage = vm.isBlogPage(vm.state.page);
        $timeout(function() {
            vm.state.originalPage = angular.copy(page);
        }, 1000);
    });

    var unbindActiveSectionWatcher = $scope.$watch(function() { return SimpleSiteBuilderService.activeSectionIndex }, updateActiveSection, true);

    var unbindActiveComponentWatcher = $scope.$watch(function() { return SimpleSiteBuilderService.activeComponentIndex }, updateActiveComponent, true);

    var unbindLoadingWatcher = $scope.$watch(function() { return SimpleSiteBuilderService.loading }, updateLoading, true);

    var unbindPageStateWatcher = $scope.$watch('vm.state.page', _.debounce(function(page) {
        console.time('angular.equals for page');
        if (page && vm.state.originalPage && vm.pageChanged(page, vm.state.originalPage)) {
            console.timeEnd('angular.equals for page');
            vm.state.pendingPageChanges = true;
            console.log("Page changed");
            if (vm.uiState && vm.uiState.selectedPage) {
                vm.uiState.selectedPage = vm.state.page;
            }
            setupBreakpoints();
        } else {
            vm.state.pendingPageChanges = false;
        }
    }, 100), true);

    var unbindWebsiteStateWatcher = $scope.$watch('vm.state.website', function(website) {
        if (SimpleSiteBuilderService.websiteLoading && website && vm.state.originalWebsite && !angular.equals(website, vm.state.originalWebsite)) {
            vm.state.pendingWebsiteChanges = true;
            console.log("Website changed");
        } else {
            vm.state.pendingWebsiteChanges = false;
        }
    }, true);

    var unbindLinkListsWatcher = $scope.$watch('vm.state.website.linkLists', function(linkLists) {
        if(linkLists){
            sortPageList();
        }
    }, true);

    var unbindPagesWatcher = $scope.$watch(function() { return SimpleSiteBuilderService.pages }, function(pages) {
      // To track duplicate pages
      vm.state.originalPages = angular.copy(pages);
      vm.state.pages = angular.copy(pages);

      //filter blog pages and coming soon
      if (pages) {
        vm.state.pages = _.reject(pages, function(page){ return page.handle === "blog" || page.handle === "single-post"
            || page.handle === "coming-soon" || page.handle === "signup"
        });
      }
      if(vm.state.website) {
          sortPageList();
      }

    }, true);

    //TODO: optimize this, we dont need to watch since this won't change
    var unbindThemesWatcher = $scope.$watch(function() { return SimpleSiteBuilderService.themes }, function(themes) {
      vm.state.themes = themes;
      unbindThemesWatcher();
    }, true);

    //TODO: optimize this, we dont need to watch since this won't change
    var unbindTemplatesWatcher = $scope.$watch(function() { return SimpleSiteBuilderService.templates }, function(templates) {
      vm.state.templates = templates;
      unbindTemplatesWatcher();
    }, true);

    var unbindLegacyTemplatesWatcher = $scope.$watch(function() { return SimpleSiteBuilderService.legacyTemplates }, function(templates) {
      vm.state.legacyTemplates = templates;
      unbindLegacyTemplatesWatcher();
    }, true);

    var unbindPlatformSectionWatcher = $scope.$watch(function() { return SimpleSiteBuilderService.platformSections }, function(sections) {
      if(sections){
        vm.state.platformSections = sections;
        unbindPlatformSectionWatcher();
      }

    }, true);

    var unbindUserSectionWatcher = $scope.$watch(function() { return SimpleSiteBuilderService.userSections }, function(sections) {
      vm.state.userSections = sections;
      unbindUserSectionWatcher();
    }, true);

    var unbindAccountWatcher = $scope.$watch(function() { return SimpleSiteBuilderService.account }, function(account) {
        vm.state.account = account;
        unbindAccountWatcher();
    }, true);

    var unbindOpenSidebarPanel = $scope.$watch(function() { return vm.uiState.openSidebarPanel }, function() {
        vm.uiState.isBlogEditMode = vm.isBlogEditMode();

        if (vm.uiState.isBlogEditMode) {
            angular.element('#intercom-container').hide();
        } else {
            angular.element('#intercom-container').show();
            vm.uiState.openBlogPanel = {};
        }

    }, true);

    var unbindOpenSidebarPanel = $scope.$watch(function() { return vm.uiState.openBlogPanel }, function() {
        vm.uiState.isBlogEditWritingMode = vm.isBlogEditWritingMode();
    }, true);


    function checkIfDirty() {
        return vm.state.pendingWebsiteChanges || vm.state.pendingPageChanges || vm.state.pendingBlogChanges;
    }

    function resetDirty() {
        vm.state.pendingWebsiteChanges = false;
        vm.state.pendingPageChanges = false;
        vm.state.pendingBlogChanges = false;
    }

    function saveWebsite() {
        vm.state.pendingWebsiteChanges = false;
        return (
            SimpleSiteBuilderService.saveWebsite(vm.state.website).then(function(response){
                console.log('website saved');
            })
        )
    }

    //TODO: refactor, this function exists in multiple controllers :)
    function savePage() {
        vm.state.saveLoading = true;
        var isLegacyPage = !vm.state.page.ssb;
        console.log(isLegacyPage);

        if (!vm.uiState.hasSeenWarning && isLegacyPage) {

            SweetAlert.swal({
              title: "Are you sure?",
              text: "CAUTION: This editor is under active development. Pages saved in Site Builder will not render or be editable in the legacy Pages editor.",
              type: "warning",
              showCancelButton: true,
              confirmButtonColor: "#DD6B55",
              confirmButtonText: "Yes — Use Site Builder editor.",
              cancelButtonText: "No — Use the legacy editor.",
              closeOnConfirm: true,
              closeOnCancel: true
            },
            function (isConfirm) {
                if (isConfirm) {

                    vm.uiState.hasSeenWarning = true;

                    vm.state.pendingPageChanges = false;

                    //hide section panel
                    vm.uiState.showSectionPanel = false;

                    //reset section panel
                    vm.uiState.navigation.sectionPanel.reset();

                    saveWebsite().then(function(){
                        return (
                            SimpleSiteBuilderService.savePage(vm.state.page).then(function(response){
                                SimpleSiteBuilderService.getSite(vm.state.website._id).then(function(){
                                    console.log('page saved');
                                    toaster.pop('success', 'Page Saved', 'The page was saved successfully.');
                                    vm.state.saveLoading = false;
                                })
                            }).catch(function(err) {
                                vm.state.saveLoading = false;
                                toaster.pop('error', 'Error', 'The page was not saved. Please try again.');
                            })
                        )
                    })
                }
                else{
                    vm.state.saveLoading = false;
                }
            });

        } else {
            vm.state.pendingPageChanges = false;

            //hide section panel
            vm.uiState.showSectionPanel = false;

            //reset section panel
            vm.uiState.navigation.sectionPanel.reset();

            saveWebsite().then(function(){
                return (
                    SimpleSiteBuilderService.savePage(vm.state.page).then(function(response){
                        SimpleSiteBuilderService.getSite(vm.state.website._id).then(function(){
                            SimpleSiteBuilderService.getPages().then(function(){
                                console.log('page saved');
                                toaster.pop('success', 'Page Saved', 'The page was saved successfully.');
                                vm.state.saveLoading = false;
                            })
                        })
                    }).catch(function(err) {
                        toaster.pop('error', 'Error', 'The page was not saved. Please try again.');
                        vm.state.saveLoading = false;
                    })
                )
            })


            if (vm.state.post && vm.state.pendingBlogChanges) {
                vm.savePost(vm.state.post);
            }

        }

    }

    function cancelPendingEdits() {
        vm.pageSectionClick();
        vm.state.pendingPageChanges = false;
        vm.state.pendingWebsiteChanges = false;
        SimpleSiteBuilderService.website = angular.copy(vm.state.originalWebsite);
        SimpleSiteBuilderService.page = angular.copy(vm.state.originalPage);
    }

    function updateActiveSection(index) {
        if (index !== undefined) {
            vm.uiState.accordion.sections = {};
            vm.uiState.activeSectionIndex = index;
            vm.uiState.accordion.sections.isOpen = true;
            vm.uiState.accordion.sections[index] = { components: {} };
            vm.uiState.accordion.sections[index].isOpen = true;
            if(vm.state.page.sections[index])
                vm.uiState.isDuplicateGlobalHeader = SimpleSiteBuilderService.checkDuplicateGlobalHeader(vm.state.page.sections[index]);
        } else {
            vm.uiState.activeSectionIndex = undefined;
            vm.uiState.activeComponentIndex = undefined;
            vm.uiState.isDuplicateGlobalHeader = false;
        }

    }

    function updateActiveComponent(index) {
        vm.uiState.activeComponentIndex = index;

        if (index !== undefined) {
            if (vm.uiState.accordion.sections[vm.uiState.activeSectionIndex]) {
              if (!vm.uiState.accordion.sections[vm.uiState.activeSectionIndex].components[index]) {
                  vm.uiState.accordion.sections[vm.uiState.activeSectionIndex].components[index] = {};
              }
              vm.uiState.accordion.sections[vm.uiState.activeSectionIndex].components[index].isOpen = true;
            }
        }

    }

    function updateLoading(loadingObj) {
        console.info('vm.uiState.loading', loadingObj );
        vm.uiState.loading = loadingObj.value;

        if (!vm.uiState.loaded) {
            $timeout(function() {
                vm.uiState.loaded = true;
            }, 2000);
        }
    }

    function closeModal() {
        vm.modalInstance.close();
    }

    function openModal(modal, controller, index, size) {
      console.log('openModal >>> ', modal, controller, index);
      var _modal = {
        templateUrl: modal,
        keyboard: false,
        backdrop: 'static',
        size: 'md',
        scope: $scope,
        resolve: {
            parentVm: function () {
                return vm;
            }
        }
      };

      if (controller) {
        _modal.controller = controller + ' as vm';
      }

      if (size) {
        _modal.size = 'lg';
      }

      vm.modalInstance = $modal.open(_modal);

      vm.modalInstance.result.then(null, function () {
        angular.element('.sp-container').addClass('sp-hidden');
      });

    }

    function openMediaModal(modal, controller, index, size) {
        console.log('openModal >>> ', modal, controller, index);
        var _modal = {
            templateUrl: modal,
            keyboard: false,
            backdrop: 'static',
            size: 'md',
            resolve: {
                vm: function() {
                    return vm;
                }
            }
        };

        if (controller) {
            _modal.controller = controller;

            _modal.resolve.showInsert = function () {
              return vm.showInsert;
            };

            _modal.resolve.insertMedia = function () {
              return vm.insertMedia;
            };

            _modal.resolve.isSingleSelect = function () {
                return true;
            };
        }

        if (angular.isDefined(index) && index !== null && index >= 0) {
            // vm.setEditingComponent(index);
            _modal.resolve.clickedIndex = function () {
              return index;
            };
            if (vm.state.page) {
              _modal.resolve.pageHandle = function () {
                return $vm.state.page.handle;
              };
            }
        }

        if (size) {
            _modal.size = 'lg';
        }

        vm.modalInstance = $modal.open(_modal);

        vm.modalInstance.result.then(null, function () {
            angular.element('.sp-container').addClass('sp-hidden');
        });

    }

    function addSectionToPage(section, version) {
      SimpleSiteBuilderService.addSectionToPage(section, version, vm.modalInstance);
    }

    function insertMedia(asset) {
        vm.addFroalaImage(asset);
    };

    function addFroalaImage(asset) {

        $timeout(function() {
            vm.state.imageEditor.editor.image.insert(asset.url, !1, null, vm.state.imageEditor.img);
        }, 0);

    };

    function setupBreakpoints() {
        $timeout(function() {
            console.log('setupBreakpoints');
            $window.eqjs.refreshNodes();
            $window.eqjs.query();
        }, 3000);
    };

    function legacyComponentMedia(componentId, index, update, fields) {
        var component = _(vm.state.page.sections)
            .chain()
            .pluck('components')
            .flatten()
            .findWhere({_id: componentId})
            .value();

        SimpleSiteBuilderService.openMediaModal('media-modal', 'MediaModalCtrl', null, 'lg', vm, component, index, update, fields).result.then(function(){
           if(component.type === 'thumbnail-slider'){
                $scope.$broadcast('refreshThumbnailSlider');
           }
        })
    }

    // Hook froala insert up to our Media Manager
    window.clickandInsertImageButton = function (editor) {
      console.log('clickandInsertImageButton >>> ');

        if(editor){
            vm.showInsert = true;
            vm.state.imageEditor.editor = editor;
            vm.state.imageEditor.img = editor.image.get();
        }
        else{
            if(vm.state.imageEditor && vm.state.imageEditor.editor){
                vm.showInsert = true;
            }
            else{
                vm.showInsert = false;
            }
        }
      vm.openMediaModal('media-modal', 'MediaModalCtrl', null, 'lg');
    };

    $scope.$on('focusEditor', function (event, args) {
      vm.state.imageEditor.editor = args.editor;
      vm.state.imageEditor.img = null;
    });
    $scope.$on('activeEditor', function (event, args) {
      if(args.editor)
       vm.state.imageEditor.editor = args.editor;
      if(args.editorImage)
       vm.state.imageEditor.img = args.editorImage;
    });

    function pageLinkClick(e) {
      if (!angular.element(this).hasClass("clickable-link")) {
        e.preventDefault();
        e.stopPropagation();
      }
    }

    function pageSectionClick(e) {
        // vm.uiState.openSidebarPanel = '';
    }

    function pageResize(e) {

        if ($('body').innerWidth() > 767) {
            vm.uiState.sidebarOrientation = 'vertical';
        } else {
            vm.uiState.sidebarOrientation = 'horizontal';
        }

    }

    function hideAllControls() {

        //hide editable-title's and borders
        angular.element('.ssb-edit-wrap, .editable-title, .editable-cover, [data-edit]', '.ssb-main').removeClass('ssb-on');

        //hide all edit-controls
        angular.element('.ssb-main').find('.ssb-active-edit-control').removeClass('ssb-active-edit-control');
        angular.element('.ssb-main').find('.ssb-on').removeClass('ssb-on');

        //components
        angular.element('.ssb-main').find('.ssb-active-component').removeClass('ssb-active-component');

        //btns
        angular.element('.ssb-main').find('.ssb-theme-btn-active-element').removeClass('ssb-theme-btn-active-element');
        angular.element('.ssb-main').find('.ssb-edit-control-component-btn').removeClass('on');

    }

    /**
     * Inspect changes beyond simple angular.equals
     * - if angular.equals detects a change, then:
     *      - get the specific change from the data (DeepDiff)
     *      - if that change is ONLY a [data-compile] difference, then:
     *          - ignore it as a change
     *          - apply to original data so future compares don't include this diff
     *          - decrement changes so we don't count it in number of changes
     *          - return changes > 0
     *      - else the change is legit, return true
     * - else the change is legit, return true
     *
     * TODO: handle undo in Froala
     */
    function pageChanged(originalPage, currentPage) {
        if (!angular.equals(originalPage, currentPage) && !vm.state.pendingPageChanges) {
            var originalPage = JSON.parse(angular.toJson(originalPage));
            var currentPage = JSON.parse(angular.toJson(currentPage));
            var jsondiff1 = DeepDiff.diff(originalPage, currentPage);
            var changes = jsondiff1.length;

            if (changes) {

                for (var i = 0; i < changes; i++) {

                    console.debug('tracked change');
                    console.debug(jsondiff1[i].lhs);
                    console.debug(jsondiff1[i].rhs);

                    var diff1 = jsondiff1[i].lhs;
                    var diff2 = jsondiff1[i].rhs;
                    var changedPath = jsondiff1[i].path;
                    if (dataIsCompiledAdded(diff1, diff2) || dataIsCompiledRemoved(diff1, diff2) || dataIsPublishedDate(diff1, diff2, changedPath)) {

                        console.debug('change to ignore detected @: ', jsondiff1[i].path);

                        $timeout(function() {

                            DeepDiff.applyChange(originalPage, currentPage, jsondiff1[i]);

                            vm.state.originalPage = originalPage;

                            console.debug('should be empty: ', DeepDiff.diff(originalPage, currentPage));

                            changes--;

                            return changes > 0;

                        });

                    } else {
                        console.log(diff1);
                        console.log(diff2);
                        return true;
                    }
                }
            } else {

                return changes > 0;

            }

        } else {

            return true

        }

    }

    /**
     * Detect changes to page data, determine if they should be ignored
     * - handles temp IDs for buttons inside Froala editor (button was added)
     */
    function dataIsCompiledAdded(diff1, diff2) {
            var updated = false;

            if (diff1 && diff2) {
                updated = angular.isDefined(diff1) &&
                        angular.isDefined(diff1.indexOf) &&
                        diff1.indexOf('data-compiled') === -1
                        angular.isDefined(diff2) &&
                        angular.isDefined(diff2.indexOf) &&
                        diff2.indexOf('data-compiled') !== -1;
            }

            if (updated && angular.isDefined(diff1) && angular.isDefined(diff2)) {
                updated = angular.equals(diff1, diff2)
            }

            return updated;
    };

    /**
     * Detect changes to page data, determine if they should be ignored
     * - handles temp IDs for buttons inside Froala editor (button was removed)
     */
    function dataIsCompiledRemoved(diff1, diff2) {
        return  diff1 &&
                diff2 &&
                angular.isDefined(diff1) &&
                angular.isDefined(diff1.indexOf) &&
                diff1.indexOf('data-compiled') !== -1 &&
                angular.isDefined(diff2) &&
                angular.isDefined(diff2.indexOf) &&
                diff2.indexOf('data-compiled') === -1
    };

    /**
     * Detect changes to page data, determine if they should be ignored
     * - handles page's published date updating after a successful publish action
     */
    function dataIsPublishedDate(diff1, diff2, path) {
        var ret = false;
        var isPublishDate = false;
        if(path){
            if(path.indexOf("published") > -1){
                isPublishDate = true;
            }
        }
        if (diff1 && isPublishDate) {
            if (diff1.length < 30 && diff1.indexOf(':') !== -1 && diff1.indexOf('-') !== -1) {
                if (moment(diff1).isValid()) {
                    ret = true;
                }
            }
            else if(diff1.date && !diff2){
                ret = true;
            }
        }

        return ret;
    };

    // function checkStateNavigation(event, toState, toParams, fromState, fromParams, options) {

    //     SweetAlert.swal({
    //         title: "Are you sure?",
    //         text: "You have unsaved changes. Are you sure you want to leave Site Builder?",
    //         type: "warning",
    //         showCancelButton: true,
    //         confirmButtonColor: "#DD6B55",
    //         confirmButtonText: "Yes, leave without saving.",
    //         cancelButtonText: "Cancel",
    //         closeOnConfirm: true,
    //         closeOnCancel: true
    //     },
    //     function (isConfirm) {
    //         if (!isConfirm) {
    //             event.preventDefault();
    //         }
    //     });

    // }

    function checkPageNavigation(event) {
        if (vm.state.pendingPageChanges || vm.state.pendingWebsiteChanges || vm.state.pendingBlogChanges) {
            return "You have unsaved changes. Are you sure you want to leave Site Builder?";
        } else {
            return undefined
        }
    }

    function sortPageList(){
        _.each(vm.state.website.linkLists, function (value, index) {
            if (value.handle === "head-menu") {
                var handlesArr = _(value.links).chain().pluck("linkTo")
                            .where({type: 'page'})
                            .pluck("data")
                            .value()
                var _sortOrder = _.invert(_.object(_.pairs(handlesArr)));
                vm.state.pages = _.sortBy(vm.state.pages, function(x) {
                    return _sortOrder[x.handle]
                });
            }
        });
    }

    function toggleSectionVisiblity(section, global, hide){
        if (global) {
            if(section.global === false) {
                SweetAlert.swal({
                    title: "Are you sure?",
                    text: "Turning off this setting will remove the section from all pages except for this one.",
                    type: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#DD6B55",
                    confirmButtonText: "Remove from other pages",
                    cancelButtonText: "Cancel",
                    closeOnConfirm: true,
                    closeOnCancel: true
                },
                function (isConfirm) {
                    //Cancel
                    if (!isConfirm) {
                        section.global = true;
                    }
                });
            }
        } else if(section.global) {
            if(!section.hiddenOnPages){
                section.hiddenOnPages = {}
            }
            if(section.visibility === false)
            {
                section.hiddenOnPages[vm.state.page.handle] = true;
                hideAllControls();
            }
            else{
                delete section.hiddenOnPages[vm.state.page.handle];
            }
        }
        else if(section.visibility === false){
            hideAllControls();
        }
    }

    function isBlogPage(page) {
        return page.handle === 'blog-list' || page.handle === 'blog-post';
    }

    function isBlogEditMode() {
        return angular.isDefined(vm.uiState.openBlogPanel.id) && vm.uiState.openSidebarPanel === 'blog';
    }

    function isBlogEditWritingMode() {
        return angular.isDefined(vm.uiState.openBlogPanel.id) && vm.uiState.openSidebarPanel === 'blog' && vm.uiState.openBlogPanel.id === 'edit';
    }

    function saveAndLoadPage(page) {
        if (vm.state.pendingPageChanges || vm.state.pendingWebsiteChanges) {
            vm.state.saveLoading = true;
            vm.state.pendingWebsiteChanges = false;
            vm.state.pendingPageChanges = false;
            saveWebsite().then(function(){
                return (
                    SimpleSiteBuilderService.savePage(vm.state.page).then(function(response){
                        SimpleSiteBuilderService.getSite(vm.state.website._id).then(function(){
                            console.log('page saved');
                            toaster.pop('success', 'Page Saved', 'The page was saved successfully.');
                            vm.state.saveLoading = false;
                            vm.uiState.navigation.loadPage(page._id);
                            SimpleSiteBuilderService.getPages();
                        })
                    }).catch(function(err) {
                        toaster.pop('error', 'Error', 'The page was not saved. Please try again.');
                        vm.state.saveLoading = false;
                    })
                )
            })
        } else {
            vm.uiState.navigation.loadPage(page._id);
            SimpleSiteBuilderService.getPages();
        }
    };

    function openPageSettingsModal(modal, controller, index, size, pageId) {
      console.log('openModal >>> ', modal, controller, index);
      var _modal = {
        templateUrl: modal,
        keyboard: false,
        backdrop: 'static',
        size: 'md',
        scope: $scope,
        resolve: {
            parentVm: function () {
                return vm;
            }
        }
      };

      if (controller) {
        _modal.controller = controller + ' as vm';
      }

      if (size) {
        _modal.size = 'lg';
      }

      _modal.resolve.pageId = function () {
        return pageId;
      };

      vm.modalInstance = $modal.open(_modal);

      vm.modalInstance.result.then(null, function () {
        angular.element('.sp-container').addClass('sp-hidden');
      });

    }

    function savePost(post) {
        return SimpleSiteBuilderBlogService.savePost(post).then(function(savedPost) {
            console.log('post saved');
            vm.state.pendingBlogChanges = false;
        }).error(function(err) {
            console.error('post save error:', err);
        })
    }





    function destroy() {

        console.debug('destroyed main SiteBuilder controller');

        angular.element("body").off("click", ".ssb-page-section a", pageLinkClick);

        angular.element("body").off("click", ".ssb-page-section", pageSectionClick);

        angular.element('.ssb-main').off('eqResize', pageResize);

        angular.element($window).off('beforeunload', vm.checkPageNavigation);

        unbindWebsiteServiceWatcher();
        unbindPageServiceWatcher();
        unbindActiveSectionWatcher();
        unbindActiveComponentWatcher();
        unbindLoadingWatcher();
        unbindPageStateWatcher();
        unbindWebsiteStateWatcher();
        unbindLinkListsWatcher();
        unbindPagesWatcher();
        unbindThemesWatcher();
        unbindTemplatesWatcher();
        unbindLegacyTemplatesWatcher();
        unbindPlatformSectionWatcher();
        unbindUserSectionWatcher();
        unbindAccountWatcher();
        unbindOpenSidebarPanel();
        unbindOpenSidebarPanel();

    }

    function updateColumnLayout(section){
        if(section && section.layoutModifiers && section.layoutModifiers.columns){
            var columns = parseInt(section.layoutModifiers.columns.columnsNum);

            if(section.layoutModifiers.columns.ignoreColumns && section.layoutModifiers.columns.ignoreColumns.length){
                columns = columns + section.layoutModifiers.columns.ignoreColumns.length;
            }

            var columnLength = section.components.length;
            if(columnLength){
                if(section.components.length < columns){
                    var _diff =  columns - section.components.length;
                    var component = section.components[0];

                    SimpleSiteBuilderService.getTempComponent(component).then(function(data){
                        while(_diff !== 0){                            
                            data._id = SimpleSiteBuilderService.getTempUUID();
                            data.anchor = data._id; 
                            var _newComponent = angular.copy(data);
                            if(section.layoutModifiers.columns.ignoreColumns && section.layoutModifiers.columns.ignoreColumns.indexOf("last") > -1){                                
                                section.components.splice(section.components.length - 1, 0, _newComponent);                                     
                            }
                            else{
                                section.components.push(_newComponent);
                            }
                            _diff--;
                        }  
                    })
                }
                // To Do
                // Remove empty components
                // else if(section.components.length > columns){
                //     for(var i = columns; i < columnLength; i++){
                //         // remove empty components from section
                //         if(section.components[i] && !section.components[i].text){
                //             section.components.splice(i, 1);
                //         }
                //     }
                // }
            }
        }
    }

    function init(element) {

        vm.element = element;

        angular.element("body").on("click", ".ssb-page-section a", pageLinkClick);

        angular.element("body").on("click", ".ssb-page-section", pageSectionClick);

        angular.element('.ssb-main').on('eqResize', pageResize);

        // angular.element($window).on('beforeunload', vm.checkPageNavigation);

        setupBreakpoints();

        vm.uiState.isSidebarClosed = $rootScope.app.layout.isSidebarClosed;
        $rootScope.app.layout.isSidebarClosed = true;
        $rootScope.app.layout.isMinimalAdminChrome = true;

        vm.uiStateOriginal = angular.copy(vm.uiState);

        vm.state.permissions = SimpleSiteBuilderService.permissions;

    }


}

})();

'use strict';
/*global app, moment, angular, window, CKEDITOR*/
/*jslint unparam:true*/
(function (angular) {
  app.controller('SSBPagesCtrl', ["$scope", "$location", "toaster", "$filter", "$modal", "WebsiteService", "pageConstant", "$timeout", "SimpleSiteBuilderService", function ($scope, $location, toaster, $filter, $modal, WebsiteService, pageConstant, $timeout, SimpleSiteBuilderService) {


    var vm = this;

    vm.state = {};

    //TODO: optimize this, we dont need to watch since this won't change
    $scope.$watch(function() { return SimpleSiteBuilderService.themes }, function(themes) {
      vm.state.themes = themes;
    }, true);

    //TODO: optimize this, we dont need to watch since this won't change
    $scope.$watch(function() { return SimpleSiteBuilderService.templates }, function(templates) {
      vm.state.templates = templates;
    }, true);

    $scope.$watch(function() { return SimpleSiteBuilderService.legacyTemplates }, function(templates) {
      vm.state.legacyTemplates = templates;
    }, true);


    //TODO: use vm pattern in this controller...

    $scope.tableView = 'list';
    $scope.itemPerPage = 40;
    $scope.showPages = 15;
    $scope.showChangeURL = false;
    $scope.createpage = {};
    $scope.pageConstant = pageConstant;
    $scope.setHomePage = function () {
      if ($scope.createpage.homepage) {
        $scope.createpage.title = 'Home';
        $scope.createpage.handle = 'index';
      }
    };

    $scope.default_image_url = "/admin/assets/images/default-page.jpg";

    $scope.filterPages = function () {
      $scope.showFilter = !$scope.showFilter;
      $scope.filterScreenshots($scope.pages);
    };

    $scope.orderByFn = function () {
      $scope.pages = $filter('orderBy')($scope.pages, 'modified.date', true);
    };

    $scope.filterScreenshots = function (pages) {
      _.each(pages, function (page) {
        if (page) {
          page.hasScreenshot = false;
          if (page.screenshot) {
            if ($("#screenshot_" + page._id).attr("src") === $scope.default_image_url) {
              page.hasScreenshot = false;
            } else {
              page.hasScreenshot = true;
            }
          }
        }
      });
    };

    $scope.formatPages = function (pages, fn) {
      var pagesArr = [];
      _.each(pages, function (page) {
        if (page) {
          if (page.components) {
            page.components = page.components.length;
          } else {
            page.components = 0;
          }
          page.hasScreenshot = false;
          if (page.screenshot) {
            if ($("#screenshot_" + page._id).attr("src") === $scope.default_image_url) {
              page.hasScreenshot = false;
            }
            page.hasScreenshot = true;
          }
          if (page.type !== 'template' && page.handle !== 'blog' && page.handle !== 'single-post' && page.handle !== 'blog-list' && page.handle !== 'blog-post') {
            pagesArr.push(page);
          }
        }
      });

      if (fn) {
        fn(pagesArr);
      }
    };


    $scope.openModal = function (template) {
      $scope.modalInstance = $modal.open({
        templateUrl: template,
        keyboard: false,
        backdrop: 'static',
        scope: $scope,
        resolve: {
            vm: function() {
                return vm;
            }
        }
      });
      $scope.modalInstance.result.finally($scope.closeModal());
    };

    $scope.closeModal = function () {
      $scope.modalInstance.close();
      $scope.resetTemplateDetails();
      if(!$scope.createpage.showhomepage){
        $scope.createpage = {};
      }
      else{
        $scope.createpage.homepage = true;
        $scope.createpage.title = 'Home';
        $scope.createpage.handle = 'index';
      }
    };


    $scope.getters = {
      components: function (value) {
        return value.length;
      },
      created: function (value) {
        return value.created.date;
      },
      modified: function (value) {
        return value.modified.date;
      }
    };

    $scope.setTemplateDetails = function (templateDetails) {
      $scope.templateDetails = true;
      $scope.selectedTemplate = templateDetails;
    };

    $scope.resetTemplateDetails = function () {
      $scope.templateDetails = false;
      $scope.selectedTemplate = null;
      $scope.showChangeURL = false;
    };

    $scope.slugifyHandle = function (title) {
      if (title) {
        $scope.createpage.handle = $filter('slugify')(title);
      }
    };

    $scope.validateCreatePage = function (page, restrict) {
      $scope.createPageValidated = false;
      if (page) {
        if (page.handle === '') {
          $scope.handleError = true;
        } else {
          $scope.handleError = false;
          if (!restrict) {
            page.handle = $filter('slugify')(page.title);
          } else {
            page.handle = $filter('slugify')(page.handle);
          }
        }
        if (!page.title) {
          page.title = page.handle;
        } else {
          $scope.titleError = false;
        }
        if (page && page.title && page.title !== '' && page.handle && page.handle !== '') {
          $scope.createPageValidated = true;
        }
      }
    };

    $scope.createPage = function (template) {

        if ($scope.saveLoading) {
            return
        }

        $scope.saveLoading = true;

        return (
            SimpleSiteBuilderService.createPage(template._id).then(function(data) {
                $scope.saveLoading = false;
                $scope.closeModal();
                $scope.viewSimpleSiteBuilder(data.data);
            })
        )

    };

    $scope.viewSingle = function (page) {
      $location.path('/website/pages/').search({pagehandle: page.handle});
    };

    $scope.viewSimpleSiteBuilder = function (page) {

        var id;

        if ($scope.pages.length) {

            id = $scope.pages.filter(function(page) {
                return page.handle == 'index'
            });

            if (id.length) {
                id = id[0]._id
            } else {
                id = $scope.pages[0]._id;
            }

        }

        if (page) {
            id = page._id;
        }

        $location.path('/website/site-builder/pages/' + id);

    };

    $scope.filterScreenshot = {};

    $scope.pageScreenshotOptions = [{
      name: 'Screenshot',
      value: true
    }, {
      name: 'No Screenshot',
      value: false
    }];

    /*
     * @triggerInput
     * - trigger the hidden input to trick smart table into activating filter
     */

    $scope.triggerInput = function (element) {
      angular.element(element).trigger('input');
    };

    $scope.clearFilter = function (event, input) {
      $scope.filterScreenshot = {};
      $scope.triggerInput(input);
    };

    $scope.toggleHandle = function (val) {
      $scope.showChangeURL = val;
    };

    var repeater;
    $scope.pages = [];

    $scope.checkAndSetIndexPage = function(pages)
    {
        var indexExists = _.find(pages, function (page) {
          return page.handle === 'index';
        });
        if (!indexExists) {
          $scope.createpage.showhomepage = true;
          $scope.createpage.homepage = true;
          $scope.createpage.title = 'Home';
          $scope.createpage.handle = 'index';
        } else {
          $scope.createpage.homepage = false;
        }
    }

    $scope.getPages = function () {
      // $timeout.cancel(repeater);
      WebsiteService.getPages(function (returnedPages) {
        var pages = angular.copy(returnedPages);
        if ($scope.pages.length === 0) {
          $scope.checkAndSetIndexPage(pages);
          $scope.formatPages(pages, function (pagesArr) {
            $scope.pages = pagesArr;
            $scope.orderByFn();
            $scope.displayPages = true;
          });
        }
        if (pages.length > $scope.pages.length && $scope.pages.length !== 0) {
          var intersection = _.filter(pages, function (obj) {
            return !_.find($scope.pages, function (item) {
              return item._id === obj._id;
            });
          });
          $scope.formatPages(intersection, function (pagesArr) {
            _.each(pagesArr, function (_pages) {
              $scope.pages.push(_pages);
            });
            $scope.orderByFn();
            $scope.displayPages = true;
          });

        }
        // repeater = $timeout($scope.getPages, 30000);
      });
    };

    (function init() {

        $scope.getPages();

    })();

  }]);
}(angular));

'use strict';
/*global app, window, $$*/
/*jslint unparam:true*/
(function () {

    app.factory('SimpleSiteBuilderService', SimpleSiteBuilderService);

    SimpleSiteBuilderService.$inject = ['$rootScope', '$compile', '$http', '$q', '$timeout', 'AccountService', 'WebsiteService', '$modal', 'pageConstant'];
    /* @ngInject */
    function SimpleSiteBuilderService($rootScope, $compile, $http, $q, $timeout, AccountService, WebsiteService, $modal, pageConstant) {
        var ssbService = {};
        var baseWebsiteAPIUrl = '/api/1.0/cms/website/';
        var basePageAPIUrl = '/api/1.0/cms/page/';
        var baseComponentAPIUrl = '/api/1.0/cms/component/';
        var baseTemplateAPIUrl = '/api/1.0/cms/template/';
        var baseWebsiteAPIUrlv2 = '/api/2.0/cms/websites/'
        var basePageAPIUrlv2 = '/api/2.0/cms/pages/';
        var baseTemplateAPIUrlv2 = '/api/2.0/cms/templates/';
        var baseSiteTemplateAPIUrlv2 = '/api/2.0/cms/sitetemplates/';
        var baseThemesAPIUrlv2 = '/api/2.0/cms/themes/';
        var baseSectionAPIUrlv2 = '/api/2.0/cms/sections/';
        var baseComponentAPIUrlv2 = '/api/2.0/cms/components/';
        var basePagesWebsiteAPIUrl = '/api/2.0/cms/website/';

        ssbService.getSite = getSite;
        ssbService.getPage = getPage;
        ssbService.getPages = getPages;
        ssbService.loadDataFromPage = loadDataFromPage;
        ssbService.getPagesWithSections = getPagesWithSections;
        ssbService.savePage = savePage;
        ssbService.saveWebsite = saveWebsite;
        ssbService.updateScriptResource = updateScriptResource;
        ssbService.setActiveSection = setActiveSection;
        ssbService.setActiveComponent = setActiveComponent;
        ssbService.activeSectionIndex = undefined;
        ssbService.activeComponentIndex = undefined;
        ssbService.getPlatformSections = getPlatformSections;
        ssbService.getPlatformComponents = getPlatformComponents;
        ssbService.getComponent = getComponent;
        ssbService.getSection = getSection;
        ssbService.getUserSections   = getUserSections;
        ssbService.checkForDuplicatePage = checkForDuplicatePage;
        ssbService.loading = { value: 0 };
        ssbService.websiteLoading = false;
        ssbService.getThemes = getThemes;
        ssbService.setupTheme = setupTheme;
        ssbService.applyThemeToSite = applyThemeToSite;
        ssbService.createPage = createPage;
        ssbService.createDuplicatePage = createDuplicatePage;
        ssbService.getTemplates = getTemplates;
        ssbService.getSiteTemplates = getSiteTemplates;
        ssbService.setSiteTemplate = setSiteTemplate;
        ssbService.getTemplateById = getTemplateById;
        ssbService.getLegacyTemplates = getLegacyTemplates;
        ssbService.addSectionToPage = addSectionToPage;
        ssbService.removeSectionFromPage = removeSectionFromPage;
        ssbService.removeSectionFromLayoutArea = removeSectionFromLayoutArea;
        ssbService.getSpectrumColorOptions = getSpectrumColorOptions;
        ssbService.getFontFamilyOptions = getFontFamilyOptions;
        ssbService.deletePage = deletePage;
        ssbService.openMediaModal = openMediaModal;
        ssbService.setMediaForComponent = setMediaForComponent; //legacy re-impl
        ssbService.extendComponentData = extendComponentData;
        ssbService.getTempUUID = getTempUUID;
        ssbService.setTempUUIDForSection = setTempUUIDForSection;
        ssbService.setPermissions = setPermissions;
        ssbService.addCompiledElement = addCompiledElement;
        ssbService.addCompiledElementEditControl = addCompiledElementEditControl;
        ssbService.getCompiledElement = getCompiledElement;
        ssbService.getCompiledElementEditControl = getCompiledElementEditControl;
        ssbService.compileEditorElements = compileEditorElements;
        ssbService.addUnderNavSetting = addUnderNavSetting; //legacy re-impl
        ssbService.contentComponentDisplayOrder = [];
        ssbService.inValidPageHandles = pageConstant.inValidPageHandles;
        ssbService.getPageVersions = getPageVersions;
        ssbService.publishPage = publishPage;
        ssbService.revertPage = revertPage;
        ssbService.updateBlogPages = updateBlogPages;
        ssbService.permissions = {};
        ssbService.compiledElements = {};
        ssbService.compiledElementEditControls = {};
        ssbService.detectIENotEdge = detectIENotEdge;
        ssbService.isIENotEdge = ssbService.detectIENotEdge();
        ssbService.getBlogListPage = getBlogListPage;
        ssbService.getBlogPostPage = getBlogPostPage;
        ssbService.returnInvalidPost = returnInvalidPost;
        ssbService.checkAndSetGlobalHeader = checkAndSetGlobalHeader;
        ssbService.checkDuplicateGlobalHeader = checkDuplicateGlobalHeader;
        ssbService.getTempComponent = getTempComponent;

        /**
         * This represents the category sorting for the add content panel
         */

        ssbService.contentSectionDisplayOrder = [
            'navigation',
            'welcome hero',
            'products & services',
            'donations',
            'forms',
            'gallery',
            'text',
            'video',
            'mixed content',
            'team',
            'testimonials',
            'contact',
            'social',
            'footer',
            'blog',
            'misc'
        ];

        ssbService.contentSectionIcons = {
            'navigation':{
                'icon': 'fa-reorder'
            },
            'welcome hero':{
                'icon': 'fa-bullhorn'
            },
            'products & services':{
                'icon': 'fa-shopping-cart'
            },
            'donations':{
                'icon': 'fa-heart-o'
            },
            'forms':{
                'icon': 'fa-at'
            },
            'gallery':{
                'icon': 'fa-file-image-o'
            },
            'text':{
                'icon': 'fa-text-width'
            },
            'video':{
                'icon': 'fa-video-camera'
            },
            'mixed content':{
                'icon': 'fa-object-ungroup'
            },
            'team':{
                'icon': 'fa-users'
            },
            'testimonials':{
                'icon': 'fa-commenting'
            },
            'contact':{
                'icon': 'fa-map-marker'
            },
            'social':{
                'icon': 'fa-thumbs-o-up'
            },
            'footer':{
                'icon': 'fa-copyright'
            },
            'blog':{
                'icon': 'fa-rss'
            },
            'misc':{
                'icon': 'fa-puzzle-piece'
            },
            'all':{
                'icon': 'fa-sort-amount-asc'
            }
        }

        ssbService.manageComponentIcons = {
            'navigation': {
                icon: 'fa-align-justify'
            },
            'social-link': {
                icon: 'fa-bullhorn'
            },
            'text': {
                icon: 'fa-text-height'
            },
            'image': {
                icon: 'fa-file-image-o'
            },
            'ssb-image': {
                icon: 'fa-file-image-o'
            },
            'ssb-text': {
                icon: 'fa-text-height'
            }
        }

        // function to get component sort order
        function getComponentSortOrder(newComponents, newSection){
            if(newSection && newSection.componentSortOrder)
               return newSection.componentSortOrder;
            else
               return _.invert(_.object(_.pairs(_.pluck(newComponents, 'type'))))
        }

        /**
         * Events for compiled editor elememts
         */
        $rootScope.$on('$ssbElementAdded', function(event, componentId, editorId, elementId) {
            console.log('$ssbElementAdded', componentId, editorId, elementId);
        });

        $rootScope.$on('$ssbElementRemoved', function(event, componentId, editorId, elementId) {
            removeCompiledElement(componentId, editorId, elementId);
            removeCompiledElementEditControl(componentId, editorId, elementId);
            console.log('$ssbElementRemoved', componentId, editorId, elementId);
        });


        /**
         * A wrapper around API requests
         * @param {function} fn - callback
         *
         * @returns {function} fn - callback
         *
         */
        function ssbRequest(fn) {
            ssbService.loading.value = ssbService.loading.value + 1;
            console.info('service | loading +1 : ' + ssbService.loading.value);
            fn.finally(function() {
                ssbService.loading.value = ssbService.loading.value - 1;
                console.info('service | loading -1 : ' + ssbService.loading.value);
            })
            return fn;
        }

        /**
         * Active section is the section focused for editing
         * @param {integer} sectionIndex - index of section to set active
         */
        function setActiveSection(sectionIndex) {
            ssbService.activeSectionIndex = sectionIndex;
        }

        /**
         * Active component is the component within a section that is focused for editing
         * @param {integer} componentIndex - index of component to set active
         */
        function setActiveComponent(componentIndex) {
            ssbService.activeComponentIndex = componentIndex;
        }

        /**
         * Get latest website object for this account
         * @param {string} id - website _id
         * @param {boolean} isLoading - if loading this data is in progress
         */
        function getSite(id) {

            function success(data) {
                ssbService.website = data;
            }

            function error(error) {
                console.error('SimpleSiteBuilderService getSite error: ', JSON.stringify(error));
            }

            return ssbRequest($http.get(baseWebsiteAPIUrlv2 + id).success(success).error(error));
        }

        /**
         * Get all pages for this account's website
         *
         */
        function getPages() {

            var deferred = $q.defer();

            // if (!ssbService.pages) {
            //     var pages = ssbService.loadDataFromPage('script#indigenous-precache-sitedata-pages');
            //     if (pages.length) {
            //         ssbService.pages = pages;
            //         deferred.resolve(ssbService.pages);
            //         return ssbRequest(deferred.promise);
            //     }
            // }

            function success(data) {
                ssbService.pages = data;
            }

            function error(error) {
                console.error('SimpleSiteBuilderService getPages error: ', JSON.stringify(error));
            }

            return ssbRequest($http.get(baseWebsiteAPIUrlv2 + ssbService.websiteId + '/pages').success(success).error(error));
        }

        function loadDataFromPage(scriptId) {

            var data = $(scriptId).html();

            var unescapeMap = {
                "&amp;":"&",
                "&lt;":"<",
                "&gt;":">",
                '&quot;':'"',
                '&#39;':"'",
                '&#x2F;':"/",
                '&apos;': "'"
            };

            function unescapeHTML(string) {
                return String(string).replace(/(&amp;|&lt;|&gt;|&quot;|&#39;|&#x2f;|&apos;)/g, function(s) {
                    return unescapeMap[s] || s;
                });
            }

            var parsedData = JSON.parse(unescapeHTML(data));

            return parsedData;
        }

        /**
         * TODO: @sanjeev to document
         *
         */
        function getPagesWithSections() {


            function success(data) {
                 console.log('SimpleSiteBuilderService getPages with sections');
            }

            function error(error) {
                console.error('SimpleSiteBuilderService getPages with sections: ', JSON.stringify(error));
            }

            return ssbRequest($http.get(basePagesWebsiteAPIUrl + ssbService.websiteId + '/pages').success(success).error(error));

        }

        /**
         * Get page
         * @param {string} id - page _id
         * @param {boolean} isSettings - is settings request
         * TODO: @sanjeev to document "isSettings" param
         */
        function getPage(id, isSettings) {
            function success(data) {
                console.log('SimpleSiteBuilderService requested page data' + data);
            }

            return ssbRequest($http.get(basePageAPIUrlv2 + id).success(
                isSettings ? success : successPage)
            .error(errorPage));
        }

        /**
         * Save page to db, update client instance with response from server
         * @param {object} page - page data
         * @param {boolean} isSettings - is settings request
         * TODO: @sanjeev to document "isSettings" param
         */
        function savePage(page, isSettings) {
            function success(data) {
                if(ssbService.pages && ssbService.pages[page.handle] && data.title){
                    ssbService.pages[page.handle].title = data.title;
                }
                console.log('SimpleSiteBuilderService requested page settings saved' + data);
            }
            if(!isSettings){
                page.ssb = true;
            }
            return (
                ssbRequest($http({
                    url: basePageAPIUrlv2 + page._id,
                    method: 'POST',
                    data: angular.toJson(page)
                }).success(isSettings ? success : successPage).error(errorPage))
            )
        }

        /**
         * Delete page from db, delete client instance
         * @param {object} page - page data
         */
        function deletePage(page) {
            function success(data) {
                console.log('SimpleSiteBuilderService requested page deleted');
                delete ssbService.pages[page.handle];
            }

            function error(error) {
                console.error('SimpleSiteBuilderService page delete error: ', JSON.stringify(error));
            }

            return (
                ssbRequest($http({
                    url: basePageAPIUrlv2 + page._id,
                    method: 'DELETE',
                    data: angular.toJson(page)
                }).success(success).error(error))
            )

        }

        /**
         * Create a page from a page template
         * @param {string} templateId - template's _id
         */
        function createPage(templateId) {

            return (
                ssbRequest($http({
                  url: baseWebsiteAPIUrlv2 + ssbService.website._id + '/page/',
                  method: 'POST',
                  data: { templateId: templateId }
                }).success(success).error(error))
            )

            function success(data) {
                console.log('SimpleSiteBuilderService requested page created');
            }

            function error(error) {
                console.error('SimpleSiteBuilderService page creation error: ', JSON.stringify(error));
            }

        }

        /**
         * Create a page from an existing page
         * @param {object} page - page data
         */
        function createDuplicatePage(page) {
            function success(data) {
                console.log('SimpleSiteBuilderService requested page created');
            }

            function error(error) {
                console.error('SimpleSiteBuilderService page error: ', JSON.stringify(error));
            }
            return (
                ssbRequest($http({
                  url: baseWebsiteAPIUrlv2 + ssbService.website._id + '/duplicate/page/',
                  method: 'POST',
                  data: angular.toJson(page)
                }).success(success).error(error))
            )

        }

        /**
         * Shared success callback for page API requests
         * @param {object} data - page data response from server
         */
        function successPage(data) {
            var page = transformComponentsToSections(data);
            console.log("page loaded");
            ssbService.page = page;
            // Refresh page list with updated page
            if(ssbService.pages && ssbService.pages[page.handle]){
              ssbService.pages[page.handle] = page;
            }
        }

        /**
         * Shared error callback for page API requests
         * @param {object} error - error response from server
         */
        function errorPage(error) {
            console.error('SimpleSiteBuilderService page error: ', JSON.stringify(error));
        }

        /**
         * Transform legacy component objects into section objects with a single component child
         * @param {object} page - page data
         */
        function transformComponentsToSections(page) {
            /*
             *
             * Transform legacy pages to new section/component model format
             */
            if (page.components && page.components.length && !page.ssb) {
                page.sections = angular.copy(page.components);
                for (var i = 0; i < page.sections.length; i++) {
                    var component = angular.copy(page.sections[i]);
                    var id = Math.random().toString(36).replace('0.','');
                    var defaultSectionObj = {
                        _id: id,
                        accountId: ssbService.account._id,
                        layout: '1-col',
                        components: [component],
                        visibility: true
                    };

                    defaultSectionObj.name = sectionName(defaultSectionObj) + ' Section';

                    page.sections[i] = defaultSectionObj;

                }
            }

            /*
             *
             * Name sections without a name (can be edited in UI)
             */
            for (var i = 0; i < page.sections.length; i++) {
                if (page.sections[i] && !page.sections[i].name) {
                  page.sections[i].name = sectionName(page.sections[i]) + ' Section';
                }
            }

            page.ssb = true;

            return page;
        }

        /**
         * Save website to db, update client instance with response from server
         * @param {object} webite - website data
         */
        function saveWebsite(website) {

            function success(data) {
                ssbService.website = data;
            }

            function error(error) {
                console.error('SimpleSiteBuilderService saveWebsite error: ', JSON.stringify(error));
            }

            return (
                ssbRequest($http({
                    url: baseWebsiteAPIUrlv2 + website._id,
                    method: 'POST',
                    data: angular.toJson(website)
                }).success(success).error(error))
            )

        }

    /**
         * Save website script resources to db, update client instance with response from server
         * @param {object} webite - website data
         */
    function updateScriptResource(website) {

            function success(data) {
                ssbService.website = data;
            }

            function error(error) {
                console.error('SimpleSiteBuilderService updateScriptResource error: ', JSON.stringify(error));
            }

            return (
                ssbRequest($http({
                    url: baseWebsiteAPIUrlv2 + website._id + '/userScripts',
                    method: 'POST',
                    data: angular.toJson(website)
                }).success(success).error(error))
            )

        }

        /**
         * Get component data from server
         * @param {object} component - default component data
         * @param {integer} version - version number of component
         */
        function getComponent(component, version) {

            if (!version) {
                version = 1;
            }

            function success(data) {
                console.log('SimpleSiteBuilderService requested component: ' + data);
            }

            function error(error) {
                console.error('SimpleSiteBuilderService component error: ', JSON.stringify(error));
            }

            return (
                ssbRequest($http({
                    url: baseComponentAPIUrl + component.type,
                    method: "POST",
                    data: angular.toJson({
                        version: version
                    })
                }).success(success).error(error))
            )

        }

        /**
         * Get section data from server
         * @param {object} section - default section data
         * @param {integer} version - version number of section
         */
        function getSection(section, version) {

            var deferred = $q.defer();

            if (section.type.indexOf('ssb-') === -1) {
                getLegacySection(section, section.version).then(function(wrappedLegacyComponent){
                    deferred.resolve(wrappedLegacyComponent);
                });
            } else {
                ssbRequest($http({
                    url: baseSectionAPIUrlv2 + section._id,
                    method: 'GET'
                }).success(success).error(error));
            }

            function success(data) {
                deferred.resolve(data);
                console.log('SimpleSiteBuilderService requested section: ' + data);
            }

            function error(error) {
                deferred.reject(error);
                console.error('SimpleSiteBuilderService section error: ', JSON.stringify(error));
            }

            return ssbRequest(deferred.promise);

        }

        /**
         * Infer a decent name for a content section
         * @param {object} section - section data
         */
        function sectionName(section) {
          var sectionName = section.layout;

          if (section.components) {
            if (section.components.length === 1 && section.components[0].header_title) {
              sectionName = section.components[0].header_title;
            } else if (section.components[0]) {
              sectionName = section.components[0].type;
            }
          }

          return sectionName;

        }

        /**
         * Get legacy (Pages) component as a section
         * @param {object} section - section data
         * @param {integer} version - version number of section
         */
        function getLegacySection(section, version) {
            var sectionDefault = {
                "layout": "1-col",
                "txtcolor": undefined,
                "bg": {
                    "img": {
                        "url": "",
                        "width": null,
                        "height": null,
                        "parallax": false,
                        "blur": false,
                        "overlay": false,
                        "show": false
                    },
                    "color": undefined
                },
                "visibility": true,
                "spacing": {
                    "mt": "0",
                    "ml": "0",
                    "mr": "0",
                    "mb": "0",
                    "pt": "0",
                    "pb": "0",
                    "pl": "0",
                    "pr": "0"
                }
            }

            return getComponent(section, version).then(function(component) {
                sectionDefault.components = [component.data];

                sectionDefault.name = sectionName(sectionDefault);

                if (!sectionDefault.spacing) {
                    sectionDefault.spacing = {
                        "mt": "0",
                        "ml": "0",
                        "mr": "0",
                        "mb": "0",
                        "pt": "0",
                        "pb": "0",
                        "pl": "0",
                        "pr": "0"
                    }
                }

                return sectionDefault;
            });
        }

        /**
         * Get list of content sections available for adding to a page
         *
         */
        function getPlatformSections() {

            function success(data) {
                ssbService.platformSections = data;
                console.log('SimpleSiteBuilderService requested getPlatformSections: ' + data);
            }

            function error(error) {
                console.error('SimpleSiteBuilderService getPlatformSections error: ', JSON.stringify(error));
            }

            return (ssbRequest($http({
                url: baseSectionAPIUrlv2 + 'platform',
                method: 'GET'
            }).success(success).error(error)));

        }

        /**
         * Get list of content sections created by current user available for re-using on multiple pages
         *
         */
        function getUserSections() {

            function success(data) {
                ssbService.userSections = data;
                console.log('SimpleSiteBuilderService getUserSections: ' + data);
            }

            function error (error) {
                console.error('SimpleSiteBuilderService getUserSections error: ', JSON.stringify(error));
            }

            return (ssbRequest($http({
                url: baseSectionAPIUrlv2 + 'user',
                method: 'GET'
            }).success(success).error(error)));

        }

        /**
         * Get list of components available for adding to a section
         *
         */
        function getPlatformComponents() {

            function success(data) {
                console.log('Success from call to 2.0 get components', data);
                var ret = [];
                data.forEach(function(cmp) {
                    ret.push(getComponent(cmp));
                });

                $q.all(ret).then(function(data){
                    ssbService.platformComponents = data.map(function(component) {
                        return component.data;
                    });
                });
            }
            function error(error) {
                console.error('SimpleSiteBuilderService getPlatformComponents error: ', JSON.stringify(error));
            }

            return (
                    ssbRequest($http({
                        url: baseComponentAPIUrlv2,
                        method: 'GET'
                    }).success(success).error(error))
                );
        }

        /**
         * Get list of themes available for applying to a website
         *
         */
        function getThemes() {

            function success(data) {
                console.log('SimpleSiteBuilderService requested themes: ' + data);
                ssbService.themes = data;
            }

            function error(error) {
                console.error('SimpleSiteBuilderService themes error: ', JSON.stringify(error));
            }

            return (
                ssbRequest($http({
                    url: baseThemesAPIUrlv2,
                    method: 'GET',
                }).success(success).error(error))
            )

        }

        /**
         * Check for existing page with given handle
         * @param {string} pageHandle - page handle
         */
        function checkForDuplicatePage(pageHandle) {

            function success(data) {
                console.log('SimpleSiteBuilderService checkForDuplicatePage: ' + data);
            }

            function error(error) {
                console.error('SimpleSiteBuilderService checkForDuplicatepage error: ', JSON.stringify(error));
            }

            return (
                ssbRequest($http({
                    url: baseWebsiteAPIUrl + ssbService.website._id + '/page/' + pageHandle,
                    method: 'GET',
                }).success(success).error(error))
            )

        }

        /**
         * Get list of page templates
         *
         */
        function getTemplates() {

          function success(data) {
            ssbService.templates = data.sort(function(a, b) {
                return a.modified.date > b.modified.date;
            });
            console.log('SimpleSiteBuilderService getTemplates: ' + data);
          }

          function error(error) {
            console.error('SimpleSiteBuilderService getTemplates error: ', JSON.stringify(error));
          }

          return (
            ssbRequest($http({
              url: baseTemplateAPIUrlv2,
              method: 'GET',
            }).success(success).error(error))
          )

        }

        /**
         * Get list of site templates
         *
         */
        function getSiteTemplates() {

          function success(data) {
            ssbService.siteTemplates = data;
            console.log('SimpleSiteBuilderService getSiteTemplates: ' + data);
          }

          function error(error) {
            console.error('SimpleSiteBuilderService getSiteTemplates error: ', JSON.stringify(error));
          }

          return (
            ssbRequest($http({
              url: baseSiteTemplateAPIUrlv2,
              method: 'GET',
            }).success(success).error(error))
          )

        }

        /**
         * Apply the site template to the website, results in:
         *   - creating a set of pages defined in the site template
         *   - applying the theme defined in the site template
         *
         * @param {object} siteTemplate - site template data obj
         */
        function setSiteTemplate(siteTemplate) {

            function success(data) {
                console.log('SimpleSiteBuilderService setSiteTemplate: ' + data);
            }

            function error(error) {
                console.error('SimpleSiteBuilderService setSiteTemplate error: ', JSON.stringify(error));
            }

            return (
                ssbRequest($http({
                    url: baseWebsiteAPIUrlv2 + ssbService.website._id + '/sitetemplates/' + siteTemplate._id,
                    method: 'POST',
                    data: {
                        siteTemplateId: siteTemplate._id,
                        siteThemeId: siteTemplate.siteThemeId,
                        siteThemeOverrides: siteTemplate.siteThemeOverrides
                    }
                }).success(success).error(error))
            )
        }

        /**
         * Get a page template by _id
         * @param {string} id - page template _id
         *
         */
        function getTemplateById(id) {

          return _.where(ssbService.templates, {
            _id: id
          });

        }

        /**
         * Get list of legacy templates
         *
         */
        function getLegacyTemplates() {

          function success(data) {
            ssbService.legacyTemplates = data;
            console.log('SimpleSiteBuilderService getLegacyTemplates: ' + data);
          }

          function error(error) {
            console.error('SimpleSiteBuilderService getLegacyTemplates error: ', JSON.stringify(error));
          }

          return (
            ssbRequest($http({
              url: baseTemplateAPIUrl,
              method: 'GET',
            }).success(success).error(error))
          )

        }

        /**
         * Add a section to the current page
         * @param {object} section - section data
         * @param {integer} version - section version number
         * @param {integer} replaceAtIndex - optional, index of page section to replace with new section
         * @param {object} oldSection - optional, the data of the existing section to be replaced
         * @param {integer} copyAtIndex - optional, index to insert section copy
         *
         */
        function addSectionToPage(section, version, replaceAtIndex, oldSection, copyAtIndex) {
            var insertAt;
            var numSections;
            var hasHeader = false;
            var hasFooter = false;
            var deferred = $q.defer();
            var promise;

            if (!ssbService.page.sections) {
                ssbService.page.sections = [];
            } else {
                //hasHeader = pageHasHeader(ssbService.page.sections);
                hasFooter = pageHasFooter(ssbService.page.sections);
                console.debug(hasFooter);
            }

            numSections = ssbService.page.sections.length;

            insertAt = hasFooter ? numSections - 1 : numSections;

            if (copyAtIndex === undefined) {

                promise = ssbService.getSection(section, version || 1).then(function(response) {

                    if (response) {

                        if (angular.isDefined(replaceAtIndex)) {
                            var extendedData = ssbService.extendComponentData(oldSection, response);
                            ssbService.setActiveSection(null);
                            ssbService.page.sections.splice(replaceAtIndex, 1, extendedData);
                            ssbService.setActiveSection(replaceAtIndex);
                            ssbService.setActiveComponent(null);
                        } else {
                            // Set unique _id's for section and component.
                            var _section = checkAndSetGlobalHeader(response);
                            var insertSection = ssbService.setTempUUIDForSection(_section);
                            ssbService.page.sections.splice(insertAt, 0, insertSection);
                            ssbService.setActiveSection(insertAt);
                            ssbService.setActiveComponent(null);
                        }

                    } else {
                        console.error("Error loading section/component:", section);
                    }

                });

            } else {
                section = checkAndSetGlobalHeader(section);
                ssbService.page.sections.splice(copyAtIndex, 0, section);
                ssbService.setActiveSection(copyAtIndex);
                deferred.resolve();
                promise = deferred.promise;

            }

            return promise;

        }


        /**
         * Remove a section from the current page
         * @param {integer} index - index of page section to be removed
         *
         */

        function removeSectionFromPage(pageSectionIndex) {

            if (ssbService.page.layout === 'ssb-layout__header_2-col_footer' && ssbService.page.layoutModifiers) {
                ssbService.removeSectionFromLayoutArea(pageSectionIndex);
            }

            ssbService.page.sections.splice(pageSectionIndex, 1);

            ssbService.setActiveSection(null);
            ssbService.setActiveComponent(null);

        }

        /**
         * Remove a section from the specific layout area of page
         * @param {obj} section - section of page to be removed
         * @param {integer} index - index of page section to be removed
         *
         * Note: layoutModifiers for custom layouts look like:
         *       {
         *          "header" : [
         *              0
         *          ],
         *          "2-col-1" : [
         *              1
         *          ],
         *          "2-col-2" : [
         *              2,
         *              3,
         *              4,
         *              5,
         *              6,
         *              7
         *          ],
         *          "footer" : [
         *              8
         *          ]
         *      }
         */
        function removeSectionFromLayoutArea(pageSectionIndex) {

            var decrementProceedingValues = false;
            var sectionId = ssbService.page.sections[pageSectionIndex]._id;
            var sectionLayoutName = _.filter(ssbService.page.layoutModifiers._layoutAreas, function(val, index) {
                return ssbService.page.layoutModifiers[val].indexOf(pageSectionIndex) !== -1
            })[0];
            var sectionLayoutIndex = ssbService.page.layoutModifiers[sectionLayoutName].indexOf(pageSectionIndex);


            console.debug('sectionLayoutName before:', sectionLayoutName)
            console.debug('ssbService.page.layoutModifiers[sectionLayoutName]:', ssbService.page.layoutModifiers[sectionLayoutName])

            //remove this section's index value from the layout area array that its in
            ssbService.page.layoutModifiers[sectionLayoutName].splice(sectionLayoutIndex, 1);

            //decrement all index values that come after the one just removed
            _.each(ssbService.page.layoutModifiers._layoutAreas, function(layoutName) {

                if (layoutName === sectionLayoutName) {
                    decrementProceedingValues = true;
                }

                if (decrementProceedingValues) {

                    console.debug('layoutName before:', layoutName)
                    console.debug('ssbService.page.layoutModifiers[layoutName]:', ssbService.page.layoutModifiers[layoutName])

                    ssbService.page.layoutModifiers[layoutName] = _.map(ssbService.page.layoutModifiers[layoutName], function(val, index) {
                        return (val - 1);
                    });

                    console.debug('layoutName after:', layoutName)
                    console.debug('ssbService.page.layoutModifiers[layoutName]:', ssbService.page.layoutModifiers[layoutName])
                }

            });

        }

        /*
         * extendComponentData
         * - extend authored data onto new components
         * - match component order of newSection
         * - omit keys we don't want transfered
         *
         * @param {object} oldSection - section being replaced
         * @param {object} newSection - section from server
         *
         * @returns {*} newSection with any authored data
         *
         */
        function extendComponentData(oldSection, newSection) {

            var keysToOmitSection = ['$$hashKey', 'anchor', 'version', 'type', 'layout', 'spacing', 'visibility', 'bg', 'border', 'layoutModifiers', 'componentSortOrder'];
            var keysToOmitComponent = ['$$hashKey', '_id', 'anchor', 'accountId', 'version', 'type', 'layout', 'spacing', 'visibility', 'bg', 'border', 'layoutModifiers', 'componentSortOrder'];
            var newComponents = angular.copy(newSection.components);

            var newComponentsOrder =  getComponentSortOrder(newComponents, newSection); // ['componentType1', 'componentType2', ...]
            var oldComponents = _(angular.copy(oldSection.components)).chain()

                                    .sortBy(function(x) { // sort by order of newComponents
                                        return newComponentsOrder[x.type] && parseInt(newComponentsOrder[x.type], 10)
                                    })

                                    .value(); // return the new array

            if(newSection.componentSortOrder){
                // get current sort order
                var componentOrder =  angular.copy(getComponentSortOrder(newComponents));
                //arrange components in requested order
                newComponents = _(newComponents).chain()
                                    .sortBy(function(x) { // sort by order of newComponents
                                        return newComponentsOrder[x.type] && parseInt(newComponentsOrder[x.type], 10)
                                    }).value(); // return the new array
            }


            delete newSection.components;
            delete oldSection.components;



            if(newSection.componentSortOrder){

                newSection.components = _.map(newComponents, function(c, index) {
                    var component = _.findWhere(oldComponents, { type: c.type });
                    return $.extend({}, c, _.omit(component || oldComponents[index], keysToOmitComponent));
                });

                // set current sort order
                newSection.components = _(newSection.components).chain().sortBy(function(section){
                    return componentOrder[section.type] && parseInt(componentOrder[section.type], 10)
                }).value();
            }
            else{
                newSection.components = _.map(newComponents, function(c, index) {
                    return $.extend({}, c, _.omit(oldComponents[index], keysToOmitComponent));
                });
            }

            return $.extend({}, newSection, _.omit(oldSection, keysToOmitSection));



        }

        function getGlobalHeaders(sections){
            return _.filter(sections, function(section){
                return (section.globalHeader === true || section.title === "Header") && section.global === true
            })
        }

        /*
         * Determine if page has a header
         *
         *
         */
        function pageHasHeader(sections) {
            var match = getGlobalHeaders(sections);
            return match.length !== 0;
        }

        /*
         * Determine if page has a footer
         *
         * @returns {boolean}
         *
         */
        function pageHasFooter(sections) {
            var hasSectionFooter = false;
            var hasComponentFooter = false;
            var match = _.filter(sections, function(s){

                if (s && s.name && s.components) {
                    hasSectionFooter = s.name.toLowerCase() === 'footer';
                    hasComponentFooter = _.where(s.components, { type: 'footer' }).length !== 0;
                }

                return hasSectionFooter || hasComponentFooter

            });

            return match.length !== 0
        }


        /*
         * Determine if section is a header
         *
         */
        function isHeaderSection(section) {
            return (section.globalHeader === true || section.title === "Header") && section.global === true;
        }

        function checkAndSetGlobalHeader(section){
            if(isHeaderSection(section) && pageHasHeader(ssbService.page.sections)){
                section.global = false;
            }
            return section;
        }

        function checkDuplicateGlobalHeader(section){
            var _duplicate = false;
            if(section){
                if(section.globalHeader === true || section.title === "Header"){
                   var globalHeaders = getGlobalHeaders(ssbService.page.sections);
                   if(globalHeaders && globalHeaders.length){
                        var _index = _.findIndex(globalHeaders, { _id: section._id });
                        _duplicate = _index === -1;
                   }
                }
            }
            
            return _duplicate;
        }

        /*
         * setup Theme
         *
         * - get latest theme data based on website's themeId
         * @param {object} website - website data
         *
         */
        function setupTheme() {
            return ssbService.getThemes().then(function(themes) {
                var theme = themes.data.filter(function(t) { return t._id === ssbService.website.themeId })[0] || {};
                var defaultTheme;

                if (theme._id) {
                    ssbService.applyThemeToSite(theme);
                } else {
                    defaultTheme = themes.data.filter(function(t) { return t.handle === 'default' })[0] || {};
                    ssbService.applyThemeToSite(defaultTheme, false);
                    ssbService.website.themeId = defaultTheme._id;
                    ssbService.saveWebsite(ssbService.website);
                }
            });
        }

        /*
         * Apply theme fonts, styles and default themeoverrides for theme
         *
         * @param {object} theme - theme obj
         * @param {boolean} keepCurrentOverrides - when not changing themes, should not set new themeOverrides
         * @param {object} website - website data
         *
         */
        function applyThemeToSite(theme, keepCurrentOverrides) {
            // Load web font loader
            var unbindWatcher = $rootScope.$watch(function() {
                return angular.isDefined(window.WebFont);
            }, function(newValue, oldValue) {
                if (newValue) {
                    var defaultFamilies = ['Roboto', 'Roboto Condensed', 'Roboto Slab', 'Oswald', 'Montserrat', 'Droid Serif', 'Open Sans', 'Open Sans Condensed', 'Lato', 'Raleway', 'Quicksand', 'Ubuntu', 'Merriweather', 'Quattrocento', 'Lora', 'Playfair Display', 'Pacifico', 'Satisfy', 'Parisienne', 'Petit Formal Script', 'Indie Flower', 'Shadows Into Light Two'];
                    if (theme.name && theme.hasCustomFonts) {
                      var _fontStack = theme.defaultFontStack.split(',')[0].replace(/"/g, '');
                      if(defaultFamilies.indexOf(_fontStack) === -1)
                        defaultFamilies.push(_fontStack);
                    }
                    window.WebFont.load({
                        google: {
                            families: defaultFamilies
                        }
                    });
                    unbindWatcher();
                    ssbService.website.themeId = theme._id;
                    ssbService.website.theme = theme;

                    if (keepCurrentOverrides || !ssbService.website.themeOverrides || (ssbService.website.themeOverrides && !angular.isDefined(ssbService.website.themeOverrides.styles))) {
                        $timeout(function() {
                            ssbService.website.themeOverrides = theme;
                        },0);
                    }
                    if(!ssbService.websiteLoading)
                        $timeout(function() {
                            ssbService.websiteLoading = true;
                        },100);
                }
            });

            window.WebFontConfig = {
                active: function() {
                    sessionStorage.fonts = true;
                }
            }

        }

        /*
         * Provide list of colors to use in color pickers
         *
         * @returns {array}
         *
         */
        function getSpectrumColorOptions() {
            return {
                showPalette: true,
                showAlpha: true,
                clickoutFiresChange: true,
                showInput: true,
                showButtons: true,
                allowEmpty: true,
                hideAfterPaletteSelect: false,
                showPaletteOnly: false,
                togglePaletteOnly: true,
                togglePaletteMoreText: 'more',
                togglePaletteLessText: 'less',
                preferredFormat: 'hex',
                appendTo: 'body',
                palette: [
                  ["#C91F37", "#DC3023", "#9D2933", "#CF000F", "#E68364", "#F22613", "#CF3A24", "#C3272B", "#8F1D21", "#D24D57"],
                  ["#f47998", "#F47983", "#DB5A6B", "#C93756", "#FCC9B9", "#FFB3A7", "#F62459", "#F58F84", "#875F9A", "#5D3F6A"],
                  ["#89729E", "#763568", "#8D608C", "#A87CA0", "#5B3256", "#BF55EC", "#8E44AD", "#9B59B6", "#BE90D4", "#4D8FAC"],
                  ["#5D8CAE", "#22A7F0", "#19B5FE", "#59ABE3", "#48929B", "#317589", "#89C4F4", "#4B77BE", "#1F4788", "#003171"],
                  ["#044F67", "#264348", "#7A942E", "#8DB255", "#5B8930", "#6B9362", "#407A52", "#006442", "#87D37C", "#26A65B"],
                  ["#26C281", "#049372", "#2ABB9B", "#16A085", "#36D7B7", "#03A678", "#4DAF7C", "#D9B611", "#F3C13A", "#F7CA18"],
                  ["#E2B13C", "#A17917", "#F5D76E", "#F4D03F", "#FFA400", "#E08A1E", "#FFB61E", "#FAA945", "#FFA631", "#FFB94E"],
                  ["#E29C45", "#F9690E", "#CA6924", "#F5AB35", "#BFBFBF", "#F2F1EF", "#BDC3C7", "#ECF0F1", "#D2D7D3", "#757D75"],
                  ["#EEEEEE", "#ABB7B7", "#6C7A89", "#95A5A6", "#9ACCCB", "#E8E7E7", "#000000", "#FFFFFF", "#50c7e8"]
                ]
            }
        }

        /*
         * Provide list of font family
         *
         * @returns {object}
         *
         */
        function getFontFamilyOptions() {
            return {
                "'Arial',Helvetica,sans-serif": "Arial",
                "'Droid Serif',serif": 'Droid Serif',
                "'Georgia',serif": "Georgia",
                "'Helvetica Neue', Helvetica, Arial, sans-serif": "Helvetica Neue",
                "'Impact',Charcoal,sans-serif": "Impact",
                "'Indie Flower', cursive": 'Indie Flower',
                "'Lato',sans-serif": 'Lato',
                "'Lora',serif": 'Lora',
                "'Merriweather',serif": 'Merriweather',
                "'Montserrat',sans-serif": 'Montserrat',
                "'Open Sans Condensed',sans-serif": 'Open Sans Condensed',
                "'Open Sans',sans-serif": 'Open Sans',
                "'Oswald',sans-serif": 'Oswald',
                "'Pacifico',cursive" : 'Pacifico',
                "'Parisienne', cursive": 'Parisienne',
                "'Playfair Display',serif": 'Playfair Display',
                "'Petit Formal Script', cursive": 'Petit Formal Script',
                "'Quattrocento',serif": 'Quattrocento',
                "'Quicksand',sans-serif": 'Quicksand',
                "'Raleway',sans-serif": 'Raleway',
                "'Roboto Condensed',sans-serif": 'Roboto Condensed',
                "'Roboto Slab',serif": 'Roboto Slab',
                "'Roboto',sans-serif": 'Roboto',
                "'Satisfy', cursive": 'Satisfy',
                "'Shadows Into Light Two', cursive": 'Shadows Into Light Two',
                "'Tahoma',Geneva,sans-serif": "Tahoma",
                "'Times New Roman',Times,serif": "Times New Roman",
                "'Ubuntu',sans-serif": 'Ubuntu',
                "'Verdana',Geneva,sans-serif": "Verdana"
            }
        }

        /*
         * Open the media modal
         *
         * @param {string} modal - name of modal
         * @param {string} controller - name of controller
         * @param {integer} index - null (TODO: remove)
         * @param {string} size - layout of modal 'lg', 'md', 'sm'
         * @param {object} vm - view model of parent controller, to pass into modal
         * @param {object} component - component to insert media into
         * @param {integer} componentIndex - index of component within the section
         * @param {boolean} update - update existing media
         *
         *
         * @returns {object} $modal instance
         *
         */
        function openMediaModal(modal, controller, index, size, vm, component, componentItemIndex, update, fields) {
            console.log('openModal >>> ', modal, controller, index);
            ssbService.asset = undefined;
            var _modal = {
                templateUrl: modal,
                keyboard: false,
                backdrop: 'static',
                size: 'md',
                resolve: {
                    vm: function() {
                        return vm;
                    },
                    showInsert: function () {
                        return true
                    },
                    insertMedia: function () {
                        return function(asset) {
                            if(component)
                              ssbService.setMediaForComponent(asset, component, componentItemIndex, update, fields);
                            else{
                                ssbService.asset = asset;
                            }

                        }
                    },
                    component: function() {
                        return component;
                    },
                    componentItemIndex: function() {
                        return componentItemIndex;
                    },
                    update: function() {
                        return update;
                    },
                    isSingleSelect: function () {
                        return true;
                    }
                }
            };

            if (controller) {
                _modal.controller = controller;
            }

            if (size) {
                _modal.size = 'lg';
            }

            return $modal.open(_modal);

        }

        /*
         * Open the media modal
         *
         * @param {object} asset - asset data from media modal (S3)
         * @param {object} component - component to insert media into
         * @param {integer} componentIndex - index of component within the section
         * @param {boolean} update - update existing media
         *
         * TODO: this is legacy code adapted from editorCtrl.js, needs to be removed when we no longer support these components
         *
         * @returns {object} $modal instance
         *
         */
        function setMediaForComponent(asset, component, index, update, fields) {

            var obj = {};
            var type = component.type;

            //if image/text component
            if (type === 'image-text') {

                component.imgurl = asset.url;

            } else if (type === 'image-gallery') {

                isImage(asset.url).then(function(response){
                  if(response === false)
                    return;

                    if (update) {

                        component.images[index].url = asset.url;

                    } else {
                        $rootScope.$broadcast('$refreshSlickSlider', index + 1);
                        component.images.splice(index + 1, 0, {
                            url: asset.url,
                            title: '<span style="font-size: 30px;">Service Title Here</span>'
                        });
                        if(fields && component.images[index + 1]){
                            angular.forEach(fields, function(v, k) {
                                component.images[index + 1][k] = v;
                            });
                        }
                    }
                })

            } else if (type === 'thumbnail-slider') {

                if (update) {

                    component.thumbnailCollection[index].url = asset.url;

                } else {

                    component.thumbnailCollection.splice(index + 1, 0, {
                        url: asset.url
                    });

                }

            } else if (type === 'meet-team') {

                component.teamMembers[index].profilepic = asset.url;

            } else {

                console.log('unknown component or image location');

            }

        }

        function isImage(src) {
              var deferred = $q.defer();
              var image = new Image();
              image.onerror = function() {
                  console.log("Not a valid image");
                  deferred.resolve(false);
              };
              image.onload = function() {
                  deferred.resolve(true);
              };
              image.src = src;
              return deferred.promise;
        }

        function getTempUUID() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                return v.toString(16);
            })
        }

        function setTempUUIDForSection(section) {
            var duplicateSection = angular.copy(section);

            duplicateSection._id = ssbService.getTempUUID();

            if (duplicateSection.components.length) {
                duplicateSection.components.forEach(function(component) {
                    component._id = ssbService.getTempUUID();
                    component.anchor = component._id;
                });
            }

            duplicateSection = JSON.parse(angular.toJson(duplicateSection));

            return duplicateSection;
        }

        function setPermissions() {

            var unbindWatcher = $rootScope.$watch(function() {
                return angular.isDefined($.FroalaEditor) && angular.isObject($.FroalaEditor.config);
            }, function(newValue) {
                if (newValue) {
                    unbindWatcher();
                    $timeout(function() {
                        if (ssbService.account.showhide.editHTML === true && $.FroalaEditor.config.toolbarButtons.indexOf('html') === -1) {
                            $.FroalaEditor.config.toolbarButtons.push('html');
                            ssbService.permissions.html = true;
                            //todo: better permissions-based script loading
                            $.getScript('//cdnjs.cloudflare.com/ajax/libs/codemirror/5.12.0/codemirror.min.js', function() {
                                console.log('loaded codemirror main');
                                $.getScript('//cdnjs.cloudflare.com/ajax/libs/codemirror/5.12.0/mode/xml/xml.min.js', function() {
                                    console.log('loaded codemirror mode');
                                });
                            });
                        }
                    })
                }
            });

            if (ssbService.account.showhide.ssbFeatureFixedElements) {
                ssbService.permissions.ssbFeatureFixedElements = true;
            }

        }

        function addCompiledElement(componentId, editorId, elementId, el) {
            ssbService.compiledElements[componentId] = ssbService.compiledElements[componentId] || {};
            ssbService.compiledElements[componentId][editorId] = ssbService.compiledElements[componentId][editorId] || {};
            ssbService.compiledElements[componentId][editorId][elementId] = el;
        }

        function addCompiledElementEditControl(componentId, editorId, elementId, el) {
            ssbService.compiledElementEditControls[componentId] = ssbService.compiledElementEditControls[componentId] || {};
            ssbService.compiledElementEditControls[componentId][editorId] = ssbService.compiledElementEditControls[componentId][editorId] || {};
            ssbService.compiledElementEditControls[componentId][editorId][elementId] = el;
        }

        function getCompiledElement(componentId, editorId, elementId) {
            return angular.element('#' + componentId + ' [data-compiled=' + elementId + ']');
            // return ssbService.compiledElements[componentId] &&
            //         ssbService.compiledElements[componentId][editorId] &&
            //         ssbService.compiledElements[componentId][editorId][elementId];
        }

        function getCompiledElementEditControl(componentId, editorId, elementId) {
            // return angular.element('#' + componentId + ' [data-compiled-control-id=control_' + elementId + ']');
            return ssbService.compiledElementEditControls[componentId] &&
                    ssbService.compiledElementEditControls[componentId][editorId] &&
                    ssbService.compiledElementEditControls[componentId][editorId][elementId];
        }

        /**
         * For special elements that are added to sections via drag and drop or Froala
         *  - TODO: support other element types (currently only buttons)
         *  - Need to be compiled, so:
         *  - Find the matching markup and $compile to Angular directive
         *  - Don't recompile
         *
         * @param {object} editor - editor instance (froala)
         * @param {boolean} initial - compile all if true
         * @param {string} componentId - id of parent text component/directive
         * @param {string} editorId - id of parent text editor
         * @param {object} scope - initial scope from editor.js
         *
         */
        function compileEditorElements(editor, initial, componentId, editorId, scope) {

            if (initial) {
                ssbService.compiledElements[componentId] = ssbService.compiledElements[componentId] || {};
                ssbService.compiledElements[componentId][editorId] = {};
            }

            editor.$el.find('.ssb-theme-btn').each(function() {
                var btn = $(this);
                var btnHTML;
                if (initial || undefined === btn.attr('data-compiled')) {
                    btn.removeClass('ssb-theme-btn-active-element');
                    btn.attr('ng-class', 'vm.elementClass()');
                    btn.attr('ng-attr-style', '{{vm.elementStyle()}}');
                    // btn.attr('ng-click', '$event.stopImmediatePropagation()');
                    btnHTML = btn.get(0).outerHTML.replace('ng-scope', '');
                    $compile(btnHTML)(scope, function(cloned, scope) {
                        var tempId = ssbService.getTempUUID();
                        cloned.attr('data-compiled', tempId);
                        btn.replaceWith(cloned);
                        ssbService.addCompiledElement(componentId, editorId, tempId, angular.element('[data-compiled=' + tempId + ']'));
                        $rootScope.$broadcast('$ssbElementAdded', componentId, editorId, tempId);
                    });
                }
            });

            Object.keys(ssbService.compiledElements[componentId][editorId]).forEach(function(elementId) {
                if (editor.$el.find('[data-compiled=' + elementId + ']').length === 0) {
                    $rootScope.$broadcast('$ssbElementRemoved', componentId, editorId, elementId);
                }
            });

            $rootScope.$broadcast('$ssbElementsChanged', componentId, editorId);

        }

        function removeCompiledElement(componentId, editorId, elementId) {
            var item = ssbService.compiledElements[componentId][editorId][elementId];
            if (item) {
                item.remove();
                item = null;
                delete ssbService.compiledElements[componentId][editorId][elementId];
            }
        }

        function removeCompiledElementEditControl(componentId, editorId, elementId) {
            var item;

            try {
                item = ssbService.compiledElementEditControls[componentId][editorId][elementId];
            } catch(e) {
                item = null;
            }

            if (item) {

                item.remove();
                item = null;
                delete ssbService.compiledElementEditControls[componentId][editorId][elementId];

            }
        }

        function addUnderNavSetting(masthead_id, fn) {
            var data = {
                allowUndernav : false,
                navComponent: null
            }

            if (ssbService.page && ssbService.page.sections) {
                ssbService.page.sections.forEach(function (sectionValue, sectionIndex) {
                    sectionValue.components.forEach(function (value, index) {
                        if (value && value.type === 'masthead' && value._id == masthead_id) {
                            var navComponent = _.findWhere(ssbService.page.sections[sectionIndex - 1].components, { type: 'navigation' });
                            if (
                                sectionIndex != 0 &&
                                navComponent !== undefined
                            ) {
                                data.allowUndernav = true;
                                data.navComponent = navComponent;
                            } else {
                                data.allowUndernav = false;
                            }
                        }
                    });
                });
            }

            fn(data);
        }

        /**
         * Get list of page versions
         *
         */
        function getPageVersions(pageId, fn) {

          function success(data) {
            console.log('SimpleSiteBuilderService getPageVersions: ' + data);
            fn(data);
          }

          function error(error) {
            console.error('SimpleSiteBuilderService getPageVersions error: ', JSON.stringify(error));
          }

          return (
            ssbRequest($http({
              url: basePageAPIUrlv2 + [pageId, 'versions'].join('/'),
              method: 'GET',
            }).success(success).error(error))
          )
        }

        /**
         *Revert page
         *
         */
        function revertPage(pageId, versionId, fn) {

          function success(data) {

            console.log('SimpleSiteBuilderService revertPage: ' + data);
            fn(data);
          }

          function error(error) {
            console.error('SimpleSiteBuilderService revertPage error: ', JSON.stringify(error));
          }

          return (
            ssbRequest($http({
              url: basePageAPIUrlv2 + [pageId, 'version', versionId].join('/'),
              method: 'POST',
            }).success(success).error(error))
          )
        }

        /**
         * Publish page
         *
         */
        function publishPage(pageId) {

          function success(data) {
            console.log('SimpleSiteBuilderService publishPage: ' + data);
          }

          function error(error) {
            console.error('SimpleSiteBuilderService publishPage error: ', JSON.stringify(error));
          }

          return (
            ssbRequest($http({
              url: basePageAPIUrlv2 + [pageId, 'publish'].join('/'),
              method: 'POST',
            }).success(success).error(error))
          )
        }

        function updateBlogPages() {

          function success(data) {
            console.log('SimpleSiteBuilderService updateBlogPages: ' + data);
          }

          function error(error) {
            console.error('SimpleSiteBuilderService updateBlogPages error: ', JSON.stringify(error));
          }

          return (
            ssbRequest($http({
              url: baseWebsiteAPIUrlv2 + [ssbService.websiteId, 'updateBlogPages'].join('/'),
              method: 'POST',
            }).success(success).error(error))
          )
        }
        /**
         * detect IE
         * returns version of IE or false, if browser is not Internet Explorer
         *
         * Note: remove me
         *  - found here: http://codepen.io/gapcode/pen/vEJNZN
         */
        function detectIENotEdge() {
            var ua = window.navigator.userAgent;

            // Test values; Uncomment to check result …

            // IE 10
            // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';

            // IE 11
            // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';

            // IE 12 / Spartan
            // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';

            // Edge (IE 12+)
            // ua = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2486.0 Safari/537.36 Edge/13.10586';

            var msie = ua.indexOf('MSIE ');
            if (msie > 0) {
                // IE 10 or older => return version number
                // return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
                return true;
            }

            var trident = ua.indexOf('Trident/');
            if (trident > 0) {
                // IE 11 => return version number
                var rv = ua.indexOf('rv:');
                // return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);
                return true;
            }

            var edge = ua.indexOf('Edge/');
            if (edge > 0) {
                // Edge (IE 12+) => return version number
                // return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);
                return false;
            }

            // other browser
            return false;
        }

        function getBlogListPage() {
            return _.where(ssbService.pages, {
                handle: 'blog-list'
            });
        }

        function getBlogPostPage() {
            return _.where(ssbService.pages, {
                handle: 'blog-post'
            });
        }

        function returnInvalidPost(){
            var deferred = $q.defer();
            deferred.resolve(false);
            return deferred.promise;
        }

        function getTempComponent(component){
            return getComponent(component, component.version || 1).then(function(result) {
                return result.data;
            });
        }

        

        (function init() {

            AccountService.getAccount(function(data) {
                ssbService.account = data;
                ssbService.setPermissions();
                        ssbService.websiteId = data.website.websiteId;
                ssbService.getSite(data.website.websiteId).then(function(website){
                    ssbService.setupTheme(website);
                });
                ssbService.getPages();
                ssbService.getTemplates();
                ssbService.getLegacyTemplates();
                ssbService.getPlatformSections();
                //ssbService.getUserSections(); //not yet implemented
            });

        })();


        return ssbService;
    }

})();

(function(){

app.directive('ssbSiteTemplates', ssbSiteTemplates);

function ssbSiteTemplates() {

    return {
        restrict: 'E',
        scope: {},
        templateUrl: 'assets/js/ssb-site-builder/ssb-site-templates/ssb-site-templates.component.html',
        controller: 'SiteBuilderSiteTemplatesController',
        controllerAs: 'vm',
        bindToController: true,
        link: function(scope, element, attrs, ctrl) {
            ctrl.init(element);
        }
    };

}

})();

(function(){

app.controller('SiteBuilderSiteTemplatesController', ssbSiteBuilderSiteTemplatesController);

ssbSiteBuilderSiteTemplatesController.$inject = ['$scope', '$attrs', '$filter', '$document', '$timeout', 'SimpleSiteBuilderService', '$modal', 'editableOptions', '$location', 'SweetAlert', 'ContactService' ];
/* @ngInject */
function ssbSiteBuilderSiteTemplatesController($scope, $attrs, $filter, $document, $timeout, SimpleSiteBuilderService, $modal, editableOptions, $location, SweetAlert, ContactService) {

    console.info('site-build sidebar directive init...')

    var vm = this;

    vm.init = init;
    vm.selectSiteTemplate = selectSiteTemplate;
    vm.getSiteTemplates = getSiteTemplates;
    vm.redirectToEditor = redirectToEditor;

    vm.state = {};
    vm.uiState = {
        loading: true
    };


    var unbindWatcher = $scope.$watchGroup([
        function() { return SimpleSiteBuilderService.pages },
        function() { return SimpleSiteBuilderService.website }
        ], function(values) {

        var pages = values[0];
        if(pages)
        {
            pages = _.reject(pages, function(page){ return page.handle === "blog" || page.handle === "single-post"
                || page.handle === "coming-soon" || page.handle === "signup" || page.handle === 'blog-list' || page.handle === 'blog-post'});
        }
        var website = values[1];

        if (pages && website && website._id) {

            unbindWatcher();

            vm.state.pages = pages;
            vm.state.website = website;

            if (Object.keys(pages).length !== 0 || website.siteTemplateId) {
                vm.redirectToEditor();
            } else {
                vm.uiState.loading = false;
            }

        }

    }, true);



    /*
     * Get Site Templates
     */
    function getSiteTemplates() {
        SimpleSiteBuilderService.getSiteTemplates().then(function(siteTemplates) {
            if (siteTemplates.data) {
                vm.state.siteTemplates = siteTemplates.data.reverse();
            }
        });
    }

    /*
     * Select Site Template
     *
     * - set template on website
     * - check response has created index page handle
     * - get latest pages from server
     * - get latest website from server (so it includes latest linkLists and themeId)
     * - get latest theme data for that theme
     * - forward to editor with index page active
     *
     * - TODO: can optimize this when theme is materialized on website response
     */
    function selectSiteTemplate(templateId) {
        vm.uiState.loading = true;
        SimpleSiteBuilderService.setSiteTemplate(templateId).then(function(response) {
            console.log(response.data);
            if (response.data.ok && response.data.indexPageId) {
                //get all pages
                SimpleSiteBuilderService.getPages();

                //get latest website
                SimpleSiteBuilderService.getSite(vm.state.website._id).then(function(){

                    //set theme
                    SimpleSiteBuilderService.setupTheme(vm.state.website).then(function() {

                        //forward to editor
                        $timeout(function() {
                            $location.path('/website/site-builder/pages/' + response.data.indexPageId);
                        }, 500);

                        //clear loading var
                        $timeout(function() {
                            vm.uiState.loading = false;
                        }, 5000);

                    });
                });
            }
        });
    }

    function redirectToEditor() {
        var id = '';
        var homePage = null;
        var pagesArray = [];

        if (vm.state.pages) {
           pagesArray =  Object.keys(vm.state.pages);
        }

        if (pagesArray.length) {

            homePage = _.filter(vm.state.pages, function(page) {
              return page.handle === 'index'
            })[0];

            //if we have a home page
            if (homePage && homePage._id) {
                id = homePage._id;
            // else return first page in object
            } else {
                id = vm.state.pages[pagesArray[0]]._id;
            }

        }

        if (id) {
            $location.path('/website/site-builder/pages/' + id);
        } else {
            vm.uiState.loading = false;
        }

    }

    function init(element) {

        vm.element = element;

        vm.getSiteTemplates();

        if(SimpleSiteBuilderService.pages === null){
            SimpleSiteBuilderService.getPages();
        }

    }
}

})();
